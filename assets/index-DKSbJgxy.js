(function(){const sl=document.createElement("link").relList;if(sl&&sl.supports&&sl.supports("modulepreload"))return;for(const j of document.querySelectorAll('link[rel="modulepreload"]'))S(j);new MutationObserver(j=>{for(const W of j)if(W.type==="childList")for(const hl of W.addedNodes)hl.tagName==="LINK"&&hl.rel==="modulepreload"&&S(hl)}).observe(document,{childList:!0,subtree:!0});function k(j){const W={};return j.integrity&&(W.integrity=j.integrity),j.referrerPolicy&&(W.referrerPolicy=j.referrerPolicy),j.crossOrigin==="use-credentials"?W.credentials="include":j.crossOrigin==="anonymous"?W.credentials="omit":W.credentials="same-origin",W}function S(j){if(j.ep)return;j.ep=!0;const W=k(j);fetch(j.href,W)}})();var kc={exports:{}},re={};/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var $v;function U1(){if($v)return re;$v=1;var U=Symbol.for("react.transitional.element"),sl=Symbol.for("react.fragment");function k(S,j,W){var hl=null;if(W!==void 0&&(hl=""+W),j.key!==void 0&&(hl=""+j.key),"key"in j){W={};for(var Yl in j)Yl!=="key"&&(W[Yl]=j[Yl])}else W=j;return j=W.ref,{$$typeof:U,type:S,key:hl,ref:j!==void 0?j:null,props:W}}return re.Fragment=sl,re.jsx=k,re.jsxs=k,re}var kv;function R1(){return kv||(kv=1,kc.exports=U1()),kc.exports}var Xl=R1(),Fc={exports:{}},Q={};/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Fv;function H1(){if(Fv)return Q;Fv=1;var U=Symbol.for("react.transitional.element"),sl=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),j=Symbol.for("react.profiler"),W=Symbol.for("react.consumer"),hl=Symbol.for("react.context"),Yl=Symbol.for("react.forward_ref"),N=Symbol.for("react.suspense"),z=Symbol.for("react.memo"),H=Symbol.for("react.lazy"),fl=Symbol.iterator;function el(v){return v===null||typeof v!="object"?null:(v=fl&&v[fl]||v["@@iterator"],typeof v=="function"?v:null)}var Bl={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},pl=Object.assign,dt={};function Ql(v,A,M){this.props=v,this.context=A,this.refs=dt,this.updater=M||Bl}Ql.prototype.isReactComponent={},Ql.prototype.setState=function(v,A){if(typeof v!="object"&&typeof v!="function"&&v!=null)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,v,A,"setState")},Ql.prototype.forceUpdate=function(v){this.updater.enqueueForceUpdate(this,v,"forceUpdate")};function du(){}du.prototype=Ql.prototype;function Ot(v,A,M){this.props=v,this.context=A,this.refs=dt,this.updater=M||Bl}var Dl=Ot.prototype=new du;Dl.constructor=Ot,pl(Dl,Ql.prototype),Dl.isPureReactComponent=!0;var ht=Array.isArray,K={H:null,A:null,T:null,S:null,V:null},Ll=Object.prototype.hasOwnProperty;function Kl(v,A,M,O,q,J){return M=J.ref,{$$typeof:U,type:v,key:A,ref:M!==void 0?M:null,props:J}}function Jl(v,A){return Kl(v.type,A,void 0,void 0,void 0,v.props)}function St(v){return typeof v=="object"&&v!==null&&v.$$typeof===U}function Yu(v){var A={"=":"=0",":":"=2"};return"$"+v.replace(/[=:]/g,function(M){return A[M]})}var _t=/\/+/g;function Ul(v,A){return typeof v=="object"&&v!==null&&v.key!=null?Yu(""+v.key):A.toString(36)}function hu(){}function ou(v){switch(v.status){case"fulfilled":return v.value;case"rejected":throw v.reason;default:switch(typeof v.status=="string"?v.then(hu,hu):(v.status="pending",v.then(function(A){v.status==="pending"&&(v.status="fulfilled",v.value=A)},function(A){v.status==="pending"&&(v.status="rejected",v.reason=A)})),v.status){case"fulfilled":return v.value;case"rejected":throw v.reason}}throw v}function Rl(v,A,M,O,q){var J=typeof v;(J==="undefined"||J==="boolean")&&(v=null);var X=!1;if(v===null)X=!0;else switch(J){case"bigint":case"string":case"number":X=!0;break;case"object":switch(v.$$typeof){case U:case sl:X=!0;break;case H:return X=v._init,Rl(X(v._payload),A,M,O,q)}}if(X)return q=q(v),X=O===""?"."+Ul(v,0):O,ht(q)?(M="",X!=null&&(M=X.replace(_t,"$&/")+"/"),Rl(q,A,M,"",function(jt){return jt})):q!=null&&(St(q)&&(q=Jl(q,M+(q.key==null||v&&v.key===q.key?"":(""+q.key).replace(_t,"$&/")+"/")+X)),A.push(q)),1;X=0;var wl=O===""?".":O+":";if(ht(v))for(var cl=0;cl<v.length;cl++)O=v[cl],J=wl+Ul(O,cl),X+=Rl(O,A,M,J,q);else if(cl=el(v),typeof cl=="function")for(v=cl.call(v),cl=0;!(O=v.next()).done;)O=O.value,J=wl+Ul(O,cl++),X+=Rl(O,A,M,J,q);else if(J==="object"){if(typeof v.then=="function")return Rl(ou(v),A,M,O,q);throw A=String(v),Error("Objects are not valid as a React child (found: "+(A==="[object Object]"?"object with keys {"+Object.keys(v).join(", ")+"}":A)+"). If you meant to render a collection of children, use an array instead.")}return X}function b(v,A,M){if(v==null)return v;var O=[],q=0;return Rl(v,O,"","",function(J){return A.call(M,J,q++)}),O}function _(v){if(v._status===-1){var A=v._result;A=A(),A.then(function(M){(v._status===0||v._status===-1)&&(v._status=1,v._result=M)},function(M){(v._status===0||v._status===-1)&&(v._status=2,v._result=M)}),v._status===-1&&(v._status=0,v._result=A)}if(v._status===1)return v._result.default;throw v._result}var p=typeof reportError=="function"?reportError:function(v){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var A=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof v=="object"&&v!==null&&typeof v.message=="string"?String(v.message):String(v),error:v});if(!window.dispatchEvent(A))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",v);return}console.error(v)};function ul(){}return Q.Children={map:b,forEach:function(v,A,M){b(v,function(){A.apply(this,arguments)},M)},count:function(v){var A=0;return b(v,function(){A++}),A},toArray:function(v){return b(v,function(A){return A})||[]},only:function(v){if(!St(v))throw Error("React.Children.only expected to receive a single React element child.");return v}},Q.Component=Ql,Q.Fragment=k,Q.Profiler=j,Q.PureComponent=Ot,Q.StrictMode=S,Q.Suspense=N,Q.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=K,Q.__COMPILER_RUNTIME={__proto__:null,c:function(v){return K.H.useMemoCache(v)}},Q.cache=function(v){return function(){return v.apply(null,arguments)}},Q.cloneElement=function(v,A,M){if(v==null)throw Error("The argument must be a React element, but you passed "+v+".");var O=pl({},v.props),q=v.key,J=void 0;if(A!=null)for(X in A.ref!==void 0&&(J=void 0),A.key!==void 0&&(q=""+A.key),A)!Ll.call(A,X)||X==="key"||X==="__self"||X==="__source"||X==="ref"&&A.ref===void 0||(O[X]=A[X]);var X=arguments.length-2;if(X===1)O.children=M;else if(1<X){for(var wl=Array(X),cl=0;cl<X;cl++)wl[cl]=arguments[cl+2];O.children=wl}return Kl(v.type,q,void 0,void 0,J,O)},Q.createContext=function(v){return v={$$typeof:hl,_currentValue:v,_currentValue2:v,_threadCount:0,Provider:null,Consumer:null},v.Provider=v,v.Consumer={$$typeof:W,_context:v},v},Q.createElement=function(v,A,M){var O,q={},J=null;if(A!=null)for(O in A.key!==void 0&&(J=""+A.key),A)Ll.call(A,O)&&O!=="key"&&O!=="__self"&&O!=="__source"&&(q[O]=A[O]);var X=arguments.length-2;if(X===1)q.children=M;else if(1<X){for(var wl=Array(X),cl=0;cl<X;cl++)wl[cl]=arguments[cl+2];q.children=wl}if(v&&v.defaultProps)for(O in X=v.defaultProps,X)q[O]===void 0&&(q[O]=X[O]);return Kl(v,J,void 0,void 0,null,q)},Q.createRef=function(){return{current:null}},Q.forwardRef=function(v){return{$$typeof:Yl,render:v}},Q.isValidElement=St,Q.lazy=function(v){return{$$typeof:H,_payload:{_status:-1,_result:v},_init:_}},Q.memo=function(v,A){return{$$typeof:z,type:v,compare:A===void 0?null:A}},Q.startTransition=function(v){var A=K.T,M={};K.T=M;try{var O=v(),q=K.S;q!==null&&q(M,O),typeof O=="object"&&O!==null&&typeof O.then=="function"&&O.then(ul,p)}catch(J){p(J)}finally{K.T=A}},Q.unstable_useCacheRefresh=function(){return K.H.useCacheRefresh()},Q.use=function(v){return K.H.use(v)},Q.useActionState=function(v,A,M){return K.H.useActionState(v,A,M)},Q.useCallback=function(v,A){return K.H.useCallback(v,A)},Q.useContext=function(v){return K.H.useContext(v)},Q.useDebugValue=function(){},Q.useDeferredValue=function(v,A){return K.H.useDeferredValue(v,A)},Q.useEffect=function(v,A,M){var O=K.H;if(typeof M=="function")throw Error("useEffect CRUD overload is not enabled in this build of React.");return O.useEffect(v,A)},Q.useId=function(){return K.H.useId()},Q.useImperativeHandle=function(v,A,M){return K.H.useImperativeHandle(v,A,M)},Q.useInsertionEffect=function(v,A){return K.H.useInsertionEffect(v,A)},Q.useLayoutEffect=function(v,A){return K.H.useLayoutEffect(v,A)},Q.useMemo=function(v,A){return K.H.useMemo(v,A)},Q.useOptimistic=function(v,A){return K.H.useOptimistic(v,A)},Q.useReducer=function(v,A,M){return K.H.useReducer(v,A,M)},Q.useRef=function(v){return K.H.useRef(v)},Q.useState=function(v){return K.H.useState(v)},Q.useSyncExternalStore=function(v,A,M){return K.H.useSyncExternalStore(v,A,M)},Q.useTransition=function(){return K.H.useTransition()},Q.version="19.1.1",Q}var Iv;function ui(){return Iv||(Iv=1,Fc.exports=H1()),Fc.exports}var ny=ui(),Ic={exports:{}},Se={},Pc={exports:{}},li={};/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Pv;function N1(){return Pv||(Pv=1,(function(U){function sl(b,_){var p=b.length;b.push(_);l:for(;0<p;){var ul=p-1>>>1,v=b[ul];if(0<j(v,_))b[ul]=_,b[p]=v,p=ul;else break l}}function k(b){return b.length===0?null:b[0]}function S(b){if(b.length===0)return null;var _=b[0],p=b.pop();if(p!==_){b[0]=p;l:for(var ul=0,v=b.length,A=v>>>1;ul<A;){var M=2*(ul+1)-1,O=b[M],q=M+1,J=b[q];if(0>j(O,p))q<v&&0>j(J,O)?(b[ul]=J,b[q]=p,ul=q):(b[ul]=O,b[M]=p,ul=M);else if(q<v&&0>j(J,p))b[ul]=J,b[q]=p,ul=q;else break l}}return _}function j(b,_){var p=b.sortIndex-_.sortIndex;return p!==0?p:b.id-_.id}if(U.unstable_now=void 0,typeof performance=="object"&&typeof performance.now=="function"){var W=performance;U.unstable_now=function(){return W.now()}}else{var hl=Date,Yl=hl.now();U.unstable_now=function(){return hl.now()-Yl}}var N=[],z=[],H=1,fl=null,el=3,Bl=!1,pl=!1,dt=!1,Ql=!1,du=typeof setTimeout=="function"?setTimeout:null,Ot=typeof clearTimeout=="function"?clearTimeout:null,Dl=typeof setImmediate<"u"?setImmediate:null;function ht(b){for(var _=k(z);_!==null;){if(_.callback===null)S(z);else if(_.startTime<=b)S(z),_.sortIndex=_.expirationTime,sl(N,_);else break;_=k(z)}}function K(b){if(dt=!1,ht(b),!pl)if(k(N)!==null)pl=!0,Ll||(Ll=!0,Ul());else{var _=k(z);_!==null&&Rl(K,_.startTime-b)}}var Ll=!1,Kl=-1,Jl=5,St=-1;function Yu(){return Ql?!0:!(U.unstable_now()-St<Jl)}function _t(){if(Ql=!1,Ll){var b=U.unstable_now();St=b;var _=!0;try{l:{pl=!1,dt&&(dt=!1,Ot(Kl),Kl=-1),Bl=!0;var p=el;try{t:{for(ht(b),fl=k(N);fl!==null&&!(fl.expirationTime>b&&Yu());){var ul=fl.callback;if(typeof ul=="function"){fl.callback=null,el=fl.priorityLevel;var v=ul(fl.expirationTime<=b);if(b=U.unstable_now(),typeof v=="function"){fl.callback=v,ht(b),_=!0;break t}fl===k(N)&&S(N),ht(b)}else S(N);fl=k(N)}if(fl!==null)_=!0;else{var A=k(z);A!==null&&Rl(K,A.startTime-b),_=!1}}break l}finally{fl=null,el=p,Bl=!1}_=void 0}}finally{_?Ul():Ll=!1}}}var Ul;if(typeof Dl=="function")Ul=function(){Dl(_t)};else if(typeof MessageChannel<"u"){var hu=new MessageChannel,ou=hu.port2;hu.port1.onmessage=_t,Ul=function(){ou.postMessage(null)}}else Ul=function(){du(_t,0)};function Rl(b,_){Kl=du(function(){b(U.unstable_now())},_)}U.unstable_IdlePriority=5,U.unstable_ImmediatePriority=1,U.unstable_LowPriority=4,U.unstable_NormalPriority=3,U.unstable_Profiling=null,U.unstable_UserBlockingPriority=2,U.unstable_cancelCallback=function(b){b.callback=null},U.unstable_forceFrameRate=function(b){0>b||125<b?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Jl=0<b?Math.floor(1e3/b):5},U.unstable_getCurrentPriorityLevel=function(){return el},U.unstable_next=function(b){switch(el){case 1:case 2:case 3:var _=3;break;default:_=el}var p=el;el=_;try{return b()}finally{el=p}},U.unstable_requestPaint=function(){Ql=!0},U.unstable_runWithPriority=function(b,_){switch(b){case 1:case 2:case 3:case 4:case 5:break;default:b=3}var p=el;el=b;try{return _()}finally{el=p}},U.unstable_scheduleCallback=function(b,_,p){var ul=U.unstable_now();switch(typeof p=="object"&&p!==null?(p=p.delay,p=typeof p=="number"&&0<p?ul+p:ul):p=ul,b){case 1:var v=-1;break;case 2:v=250;break;case 5:v=1073741823;break;case 4:v=1e4;break;default:v=5e3}return v=p+v,b={id:H++,callback:_,priorityLevel:b,startTime:p,expirationTime:v,sortIndex:-1},p>ul?(b.sortIndex=p,sl(z,b),k(N)===null&&b===k(z)&&(dt?(Ot(Kl),Kl=-1):dt=!0,Rl(K,p-ul))):(b.sortIndex=v,sl(N,b),pl||Bl||(pl=!0,Ll||(Ll=!0,Ul()))),b},U.unstable_shouldYield=Yu,U.unstable_wrapCallback=function(b){var _=el;return function(){var p=el;el=_;try{return b.apply(this,arguments)}finally{el=p}}}})(li)),li}var ly;function q1(){return ly||(ly=1,Pc.exports=N1()),Pc.exports}var ti={exports:{}},ql={};/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ty;function Y1(){if(ty)return ql;ty=1;var U=ui();function sl(N){var z="https://react.dev/errors/"+N;if(1<arguments.length){z+="?args[]="+encodeURIComponent(arguments[1]);for(var H=2;H<arguments.length;H++)z+="&args[]="+encodeURIComponent(arguments[H])}return"Minified React error #"+N+"; visit "+z+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function k(){}var S={d:{f:k,r:function(){throw Error(sl(522))},D:k,C:k,L:k,m:k,X:k,S:k,M:k},p:0,findDOMNode:null},j=Symbol.for("react.portal");function W(N,z,H){var fl=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:j,key:fl==null?null:""+fl,children:N,containerInfo:z,implementation:H}}var hl=U.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function Yl(N,z){if(N==="font")return"";if(typeof z=="string")return z==="use-credentials"?z:""}return ql.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=S,ql.createPortal=function(N,z){var H=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!z||z.nodeType!==1&&z.nodeType!==9&&z.nodeType!==11)throw Error(sl(299));return W(N,z,null,H)},ql.flushSync=function(N){var z=hl.T,H=S.p;try{if(hl.T=null,S.p=2,N)return N()}finally{hl.T=z,S.p=H,S.d.f()}},ql.preconnect=function(N,z){typeof N=="string"&&(z?(z=z.crossOrigin,z=typeof z=="string"?z==="use-credentials"?z:"":void 0):z=null,S.d.C(N,z))},ql.prefetchDNS=function(N){typeof N=="string"&&S.d.D(N)},ql.preinit=function(N,z){if(typeof N=="string"&&z&&typeof z.as=="string"){var H=z.as,fl=Yl(H,z.crossOrigin),el=typeof z.integrity=="string"?z.integrity:void 0,Bl=typeof z.fetchPriority=="string"?z.fetchPriority:void 0;H==="style"?S.d.S(N,typeof z.precedence=="string"?z.precedence:void 0,{crossOrigin:fl,integrity:el,fetchPriority:Bl}):H==="script"&&S.d.X(N,{crossOrigin:fl,integrity:el,fetchPriority:Bl,nonce:typeof z.nonce=="string"?z.nonce:void 0})}},ql.preinitModule=function(N,z){if(typeof N=="string")if(typeof z=="object"&&z!==null){if(z.as==null||z.as==="script"){var H=Yl(z.as,z.crossOrigin);S.d.M(N,{crossOrigin:H,integrity:typeof z.integrity=="string"?z.integrity:void 0,nonce:typeof z.nonce=="string"?z.nonce:void 0})}}else z==null&&S.d.M(N)},ql.preload=function(N,z){if(typeof N=="string"&&typeof z=="object"&&z!==null&&typeof z.as=="string"){var H=z.as,fl=Yl(H,z.crossOrigin);S.d.L(N,H,{crossOrigin:fl,integrity:typeof z.integrity=="string"?z.integrity:void 0,nonce:typeof z.nonce=="string"?z.nonce:void 0,type:typeof z.type=="string"?z.type:void 0,fetchPriority:typeof z.fetchPriority=="string"?z.fetchPriority:void 0,referrerPolicy:typeof z.referrerPolicy=="string"?z.referrerPolicy:void 0,imageSrcSet:typeof z.imageSrcSet=="string"?z.imageSrcSet:void 0,imageSizes:typeof z.imageSizes=="string"?z.imageSizes:void 0,media:typeof z.media=="string"?z.media:void 0})}},ql.preloadModule=function(N,z){if(typeof N=="string")if(z){var H=Yl(z.as,z.crossOrigin);S.d.m(N,{as:typeof z.as=="string"&&z.as!=="script"?z.as:void 0,crossOrigin:H,integrity:typeof z.integrity=="string"?z.integrity:void 0})}else S.d.m(N)},ql.requestFormReset=function(N){S.d.r(N)},ql.unstable_batchedUpdates=function(N,z){return N(z)},ql.useFormState=function(N,z,H){return hl.H.useFormState(N,z,H)},ql.useFormStatus=function(){return hl.H.useHostTransitionStatus()},ql.version="19.1.1",ql}var uy;function B1(){if(uy)return ti.exports;uy=1;function U(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(U)}catch(sl){console.error(sl)}}return U(),ti.exports=Y1(),ti.exports}/**
 * @license React
 * react-dom-client.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ay;function p1(){if(ay)return Se;ay=1;var U=q1(),sl=ui(),k=B1();function S(l){var t="https://react.dev/errors/"+l;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var u=2;u<arguments.length;u++)t+="&args[]="+encodeURIComponent(arguments[u])}return"Minified React error #"+l+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function j(l){return!(!l||l.nodeType!==1&&l.nodeType!==9&&l.nodeType!==11)}function W(l){var t=l,u=l;if(l.alternate)for(;t.return;)t=t.return;else{l=t;do t=l,(t.flags&4098)!==0&&(u=t.return),l=t.return;while(l)}return t.tag===3?u:null}function hl(l){if(l.tag===13){var t=l.memoizedState;if(t===null&&(l=l.alternate,l!==null&&(t=l.memoizedState)),t!==null)return t.dehydrated}return null}function Yl(l){if(W(l)!==l)throw Error(S(188))}function N(l){var t=l.alternate;if(!t){if(t=W(l),t===null)throw Error(S(188));return t!==l?null:l}for(var u=l,e=t;;){var n=u.return;if(n===null)break;var f=n.alternate;if(f===null){if(e=n.return,e!==null){u=e;continue}break}if(n.child===f.child){for(f=n.child;f;){if(f===u)return Yl(n),l;if(f===e)return Yl(n),t;f=f.sibling}throw Error(S(188))}if(u.return!==e.return)u=n,e=f;else{for(var c=!1,i=n.child;i;){if(i===u){c=!0,u=n,e=f;break}if(i===e){c=!0,e=n,u=f;break}i=i.sibling}if(!c){for(i=f.child;i;){if(i===u){c=!0,u=f,e=n;break}if(i===e){c=!0,e=f,u=n;break}i=i.sibling}if(!c)throw Error(S(189))}}if(u.alternate!==e)throw Error(S(190))}if(u.tag!==3)throw Error(S(188));return u.stateNode.current===u?l:t}function z(l){var t=l.tag;if(t===5||t===26||t===27||t===6)return l;for(l=l.child;l!==null;){if(t=z(l),t!==null)return t;l=l.sibling}return null}var H=Object.assign,fl=Symbol.for("react.element"),el=Symbol.for("react.transitional.element"),Bl=Symbol.for("react.portal"),pl=Symbol.for("react.fragment"),dt=Symbol.for("react.strict_mode"),Ql=Symbol.for("react.profiler"),du=Symbol.for("react.provider"),Ot=Symbol.for("react.consumer"),Dl=Symbol.for("react.context"),ht=Symbol.for("react.forward_ref"),K=Symbol.for("react.suspense"),Ll=Symbol.for("react.suspense_list"),Kl=Symbol.for("react.memo"),Jl=Symbol.for("react.lazy"),St=Symbol.for("react.activity"),Yu=Symbol.for("react.memo_cache_sentinel"),_t=Symbol.iterator;function Ul(l){return l===null||typeof l!="object"?null:(l=_t&&l[_t]||l["@@iterator"],typeof l=="function"?l:null)}var hu=Symbol.for("react.client.reference");function ou(l){if(l==null)return null;if(typeof l=="function")return l.$$typeof===hu?null:l.displayName||l.name||null;if(typeof l=="string")return l;switch(l){case pl:return"Fragment";case Ql:return"Profiler";case dt:return"StrictMode";case K:return"Suspense";case Ll:return"SuspenseList";case St:return"Activity"}if(typeof l=="object")switch(l.$$typeof){case Bl:return"Portal";case Dl:return(l.displayName||"Context")+".Provider";case Ot:return(l._context.displayName||"Context")+".Consumer";case ht:var t=l.render;return l=l.displayName,l||(l=t.displayName||t.name||"",l=l!==""?"ForwardRef("+l+")":"ForwardRef"),l;case Kl:return t=l.displayName||null,t!==null?t:ou(l.type)||"Memo";case Jl:t=l._payload,l=l._init;try{return ou(l(t))}catch{}}return null}var Rl=Array.isArray,b=sl.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,_=k.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,p={pending:!1,data:null,method:null,action:null},ul=[],v=-1;function A(l){return{current:l}}function M(l){0>v||(l.current=ul[v],ul[v]=null,v--)}function O(l,t){v++,ul[v]=l.current,l.current=t}var q=A(null),J=A(null),X=A(null),wl=A(null);function cl(l,t){switch(O(X,t),O(J,l),O(q,null),t.nodeType){case 9:case 11:l=(l=t.documentElement)&&(l=l.namespaceURI)?zv(l):0;break;default:if(l=t.tagName,t=t.namespaceURI)t=zv(t),l=Ov(t,l);else switch(l){case"svg":l=1;break;case"math":l=2;break;default:l=0}}M(q),O(q,l)}function jt(){M(q),M(J),M(X)}function Bn(l){l.memoizedState!==null&&O(wl,l);var t=q.current,u=Ov(t,l.type);t!==u&&(O(J,l),O(q,u))}function ge(l){J.current===l&&(M(q),M(J)),wl.current===l&&(M(wl),ye._currentValue=p)}var pn=Object.prototype.hasOwnProperty,Gn=U.unstable_scheduleCallback,Xn=U.unstable_cancelCallback,fy=U.unstable_shouldYield,cy=U.unstable_requestPaint,gt=U.unstable_now,iy=U.unstable_getCurrentPriorityLevel,ai=U.unstable_ImmediatePriority,ei=U.unstable_UserBlockingPriority,be=U.unstable_NormalPriority,sy=U.unstable_LowPriority,ni=U.unstable_IdlePriority,vy=U.log,yy=U.unstable_setDisableYieldValue,ba=null,Wl=null;function Ct(l){if(typeof vy=="function"&&yy(l),Wl&&typeof Wl.setStrictMode=="function")try{Wl.setStrictMode(ba,l)}catch{}}var $l=Math.clz32?Math.clz32:oy,dy=Math.log,hy=Math.LN2;function oy(l){return l>>>=0,l===0?32:31-(dy(l)/hy|0)|0}var Te=256,Ee=4194304;function mu(l){var t=l&42;if(t!==0)return t;switch(l&-l){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return l&4194048;case 4194304:case 8388608:case 16777216:case 33554432:return l&62914560;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return l}}function Ae(l,t,u){var e=l.pendingLanes;if(e===0)return 0;var n=0,f=l.suspendedLanes,c=l.pingedLanes;l=l.warmLanes;var i=e&134217727;return i!==0?(e=i&~f,e!==0?n=mu(e):(c&=i,c!==0?n=mu(c):u||(u=i&~l,u!==0&&(n=mu(u))))):(i=e&~f,i!==0?n=mu(i):c!==0?n=mu(c):u||(u=e&~l,u!==0&&(n=mu(u)))),n===0?0:t!==0&&t!==n&&(t&f)===0&&(f=n&-n,u=t&-t,f>=u||f===32&&(u&4194048)!==0)?t:n}function Ta(l,t){return(l.pendingLanes&~(l.suspendedLanes&~l.pingedLanes)&t)===0}function my(l,t){switch(l){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:return-1;case 67108864:case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function fi(){var l=Te;return Te<<=1,(Te&4194048)===0&&(Te=256),l}function ci(){var l=Ee;return Ee<<=1,(Ee&62914560)===0&&(Ee=4194304),l}function Qn(l){for(var t=[],u=0;31>u;u++)t.push(l);return t}function Ea(l,t){l.pendingLanes|=t,t!==268435456&&(l.suspendedLanes=0,l.pingedLanes=0,l.warmLanes=0)}function ry(l,t,u,e,n,f){var c=l.pendingLanes;l.pendingLanes=u,l.suspendedLanes=0,l.pingedLanes=0,l.warmLanes=0,l.expiredLanes&=u,l.entangledLanes&=u,l.errorRecoveryDisabledLanes&=u,l.shellSuspendCounter=0;var i=l.entanglements,s=l.expirationTimes,o=l.hiddenUpdates;for(u=c&~u;0<u;){var g=31-$l(u),E=1<<g;i[g]=0,s[g]=-1;var m=o[g];if(m!==null)for(o[g]=null,g=0;g<m.length;g++){var r=m[g];r!==null&&(r.lane&=-536870913)}u&=~E}e!==0&&ii(l,e,0),f!==0&&n===0&&l.tag!==0&&(l.suspendedLanes|=f&~(c&~t))}function ii(l,t,u){l.pendingLanes|=t,l.suspendedLanes&=~t;var e=31-$l(t);l.entangledLanes|=t,l.entanglements[e]=l.entanglements[e]|1073741824|u&4194090}function si(l,t){var u=l.entangledLanes|=t;for(l=l.entanglements;u;){var e=31-$l(u),n=1<<e;n&t|l[e]&t&&(l[e]|=t),u&=~n}}function xn(l){switch(l){case 2:l=1;break;case 8:l=4;break;case 32:l=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:l=128;break;case 268435456:l=134217728;break;default:l=0}return l}function Zn(l){return l&=-l,2<l?8<l?(l&134217727)!==0?32:268435456:8:2}function vi(){var l=_.p;return l!==0?l:(l=window.event,l===void 0?32:Vv(l.type))}function Sy(l,t){var u=_.p;try{return _.p=l,t()}finally{_.p=u}}var Vt=Math.random().toString(36).slice(2),Hl="__reactFiber$"+Vt,xl="__reactProps$"+Vt,Bu="__reactContainer$"+Vt,jn="__reactEvents$"+Vt,gy="__reactListeners$"+Vt,by="__reactHandles$"+Vt,yi="__reactResources$"+Vt,Aa="__reactMarker$"+Vt;function Cn(l){delete l[Hl],delete l[xl],delete l[jn],delete l[gy],delete l[by]}function pu(l){var t=l[Hl];if(t)return t;for(var u=l.parentNode;u;){if(t=u[Bu]||u[Hl]){if(u=t.alternate,t.child!==null||u!==null&&u.child!==null)for(l=Uv(l);l!==null;){if(u=l[Hl])return u;l=Uv(l)}return t}l=u,u=l.parentNode}return null}function Gu(l){if(l=l[Hl]||l[Bu]){var t=l.tag;if(t===5||t===6||t===13||t===26||t===27||t===3)return l}return null}function za(l){var t=l.tag;if(t===5||t===26||t===27||t===6)return l.stateNode;throw Error(S(33))}function Xu(l){var t=l[yi];return t||(t=l[yi]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Tl(l){l[Aa]=!0}var di=new Set,hi={};function ru(l,t){Qu(l,t),Qu(l+"Capture",t)}function Qu(l,t){for(hi[l]=t,l=0;l<t.length;l++)di.add(t[l])}var Ty=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),oi={},mi={};function Ey(l){return pn.call(mi,l)?!0:pn.call(oi,l)?!1:Ty.test(l)?mi[l]=!0:(oi[l]=!0,!1)}function ze(l,t,u){if(Ey(t))if(u===null)l.removeAttribute(t);else{switch(typeof u){case"undefined":case"function":case"symbol":l.removeAttribute(t);return;case"boolean":var e=t.toLowerCase().slice(0,5);if(e!=="data-"&&e!=="aria-"){l.removeAttribute(t);return}}l.setAttribute(t,""+u)}}function Oe(l,t,u){if(u===null)l.removeAttribute(t);else{switch(typeof u){case"undefined":case"function":case"symbol":case"boolean":l.removeAttribute(t);return}l.setAttribute(t,""+u)}}function Mt(l,t,u,e){if(e===null)l.removeAttribute(u);else{switch(typeof e){case"undefined":case"function":case"symbol":case"boolean":l.removeAttribute(u);return}l.setAttributeNS(t,u,""+e)}}var Vn,ri;function xu(l){if(Vn===void 0)try{throw Error()}catch(u){var t=u.stack.trim().match(/\n( *(at )?)/);Vn=t&&t[1]||"",ri=-1<u.stack.indexOf(`
    at`)?" (<anonymous>)":-1<u.stack.indexOf("@")?"@unknown:0:0":""}return`
`+Vn+l+ri}var Ln=!1;function Kn(l,t){if(!l||Ln)return"";Ln=!0;var u=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var e={DetermineComponentFrameRoot:function(){try{if(t){var E=function(){throw Error()};if(Object.defineProperty(E.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(E,[])}catch(r){var m=r}Reflect.construct(l,[],E)}else{try{E.call()}catch(r){m=r}l.call(E.prototype)}}else{try{throw Error()}catch(r){m=r}(E=l())&&typeof E.catch=="function"&&E.catch(function(){})}}catch(r){if(r&&m&&typeof r.stack=="string")return[r.stack,m.stack]}return[null,null]}};e.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var n=Object.getOwnPropertyDescriptor(e.DetermineComponentFrameRoot,"name");n&&n.configurable&&Object.defineProperty(e.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var f=e.DetermineComponentFrameRoot(),c=f[0],i=f[1];if(c&&i){var s=c.split(`
`),o=i.split(`
`);for(n=e=0;e<s.length&&!s[e].includes("DetermineComponentFrameRoot");)e++;for(;n<o.length&&!o[n].includes("DetermineComponentFrameRoot");)n++;if(e===s.length||n===o.length)for(e=s.length-1,n=o.length-1;1<=e&&0<=n&&s[e]!==o[n];)n--;for(;1<=e&&0<=n;e--,n--)if(s[e]!==o[n]){if(e!==1||n!==1)do if(e--,n--,0>n||s[e]!==o[n]){var g=`
`+s[e].replace(" at new "," at ");return l.displayName&&g.includes("<anonymous>")&&(g=g.replace("<anonymous>",l.displayName)),g}while(1<=e&&0<=n);break}}}finally{Ln=!1,Error.prepareStackTrace=u}return(u=l?l.displayName||l.name:"")?xu(u):""}function Ay(l){switch(l.tag){case 26:case 27:case 5:return xu(l.type);case 16:return xu("Lazy");case 13:return xu("Suspense");case 19:return xu("SuspenseList");case 0:case 15:return Kn(l.type,!1);case 11:return Kn(l.type.render,!1);case 1:return Kn(l.type,!0);case 31:return xu("Activity");default:return""}}function Si(l){try{var t="";do t+=Ay(l),l=l.return;while(l);return t}catch(u){return`
Error generating stack: `+u.message+`
`+u.stack}}function at(l){switch(typeof l){case"bigint":case"boolean":case"number":case"string":case"undefined":return l;case"object":return l;default:return""}}function gi(l){var t=l.type;return(l=l.nodeName)&&l.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function zy(l){var t=gi(l)?"checked":"value",u=Object.getOwnPropertyDescriptor(l.constructor.prototype,t),e=""+l[t];if(!l.hasOwnProperty(t)&&typeof u<"u"&&typeof u.get=="function"&&typeof u.set=="function"){var n=u.get,f=u.set;return Object.defineProperty(l,t,{configurable:!0,get:function(){return n.call(this)},set:function(c){e=""+c,f.call(this,c)}}),Object.defineProperty(l,t,{enumerable:u.enumerable}),{getValue:function(){return e},setValue:function(c){e=""+c},stopTracking:function(){l._valueTracker=null,delete l[t]}}}}function _e(l){l._valueTracker||(l._valueTracker=zy(l))}function bi(l){if(!l)return!1;var t=l._valueTracker;if(!t)return!0;var u=t.getValue(),e="";return l&&(e=gi(l)?l.checked?"true":"false":l.value),l=e,l!==u?(t.setValue(l),!0):!1}function Me(l){if(l=l||(typeof document<"u"?document:void 0),typeof l>"u")return null;try{return l.activeElement||l.body}catch{return l.body}}var Oy=/[\n"\\]/g;function et(l){return l.replace(Oy,function(t){return"\\"+t.charCodeAt(0).toString(16)+" "})}function Jn(l,t,u,e,n,f,c,i){l.name="",c!=null&&typeof c!="function"&&typeof c!="symbol"&&typeof c!="boolean"?l.type=c:l.removeAttribute("type"),t!=null?c==="number"?(t===0&&l.value===""||l.value!=t)&&(l.value=""+at(t)):l.value!==""+at(t)&&(l.value=""+at(t)):c!=="submit"&&c!=="reset"||l.removeAttribute("value"),t!=null?wn(l,c,at(t)):u!=null?wn(l,c,at(u)):e!=null&&l.removeAttribute("value"),n==null&&f!=null&&(l.defaultChecked=!!f),n!=null&&(l.checked=n&&typeof n!="function"&&typeof n!="symbol"),i!=null&&typeof i!="function"&&typeof i!="symbol"&&typeof i!="boolean"?l.name=""+at(i):l.removeAttribute("name")}function Ti(l,t,u,e,n,f,c,i){if(f!=null&&typeof f!="function"&&typeof f!="symbol"&&typeof f!="boolean"&&(l.type=f),t!=null||u!=null){if(!(f!=="submit"&&f!=="reset"||t!=null))return;u=u!=null?""+at(u):"",t=t!=null?""+at(t):u,i||t===l.value||(l.value=t),l.defaultValue=t}e=e??n,e=typeof e!="function"&&typeof e!="symbol"&&!!e,l.checked=i?l.checked:!!e,l.defaultChecked=!!e,c!=null&&typeof c!="function"&&typeof c!="symbol"&&typeof c!="boolean"&&(l.name=c)}function wn(l,t,u){t==="number"&&Me(l.ownerDocument)===l||l.defaultValue===""+u||(l.defaultValue=""+u)}function Zu(l,t,u,e){if(l=l.options,t){t={};for(var n=0;n<u.length;n++)t["$"+u[n]]=!0;for(u=0;u<l.length;u++)n=t.hasOwnProperty("$"+l[u].value),l[u].selected!==n&&(l[u].selected=n),n&&e&&(l[u].defaultSelected=!0)}else{for(u=""+at(u),t=null,n=0;n<l.length;n++){if(l[n].value===u){l[n].selected=!0,e&&(l[n].defaultSelected=!0);return}t!==null||l[n].disabled||(t=l[n])}t!==null&&(t.selected=!0)}}function Ei(l,t,u){if(t!=null&&(t=""+at(t),t!==l.value&&(l.value=t),u==null)){l.defaultValue!==t&&(l.defaultValue=t);return}l.defaultValue=u!=null?""+at(u):""}function Ai(l,t,u,e){if(t==null){if(e!=null){if(u!=null)throw Error(S(92));if(Rl(e)){if(1<e.length)throw Error(S(93));e=e[0]}u=e}u==null&&(u=""),t=u}u=at(t),l.defaultValue=u,e=l.textContent,e===u&&e!==""&&e!==null&&(l.value=e)}function ju(l,t){if(t){var u=l.firstChild;if(u&&u===l.lastChild&&u.nodeType===3){u.nodeValue=t;return}}l.textContent=t}var _y=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function zi(l,t,u){var e=t.indexOf("--")===0;u==null||typeof u=="boolean"||u===""?e?l.setProperty(t,""):t==="float"?l.cssFloat="":l[t]="":e?l.setProperty(t,u):typeof u!="number"||u===0||_y.has(t)?t==="float"?l.cssFloat=u:l[t]=(""+u).trim():l[t]=u+"px"}function Oi(l,t,u){if(t!=null&&typeof t!="object")throw Error(S(62));if(l=l.style,u!=null){for(var e in u)!u.hasOwnProperty(e)||t!=null&&t.hasOwnProperty(e)||(e.indexOf("--")===0?l.setProperty(e,""):e==="float"?l.cssFloat="":l[e]="");for(var n in t)e=t[n],t.hasOwnProperty(n)&&u[n]!==e&&zi(l,n,e)}else for(var f in t)t.hasOwnProperty(f)&&zi(l,f,t[f])}function Wn(l){if(l.indexOf("-")===-1)return!1;switch(l){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var My=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Dy=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function De(l){return Dy.test(""+l)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":l}var $n=null;function kn(l){return l=l.target||l.srcElement||window,l.correspondingUseElement&&(l=l.correspondingUseElement),l.nodeType===3?l.parentNode:l}var Cu=null,Vu=null;function _i(l){var t=Gu(l);if(t&&(l=t.stateNode)){var u=l[xl]||null;l:switch(l=t.stateNode,t.type){case"input":if(Jn(l,u.value,u.defaultValue,u.defaultValue,u.checked,u.defaultChecked,u.type,u.name),t=u.name,u.type==="radio"&&t!=null){for(u=l;u.parentNode;)u=u.parentNode;for(u=u.querySelectorAll('input[name="'+et(""+t)+'"][type="radio"]'),t=0;t<u.length;t++){var e=u[t];if(e!==l&&e.form===l.form){var n=e[xl]||null;if(!n)throw Error(S(90));Jn(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name)}}for(t=0;t<u.length;t++)e=u[t],e.form===l.form&&bi(e)}break l;case"textarea":Ei(l,u.value,u.defaultValue);break l;case"select":t=u.value,t!=null&&Zu(l,!!u.multiple,t,!1)}}}var Fn=!1;function Mi(l,t,u){if(Fn)return l(t,u);Fn=!0;try{var e=l(t);return e}finally{if(Fn=!1,(Cu!==null||Vu!==null)&&(hn(),Cu&&(t=Cu,l=Vu,Vu=Cu=null,_i(t),l)))for(t=0;t<l.length;t++)_i(l[t])}}function Oa(l,t){var u=l.stateNode;if(u===null)return null;var e=u[xl]||null;if(e===null)return null;u=e[t];l:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(e=!e.disabled)||(l=l.type,e=!(l==="button"||l==="input"||l==="select"||l==="textarea")),l=!e;break l;default:l=!1}if(l)return null;if(u&&typeof u!="function")throw Error(S(231,t,typeof u));return u}var Dt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),In=!1;if(Dt)try{var _a={};Object.defineProperty(_a,"passive",{get:function(){In=!0}}),window.addEventListener("test",_a,_a),window.removeEventListener("test",_a,_a)}catch{In=!1}var Lt=null,Pn=null,Ue=null;function Di(){if(Ue)return Ue;var l,t=Pn,u=t.length,e,n="value"in Lt?Lt.value:Lt.textContent,f=n.length;for(l=0;l<u&&t[l]===n[l];l++);var c=u-l;for(e=1;e<=c&&t[u-e]===n[f-e];e++);return Ue=n.slice(l,1<e?1-e:void 0)}function Re(l){var t=l.keyCode;return"charCode"in l?(l=l.charCode,l===0&&t===13&&(l=13)):l=t,l===10&&(l=13),32<=l||l===13?l:0}function He(){return!0}function Ui(){return!1}function Zl(l){function t(u,e,n,f,c){this._reactName=u,this._targetInst=n,this.type=e,this.nativeEvent=f,this.target=c,this.currentTarget=null;for(var i in l)l.hasOwnProperty(i)&&(u=l[i],this[i]=u?u(f):f[i]);return this.isDefaultPrevented=(f.defaultPrevented!=null?f.defaultPrevented:f.returnValue===!1)?He:Ui,this.isPropagationStopped=Ui,this}return H(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var u=this.nativeEvent;u&&(u.preventDefault?u.preventDefault():typeof u.returnValue!="unknown"&&(u.returnValue=!1),this.isDefaultPrevented=He)},stopPropagation:function(){var u=this.nativeEvent;u&&(u.stopPropagation?u.stopPropagation():typeof u.cancelBubble!="unknown"&&(u.cancelBubble=!0),this.isPropagationStopped=He)},persist:function(){},isPersistent:He}),t}var Su={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(l){return l.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Ne=Zl(Su),Ma=H({},Su,{view:0,detail:0}),Uy=Zl(Ma),lf,tf,Da,qe=H({},Ma,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:af,button:0,buttons:0,relatedTarget:function(l){return l.relatedTarget===void 0?l.fromElement===l.srcElement?l.toElement:l.fromElement:l.relatedTarget},movementX:function(l){return"movementX"in l?l.movementX:(l!==Da&&(Da&&l.type==="mousemove"?(lf=l.screenX-Da.screenX,tf=l.screenY-Da.screenY):tf=lf=0,Da=l),lf)},movementY:function(l){return"movementY"in l?l.movementY:tf}}),Ri=Zl(qe),Ry=H({},qe,{dataTransfer:0}),Hy=Zl(Ry),Ny=H({},Ma,{relatedTarget:0}),uf=Zl(Ny),qy=H({},Su,{animationName:0,elapsedTime:0,pseudoElement:0}),Yy=Zl(qy),By=H({},Su,{clipboardData:function(l){return"clipboardData"in l?l.clipboardData:window.clipboardData}}),py=Zl(By),Gy=H({},Su,{data:0}),Hi=Zl(Gy),Xy={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Qy={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xy={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Zy(l){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(l):(l=xy[l])?!!t[l]:!1}function af(){return Zy}var jy=H({},Ma,{key:function(l){if(l.key){var t=Xy[l.key]||l.key;if(t!=="Unidentified")return t}return l.type==="keypress"?(l=Re(l),l===13?"Enter":String.fromCharCode(l)):l.type==="keydown"||l.type==="keyup"?Qy[l.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:af,charCode:function(l){return l.type==="keypress"?Re(l):0},keyCode:function(l){return l.type==="keydown"||l.type==="keyup"?l.keyCode:0},which:function(l){return l.type==="keypress"?Re(l):l.type==="keydown"||l.type==="keyup"?l.keyCode:0}}),Cy=Zl(jy),Vy=H({},qe,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Ni=Zl(Vy),Ly=H({},Ma,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:af}),Ky=Zl(Ly),Jy=H({},Su,{propertyName:0,elapsedTime:0,pseudoElement:0}),wy=Zl(Jy),Wy=H({},qe,{deltaX:function(l){return"deltaX"in l?l.deltaX:"wheelDeltaX"in l?-l.wheelDeltaX:0},deltaY:function(l){return"deltaY"in l?l.deltaY:"wheelDeltaY"in l?-l.wheelDeltaY:"wheelDelta"in l?-l.wheelDelta:0},deltaZ:0,deltaMode:0}),$y=Zl(Wy),ky=H({},Su,{newState:0,oldState:0}),Fy=Zl(ky),Iy=[9,13,27,32],ef=Dt&&"CompositionEvent"in window,Ua=null;Dt&&"documentMode"in document&&(Ua=document.documentMode);var Py=Dt&&"TextEvent"in window&&!Ua,qi=Dt&&(!ef||Ua&&8<Ua&&11>=Ua),Yi=" ",Bi=!1;function pi(l,t){switch(l){case"keyup":return Iy.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Gi(l){return l=l.detail,typeof l=="object"&&"data"in l?l.data:null}var Lu=!1;function ld(l,t){switch(l){case"compositionend":return Gi(t);case"keypress":return t.which!==32?null:(Bi=!0,Yi);case"textInput":return l=t.data,l===Yi&&Bi?null:l;default:return null}}function td(l,t){if(Lu)return l==="compositionend"||!ef&&pi(l,t)?(l=Di(),Ue=Pn=Lt=null,Lu=!1,l):null;switch(l){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return qi&&t.locale!=="ko"?null:t.data;default:return null}}var ud={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Xi(l){var t=l&&l.nodeName&&l.nodeName.toLowerCase();return t==="input"?!!ud[l.type]:t==="textarea"}function Qi(l,t,u,e){Cu?Vu?Vu.push(e):Vu=[e]:Cu=e,t=bn(t,"onChange"),0<t.length&&(u=new Ne("onChange","change",null,u,e),l.push({event:u,listeners:t}))}var Ra=null,Ha=null;function ad(l){gv(l,0)}function Ye(l){var t=za(l);if(bi(t))return l}function xi(l,t){if(l==="change")return t}var Zi=!1;if(Dt){var nf;if(Dt){var ff="oninput"in document;if(!ff){var ji=document.createElement("div");ji.setAttribute("oninput","return;"),ff=typeof ji.oninput=="function"}nf=ff}else nf=!1;Zi=nf&&(!document.documentMode||9<document.documentMode)}function Ci(){Ra&&(Ra.detachEvent("onpropertychange",Vi),Ha=Ra=null)}function Vi(l){if(l.propertyName==="value"&&Ye(Ha)){var t=[];Qi(t,Ha,l,kn(l)),Mi(ad,t)}}function ed(l,t,u){l==="focusin"?(Ci(),Ra=t,Ha=u,Ra.attachEvent("onpropertychange",Vi)):l==="focusout"&&Ci()}function nd(l){if(l==="selectionchange"||l==="keyup"||l==="keydown")return Ye(Ha)}function fd(l,t){if(l==="click")return Ye(t)}function cd(l,t){if(l==="input"||l==="change")return Ye(t)}function id(l,t){return l===t&&(l!==0||1/l===1/t)||l!==l&&t!==t}var kl=typeof Object.is=="function"?Object.is:id;function Na(l,t){if(kl(l,t))return!0;if(typeof l!="object"||l===null||typeof t!="object"||t===null)return!1;var u=Object.keys(l),e=Object.keys(t);if(u.length!==e.length)return!1;for(e=0;e<u.length;e++){var n=u[e];if(!pn.call(t,n)||!kl(l[n],t[n]))return!1}return!0}function Li(l){for(;l&&l.firstChild;)l=l.firstChild;return l}function Ki(l,t){var u=Li(l);l=0;for(var e;u;){if(u.nodeType===3){if(e=l+u.textContent.length,l<=t&&e>=t)return{node:u,offset:t-l};l=e}l:{for(;u;){if(u.nextSibling){u=u.nextSibling;break l}u=u.parentNode}u=void 0}u=Li(u)}}function Ji(l,t){return l&&t?l===t?!0:l&&l.nodeType===3?!1:t&&t.nodeType===3?Ji(l,t.parentNode):"contains"in l?l.contains(t):l.compareDocumentPosition?!!(l.compareDocumentPosition(t)&16):!1:!1}function wi(l){l=l!=null&&l.ownerDocument!=null&&l.ownerDocument.defaultView!=null?l.ownerDocument.defaultView:window;for(var t=Me(l.document);t instanceof l.HTMLIFrameElement;){try{var u=typeof t.contentWindow.location.href=="string"}catch{u=!1}if(u)l=t.contentWindow;else break;t=Me(l.document)}return t}function cf(l){var t=l&&l.nodeName&&l.nodeName.toLowerCase();return t&&(t==="input"&&(l.type==="text"||l.type==="search"||l.type==="tel"||l.type==="url"||l.type==="password")||t==="textarea"||l.contentEditable==="true")}var sd=Dt&&"documentMode"in document&&11>=document.documentMode,Ku=null,sf=null,qa=null,vf=!1;function Wi(l,t,u){var e=u.window===u?u.document:u.nodeType===9?u:u.ownerDocument;vf||Ku==null||Ku!==Me(e)||(e=Ku,"selectionStart"in e&&cf(e)?e={start:e.selectionStart,end:e.selectionEnd}:(e=(e.ownerDocument&&e.ownerDocument.defaultView||window).getSelection(),e={anchorNode:e.anchorNode,anchorOffset:e.anchorOffset,focusNode:e.focusNode,focusOffset:e.focusOffset}),qa&&Na(qa,e)||(qa=e,e=bn(sf,"onSelect"),0<e.length&&(t=new Ne("onSelect","select",null,t,u),l.push({event:t,listeners:e}),t.target=Ku)))}function gu(l,t){var u={};return u[l.toLowerCase()]=t.toLowerCase(),u["Webkit"+l]="webkit"+t,u["Moz"+l]="moz"+t,u}var Ju={animationend:gu("Animation","AnimationEnd"),animationiteration:gu("Animation","AnimationIteration"),animationstart:gu("Animation","AnimationStart"),transitionrun:gu("Transition","TransitionRun"),transitionstart:gu("Transition","TransitionStart"),transitioncancel:gu("Transition","TransitionCancel"),transitionend:gu("Transition","TransitionEnd")},yf={},$i={};Dt&&($i=document.createElement("div").style,"AnimationEvent"in window||(delete Ju.animationend.animation,delete Ju.animationiteration.animation,delete Ju.animationstart.animation),"TransitionEvent"in window||delete Ju.transitionend.transition);function bu(l){if(yf[l])return yf[l];if(!Ju[l])return l;var t=Ju[l],u;for(u in t)if(t.hasOwnProperty(u)&&u in $i)return yf[l]=t[u];return l}var ki=bu("animationend"),Fi=bu("animationiteration"),Ii=bu("animationstart"),vd=bu("transitionrun"),yd=bu("transitionstart"),dd=bu("transitioncancel"),Pi=bu("transitionend"),l0=new Map,df="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");df.push("scrollEnd");function ot(l,t){l0.set(l,t),ru(t,[l])}var t0=new WeakMap;function nt(l,t){if(typeof l=="object"&&l!==null){var u=t0.get(l);return u!==void 0?u:(t={value:l,source:t,stack:Si(t)},t0.set(l,t),t)}return{value:l,source:t,stack:Si(t)}}var ft=[],wu=0,hf=0;function Be(){for(var l=wu,t=hf=wu=0;t<l;){var u=ft[t];ft[t++]=null;var e=ft[t];ft[t++]=null;var n=ft[t];ft[t++]=null;var f=ft[t];if(ft[t++]=null,e!==null&&n!==null){var c=e.pending;c===null?n.next=n:(n.next=c.next,c.next=n),e.pending=n}f!==0&&u0(u,n,f)}}function pe(l,t,u,e){ft[wu++]=l,ft[wu++]=t,ft[wu++]=u,ft[wu++]=e,hf|=e,l.lanes|=e,l=l.alternate,l!==null&&(l.lanes|=e)}function of(l,t,u,e){return pe(l,t,u,e),Ge(l)}function Wu(l,t){return pe(l,null,null,t),Ge(l)}function u0(l,t,u){l.lanes|=u;var e=l.alternate;e!==null&&(e.lanes|=u);for(var n=!1,f=l.return;f!==null;)f.childLanes|=u,e=f.alternate,e!==null&&(e.childLanes|=u),f.tag===22&&(l=f.stateNode,l===null||l._visibility&1||(n=!0)),l=f,f=f.return;return l.tag===3?(f=l.stateNode,n&&t!==null&&(n=31-$l(u),l=f.hiddenUpdates,e=l[n],e===null?l[n]=[t]:e.push(t),t.lane=u|536870912),f):null}function Ge(l){if(50<ae)throw ae=0,Tc=null,Error(S(185));for(var t=l.return;t!==null;)l=t,t=l.return;return l.tag===3?l.stateNode:null}var $u={};function hd(l,t,u,e){this.tag=l,this.key=u,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=e,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Fl(l,t,u,e){return new hd(l,t,u,e)}function mf(l){return l=l.prototype,!(!l||!l.isReactComponent)}function Ut(l,t){var u=l.alternate;return u===null?(u=Fl(l.tag,t,l.key,l.mode),u.elementType=l.elementType,u.type=l.type,u.stateNode=l.stateNode,u.alternate=l,l.alternate=u):(u.pendingProps=t,u.type=l.type,u.flags=0,u.subtreeFlags=0,u.deletions=null),u.flags=l.flags&65011712,u.childLanes=l.childLanes,u.lanes=l.lanes,u.child=l.child,u.memoizedProps=l.memoizedProps,u.memoizedState=l.memoizedState,u.updateQueue=l.updateQueue,t=l.dependencies,u.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},u.sibling=l.sibling,u.index=l.index,u.ref=l.ref,u.refCleanup=l.refCleanup,u}function a0(l,t){l.flags&=65011714;var u=l.alternate;return u===null?(l.childLanes=0,l.lanes=t,l.child=null,l.subtreeFlags=0,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=u.childLanes,l.lanes=u.lanes,l.child=u.child,l.subtreeFlags=0,l.deletions=null,l.memoizedProps=u.memoizedProps,l.memoizedState=u.memoizedState,l.updateQueue=u.updateQueue,l.type=u.type,t=u.dependencies,l.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext}),l}function Xe(l,t,u,e,n,f){var c=0;if(e=l,typeof l=="function")mf(l)&&(c=1);else if(typeof l=="string")c=m1(l,u,q.current)?26:l==="html"||l==="head"||l==="body"?27:5;else l:switch(l){case St:return l=Fl(31,u,t,n),l.elementType=St,l.lanes=f,l;case pl:return Tu(u.children,n,f,t);case dt:c=8,n|=24;break;case Ql:return l=Fl(12,u,t,n|2),l.elementType=Ql,l.lanes=f,l;case K:return l=Fl(13,u,t,n),l.elementType=K,l.lanes=f,l;case Ll:return l=Fl(19,u,t,n),l.elementType=Ll,l.lanes=f,l;default:if(typeof l=="object"&&l!==null)switch(l.$$typeof){case du:case Dl:c=10;break l;case Ot:c=9;break l;case ht:c=11;break l;case Kl:c=14;break l;case Jl:c=16,e=null;break l}c=29,u=Error(S(130,l===null?"null":typeof l,"")),e=null}return t=Fl(c,u,t,n),t.elementType=l,t.type=e,t.lanes=f,t}function Tu(l,t,u,e){return l=Fl(7,l,e,t),l.lanes=u,l}function rf(l,t,u){return l=Fl(6,l,null,t),l.lanes=u,l}function Sf(l,t,u){return t=Fl(4,l.children!==null?l.children:[],l.key,t),t.lanes=u,t.stateNode={containerInfo:l.containerInfo,pendingChildren:null,implementation:l.implementation},t}var ku=[],Fu=0,Qe=null,xe=0,ct=[],it=0,Eu=null,Rt=1,Ht="";function Au(l,t){ku[Fu++]=xe,ku[Fu++]=Qe,Qe=l,xe=t}function e0(l,t,u){ct[it++]=Rt,ct[it++]=Ht,ct[it++]=Eu,Eu=l;var e=Rt;l=Ht;var n=32-$l(e)-1;e&=~(1<<n),u+=1;var f=32-$l(t)+n;if(30<f){var c=n-n%5;f=(e&(1<<c)-1).toString(32),e>>=c,n-=c,Rt=1<<32-$l(t)+n|u<<n|e,Ht=f+l}else Rt=1<<f|u<<n|e,Ht=l}function gf(l){l.return!==null&&(Au(l,1),e0(l,1,0))}function bf(l){for(;l===Qe;)Qe=ku[--Fu],ku[Fu]=null,xe=ku[--Fu],ku[Fu]=null;for(;l===Eu;)Eu=ct[--it],ct[it]=null,Ht=ct[--it],ct[it]=null,Rt=ct[--it],ct[it]=null}var Gl=null,yl=null,$=!1,zu=null,bt=!1,Tf=Error(S(519));function Ou(l){var t=Error(S(418,""));throw pa(nt(t,l)),Tf}function n0(l){var t=l.stateNode,u=l.type,e=l.memoizedProps;switch(t[Hl]=l,t[xl]=e,u){case"dialog":V("cancel",t),V("close",t);break;case"iframe":case"object":case"embed":V("load",t);break;case"video":case"audio":for(u=0;u<ne.length;u++)V(ne[u],t);break;case"source":V("error",t);break;case"img":case"image":case"link":V("error",t),V("load",t);break;case"details":V("toggle",t);break;case"input":V("invalid",t),Ti(t,e.value,e.defaultValue,e.checked,e.defaultChecked,e.type,e.name,!0),_e(t);break;case"select":V("invalid",t);break;case"textarea":V("invalid",t),Ai(t,e.value,e.defaultValue,e.children),_e(t)}u=e.children,typeof u!="string"&&typeof u!="number"&&typeof u!="bigint"||t.textContent===""+u||e.suppressHydrationWarning===!0||Av(t.textContent,u)?(e.popover!=null&&(V("beforetoggle",t),V("toggle",t)),e.onScroll!=null&&V("scroll",t),e.onScrollEnd!=null&&V("scrollend",t),e.onClick!=null&&(t.onclick=Tn),t=!0):t=!1,t||Ou(l)}function f0(l){for(Gl=l.return;Gl;)switch(Gl.tag){case 5:case 13:bt=!1;return;case 27:case 3:bt=!0;return;default:Gl=Gl.return}}function Ya(l){if(l!==Gl)return!1;if(!$)return f0(l),$=!0,!1;var t=l.tag,u;if((u=t!==3&&t!==27)&&((u=t===5)&&(u=l.type,u=!(u!=="form"&&u!=="button")||Gc(l.type,l.memoizedProps)),u=!u),u&&yl&&Ou(l),f0(l),t===13){if(l=l.memoizedState,l=l!==null?l.dehydrated:null,!l)throw Error(S(317));l:{for(l=l.nextSibling,t=0;l;){if(l.nodeType===8)if(u=l.data,u==="/$"){if(t===0){yl=rt(l.nextSibling);break l}t--}else u!=="$"&&u!=="$!"&&u!=="$?"||t++;l=l.nextSibling}yl=null}}else t===27?(t=yl,fu(l.type)?(l=Zc,Zc=null,yl=l):yl=t):yl=Gl?rt(l.stateNode.nextSibling):null;return!0}function Ba(){yl=Gl=null,$=!1}function c0(){var l=zu;return l!==null&&(Vl===null?Vl=l:Vl.push.apply(Vl,l),zu=null),l}function pa(l){zu===null?zu=[l]:zu.push(l)}var Ef=A(null),_u=null,Nt=null;function Kt(l,t,u){O(Ef,t._currentValue),t._currentValue=u}function qt(l){l._currentValue=Ef.current,M(Ef)}function Af(l,t,u){for(;l!==null;){var e=l.alternate;if((l.childLanes&t)!==t?(l.childLanes|=t,e!==null&&(e.childLanes|=t)):e!==null&&(e.childLanes&t)!==t&&(e.childLanes|=t),l===u)break;l=l.return}}function zf(l,t,u,e){var n=l.child;for(n!==null&&(n.return=l);n!==null;){var f=n.dependencies;if(f!==null){var c=n.child;f=f.firstContext;l:for(;f!==null;){var i=f;f=n;for(var s=0;s<t.length;s++)if(i.context===t[s]){f.lanes|=u,i=f.alternate,i!==null&&(i.lanes|=u),Af(f.return,u,l),e||(c=null);break l}f=i.next}}else if(n.tag===18){if(c=n.return,c===null)throw Error(S(341));c.lanes|=u,f=c.alternate,f!==null&&(f.lanes|=u),Af(c,u,l),c=null}else c=n.child;if(c!==null)c.return=n;else for(c=n;c!==null;){if(c===l){c=null;break}if(n=c.sibling,n!==null){n.return=c.return,c=n;break}c=c.return}n=c}}function Ga(l,t,u,e){l=null;for(var n=t,f=!1;n!==null;){if(!f){if((n.flags&524288)!==0)f=!0;else if((n.flags&262144)!==0)break}if(n.tag===10){var c=n.alternate;if(c===null)throw Error(S(387));if(c=c.memoizedProps,c!==null){var i=n.type;kl(n.pendingProps.value,c.value)||(l!==null?l.push(i):l=[i])}}else if(n===wl.current){if(c=n.alternate,c===null)throw Error(S(387));c.memoizedState.memoizedState!==n.memoizedState.memoizedState&&(l!==null?l.push(ye):l=[ye])}n=n.return}l!==null&&zf(t,l,u,e),t.flags|=262144}function Ze(l){for(l=l.firstContext;l!==null;){if(!kl(l.context._currentValue,l.memoizedValue))return!0;l=l.next}return!1}function Mu(l){_u=l,Nt=null,l=l.dependencies,l!==null&&(l.firstContext=null)}function Nl(l){return i0(_u,l)}function je(l,t){return _u===null&&Mu(l),i0(l,t)}function i0(l,t){var u=t._currentValue;if(t={context:t,memoizedValue:u,next:null},Nt===null){if(l===null)throw Error(S(308));Nt=t,l.dependencies={lanes:0,firstContext:t},l.flags|=524288}else Nt=Nt.next=t;return u}var od=typeof AbortController<"u"?AbortController:function(){var l=[],t=this.signal={aborted:!1,addEventListener:function(u,e){l.push(e)}};this.abort=function(){t.aborted=!0,l.forEach(function(u){return u()})}},md=U.unstable_scheduleCallback,rd=U.unstable_NormalPriority,gl={$$typeof:Dl,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Of(){return{controller:new od,data:new Map,refCount:0}}function Xa(l){l.refCount--,l.refCount===0&&md(rd,function(){l.controller.abort()})}var Qa=null,_f=0,Iu=0,Pu=null;function Sd(l,t){if(Qa===null){var u=Qa=[];_f=0,Iu=Dc(),Pu={status:"pending",value:void 0,then:function(e){u.push(e)}}}return _f++,t.then(s0,s0),t}function s0(){if(--_f===0&&Qa!==null){Pu!==null&&(Pu.status="fulfilled");var l=Qa;Qa=null,Iu=0,Pu=null;for(var t=0;t<l.length;t++)(0,l[t])()}}function gd(l,t){var u=[],e={status:"pending",value:null,reason:null,then:function(n){u.push(n)}};return l.then(function(){e.status="fulfilled",e.value=t;for(var n=0;n<u.length;n++)(0,u[n])(t)},function(n){for(e.status="rejected",e.reason=n,n=0;n<u.length;n++)(0,u[n])(void 0)}),e}var v0=b.S;b.S=function(l,t){typeof t=="object"&&t!==null&&typeof t.then=="function"&&Sd(l,t),v0!==null&&v0(l,t)};var Du=A(null);function Mf(){var l=Du.current;return l!==null?l:nl.pooledCache}function Ce(l,t){t===null?O(Du,Du.current):O(Du,t.pool)}function y0(){var l=Mf();return l===null?null:{parent:gl._currentValue,pool:l}}var xa=Error(S(460)),d0=Error(S(474)),Ve=Error(S(542)),Df={then:function(){}};function h0(l){return l=l.status,l==="fulfilled"||l==="rejected"}function Le(){}function o0(l,t,u){switch(u=l[u],u===void 0?l.push(t):u!==t&&(t.then(Le,Le),t=u),t.status){case"fulfilled":return t.value;case"rejected":throw l=t.reason,r0(l),l;default:if(typeof t.status=="string")t.then(Le,Le);else{if(l=nl,l!==null&&100<l.shellSuspendCounter)throw Error(S(482));l=t,l.status="pending",l.then(function(e){if(t.status==="pending"){var n=t;n.status="fulfilled",n.value=e}},function(e){if(t.status==="pending"){var n=t;n.status="rejected",n.reason=e}})}switch(t.status){case"fulfilled":return t.value;case"rejected":throw l=t.reason,r0(l),l}throw Za=t,xa}}var Za=null;function m0(){if(Za===null)throw Error(S(459));var l=Za;return Za=null,l}function r0(l){if(l===xa||l===Ve)throw Error(S(483))}var Jt=!1;function Uf(l){l.updateQueue={baseState:l.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Rf(l,t){l=l.updateQueue,t.updateQueue===l&&(t.updateQueue={baseState:l.baseState,firstBaseUpdate:l.firstBaseUpdate,lastBaseUpdate:l.lastBaseUpdate,shared:l.shared,callbacks:null})}function wt(l){return{lane:l,tag:0,payload:null,callback:null,next:null}}function Wt(l,t,u){var e=l.updateQueue;if(e===null)return null;if(e=e.shared,(F&2)!==0){var n=e.pending;return n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t,t=Ge(l),u0(l,null,u),t}return pe(l,e,t,u),Ge(l)}function ja(l,t,u){if(t=t.updateQueue,t!==null&&(t=t.shared,(u&4194048)!==0)){var e=t.lanes;e&=l.pendingLanes,u|=e,t.lanes=u,si(l,u)}}function Hf(l,t){var u=l.updateQueue,e=l.alternate;if(e!==null&&(e=e.updateQueue,u===e)){var n=null,f=null;if(u=u.firstBaseUpdate,u!==null){do{var c={lane:u.lane,tag:u.tag,payload:u.payload,callback:null,next:null};f===null?n=f=c:f=f.next=c,u=u.next}while(u!==null);f===null?n=f=t:f=f.next=t}else n=f=t;u={baseState:e.baseState,firstBaseUpdate:n,lastBaseUpdate:f,shared:e.shared,callbacks:e.callbacks},l.updateQueue=u;return}l=u.lastBaseUpdate,l===null?u.firstBaseUpdate=t:l.next=t,u.lastBaseUpdate=t}var Nf=!1;function Ca(){if(Nf){var l=Pu;if(l!==null)throw l}}function Va(l,t,u,e){Nf=!1;var n=l.updateQueue;Jt=!1;var f=n.firstBaseUpdate,c=n.lastBaseUpdate,i=n.shared.pending;if(i!==null){n.shared.pending=null;var s=i,o=s.next;s.next=null,c===null?f=o:c.next=o,c=s;var g=l.alternate;g!==null&&(g=g.updateQueue,i=g.lastBaseUpdate,i!==c&&(i===null?g.firstBaseUpdate=o:i.next=o,g.lastBaseUpdate=s))}if(f!==null){var E=n.baseState;c=0,g=o=s=null,i=f;do{var m=i.lane&-536870913,r=m!==i.lane;if(r?(L&m)===m:(e&m)===m){m!==0&&m===Iu&&(Nf=!0),g!==null&&(g=g.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});l:{var G=l,Y=i;m=t;var tl=u;switch(Y.tag){case 1:if(G=Y.payload,typeof G=="function"){E=G.call(tl,E,m);break l}E=G;break l;case 3:G.flags=G.flags&-65537|128;case 0:if(G=Y.payload,m=typeof G=="function"?G.call(tl,E,m):G,m==null)break l;E=H({},E,m);break l;case 2:Jt=!0}}m=i.callback,m!==null&&(l.flags|=64,r&&(l.flags|=8192),r=n.callbacks,r===null?n.callbacks=[m]:r.push(m))}else r={lane:m,tag:i.tag,payload:i.payload,callback:i.callback,next:null},g===null?(o=g=r,s=E):g=g.next=r,c|=m;if(i=i.next,i===null){if(i=n.shared.pending,i===null)break;r=i,i=r.next,r.next=null,n.lastBaseUpdate=r,n.shared.pending=null}}while(!0);g===null&&(s=E),n.baseState=s,n.firstBaseUpdate=o,n.lastBaseUpdate=g,f===null&&(n.shared.lanes=0),uu|=c,l.lanes=c,l.memoizedState=E}}function S0(l,t){if(typeof l!="function")throw Error(S(191,l));l.call(t)}function g0(l,t){var u=l.callbacks;if(u!==null)for(l.callbacks=null,l=0;l<u.length;l++)S0(u[l],t)}var la=A(null),Ke=A(0);function b0(l,t){l=xt,O(Ke,l),O(la,t),xt=l|t.baseLanes}function qf(){O(Ke,xt),O(la,la.current)}function Yf(){xt=Ke.current,M(la),M(Ke)}var $t=0,x=null,P=null,rl=null,Je=!1,ta=!1,Uu=!1,we=0,La=0,ua=null,bd=0;function ol(){throw Error(S(321))}function Bf(l,t){if(t===null)return!1;for(var u=0;u<t.length&&u<l.length;u++)if(!kl(l[u],t[u]))return!1;return!0}function pf(l,t,u,e,n,f){return $t=f,x=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,b.H=l===null||l.memoizedState===null?us:as,Uu=!1,f=u(e,n),Uu=!1,ta&&(f=E0(t,u,e,n)),T0(l),f}function T0(l){b.H=Pe;var t=P!==null&&P.next!==null;if($t=0,rl=P=x=null,Je=!1,La=0,ua=null,t)throw Error(S(300));l===null||El||(l=l.dependencies,l!==null&&Ze(l)&&(El=!0))}function E0(l,t,u,e){x=l;var n=0;do{if(ta&&(ua=null),La=0,ta=!1,25<=n)throw Error(S(301));if(n+=1,rl=P=null,l.updateQueue!=null){var f=l.updateQueue;f.lastEffect=null,f.events=null,f.stores=null,f.memoCache!=null&&(f.memoCache.index=0)}b.H=Md,f=t(u,e)}while(ta);return f}function Td(){var l=b.H,t=l.useState()[0];return t=typeof t.then=="function"?Ka(t):t,l=l.useState()[0],(P!==null?P.memoizedState:null)!==l&&(x.flags|=1024),t}function Gf(){var l=we!==0;return we=0,l}function Xf(l,t,u){t.updateQueue=l.updateQueue,t.flags&=-2053,l.lanes&=~u}function Qf(l){if(Je){for(l=l.memoizedState;l!==null;){var t=l.queue;t!==null&&(t.pending=null),l=l.next}Je=!1}$t=0,rl=P=x=null,ta=!1,La=we=0,ua=null}function jl(){var l={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return rl===null?x.memoizedState=rl=l:rl=rl.next=l,rl}function Sl(){if(P===null){var l=x.alternate;l=l!==null?l.memoizedState:null}else l=P.next;var t=rl===null?x.memoizedState:rl.next;if(t!==null)rl=t,P=l;else{if(l===null)throw x.alternate===null?Error(S(467)):Error(S(310));P=l,l={memoizedState:P.memoizedState,baseState:P.baseState,baseQueue:P.baseQueue,queue:P.queue,next:null},rl===null?x.memoizedState=rl=l:rl=rl.next=l}return rl}function xf(){return{lastEffect:null,events:null,stores:null,memoCache:null}}function Ka(l){var t=La;return La+=1,ua===null&&(ua=[]),l=o0(ua,l,t),t=x,(rl===null?t.memoizedState:rl.next)===null&&(t=t.alternate,b.H=t===null||t.memoizedState===null?us:as),l}function We(l){if(l!==null&&typeof l=="object"){if(typeof l.then=="function")return Ka(l);if(l.$$typeof===Dl)return Nl(l)}throw Error(S(438,String(l)))}function Zf(l){var t=null,u=x.updateQueue;if(u!==null&&(t=u.memoCache),t==null){var e=x.alternate;e!==null&&(e=e.updateQueue,e!==null&&(e=e.memoCache,e!=null&&(t={data:e.data.map(function(n){return n.slice()}),index:0})))}if(t==null&&(t={data:[],index:0}),u===null&&(u=xf(),x.updateQueue=u),u.memoCache=t,u=t.data[t.index],u===void 0)for(u=t.data[t.index]=Array(l),e=0;e<l;e++)u[e]=Yu;return t.index++,u}function Yt(l,t){return typeof t=="function"?t(l):t}function $e(l){var t=Sl();return jf(t,P,l)}function jf(l,t,u){var e=l.queue;if(e===null)throw Error(S(311));e.lastRenderedReducer=u;var n=l.baseQueue,f=e.pending;if(f!==null){if(n!==null){var c=n.next;n.next=f.next,f.next=c}t.baseQueue=n=f,e.pending=null}if(f=l.baseState,n===null)l.memoizedState=f;else{t=n.next;var i=c=null,s=null,o=t,g=!1;do{var E=o.lane&-536870913;if(E!==o.lane?(L&E)===E:($t&E)===E){var m=o.revertLane;if(m===0)s!==null&&(s=s.next={lane:0,revertLane:0,action:o.action,hasEagerState:o.hasEagerState,eagerState:o.eagerState,next:null}),E===Iu&&(g=!0);else if(($t&m)===m){o=o.next,m===Iu&&(g=!0);continue}else E={lane:0,revertLane:o.revertLane,action:o.action,hasEagerState:o.hasEagerState,eagerState:o.eagerState,next:null},s===null?(i=s=E,c=f):s=s.next=E,x.lanes|=m,uu|=m;E=o.action,Uu&&u(f,E),f=o.hasEagerState?o.eagerState:u(f,E)}else m={lane:E,revertLane:o.revertLane,action:o.action,hasEagerState:o.hasEagerState,eagerState:o.eagerState,next:null},s===null?(i=s=m,c=f):s=s.next=m,x.lanes|=E,uu|=E;o=o.next}while(o!==null&&o!==t);if(s===null?c=f:s.next=i,!kl(f,l.memoizedState)&&(El=!0,g&&(u=Pu,u!==null)))throw u;l.memoizedState=f,l.baseState=c,l.baseQueue=s,e.lastRenderedState=f}return n===null&&(e.lanes=0),[l.memoizedState,e.dispatch]}function Cf(l){var t=Sl(),u=t.queue;if(u===null)throw Error(S(311));u.lastRenderedReducer=l;var e=u.dispatch,n=u.pending,f=t.memoizedState;if(n!==null){u.pending=null;var c=n=n.next;do f=l(f,c.action),c=c.next;while(c!==n);kl(f,t.memoizedState)||(El=!0),t.memoizedState=f,t.baseQueue===null&&(t.baseState=f),u.lastRenderedState=f}return[f,e]}function A0(l,t,u){var e=x,n=Sl(),f=$;if(f){if(u===void 0)throw Error(S(407));u=u()}else u=t();var c=!kl((P||n).memoizedState,u);c&&(n.memoizedState=u,El=!0),n=n.queue;var i=_0.bind(null,e,n,l);if(Ja(2048,8,i,[l]),n.getSnapshot!==t||c||rl!==null&&rl.memoizedState.tag&1){if(e.flags|=2048,aa(9,ke(),O0.bind(null,e,n,u,t),null),nl===null)throw Error(S(349));f||($t&124)!==0||z0(e,t,u)}return u}function z0(l,t,u){l.flags|=16384,l={getSnapshot:t,value:u},t=x.updateQueue,t===null?(t=xf(),x.updateQueue=t,t.stores=[l]):(u=t.stores,u===null?t.stores=[l]:u.push(l))}function O0(l,t,u,e){t.value=u,t.getSnapshot=e,M0(t)&&D0(l)}function _0(l,t,u){return u(function(){M0(t)&&D0(l)})}function M0(l){var t=l.getSnapshot;l=l.value;try{var u=t();return!kl(l,u)}catch{return!0}}function D0(l){var t=Wu(l,2);t!==null&&ut(t,l,2)}function Vf(l){var t=jl();if(typeof l=="function"){var u=l;if(l=u(),Uu){Ct(!0);try{u()}finally{Ct(!1)}}}return t.memoizedState=t.baseState=l,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Yt,lastRenderedState:l},t}function U0(l,t,u,e){return l.baseState=u,jf(l,P,typeof e=="function"?e:Yt)}function Ed(l,t,u,e,n){if(Ie(l))throw Error(S(485));if(l=t.action,l!==null){var f={payload:n,action:l,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(c){f.listeners.push(c)}};b.T!==null?u(!0):f.isTransition=!1,e(f),u=t.pending,u===null?(f.next=t.pending=f,R0(t,f)):(f.next=u.next,t.pending=u.next=f)}}function R0(l,t){var u=t.action,e=t.payload,n=l.state;if(t.isTransition){var f=b.T,c={};b.T=c;try{var i=u(n,e),s=b.S;s!==null&&s(c,i),H0(l,t,i)}catch(o){Lf(l,t,o)}finally{b.T=f}}else try{f=u(n,e),H0(l,t,f)}catch(o){Lf(l,t,o)}}function H0(l,t,u){u!==null&&typeof u=="object"&&typeof u.then=="function"?u.then(function(e){N0(l,t,e)},function(e){return Lf(l,t,e)}):N0(l,t,u)}function N0(l,t,u){t.status="fulfilled",t.value=u,q0(t),l.state=u,t=l.pending,t!==null&&(u=t.next,u===t?l.pending=null:(u=u.next,t.next=u,R0(l,u)))}function Lf(l,t,u){var e=l.pending;if(l.pending=null,e!==null){e=e.next;do t.status="rejected",t.reason=u,q0(t),t=t.next;while(t!==e)}l.action=null}function q0(l){l=l.listeners;for(var t=0;t<l.length;t++)(0,l[t])()}function Y0(l,t){return t}function B0(l,t){if($){var u=nl.formState;if(u!==null){l:{var e=x;if($){if(yl){t:{for(var n=yl,f=bt;n.nodeType!==8;){if(!f){n=null;break t}if(n=rt(n.nextSibling),n===null){n=null;break t}}f=n.data,n=f==="F!"||f==="F"?n:null}if(n){yl=rt(n.nextSibling),e=n.data==="F!";break l}}Ou(e)}e=!1}e&&(t=u[0])}}return u=jl(),u.memoizedState=u.baseState=t,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Y0,lastRenderedState:t},u.queue=e,u=P0.bind(null,x,e),e.dispatch=u,e=Vf(!1),f=$f.bind(null,x,!1,e.queue),e=jl(),n={state:t,dispatch:null,action:l,pending:null},e.queue=n,u=Ed.bind(null,x,n,f,u),n.dispatch=u,e.memoizedState=l,[t,u,!1]}function p0(l){var t=Sl();return G0(t,P,l)}function G0(l,t,u){if(t=jf(l,t,Y0)[0],l=$e(Yt)[0],typeof t=="object"&&t!==null&&typeof t.then=="function")try{var e=Ka(t)}catch(c){throw c===xa?Ve:c}else e=t;t=Sl();var n=t.queue,f=n.dispatch;return u!==t.memoizedState&&(x.flags|=2048,aa(9,ke(),Ad.bind(null,n,u),null)),[e,f,l]}function Ad(l,t){l.action=t}function X0(l){var t=Sl(),u=P;if(u!==null)return G0(t,u,l);Sl(),t=t.memoizedState,u=Sl();var e=u.queue.dispatch;return u.memoizedState=l,[t,e,!1]}function aa(l,t,u,e){return l={tag:l,create:u,deps:e,inst:t,next:null},t=x.updateQueue,t===null&&(t=xf(),x.updateQueue=t),u=t.lastEffect,u===null?t.lastEffect=l.next=l:(e=u.next,u.next=l,l.next=e,t.lastEffect=l),l}function ke(){return{destroy:void 0,resource:void 0}}function Q0(){return Sl().memoizedState}function Fe(l,t,u,e){var n=jl();e=e===void 0?null:e,x.flags|=l,n.memoizedState=aa(1|t,ke(),u,e)}function Ja(l,t,u,e){var n=Sl();e=e===void 0?null:e;var f=n.memoizedState.inst;P!==null&&e!==null&&Bf(e,P.memoizedState.deps)?n.memoizedState=aa(t,f,u,e):(x.flags|=l,n.memoizedState=aa(1|t,f,u,e))}function x0(l,t){Fe(8390656,8,l,t)}function Z0(l,t){Ja(2048,8,l,t)}function j0(l,t){return Ja(4,2,l,t)}function C0(l,t){return Ja(4,4,l,t)}function V0(l,t){if(typeof t=="function"){l=l();var u=t(l);return function(){typeof u=="function"?u():t(null)}}if(t!=null)return l=l(),t.current=l,function(){t.current=null}}function L0(l,t,u){u=u!=null?u.concat([l]):null,Ja(4,4,V0.bind(null,t,l),u)}function Kf(){}function K0(l,t){var u=Sl();t=t===void 0?null:t;var e=u.memoizedState;return t!==null&&Bf(t,e[1])?e[0]:(u.memoizedState=[l,t],l)}function J0(l,t){var u=Sl();t=t===void 0?null:t;var e=u.memoizedState;if(t!==null&&Bf(t,e[1]))return e[0];if(e=l(),Uu){Ct(!0);try{l()}finally{Ct(!1)}}return u.memoizedState=[e,t],e}function Jf(l,t,u){return u===void 0||($t&1073741824)!==0?l.memoizedState=t:(l.memoizedState=u,l=$s(),x.lanes|=l,uu|=l,u)}function w0(l,t,u,e){return kl(u,t)?u:la.current!==null?(l=Jf(l,u,e),kl(l,t)||(El=!0),l):($t&42)===0?(El=!0,l.memoizedState=u):(l=$s(),x.lanes|=l,uu|=l,t)}function W0(l,t,u,e,n){var f=_.p;_.p=f!==0&&8>f?f:8;var c=b.T,i={};b.T=i,$f(l,!1,t,u);try{var s=n(),o=b.S;if(o!==null&&o(i,s),s!==null&&typeof s=="object"&&typeof s.then=="function"){var g=gd(s,e);wa(l,t,g,tt(l))}else wa(l,t,e,tt(l))}catch(E){wa(l,t,{then:function(){},status:"rejected",reason:E},tt())}finally{_.p=f,b.T=c}}function zd(){}function wf(l,t,u,e){if(l.tag!==5)throw Error(S(476));var n=$0(l).queue;W0(l,n,t,p,u===null?zd:function(){return k0(l),u(e)})}function $0(l){var t=l.memoizedState;if(t!==null)return t;t={memoizedState:p,baseState:p,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Yt,lastRenderedState:p},next:null};var u={};return t.next={memoizedState:u,baseState:u,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Yt,lastRenderedState:u},next:null},l.memoizedState=t,l=l.alternate,l!==null&&(l.memoizedState=t),t}function k0(l){var t=$0(l).next.queue;wa(l,t,{},tt())}function Wf(){return Nl(ye)}function F0(){return Sl().memoizedState}function I0(){return Sl().memoizedState}function Od(l){for(var t=l.return;t!==null;){switch(t.tag){case 24:case 3:var u=tt();l=wt(u);var e=Wt(t,l,u);e!==null&&(ut(e,t,u),ja(e,t,u)),t={cache:Of()},l.payload=t;return}t=t.return}}function _d(l,t,u){var e=tt();u={lane:e,revertLane:0,action:u,hasEagerState:!1,eagerState:null,next:null},Ie(l)?ls(t,u):(u=of(l,t,u,e),u!==null&&(ut(u,l,e),ts(u,t,e)))}function P0(l,t,u){var e=tt();wa(l,t,u,e)}function wa(l,t,u,e){var n={lane:e,revertLane:0,action:u,hasEagerState:!1,eagerState:null,next:null};if(Ie(l))ls(t,n);else{var f=l.alternate;if(l.lanes===0&&(f===null||f.lanes===0)&&(f=t.lastRenderedReducer,f!==null))try{var c=t.lastRenderedState,i=f(c,u);if(n.hasEagerState=!0,n.eagerState=i,kl(i,c))return pe(l,t,n,0),nl===null&&Be(),!1}catch{}finally{}if(u=of(l,t,n,e),u!==null)return ut(u,l,e),ts(u,t,e),!0}return!1}function $f(l,t,u,e){if(e={lane:2,revertLane:Dc(),action:e,hasEagerState:!1,eagerState:null,next:null},Ie(l)){if(t)throw Error(S(479))}else t=of(l,u,e,2),t!==null&&ut(t,l,2)}function Ie(l){var t=l.alternate;return l===x||t!==null&&t===x}function ls(l,t){ta=Je=!0;var u=l.pending;u===null?t.next=t:(t.next=u.next,u.next=t),l.pending=t}function ts(l,t,u){if((u&4194048)!==0){var e=t.lanes;e&=l.pendingLanes,u|=e,t.lanes=u,si(l,u)}}var Pe={readContext:Nl,use:We,useCallback:ol,useContext:ol,useEffect:ol,useImperativeHandle:ol,useLayoutEffect:ol,useInsertionEffect:ol,useMemo:ol,useReducer:ol,useRef:ol,useState:ol,useDebugValue:ol,useDeferredValue:ol,useTransition:ol,useSyncExternalStore:ol,useId:ol,useHostTransitionStatus:ol,useFormState:ol,useActionState:ol,useOptimistic:ol,useMemoCache:ol,useCacheRefresh:ol},us={readContext:Nl,use:We,useCallback:function(l,t){return jl().memoizedState=[l,t===void 0?null:t],l},useContext:Nl,useEffect:x0,useImperativeHandle:function(l,t,u){u=u!=null?u.concat([l]):null,Fe(4194308,4,V0.bind(null,t,l),u)},useLayoutEffect:function(l,t){return Fe(4194308,4,l,t)},useInsertionEffect:function(l,t){Fe(4,2,l,t)},useMemo:function(l,t){var u=jl();t=t===void 0?null:t;var e=l();if(Uu){Ct(!0);try{l()}finally{Ct(!1)}}return u.memoizedState=[e,t],e},useReducer:function(l,t,u){var e=jl();if(u!==void 0){var n=u(t);if(Uu){Ct(!0);try{u(t)}finally{Ct(!1)}}}else n=t;return e.memoizedState=e.baseState=n,l={pending:null,lanes:0,dispatch:null,lastRenderedReducer:l,lastRenderedState:n},e.queue=l,l=l.dispatch=_d.bind(null,x,l),[e.memoizedState,l]},useRef:function(l){var t=jl();return l={current:l},t.memoizedState=l},useState:function(l){l=Vf(l);var t=l.queue,u=P0.bind(null,x,t);return t.dispatch=u,[l.memoizedState,u]},useDebugValue:Kf,useDeferredValue:function(l,t){var u=jl();return Jf(u,l,t)},useTransition:function(){var l=Vf(!1);return l=W0.bind(null,x,l.queue,!0,!1),jl().memoizedState=l,[!1,l]},useSyncExternalStore:function(l,t,u){var e=x,n=jl();if($){if(u===void 0)throw Error(S(407));u=u()}else{if(u=t(),nl===null)throw Error(S(349));(L&124)!==0||z0(e,t,u)}n.memoizedState=u;var f={value:u,getSnapshot:t};return n.queue=f,x0(_0.bind(null,e,f,l),[l]),e.flags|=2048,aa(9,ke(),O0.bind(null,e,f,u,t),null),u},useId:function(){var l=jl(),t=nl.identifierPrefix;if($){var u=Ht,e=Rt;u=(e&~(1<<32-$l(e)-1)).toString(32)+u,t="«"+t+"R"+u,u=we++,0<u&&(t+="H"+u.toString(32)),t+="»"}else u=bd++,t="«"+t+"r"+u.toString(32)+"»";return l.memoizedState=t},useHostTransitionStatus:Wf,useFormState:B0,useActionState:B0,useOptimistic:function(l){var t=jl();t.memoizedState=t.baseState=l;var u={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=u,t=$f.bind(null,x,!0,u),u.dispatch=t,[l,t]},useMemoCache:Zf,useCacheRefresh:function(){return jl().memoizedState=Od.bind(null,x)}},as={readContext:Nl,use:We,useCallback:K0,useContext:Nl,useEffect:Z0,useImperativeHandle:L0,useInsertionEffect:j0,useLayoutEffect:C0,useMemo:J0,useReducer:$e,useRef:Q0,useState:function(){return $e(Yt)},useDebugValue:Kf,useDeferredValue:function(l,t){var u=Sl();return w0(u,P.memoizedState,l,t)},useTransition:function(){var l=$e(Yt)[0],t=Sl().memoizedState;return[typeof l=="boolean"?l:Ka(l),t]},useSyncExternalStore:A0,useId:F0,useHostTransitionStatus:Wf,useFormState:p0,useActionState:p0,useOptimistic:function(l,t){var u=Sl();return U0(u,P,l,t)},useMemoCache:Zf,useCacheRefresh:I0},Md={readContext:Nl,use:We,useCallback:K0,useContext:Nl,useEffect:Z0,useImperativeHandle:L0,useInsertionEffect:j0,useLayoutEffect:C0,useMemo:J0,useReducer:Cf,useRef:Q0,useState:function(){return Cf(Yt)},useDebugValue:Kf,useDeferredValue:function(l,t){var u=Sl();return P===null?Jf(u,l,t):w0(u,P.memoizedState,l,t)},useTransition:function(){var l=Cf(Yt)[0],t=Sl().memoizedState;return[typeof l=="boolean"?l:Ka(l),t]},useSyncExternalStore:A0,useId:F0,useHostTransitionStatus:Wf,useFormState:X0,useActionState:X0,useOptimistic:function(l,t){var u=Sl();return P!==null?U0(u,P,l,t):(u.baseState=l,[l,u.queue.dispatch])},useMemoCache:Zf,useCacheRefresh:I0},ea=null,Wa=0;function ln(l){var t=Wa;return Wa+=1,ea===null&&(ea=[]),o0(ea,l,t)}function $a(l,t){t=t.props.ref,l.ref=t!==void 0?t:null}function tn(l,t){throw t.$$typeof===fl?Error(S(525)):(l=Object.prototype.toString.call(t),Error(S(31,l==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":l)))}function es(l){var t=l._init;return t(l._payload)}function ns(l){function t(d,y){if(l){var h=d.deletions;h===null?(d.deletions=[y],d.flags|=16):h.push(y)}}function u(d,y){if(!l)return null;for(;y!==null;)t(d,y),y=y.sibling;return null}function e(d){for(var y=new Map;d!==null;)d.key!==null?y.set(d.key,d):y.set(d.index,d),d=d.sibling;return y}function n(d,y){return d=Ut(d,y),d.index=0,d.sibling=null,d}function f(d,y,h){return d.index=h,l?(h=d.alternate,h!==null?(h=h.index,h<y?(d.flags|=67108866,y):h):(d.flags|=67108866,y)):(d.flags|=1048576,y)}function c(d){return l&&d.alternate===null&&(d.flags|=67108866),d}function i(d,y,h,T){return y===null||y.tag!==6?(y=rf(h,d.mode,T),y.return=d,y):(y=n(y,h),y.return=d,y)}function s(d,y,h,T){var D=h.type;return D===pl?g(d,y,h.props.children,T,h.key):y!==null&&(y.elementType===D||typeof D=="object"&&D!==null&&D.$$typeof===Jl&&es(D)===y.type)?(y=n(y,h.props),$a(y,h),y.return=d,y):(y=Xe(h.type,h.key,h.props,null,d.mode,T),$a(y,h),y.return=d,y)}function o(d,y,h,T){return y===null||y.tag!==4||y.stateNode.containerInfo!==h.containerInfo||y.stateNode.implementation!==h.implementation?(y=Sf(h,d.mode,T),y.return=d,y):(y=n(y,h.children||[]),y.return=d,y)}function g(d,y,h,T,D){return y===null||y.tag!==7?(y=Tu(h,d.mode,T,D),y.return=d,y):(y=n(y,h),y.return=d,y)}function E(d,y,h){if(typeof y=="string"&&y!==""||typeof y=="number"||typeof y=="bigint")return y=rf(""+y,d.mode,h),y.return=d,y;if(typeof y=="object"&&y!==null){switch(y.$$typeof){case el:return h=Xe(y.type,y.key,y.props,null,d.mode,h),$a(h,y),h.return=d,h;case Bl:return y=Sf(y,d.mode,h),y.return=d,y;case Jl:var T=y._init;return y=T(y._payload),E(d,y,h)}if(Rl(y)||Ul(y))return y=Tu(y,d.mode,h,null),y.return=d,y;if(typeof y.then=="function")return E(d,ln(y),h);if(y.$$typeof===Dl)return E(d,je(d,y),h);tn(d,y)}return null}function m(d,y,h,T){var D=y!==null?y.key:null;if(typeof h=="string"&&h!==""||typeof h=="number"||typeof h=="bigint")return D!==null?null:i(d,y,""+h,T);if(typeof h=="object"&&h!==null){switch(h.$$typeof){case el:return h.key===D?s(d,y,h,T):null;case Bl:return h.key===D?o(d,y,h,T):null;case Jl:return D=h._init,h=D(h._payload),m(d,y,h,T)}if(Rl(h)||Ul(h))return D!==null?null:g(d,y,h,T,null);if(typeof h.then=="function")return m(d,y,ln(h),T);if(h.$$typeof===Dl)return m(d,y,je(d,h),T);tn(d,h)}return null}function r(d,y,h,T,D){if(typeof T=="string"&&T!==""||typeof T=="number"||typeof T=="bigint")return d=d.get(h)||null,i(y,d,""+T,D);if(typeof T=="object"&&T!==null){switch(T.$$typeof){case el:return d=d.get(T.key===null?h:T.key)||null,s(y,d,T,D);case Bl:return d=d.get(T.key===null?h:T.key)||null,o(y,d,T,D);case Jl:var Z=T._init;return T=Z(T._payload),r(d,y,h,T,D)}if(Rl(T)||Ul(T))return d=d.get(h)||null,g(y,d,T,D,null);if(typeof T.then=="function")return r(d,y,h,ln(T),D);if(T.$$typeof===Dl)return r(d,y,h,je(y,T),D);tn(y,T)}return null}function G(d,y,h,T){for(var D=null,Z=null,R=y,B=y=0,zl=null;R!==null&&B<h.length;B++){R.index>B?(zl=R,R=null):zl=R.sibling;var w=m(d,R,h[B],T);if(w===null){R===null&&(R=zl);break}l&&R&&w.alternate===null&&t(d,R),y=f(w,y,B),Z===null?D=w:Z.sibling=w,Z=w,R=zl}if(B===h.length)return u(d,R),$&&Au(d,B),D;if(R===null){for(;B<h.length;B++)R=E(d,h[B],T),R!==null&&(y=f(R,y,B),Z===null?D=R:Z.sibling=R,Z=R);return $&&Au(d,B),D}for(R=e(R);B<h.length;B++)zl=r(R,d,B,h[B],T),zl!==null&&(l&&zl.alternate!==null&&R.delete(zl.key===null?B:zl.key),y=f(zl,y,B),Z===null?D=zl:Z.sibling=zl,Z=zl);return l&&R.forEach(function(yu){return t(d,yu)}),$&&Au(d,B),D}function Y(d,y,h,T){if(h==null)throw Error(S(151));for(var D=null,Z=null,R=y,B=y=0,zl=null,w=h.next();R!==null&&!w.done;B++,w=h.next()){R.index>B?(zl=R,R=null):zl=R.sibling;var yu=m(d,R,w.value,T);if(yu===null){R===null&&(R=zl);break}l&&R&&yu.alternate===null&&t(d,R),y=f(yu,y,B),Z===null?D=yu:Z.sibling=yu,Z=yu,R=zl}if(w.done)return u(d,R),$&&Au(d,B),D;if(R===null){for(;!w.done;B++,w=h.next())w=E(d,w.value,T),w!==null&&(y=f(w,y,B),Z===null?D=w:Z.sibling=w,Z=w);return $&&Au(d,B),D}for(R=e(R);!w.done;B++,w=h.next())w=r(R,d,B,w.value,T),w!==null&&(l&&w.alternate!==null&&R.delete(w.key===null?B:w.key),y=f(w,y,B),Z===null?D=w:Z.sibling=w,Z=w);return l&&R.forEach(function(D1){return t(d,D1)}),$&&Au(d,B),D}function tl(d,y,h,T){if(typeof h=="object"&&h!==null&&h.type===pl&&h.key===null&&(h=h.props.children),typeof h=="object"&&h!==null){switch(h.$$typeof){case el:l:{for(var D=h.key;y!==null;){if(y.key===D){if(D=h.type,D===pl){if(y.tag===7){u(d,y.sibling),T=n(y,h.props.children),T.return=d,d=T;break l}}else if(y.elementType===D||typeof D=="object"&&D!==null&&D.$$typeof===Jl&&es(D)===y.type){u(d,y.sibling),T=n(y,h.props),$a(T,h),T.return=d,d=T;break l}u(d,y);break}else t(d,y);y=y.sibling}h.type===pl?(T=Tu(h.props.children,d.mode,T,h.key),T.return=d,d=T):(T=Xe(h.type,h.key,h.props,null,d.mode,T),$a(T,h),T.return=d,d=T)}return c(d);case Bl:l:{for(D=h.key;y!==null;){if(y.key===D)if(y.tag===4&&y.stateNode.containerInfo===h.containerInfo&&y.stateNode.implementation===h.implementation){u(d,y.sibling),T=n(y,h.children||[]),T.return=d,d=T;break l}else{u(d,y);break}else t(d,y);y=y.sibling}T=Sf(h,d.mode,T),T.return=d,d=T}return c(d);case Jl:return D=h._init,h=D(h._payload),tl(d,y,h,T)}if(Rl(h))return G(d,y,h,T);if(Ul(h)){if(D=Ul(h),typeof D!="function")throw Error(S(150));return h=D.call(h),Y(d,y,h,T)}if(typeof h.then=="function")return tl(d,y,ln(h),T);if(h.$$typeof===Dl)return tl(d,y,je(d,h),T);tn(d,h)}return typeof h=="string"&&h!==""||typeof h=="number"||typeof h=="bigint"?(h=""+h,y!==null&&y.tag===6?(u(d,y.sibling),T=n(y,h),T.return=d,d=T):(u(d,y),T=rf(h,d.mode,T),T.return=d,d=T),c(d)):u(d,y)}return function(d,y,h,T){try{Wa=0;var D=tl(d,y,h,T);return ea=null,D}catch(R){if(R===xa||R===Ve)throw R;var Z=Fl(29,R,null,d.mode);return Z.lanes=T,Z.return=d,Z}finally{}}}var na=ns(!0),fs=ns(!1),st=A(null),Tt=null;function kt(l){var t=l.alternate;O(bl,bl.current&1),O(st,l),Tt===null&&(t===null||la.current!==null||t.memoizedState!==null)&&(Tt=l)}function cs(l){if(l.tag===22){if(O(bl,bl.current),O(st,l),Tt===null){var t=l.alternate;t!==null&&t.memoizedState!==null&&(Tt=l)}}else Ft()}function Ft(){O(bl,bl.current),O(st,st.current)}function Bt(l){M(st),Tt===l&&(Tt=null),M(bl)}var bl=A(0);function un(l){for(var t=l;t!==null;){if(t.tag===13){var u=t.memoizedState;if(u!==null&&(u=u.dehydrated,u===null||u.data==="$?"||xc(u)))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if((t.flags&128)!==0)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===l)break;for(;t.sibling===null;){if(t.return===null||t.return===l)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function kf(l,t,u,e){t=l.memoizedState,u=u(e,t),u=u==null?t:H({},t,u),l.memoizedState=u,l.lanes===0&&(l.updateQueue.baseState=u)}var Ff={enqueueSetState:function(l,t,u){l=l._reactInternals;var e=tt(),n=wt(e);n.payload=t,u!=null&&(n.callback=u),t=Wt(l,n,e),t!==null&&(ut(t,l,e),ja(t,l,e))},enqueueReplaceState:function(l,t,u){l=l._reactInternals;var e=tt(),n=wt(e);n.tag=1,n.payload=t,u!=null&&(n.callback=u),t=Wt(l,n,e),t!==null&&(ut(t,l,e),ja(t,l,e))},enqueueForceUpdate:function(l,t){l=l._reactInternals;var u=tt(),e=wt(u);e.tag=2,t!=null&&(e.callback=t),t=Wt(l,e,u),t!==null&&(ut(t,l,u),ja(t,l,u))}};function is(l,t,u,e,n,f,c){return l=l.stateNode,typeof l.shouldComponentUpdate=="function"?l.shouldComponentUpdate(e,f,c):t.prototype&&t.prototype.isPureReactComponent?!Na(u,e)||!Na(n,f):!0}function ss(l,t,u,e){l=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(u,e),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(u,e),t.state!==l&&Ff.enqueueReplaceState(t,t.state,null)}function Ru(l,t){var u=t;if("ref"in t){u={};for(var e in t)e!=="ref"&&(u[e]=t[e])}if(l=l.defaultProps){u===t&&(u=H({},u));for(var n in l)u[n]===void 0&&(u[n]=l[n])}return u}var an=typeof reportError=="function"?reportError:function(l){if(typeof window=="object"&&typeof window.ErrorEvent=="function"){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:typeof l=="object"&&l!==null&&typeof l.message=="string"?String(l.message):String(l),error:l});if(!window.dispatchEvent(t))return}else if(typeof process=="object"&&typeof process.emit=="function"){process.emit("uncaughtException",l);return}console.error(l)};function vs(l){an(l)}function ys(l){console.error(l)}function ds(l){an(l)}function en(l,t){try{var u=l.onUncaughtError;u(t.value,{componentStack:t.stack})}catch(e){setTimeout(function(){throw e})}}function hs(l,t,u){try{var e=l.onCaughtError;e(u.value,{componentStack:u.stack,errorBoundary:t.tag===1?t.stateNode:null})}catch(n){setTimeout(function(){throw n})}}function If(l,t,u){return u=wt(u),u.tag=3,u.payload={element:null},u.callback=function(){en(l,t)},u}function os(l){return l=wt(l),l.tag=3,l}function ms(l,t,u,e){var n=u.type.getDerivedStateFromError;if(typeof n=="function"){var f=e.value;l.payload=function(){return n(f)},l.callback=function(){hs(t,u,e)}}var c=u.stateNode;c!==null&&typeof c.componentDidCatch=="function"&&(l.callback=function(){hs(t,u,e),typeof n!="function"&&(au===null?au=new Set([this]):au.add(this));var i=e.stack;this.componentDidCatch(e.value,{componentStack:i!==null?i:""})})}function Dd(l,t,u,e,n){if(u.flags|=32768,e!==null&&typeof e=="object"&&typeof e.then=="function"){if(t=u.alternate,t!==null&&Ga(t,u,n,!0),u=st.current,u!==null){switch(u.tag){case 13:return Tt===null?Ac():u.alternate===null&&dl===0&&(dl=3),u.flags&=-257,u.flags|=65536,u.lanes=n,e===Df?u.flags|=16384:(t=u.updateQueue,t===null?u.updateQueue=new Set([e]):t.add(e),Oc(l,e,n)),!1;case 22:return u.flags|=65536,e===Df?u.flags|=16384:(t=u.updateQueue,t===null?(t={transitions:null,markerInstances:null,retryQueue:new Set([e])},u.updateQueue=t):(u=t.retryQueue,u===null?t.retryQueue=new Set([e]):u.add(e)),Oc(l,e,n)),!1}throw Error(S(435,u.tag))}return Oc(l,e,n),Ac(),!1}if($)return t=st.current,t!==null?((t.flags&65536)===0&&(t.flags|=256),t.flags|=65536,t.lanes=n,e!==Tf&&(l=Error(S(422),{cause:e}),pa(nt(l,u)))):(e!==Tf&&(t=Error(S(423),{cause:e}),pa(nt(t,u))),l=l.current.alternate,l.flags|=65536,n&=-n,l.lanes|=n,e=nt(e,u),n=If(l.stateNode,e,n),Hf(l,n),dl!==4&&(dl=2)),!1;var f=Error(S(520),{cause:e});if(f=nt(f,u),ue===null?ue=[f]:ue.push(f),dl!==4&&(dl=2),t===null)return!0;e=nt(e,u),u=t;do{switch(u.tag){case 3:return u.flags|=65536,l=n&-n,u.lanes|=l,l=If(u.stateNode,e,l),Hf(u,l),!1;case 1:if(t=u.type,f=u.stateNode,(u.flags&128)===0&&(typeof t.getDerivedStateFromError=="function"||f!==null&&typeof f.componentDidCatch=="function"&&(au===null||!au.has(f))))return u.flags|=65536,n&=-n,u.lanes|=n,n=os(n),ms(n,l,u,e),Hf(u,n),!1}u=u.return}while(u!==null);return!1}var rs=Error(S(461)),El=!1;function Ol(l,t,u,e){t.child=l===null?fs(t,null,u,e):na(t,l.child,u,e)}function Ss(l,t,u,e,n){u=u.render;var f=t.ref;if("ref"in e){var c={};for(var i in e)i!=="ref"&&(c[i]=e[i])}else c=e;return Mu(t),e=pf(l,t,u,c,f,n),i=Gf(),l!==null&&!El?(Xf(l,t,n),pt(l,t,n)):($&&i&&gf(t),t.flags|=1,Ol(l,t,e,n),t.child)}function gs(l,t,u,e,n){if(l===null){var f=u.type;return typeof f=="function"&&!mf(f)&&f.defaultProps===void 0&&u.compare===null?(t.tag=15,t.type=f,bs(l,t,f,e,n)):(l=Xe(u.type,null,e,t,t.mode,n),l.ref=t.ref,l.return=t,t.child=l)}if(f=l.child,!fc(l,n)){var c=f.memoizedProps;if(u=u.compare,u=u!==null?u:Na,u(c,e)&&l.ref===t.ref)return pt(l,t,n)}return t.flags|=1,l=Ut(f,e),l.ref=t.ref,l.return=t,t.child=l}function bs(l,t,u,e,n){if(l!==null){var f=l.memoizedProps;if(Na(f,e)&&l.ref===t.ref)if(El=!1,t.pendingProps=e=f,fc(l,n))(l.flags&131072)!==0&&(El=!0);else return t.lanes=l.lanes,pt(l,t,n)}return Pf(l,t,u,e,n)}function Ts(l,t,u){var e=t.pendingProps,n=e.children,f=l!==null?l.memoizedState:null;if(e.mode==="hidden"){if((t.flags&128)!==0){if(e=f!==null?f.baseLanes|u:u,l!==null){for(n=t.child=l.child,f=0;n!==null;)f=f|n.lanes|n.childLanes,n=n.sibling;t.childLanes=f&~e}else t.childLanes=0,t.child=null;return Es(l,t,e,u)}if((u&536870912)!==0)t.memoizedState={baseLanes:0,cachePool:null},l!==null&&Ce(t,f!==null?f.cachePool:null),f!==null?b0(t,f):qf(),cs(t);else return t.lanes=t.childLanes=536870912,Es(l,t,f!==null?f.baseLanes|u:u,u)}else f!==null?(Ce(t,f.cachePool),b0(t,f),Ft(),t.memoizedState=null):(l!==null&&Ce(t,null),qf(),Ft());return Ol(l,t,n,u),t.child}function Es(l,t,u,e){var n=Mf();return n=n===null?null:{parent:gl._currentValue,pool:n},t.memoizedState={baseLanes:u,cachePool:n},l!==null&&Ce(t,null),qf(),cs(t),l!==null&&Ga(l,t,e,!0),null}function nn(l,t){var u=t.ref;if(u===null)l!==null&&l.ref!==null&&(t.flags|=4194816);else{if(typeof u!="function"&&typeof u!="object")throw Error(S(284));(l===null||l.ref!==u)&&(t.flags|=4194816)}}function Pf(l,t,u,e,n){return Mu(t),u=pf(l,t,u,e,void 0,n),e=Gf(),l!==null&&!El?(Xf(l,t,n),pt(l,t,n)):($&&e&&gf(t),t.flags|=1,Ol(l,t,u,n),t.child)}function As(l,t,u,e,n,f){return Mu(t),t.updateQueue=null,u=E0(t,e,u,n),T0(l),e=Gf(),l!==null&&!El?(Xf(l,t,f),pt(l,t,f)):($&&e&&gf(t),t.flags|=1,Ol(l,t,u,f),t.child)}function zs(l,t,u,e,n){if(Mu(t),t.stateNode===null){var f=$u,c=u.contextType;typeof c=="object"&&c!==null&&(f=Nl(c)),f=new u(e,f),t.memoizedState=f.state!==null&&f.state!==void 0?f.state:null,f.updater=Ff,t.stateNode=f,f._reactInternals=t,f=t.stateNode,f.props=e,f.state=t.memoizedState,f.refs={},Uf(t),c=u.contextType,f.context=typeof c=="object"&&c!==null?Nl(c):$u,f.state=t.memoizedState,c=u.getDerivedStateFromProps,typeof c=="function"&&(kf(t,u,c,e),f.state=t.memoizedState),typeof u.getDerivedStateFromProps=="function"||typeof f.getSnapshotBeforeUpdate=="function"||typeof f.UNSAFE_componentWillMount!="function"&&typeof f.componentWillMount!="function"||(c=f.state,typeof f.componentWillMount=="function"&&f.componentWillMount(),typeof f.UNSAFE_componentWillMount=="function"&&f.UNSAFE_componentWillMount(),c!==f.state&&Ff.enqueueReplaceState(f,f.state,null),Va(t,e,f,n),Ca(),f.state=t.memoizedState),typeof f.componentDidMount=="function"&&(t.flags|=4194308),e=!0}else if(l===null){f=t.stateNode;var i=t.memoizedProps,s=Ru(u,i);f.props=s;var o=f.context,g=u.contextType;c=$u,typeof g=="object"&&g!==null&&(c=Nl(g));var E=u.getDerivedStateFromProps;g=typeof E=="function"||typeof f.getSnapshotBeforeUpdate=="function",i=t.pendingProps!==i,g||typeof f.UNSAFE_componentWillReceiveProps!="function"&&typeof f.componentWillReceiveProps!="function"||(i||o!==c)&&ss(t,f,e,c),Jt=!1;var m=t.memoizedState;f.state=m,Va(t,e,f,n),Ca(),o=t.memoizedState,i||m!==o||Jt?(typeof E=="function"&&(kf(t,u,E,e),o=t.memoizedState),(s=Jt||is(t,u,s,e,m,o,c))?(g||typeof f.UNSAFE_componentWillMount!="function"&&typeof f.componentWillMount!="function"||(typeof f.componentWillMount=="function"&&f.componentWillMount(),typeof f.UNSAFE_componentWillMount=="function"&&f.UNSAFE_componentWillMount()),typeof f.componentDidMount=="function"&&(t.flags|=4194308)):(typeof f.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=e,t.memoizedState=o),f.props=e,f.state=o,f.context=c,e=s):(typeof f.componentDidMount=="function"&&(t.flags|=4194308),e=!1)}else{f=t.stateNode,Rf(l,t),c=t.memoizedProps,g=Ru(u,c),f.props=g,E=t.pendingProps,m=f.context,o=u.contextType,s=$u,typeof o=="object"&&o!==null&&(s=Nl(o)),i=u.getDerivedStateFromProps,(o=typeof i=="function"||typeof f.getSnapshotBeforeUpdate=="function")||typeof f.UNSAFE_componentWillReceiveProps!="function"&&typeof f.componentWillReceiveProps!="function"||(c!==E||m!==s)&&ss(t,f,e,s),Jt=!1,m=t.memoizedState,f.state=m,Va(t,e,f,n),Ca();var r=t.memoizedState;c!==E||m!==r||Jt||l!==null&&l.dependencies!==null&&Ze(l.dependencies)?(typeof i=="function"&&(kf(t,u,i,e),r=t.memoizedState),(g=Jt||is(t,u,g,e,m,r,s)||l!==null&&l.dependencies!==null&&Ze(l.dependencies))?(o||typeof f.UNSAFE_componentWillUpdate!="function"&&typeof f.componentWillUpdate!="function"||(typeof f.componentWillUpdate=="function"&&f.componentWillUpdate(e,r,s),typeof f.UNSAFE_componentWillUpdate=="function"&&f.UNSAFE_componentWillUpdate(e,r,s)),typeof f.componentDidUpdate=="function"&&(t.flags|=4),typeof f.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof f.componentDidUpdate!="function"||c===l.memoizedProps&&m===l.memoizedState||(t.flags|=4),typeof f.getSnapshotBeforeUpdate!="function"||c===l.memoizedProps&&m===l.memoizedState||(t.flags|=1024),t.memoizedProps=e,t.memoizedState=r),f.props=e,f.state=r,f.context=s,e=g):(typeof f.componentDidUpdate!="function"||c===l.memoizedProps&&m===l.memoizedState||(t.flags|=4),typeof f.getSnapshotBeforeUpdate!="function"||c===l.memoizedProps&&m===l.memoizedState||(t.flags|=1024),e=!1)}return f=e,nn(l,t),e=(t.flags&128)!==0,f||e?(f=t.stateNode,u=e&&typeof u.getDerivedStateFromError!="function"?null:f.render(),t.flags|=1,l!==null&&e?(t.child=na(t,l.child,null,n),t.child=na(t,null,u,n)):Ol(l,t,u,n),t.memoizedState=f.state,l=t.child):l=pt(l,t,n),l}function Os(l,t,u,e){return Ba(),t.flags|=256,Ol(l,t,u,e),t.child}var lc={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function tc(l){return{baseLanes:l,cachePool:y0()}}function uc(l,t,u){return l=l!==null?l.childLanes&~u:0,t&&(l|=vt),l}function _s(l,t,u){var e=t.pendingProps,n=!1,f=(t.flags&128)!==0,c;if((c=f)||(c=l!==null&&l.memoizedState===null?!1:(bl.current&2)!==0),c&&(n=!0,t.flags&=-129),c=(t.flags&32)!==0,t.flags&=-33,l===null){if($){if(n?kt(t):Ft(),$){var i=yl,s;if(s=i){l:{for(s=i,i=bt;s.nodeType!==8;){if(!i){i=null;break l}if(s=rt(s.nextSibling),s===null){i=null;break l}}i=s}i!==null?(t.memoizedState={dehydrated:i,treeContext:Eu!==null?{id:Rt,overflow:Ht}:null,retryLane:536870912,hydrationErrors:null},s=Fl(18,null,null,0),s.stateNode=i,s.return=t,t.child=s,Gl=t,yl=null,s=!0):s=!1}s||Ou(t)}if(i=t.memoizedState,i!==null&&(i=i.dehydrated,i!==null))return xc(i)?t.lanes=32:t.lanes=536870912,null;Bt(t)}return i=e.children,e=e.fallback,n?(Ft(),n=t.mode,i=fn({mode:"hidden",children:i},n),e=Tu(e,n,u,null),i.return=t,e.return=t,i.sibling=e,t.child=i,n=t.child,n.memoizedState=tc(u),n.childLanes=uc(l,c,u),t.memoizedState=lc,e):(kt(t),ac(t,i))}if(s=l.memoizedState,s!==null&&(i=s.dehydrated,i!==null)){if(f)t.flags&256?(kt(t),t.flags&=-257,t=ec(l,t,u)):t.memoizedState!==null?(Ft(),t.child=l.child,t.flags|=128,t=null):(Ft(),n=e.fallback,i=t.mode,e=fn({mode:"visible",children:e.children},i),n=Tu(n,i,u,null),n.flags|=2,e.return=t,n.return=t,e.sibling=n,t.child=e,na(t,l.child,null,u),e=t.child,e.memoizedState=tc(u),e.childLanes=uc(l,c,u),t.memoizedState=lc,t=n);else if(kt(t),xc(i)){if(c=i.nextSibling&&i.nextSibling.dataset,c)var o=c.dgst;c=o,e=Error(S(419)),e.stack="",e.digest=c,pa({value:e,source:null,stack:null}),t=ec(l,t,u)}else if(El||Ga(l,t,u,!1),c=(u&l.childLanes)!==0,El||c){if(c=nl,c!==null&&(e=u&-u,e=(e&42)!==0?1:xn(e),e=(e&(c.suspendedLanes|u))!==0?0:e,e!==0&&e!==s.retryLane))throw s.retryLane=e,Wu(l,e),ut(c,l,e),rs;i.data==="$?"||Ac(),t=ec(l,t,u)}else i.data==="$?"?(t.flags|=192,t.child=l.child,t=null):(l=s.treeContext,yl=rt(i.nextSibling),Gl=t,$=!0,zu=null,bt=!1,l!==null&&(ct[it++]=Rt,ct[it++]=Ht,ct[it++]=Eu,Rt=l.id,Ht=l.overflow,Eu=t),t=ac(t,e.children),t.flags|=4096);return t}return n?(Ft(),n=e.fallback,i=t.mode,s=l.child,o=s.sibling,e=Ut(s,{mode:"hidden",children:e.children}),e.subtreeFlags=s.subtreeFlags&65011712,o!==null?n=Ut(o,n):(n=Tu(n,i,u,null),n.flags|=2),n.return=t,e.return=t,e.sibling=n,t.child=e,e=n,n=t.child,i=l.child.memoizedState,i===null?i=tc(u):(s=i.cachePool,s!==null?(o=gl._currentValue,s=s.parent!==o?{parent:o,pool:o}:s):s=y0(),i={baseLanes:i.baseLanes|u,cachePool:s}),n.memoizedState=i,n.childLanes=uc(l,c,u),t.memoizedState=lc,e):(kt(t),u=l.child,l=u.sibling,u=Ut(u,{mode:"visible",children:e.children}),u.return=t,u.sibling=null,l!==null&&(c=t.deletions,c===null?(t.deletions=[l],t.flags|=16):c.push(l)),t.child=u,t.memoizedState=null,u)}function ac(l,t){return t=fn({mode:"visible",children:t},l.mode),t.return=l,l.child=t}function fn(l,t){return l=Fl(22,l,null,t),l.lanes=0,l.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},l}function ec(l,t,u){return na(t,l.child,null,u),l=ac(t,t.pendingProps.children),l.flags|=2,t.memoizedState=null,l}function Ms(l,t,u){l.lanes|=t;var e=l.alternate;e!==null&&(e.lanes|=t),Af(l.return,t,u)}function nc(l,t,u,e,n){var f=l.memoizedState;f===null?l.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:e,tail:u,tailMode:n}:(f.isBackwards=t,f.rendering=null,f.renderingStartTime=0,f.last=e,f.tail=u,f.tailMode=n)}function Ds(l,t,u){var e=t.pendingProps,n=e.revealOrder,f=e.tail;if(Ol(l,t,e.children,u),e=bl.current,(e&2)!==0)e=e&1|2,t.flags|=128;else{if(l!==null&&(l.flags&128)!==0)l:for(l=t.child;l!==null;){if(l.tag===13)l.memoizedState!==null&&Ms(l,u,t);else if(l.tag===19)Ms(l,u,t);else if(l.child!==null){l.child.return=l,l=l.child;continue}if(l===t)break l;for(;l.sibling===null;){if(l.return===null||l.return===t)break l;l=l.return}l.sibling.return=l.return,l=l.sibling}e&=1}switch(O(bl,e),n){case"forwards":for(u=t.child,n=null;u!==null;)l=u.alternate,l!==null&&un(l)===null&&(n=u),u=u.sibling;u=n,u===null?(n=t.child,t.child=null):(n=u.sibling,u.sibling=null),nc(t,!1,n,u,f);break;case"backwards":for(u=null,n=t.child,t.child=null;n!==null;){if(l=n.alternate,l!==null&&un(l)===null){t.child=n;break}l=n.sibling,n.sibling=u,u=n,n=l}nc(t,!0,u,null,f);break;case"together":nc(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function pt(l,t,u){if(l!==null&&(t.dependencies=l.dependencies),uu|=t.lanes,(u&t.childLanes)===0)if(l!==null){if(Ga(l,t,u,!1),(u&t.childLanes)===0)return null}else return null;if(l!==null&&t.child!==l.child)throw Error(S(153));if(t.child!==null){for(l=t.child,u=Ut(l,l.pendingProps),t.child=u,u.return=t;l.sibling!==null;)l=l.sibling,u=u.sibling=Ut(l,l.pendingProps),u.return=t;u.sibling=null}return t.child}function fc(l,t){return(l.lanes&t)!==0?!0:(l=l.dependencies,!!(l!==null&&Ze(l)))}function Ud(l,t,u){switch(t.tag){case 3:cl(t,t.stateNode.containerInfo),Kt(t,gl,l.memoizedState.cache),Ba();break;case 27:case 5:Bn(t);break;case 4:cl(t,t.stateNode.containerInfo);break;case 10:Kt(t,t.type,t.memoizedProps.value);break;case 13:var e=t.memoizedState;if(e!==null)return e.dehydrated!==null?(kt(t),t.flags|=128,null):(u&t.child.childLanes)!==0?_s(l,t,u):(kt(t),l=pt(l,t,u),l!==null?l.sibling:null);kt(t);break;case 19:var n=(l.flags&128)!==0;if(e=(u&t.childLanes)!==0,e||(Ga(l,t,u,!1),e=(u&t.childLanes)!==0),n){if(e)return Ds(l,t,u);t.flags|=128}if(n=t.memoizedState,n!==null&&(n.rendering=null,n.tail=null,n.lastEffect=null),O(bl,bl.current),e)break;return null;case 22:case 23:return t.lanes=0,Ts(l,t,u);case 24:Kt(t,gl,l.memoizedState.cache)}return pt(l,t,u)}function Us(l,t,u){if(l!==null)if(l.memoizedProps!==t.pendingProps)El=!0;else{if(!fc(l,u)&&(t.flags&128)===0)return El=!1,Ud(l,t,u);El=(l.flags&131072)!==0}else El=!1,$&&(t.flags&1048576)!==0&&e0(t,xe,t.index);switch(t.lanes=0,t.tag){case 16:l:{l=t.pendingProps;var e=t.elementType,n=e._init;if(e=n(e._payload),t.type=e,typeof e=="function")mf(e)?(l=Ru(e,l),t.tag=1,t=zs(null,t,e,l,u)):(t.tag=0,t=Pf(null,t,e,l,u));else{if(e!=null){if(n=e.$$typeof,n===ht){t.tag=11,t=Ss(null,t,e,l,u);break l}else if(n===Kl){t.tag=14,t=gs(null,t,e,l,u);break l}}throw t=ou(e)||e,Error(S(306,t,""))}}return t;case 0:return Pf(l,t,t.type,t.pendingProps,u);case 1:return e=t.type,n=Ru(e,t.pendingProps),zs(l,t,e,n,u);case 3:l:{if(cl(t,t.stateNode.containerInfo),l===null)throw Error(S(387));e=t.pendingProps;var f=t.memoizedState;n=f.element,Rf(l,t),Va(t,e,null,u);var c=t.memoizedState;if(e=c.cache,Kt(t,gl,e),e!==f.cache&&zf(t,[gl],u,!0),Ca(),e=c.element,f.isDehydrated)if(f={element:e,isDehydrated:!1,cache:c.cache},t.updateQueue.baseState=f,t.memoizedState=f,t.flags&256){t=Os(l,t,e,u);break l}else if(e!==n){n=nt(Error(S(424)),t),pa(n),t=Os(l,t,e,u);break l}else{switch(l=t.stateNode.containerInfo,l.nodeType){case 9:l=l.body;break;default:l=l.nodeName==="HTML"?l.ownerDocument.body:l}for(yl=rt(l.firstChild),Gl=t,$=!0,zu=null,bt=!0,u=fs(t,null,e,u),t.child=u;u;)u.flags=u.flags&-3|4096,u=u.sibling}else{if(Ba(),e===n){t=pt(l,t,u);break l}Ol(l,t,e,u)}t=t.child}return t;case 26:return nn(l,t),l===null?(u=qv(t.type,null,t.pendingProps,null))?t.memoizedState=u:$||(u=t.type,l=t.pendingProps,e=En(X.current).createElement(u),e[Hl]=t,e[xl]=l,Ml(e,u,l),Tl(e),t.stateNode=e):t.memoizedState=qv(t.type,l.memoizedProps,t.pendingProps,l.memoizedState),null;case 27:return Bn(t),l===null&&$&&(e=t.stateNode=Rv(t.type,t.pendingProps,X.current),Gl=t,bt=!0,n=yl,fu(t.type)?(Zc=n,yl=rt(e.firstChild)):yl=n),Ol(l,t,t.pendingProps.children,u),nn(l,t),l===null&&(t.flags|=4194304),t.child;case 5:return l===null&&$&&((n=e=yl)&&(e=u1(e,t.type,t.pendingProps,bt),e!==null?(t.stateNode=e,Gl=t,yl=rt(e.firstChild),bt=!1,n=!0):n=!1),n||Ou(t)),Bn(t),n=t.type,f=t.pendingProps,c=l!==null?l.memoizedProps:null,e=f.children,Gc(n,f)?e=null:c!==null&&Gc(n,c)&&(t.flags|=32),t.memoizedState!==null&&(n=pf(l,t,Td,null,null,u),ye._currentValue=n),nn(l,t),Ol(l,t,e,u),t.child;case 6:return l===null&&$&&((l=u=yl)&&(u=a1(u,t.pendingProps,bt),u!==null?(t.stateNode=u,Gl=t,yl=null,l=!0):l=!1),l||Ou(t)),null;case 13:return _s(l,t,u);case 4:return cl(t,t.stateNode.containerInfo),e=t.pendingProps,l===null?t.child=na(t,null,e,u):Ol(l,t,e,u),t.child;case 11:return Ss(l,t,t.type,t.pendingProps,u);case 7:return Ol(l,t,t.pendingProps,u),t.child;case 8:return Ol(l,t,t.pendingProps.children,u),t.child;case 12:return Ol(l,t,t.pendingProps.children,u),t.child;case 10:return e=t.pendingProps,Kt(t,t.type,e.value),Ol(l,t,e.children,u),t.child;case 9:return n=t.type._context,e=t.pendingProps.children,Mu(t),n=Nl(n),e=e(n),t.flags|=1,Ol(l,t,e,u),t.child;case 14:return gs(l,t,t.type,t.pendingProps,u);case 15:return bs(l,t,t.type,t.pendingProps,u);case 19:return Ds(l,t,u);case 31:return e=t.pendingProps,u=t.mode,e={mode:e.mode,children:e.children},l===null?(u=fn(e,u),u.ref=t.ref,t.child=u,u.return=t,t=u):(u=Ut(l.child,e),u.ref=t.ref,t.child=u,u.return=t,t=u),t;case 22:return Ts(l,t,u);case 24:return Mu(t),e=Nl(gl),l===null?(n=Mf(),n===null&&(n=nl,f=Of(),n.pooledCache=f,f.refCount++,f!==null&&(n.pooledCacheLanes|=u),n=f),t.memoizedState={parent:e,cache:n},Uf(t),Kt(t,gl,n)):((l.lanes&u)!==0&&(Rf(l,t),Va(t,null,null,u),Ca()),n=l.memoizedState,f=t.memoizedState,n.parent!==e?(n={parent:e,cache:e},t.memoizedState=n,t.lanes===0&&(t.memoizedState=t.updateQueue.baseState=n),Kt(t,gl,e)):(e=f.cache,Kt(t,gl,e),e!==n.cache&&zf(t,[gl],u,!0))),Ol(l,t,t.pendingProps.children,u),t.child;case 29:throw t.pendingProps}throw Error(S(156,t.tag))}function Gt(l){l.flags|=4}function Rs(l,t){if(t.type!=="stylesheet"||(t.state.loading&4)!==0)l.flags&=-16777217;else if(l.flags|=16777216,!Xv(t)){if(t=st.current,t!==null&&((L&4194048)===L?Tt!==null:(L&62914560)!==L&&(L&536870912)===0||t!==Tt))throw Za=Df,d0;l.flags|=8192}}function cn(l,t){t!==null&&(l.flags|=4),l.flags&16384&&(t=l.tag!==22?ci():536870912,l.lanes|=t,sa|=t)}function ka(l,t){if(!$)switch(l.tailMode){case"hidden":t=l.tail;for(var u=null;t!==null;)t.alternate!==null&&(u=t),t=t.sibling;u===null?l.tail=null:u.sibling=null;break;case"collapsed":u=l.tail;for(var e=null;u!==null;)u.alternate!==null&&(e=u),u=u.sibling;e===null?t||l.tail===null?l.tail=null:l.tail.sibling=null:e.sibling=null}}function vl(l){var t=l.alternate!==null&&l.alternate.child===l.child,u=0,e=0;if(t)for(var n=l.child;n!==null;)u|=n.lanes|n.childLanes,e|=n.subtreeFlags&65011712,e|=n.flags&65011712,n.return=l,n=n.sibling;else for(n=l.child;n!==null;)u|=n.lanes|n.childLanes,e|=n.subtreeFlags,e|=n.flags,n.return=l,n=n.sibling;return l.subtreeFlags|=e,l.childLanes=u,t}function Rd(l,t,u){var e=t.pendingProps;switch(bf(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return vl(t),null;case 1:return vl(t),null;case 3:return u=t.stateNode,e=null,l!==null&&(e=l.memoizedState.cache),t.memoizedState.cache!==e&&(t.flags|=2048),qt(gl),jt(),u.pendingContext&&(u.context=u.pendingContext,u.pendingContext=null),(l===null||l.child===null)&&(Ya(t)?Gt(t):l===null||l.memoizedState.isDehydrated&&(t.flags&256)===0||(t.flags|=1024,c0())),vl(t),null;case 26:return u=t.memoizedState,l===null?(Gt(t),u!==null?(vl(t),Rs(t,u)):(vl(t),t.flags&=-16777217)):u?u!==l.memoizedState?(Gt(t),vl(t),Rs(t,u)):(vl(t),t.flags&=-16777217):(l.memoizedProps!==e&&Gt(t),vl(t),t.flags&=-16777217),null;case 27:ge(t),u=X.current;var n=t.type;if(l!==null&&t.stateNode!=null)l.memoizedProps!==e&&Gt(t);else{if(!e){if(t.stateNode===null)throw Error(S(166));return vl(t),null}l=q.current,Ya(t)?n0(t):(l=Rv(n,e,u),t.stateNode=l,Gt(t))}return vl(t),null;case 5:if(ge(t),u=t.type,l!==null&&t.stateNode!=null)l.memoizedProps!==e&&Gt(t);else{if(!e){if(t.stateNode===null)throw Error(S(166));return vl(t),null}if(l=q.current,Ya(t))n0(t);else{switch(n=En(X.current),l){case 1:l=n.createElementNS("http://www.w3.org/2000/svg",u);break;case 2:l=n.createElementNS("http://www.w3.org/1998/Math/MathML",u);break;default:switch(u){case"svg":l=n.createElementNS("http://www.w3.org/2000/svg",u);break;case"math":l=n.createElementNS("http://www.w3.org/1998/Math/MathML",u);break;case"script":l=n.createElement("div"),l.innerHTML="<script><\/script>",l=l.removeChild(l.firstChild);break;case"select":l=typeof e.is=="string"?n.createElement("select",{is:e.is}):n.createElement("select"),e.multiple?l.multiple=!0:e.size&&(l.size=e.size);break;default:l=typeof e.is=="string"?n.createElement(u,{is:e.is}):n.createElement(u)}}l[Hl]=t,l[xl]=e;l:for(n=t.child;n!==null;){if(n.tag===5||n.tag===6)l.appendChild(n.stateNode);else if(n.tag!==4&&n.tag!==27&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break l;for(;n.sibling===null;){if(n.return===null||n.return===t)break l;n=n.return}n.sibling.return=n.return,n=n.sibling}t.stateNode=l;l:switch(Ml(l,u,e),u){case"button":case"input":case"select":case"textarea":l=!!e.autoFocus;break l;case"img":l=!0;break l;default:l=!1}l&&Gt(t)}}return vl(t),t.flags&=-16777217,null;case 6:if(l&&t.stateNode!=null)l.memoizedProps!==e&&Gt(t);else{if(typeof e!="string"&&t.stateNode===null)throw Error(S(166));if(l=X.current,Ya(t)){if(l=t.stateNode,u=t.memoizedProps,e=null,n=Gl,n!==null)switch(n.tag){case 27:case 5:e=n.memoizedProps}l[Hl]=t,l=!!(l.nodeValue===u||e!==null&&e.suppressHydrationWarning===!0||Av(l.nodeValue,u)),l||Ou(t)}else l=En(l).createTextNode(e),l[Hl]=t,t.stateNode=l}return vl(t),null;case 13:if(e=t.memoizedState,l===null||l.memoizedState!==null&&l.memoizedState.dehydrated!==null){if(n=Ya(t),e!==null&&e.dehydrated!==null){if(l===null){if(!n)throw Error(S(318));if(n=t.memoizedState,n=n!==null?n.dehydrated:null,!n)throw Error(S(317));n[Hl]=t}else Ba(),(t.flags&128)===0&&(t.memoizedState=null),t.flags|=4;vl(t),n=!1}else n=c0(),l!==null&&l.memoizedState!==null&&(l.memoizedState.hydrationErrors=n),n=!0;if(!n)return t.flags&256?(Bt(t),t):(Bt(t),null)}if(Bt(t),(t.flags&128)!==0)return t.lanes=u,t;if(u=e!==null,l=l!==null&&l.memoizedState!==null,u){e=t.child,n=null,e.alternate!==null&&e.alternate.memoizedState!==null&&e.alternate.memoizedState.cachePool!==null&&(n=e.alternate.memoizedState.cachePool.pool);var f=null;e.memoizedState!==null&&e.memoizedState.cachePool!==null&&(f=e.memoizedState.cachePool.pool),f!==n&&(e.flags|=2048)}return u!==l&&u&&(t.child.flags|=8192),cn(t,t.updateQueue),vl(t),null;case 4:return jt(),l===null&&Nc(t.stateNode.containerInfo),vl(t),null;case 10:return qt(t.type),vl(t),null;case 19:if(M(bl),n=t.memoizedState,n===null)return vl(t),null;if(e=(t.flags&128)!==0,f=n.rendering,f===null)if(e)ka(n,!1);else{if(dl!==0||l!==null&&(l.flags&128)!==0)for(l=t.child;l!==null;){if(f=un(l),f!==null){for(t.flags|=128,ka(n,!1),l=f.updateQueue,t.updateQueue=l,cn(t,l),t.subtreeFlags=0,l=u,u=t.child;u!==null;)a0(u,l),u=u.sibling;return O(bl,bl.current&1|2),t.child}l=l.sibling}n.tail!==null&&gt()>yn&&(t.flags|=128,e=!0,ka(n,!1),t.lanes=4194304)}else{if(!e)if(l=un(f),l!==null){if(t.flags|=128,e=!0,l=l.updateQueue,t.updateQueue=l,cn(t,l),ka(n,!0),n.tail===null&&n.tailMode==="hidden"&&!f.alternate&&!$)return vl(t),null}else 2*gt()-n.renderingStartTime>yn&&u!==536870912&&(t.flags|=128,e=!0,ka(n,!1),t.lanes=4194304);n.isBackwards?(f.sibling=t.child,t.child=f):(l=n.last,l!==null?l.sibling=f:t.child=f,n.last=f)}return n.tail!==null?(t=n.tail,n.rendering=t,n.tail=t.sibling,n.renderingStartTime=gt(),t.sibling=null,l=bl.current,O(bl,e?l&1|2:l&1),t):(vl(t),null);case 22:case 23:return Bt(t),Yf(),e=t.memoizedState!==null,l!==null?l.memoizedState!==null!==e&&(t.flags|=8192):e&&(t.flags|=8192),e?(u&536870912)!==0&&(t.flags&128)===0&&(vl(t),t.subtreeFlags&6&&(t.flags|=8192)):vl(t),u=t.updateQueue,u!==null&&cn(t,u.retryQueue),u=null,l!==null&&l.memoizedState!==null&&l.memoizedState.cachePool!==null&&(u=l.memoizedState.cachePool.pool),e=null,t.memoizedState!==null&&t.memoizedState.cachePool!==null&&(e=t.memoizedState.cachePool.pool),e!==u&&(t.flags|=2048),l!==null&&M(Du),null;case 24:return u=null,l!==null&&(u=l.memoizedState.cache),t.memoizedState.cache!==u&&(t.flags|=2048),qt(gl),vl(t),null;case 25:return null;case 30:return null}throw Error(S(156,t.tag))}function Hd(l,t){switch(bf(t),t.tag){case 1:return l=t.flags,l&65536?(t.flags=l&-65537|128,t):null;case 3:return qt(gl),jt(),l=t.flags,(l&65536)!==0&&(l&128)===0?(t.flags=l&-65537|128,t):null;case 26:case 27:case 5:return ge(t),null;case 13:if(Bt(t),l=t.memoizedState,l!==null&&l.dehydrated!==null){if(t.alternate===null)throw Error(S(340));Ba()}return l=t.flags,l&65536?(t.flags=l&-65537|128,t):null;case 19:return M(bl),null;case 4:return jt(),null;case 10:return qt(t.type),null;case 22:case 23:return Bt(t),Yf(),l!==null&&M(Du),l=t.flags,l&65536?(t.flags=l&-65537|128,t):null;case 24:return qt(gl),null;case 25:return null;default:return null}}function Hs(l,t){switch(bf(t),t.tag){case 3:qt(gl),jt();break;case 26:case 27:case 5:ge(t);break;case 4:jt();break;case 13:Bt(t);break;case 19:M(bl);break;case 10:qt(t.type);break;case 22:case 23:Bt(t),Yf(),l!==null&&M(Du);break;case 24:qt(gl)}}function Fa(l,t){try{var u=t.updateQueue,e=u!==null?u.lastEffect:null;if(e!==null){var n=e.next;u=n;do{if((u.tag&l)===l){e=void 0;var f=u.create,c=u.inst;e=f(),c.destroy=e}u=u.next}while(u!==n)}}catch(i){al(t,t.return,i)}}function It(l,t,u){try{var e=t.updateQueue,n=e!==null?e.lastEffect:null;if(n!==null){var f=n.next;e=f;do{if((e.tag&l)===l){var c=e.inst,i=c.destroy;if(i!==void 0){c.destroy=void 0,n=t;var s=u,o=i;try{o()}catch(g){al(n,s,g)}}}e=e.next}while(e!==f)}}catch(g){al(t,t.return,g)}}function Ns(l){var t=l.updateQueue;if(t!==null){var u=l.stateNode;try{g0(t,u)}catch(e){al(l,l.return,e)}}}function qs(l,t,u){u.props=Ru(l.type,l.memoizedProps),u.state=l.memoizedState;try{u.componentWillUnmount()}catch(e){al(l,t,e)}}function Ia(l,t){try{var u=l.ref;if(u!==null){switch(l.tag){case 26:case 27:case 5:var e=l.stateNode;break;case 30:e=l.stateNode;break;default:e=l.stateNode}typeof u=="function"?l.refCleanup=u(e):u.current=e}}catch(n){al(l,t,n)}}function Et(l,t){var u=l.ref,e=l.refCleanup;if(u!==null)if(typeof e=="function")try{e()}catch(n){al(l,t,n)}finally{l.refCleanup=null,l=l.alternate,l!=null&&(l.refCleanup=null)}else if(typeof u=="function")try{u(null)}catch(n){al(l,t,n)}else u.current=null}function Ys(l){var t=l.type,u=l.memoizedProps,e=l.stateNode;try{l:switch(t){case"button":case"input":case"select":case"textarea":u.autoFocus&&e.focus();break l;case"img":u.src?e.src=u.src:u.srcSet&&(e.srcset=u.srcSet)}}catch(n){al(l,l.return,n)}}function cc(l,t,u){try{var e=l.stateNode;Fd(e,l.type,u,t),e[xl]=t}catch(n){al(l,l.return,n)}}function Bs(l){return l.tag===5||l.tag===3||l.tag===26||l.tag===27&&fu(l.type)||l.tag===4}function ic(l){l:for(;;){for(;l.sibling===null;){if(l.return===null||Bs(l.return))return null;l=l.return}for(l.sibling.return=l.return,l=l.sibling;l.tag!==5&&l.tag!==6&&l.tag!==18;){if(l.tag===27&&fu(l.type)||l.flags&2||l.child===null||l.tag===4)continue l;l.child.return=l,l=l.child}if(!(l.flags&2))return l.stateNode}}function sc(l,t,u){var e=l.tag;if(e===5||e===6)l=l.stateNode,t?(u.nodeType===9?u.body:u.nodeName==="HTML"?u.ownerDocument.body:u).insertBefore(l,t):(t=u.nodeType===9?u.body:u.nodeName==="HTML"?u.ownerDocument.body:u,t.appendChild(l),u=u._reactRootContainer,u!=null||t.onclick!==null||(t.onclick=Tn));else if(e!==4&&(e===27&&fu(l.type)&&(u=l.stateNode,t=null),l=l.child,l!==null))for(sc(l,t,u),l=l.sibling;l!==null;)sc(l,t,u),l=l.sibling}function sn(l,t,u){var e=l.tag;if(e===5||e===6)l=l.stateNode,t?u.insertBefore(l,t):u.appendChild(l);else if(e!==4&&(e===27&&fu(l.type)&&(u=l.stateNode),l=l.child,l!==null))for(sn(l,t,u),l=l.sibling;l!==null;)sn(l,t,u),l=l.sibling}function ps(l){var t=l.stateNode,u=l.memoizedProps;try{for(var e=l.type,n=t.attributes;n.length;)t.removeAttributeNode(n[0]);Ml(t,e,u),t[Hl]=l,t[xl]=u}catch(f){al(l,l.return,f)}}var Xt=!1,ml=!1,vc=!1,Gs=typeof WeakSet=="function"?WeakSet:Set,Al=null;function Nd(l,t){if(l=l.containerInfo,Bc=Dn,l=wi(l),cf(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else l:{u=(u=l.ownerDocument)&&u.defaultView||window;var e=u.getSelection&&u.getSelection();if(e&&e.rangeCount!==0){u=e.anchorNode;var n=e.anchorOffset,f=e.focusNode;e=e.focusOffset;try{u.nodeType,f.nodeType}catch{u=null;break l}var c=0,i=-1,s=-1,o=0,g=0,E=l,m=null;t:for(;;){for(var r;E!==u||n!==0&&E.nodeType!==3||(i=c+n),E!==f||e!==0&&E.nodeType!==3||(s=c+e),E.nodeType===3&&(c+=E.nodeValue.length),(r=E.firstChild)!==null;)m=E,E=r;for(;;){if(E===l)break t;if(m===u&&++o===n&&(i=c),m===f&&++g===e&&(s=c),(r=E.nextSibling)!==null)break;E=m,m=E.parentNode}E=r}u=i===-1||s===-1?null:{start:i,end:s}}else u=null}u=u||{start:0,end:0}}else u=null;for(pc={focusedElem:l,selectionRange:u},Dn=!1,Al=t;Al!==null;)if(t=Al,l=t.child,(t.subtreeFlags&1024)!==0&&l!==null)l.return=t,Al=l;else for(;Al!==null;){switch(t=Al,f=t.alternate,l=t.flags,t.tag){case 0:break;case 11:case 15:break;case 1:if((l&1024)!==0&&f!==null){l=void 0,u=t,n=f.memoizedProps,f=f.memoizedState,e=u.stateNode;try{var G=Ru(u.type,n,u.elementType===u.type);l=e.getSnapshotBeforeUpdate(G,f),e.__reactInternalSnapshotBeforeUpdate=l}catch(Y){al(u,u.return,Y)}}break;case 3:if((l&1024)!==0){if(l=t.stateNode.containerInfo,u=l.nodeType,u===9)Qc(l);else if(u===1)switch(l.nodeName){case"HEAD":case"HTML":case"BODY":Qc(l);break;default:l.textContent=""}}break;case 5:case 26:case 27:case 6:case 4:case 17:break;default:if((l&1024)!==0)throw Error(S(163))}if(l=t.sibling,l!==null){l.return=t.return,Al=l;break}Al=t.return}}function Xs(l,t,u){var e=u.flags;switch(u.tag){case 0:case 11:case 15:Pt(l,u),e&4&&Fa(5,u);break;case 1:if(Pt(l,u),e&4)if(l=u.stateNode,t===null)try{l.componentDidMount()}catch(c){al(u,u.return,c)}else{var n=Ru(u.type,t.memoizedProps);t=t.memoizedState;try{l.componentDidUpdate(n,t,l.__reactInternalSnapshotBeforeUpdate)}catch(c){al(u,u.return,c)}}e&64&&Ns(u),e&512&&Ia(u,u.return);break;case 3:if(Pt(l,u),e&64&&(l=u.updateQueue,l!==null)){if(t=null,u.child!==null)switch(u.child.tag){case 27:case 5:t=u.child.stateNode;break;case 1:t=u.child.stateNode}try{g0(l,t)}catch(c){al(u,u.return,c)}}break;case 27:t===null&&e&4&&ps(u);case 26:case 5:Pt(l,u),t===null&&e&4&&Ys(u),e&512&&Ia(u,u.return);break;case 12:Pt(l,u);break;case 13:Pt(l,u),e&4&&Zs(l,u),e&64&&(l=u.memoizedState,l!==null&&(l=l.dehydrated,l!==null&&(u=Zd.bind(null,u),e1(l,u))));break;case 22:if(e=u.memoizedState!==null||Xt,!e){t=t!==null&&t.memoizedState!==null||ml,n=Xt;var f=ml;Xt=e,(ml=t)&&!f?lu(l,u,(u.subtreeFlags&8772)!==0):Pt(l,u),Xt=n,ml=f}break;case 30:break;default:Pt(l,u)}}function Qs(l){var t=l.alternate;t!==null&&(l.alternate=null,Qs(t)),l.child=null,l.deletions=null,l.sibling=null,l.tag===5&&(t=l.stateNode,t!==null&&Cn(t)),l.stateNode=null,l.return=null,l.dependencies=null,l.memoizedProps=null,l.memoizedState=null,l.pendingProps=null,l.stateNode=null,l.updateQueue=null}var il=null,Cl=!1;function Qt(l,t,u){for(u=u.child;u!==null;)xs(l,t,u),u=u.sibling}function xs(l,t,u){if(Wl&&typeof Wl.onCommitFiberUnmount=="function")try{Wl.onCommitFiberUnmount(ba,u)}catch{}switch(u.tag){case 26:ml||Et(u,t),Qt(l,t,u),u.memoizedState?u.memoizedState.count--:u.stateNode&&(u=u.stateNode,u.parentNode.removeChild(u));break;case 27:ml||Et(u,t);var e=il,n=Cl;fu(u.type)&&(il=u.stateNode,Cl=!1),Qt(l,t,u),ce(u.stateNode),il=e,Cl=n;break;case 5:ml||Et(u,t);case 6:if(e=il,n=Cl,il=null,Qt(l,t,u),il=e,Cl=n,il!==null)if(Cl)try{(il.nodeType===9?il.body:il.nodeName==="HTML"?il.ownerDocument.body:il).removeChild(u.stateNode)}catch(f){al(u,t,f)}else try{il.removeChild(u.stateNode)}catch(f){al(u,t,f)}break;case 18:il!==null&&(Cl?(l=il,Dv(l.nodeType===9?l.body:l.nodeName==="HTML"?l.ownerDocument.body:l,u.stateNode),me(l)):Dv(il,u.stateNode));break;case 4:e=il,n=Cl,il=u.stateNode.containerInfo,Cl=!0,Qt(l,t,u),il=e,Cl=n;break;case 0:case 11:case 14:case 15:ml||It(2,u,t),ml||It(4,u,t),Qt(l,t,u);break;case 1:ml||(Et(u,t),e=u.stateNode,typeof e.componentWillUnmount=="function"&&qs(u,t,e)),Qt(l,t,u);break;case 21:Qt(l,t,u);break;case 22:ml=(e=ml)||u.memoizedState!==null,Qt(l,t,u),ml=e;break;default:Qt(l,t,u)}}function Zs(l,t){if(t.memoizedState===null&&(l=t.alternate,l!==null&&(l=l.memoizedState,l!==null&&(l=l.dehydrated,l!==null))))try{me(l)}catch(u){al(t,t.return,u)}}function qd(l){switch(l.tag){case 13:case 19:var t=l.stateNode;return t===null&&(t=l.stateNode=new Gs),t;case 22:return l=l.stateNode,t=l._retryCache,t===null&&(t=l._retryCache=new Gs),t;default:throw Error(S(435,l.tag))}}function yc(l,t){var u=qd(l);t.forEach(function(e){var n=jd.bind(null,l,e);u.has(e)||(u.add(e),e.then(n,n))})}function Il(l,t){var u=t.deletions;if(u!==null)for(var e=0;e<u.length;e++){var n=u[e],f=l,c=t,i=c;l:for(;i!==null;){switch(i.tag){case 27:if(fu(i.type)){il=i.stateNode,Cl=!1;break l}break;case 5:il=i.stateNode,Cl=!1;break l;case 3:case 4:il=i.stateNode.containerInfo,Cl=!0;break l}i=i.return}if(il===null)throw Error(S(160));xs(f,c,n),il=null,Cl=!1,f=n.alternate,f!==null&&(f.return=null),n.return=null}if(t.subtreeFlags&13878)for(t=t.child;t!==null;)js(t,l),t=t.sibling}var mt=null;function js(l,t){var u=l.alternate,e=l.flags;switch(l.tag){case 0:case 11:case 14:case 15:Il(t,l),Pl(l),e&4&&(It(3,l,l.return),Fa(3,l),It(5,l,l.return));break;case 1:Il(t,l),Pl(l),e&512&&(ml||u===null||Et(u,u.return)),e&64&&Xt&&(l=l.updateQueue,l!==null&&(e=l.callbacks,e!==null&&(u=l.shared.hiddenCallbacks,l.shared.hiddenCallbacks=u===null?e:u.concat(e))));break;case 26:var n=mt;if(Il(t,l),Pl(l),e&512&&(ml||u===null||Et(u,u.return)),e&4){var f=u!==null?u.memoizedState:null;if(e=l.memoizedState,u===null)if(e===null)if(l.stateNode===null){l:{e=l.type,u=l.memoizedProps,n=n.ownerDocument||n;t:switch(e){case"title":f=n.getElementsByTagName("title")[0],(!f||f[Aa]||f[Hl]||f.namespaceURI==="http://www.w3.org/2000/svg"||f.hasAttribute("itemprop"))&&(f=n.createElement(e),n.head.insertBefore(f,n.querySelector("head > title"))),Ml(f,e,u),f[Hl]=l,Tl(f),e=f;break l;case"link":var c=pv("link","href",n).get(e+(u.href||""));if(c){for(var i=0;i<c.length;i++)if(f=c[i],f.getAttribute("href")===(u.href==null||u.href===""?null:u.href)&&f.getAttribute("rel")===(u.rel==null?null:u.rel)&&f.getAttribute("title")===(u.title==null?null:u.title)&&f.getAttribute("crossorigin")===(u.crossOrigin==null?null:u.crossOrigin)){c.splice(i,1);break t}}f=n.createElement(e),Ml(f,e,u),n.head.appendChild(f);break;case"meta":if(c=pv("meta","content",n).get(e+(u.content||""))){for(i=0;i<c.length;i++)if(f=c[i],f.getAttribute("content")===(u.content==null?null:""+u.content)&&f.getAttribute("name")===(u.name==null?null:u.name)&&f.getAttribute("property")===(u.property==null?null:u.property)&&f.getAttribute("http-equiv")===(u.httpEquiv==null?null:u.httpEquiv)&&f.getAttribute("charset")===(u.charSet==null?null:u.charSet)){c.splice(i,1);break t}}f=n.createElement(e),Ml(f,e,u),n.head.appendChild(f);break;default:throw Error(S(468,e))}f[Hl]=l,Tl(f),e=f}l.stateNode=e}else Gv(n,l.type,l.stateNode);else l.stateNode=Bv(n,e,l.memoizedProps);else f!==e?(f===null?u.stateNode!==null&&(u=u.stateNode,u.parentNode.removeChild(u)):f.count--,e===null?Gv(n,l.type,l.stateNode):Bv(n,e,l.memoizedProps)):e===null&&l.stateNode!==null&&cc(l,l.memoizedProps,u.memoizedProps)}break;case 27:Il(t,l),Pl(l),e&512&&(ml||u===null||Et(u,u.return)),u!==null&&e&4&&cc(l,l.memoizedProps,u.memoizedProps);break;case 5:if(Il(t,l),Pl(l),e&512&&(ml||u===null||Et(u,u.return)),l.flags&32){n=l.stateNode;try{ju(n,"")}catch(r){al(l,l.return,r)}}e&4&&l.stateNode!=null&&(n=l.memoizedProps,cc(l,n,u!==null?u.memoizedProps:n)),e&1024&&(vc=!0);break;case 6:if(Il(t,l),Pl(l),e&4){if(l.stateNode===null)throw Error(S(162));e=l.memoizedProps,u=l.stateNode;try{u.nodeValue=e}catch(r){al(l,l.return,r)}}break;case 3:if(On=null,n=mt,mt=An(t.containerInfo),Il(t,l),mt=n,Pl(l),e&4&&u!==null&&u.memoizedState.isDehydrated)try{me(t.containerInfo)}catch(r){al(l,l.return,r)}vc&&(vc=!1,Cs(l));break;case 4:e=mt,mt=An(l.stateNode.containerInfo),Il(t,l),Pl(l),mt=e;break;case 12:Il(t,l),Pl(l);break;case 13:Il(t,l),Pl(l),l.child.flags&8192&&l.memoizedState!==null!=(u!==null&&u.memoizedState!==null)&&(Sc=gt()),e&4&&(e=l.updateQueue,e!==null&&(l.updateQueue=null,yc(l,e)));break;case 22:n=l.memoizedState!==null;var s=u!==null&&u.memoizedState!==null,o=Xt,g=ml;if(Xt=o||n,ml=g||s,Il(t,l),ml=g,Xt=o,Pl(l),e&8192)l:for(t=l.stateNode,t._visibility=n?t._visibility&-2:t._visibility|1,n&&(u===null||s||Xt||ml||Hu(l)),u=null,t=l;;){if(t.tag===5||t.tag===26){if(u===null){s=u=t;try{if(f=s.stateNode,n)c=f.style,typeof c.setProperty=="function"?c.setProperty("display","none","important"):c.display="none";else{i=s.stateNode;var E=s.memoizedProps.style,m=E!=null&&E.hasOwnProperty("display")?E.display:null;i.style.display=m==null||typeof m=="boolean"?"":(""+m).trim()}}catch(r){al(s,s.return,r)}}}else if(t.tag===6){if(u===null){s=t;try{s.stateNode.nodeValue=n?"":s.memoizedProps}catch(r){al(s,s.return,r)}}}else if((t.tag!==22&&t.tag!==23||t.memoizedState===null||t===l)&&t.child!==null){t.child.return=t,t=t.child;continue}if(t===l)break l;for(;t.sibling===null;){if(t.return===null||t.return===l)break l;u===t&&(u=null),t=t.return}u===t&&(u=null),t.sibling.return=t.return,t=t.sibling}e&4&&(e=l.updateQueue,e!==null&&(u=e.retryQueue,u!==null&&(e.retryQueue=null,yc(l,u))));break;case 19:Il(t,l),Pl(l),e&4&&(e=l.updateQueue,e!==null&&(l.updateQueue=null,yc(l,e)));break;case 30:break;case 21:break;default:Il(t,l),Pl(l)}}function Pl(l){var t=l.flags;if(t&2){try{for(var u,e=l.return;e!==null;){if(Bs(e)){u=e;break}e=e.return}if(u==null)throw Error(S(160));switch(u.tag){case 27:var n=u.stateNode,f=ic(l);sn(l,f,n);break;case 5:var c=u.stateNode;u.flags&32&&(ju(c,""),u.flags&=-33);var i=ic(l);sn(l,i,c);break;case 3:case 4:var s=u.stateNode.containerInfo,o=ic(l);sc(l,o,s);break;default:throw Error(S(161))}}catch(g){al(l,l.return,g)}l.flags&=-3}t&4096&&(l.flags&=-4097)}function Cs(l){if(l.subtreeFlags&1024)for(l=l.child;l!==null;){var t=l;Cs(t),t.tag===5&&t.flags&1024&&t.stateNode.reset(),l=l.sibling}}function Pt(l,t){if(t.subtreeFlags&8772)for(t=t.child;t!==null;)Xs(l,t.alternate,t),t=t.sibling}function Hu(l){for(l=l.child;l!==null;){var t=l;switch(t.tag){case 0:case 11:case 14:case 15:It(4,t,t.return),Hu(t);break;case 1:Et(t,t.return);var u=t.stateNode;typeof u.componentWillUnmount=="function"&&qs(t,t.return,u),Hu(t);break;case 27:ce(t.stateNode);case 26:case 5:Et(t,t.return),Hu(t);break;case 22:t.memoizedState===null&&Hu(t);break;case 30:Hu(t);break;default:Hu(t)}l=l.sibling}}function lu(l,t,u){for(u=u&&(t.subtreeFlags&8772)!==0,t=t.child;t!==null;){var e=t.alternate,n=l,f=t,c=f.flags;switch(f.tag){case 0:case 11:case 15:lu(n,f,u),Fa(4,f);break;case 1:if(lu(n,f,u),e=f,n=e.stateNode,typeof n.componentDidMount=="function")try{n.componentDidMount()}catch(o){al(e,e.return,o)}if(e=f,n=e.updateQueue,n!==null){var i=e.stateNode;try{var s=n.shared.hiddenCallbacks;if(s!==null)for(n.shared.hiddenCallbacks=null,n=0;n<s.length;n++)S0(s[n],i)}catch(o){al(e,e.return,o)}}u&&c&64&&Ns(f),Ia(f,f.return);break;case 27:ps(f);case 26:case 5:lu(n,f,u),u&&e===null&&c&4&&Ys(f),Ia(f,f.return);break;case 12:lu(n,f,u);break;case 13:lu(n,f,u),u&&c&4&&Zs(n,f);break;case 22:f.memoizedState===null&&lu(n,f,u),Ia(f,f.return);break;case 30:break;default:lu(n,f,u)}t=t.sibling}}function dc(l,t){var u=null;l!==null&&l.memoizedState!==null&&l.memoizedState.cachePool!==null&&(u=l.memoizedState.cachePool.pool),l=null,t.memoizedState!==null&&t.memoizedState.cachePool!==null&&(l=t.memoizedState.cachePool.pool),l!==u&&(l!=null&&l.refCount++,u!=null&&Xa(u))}function hc(l,t){l=null,t.alternate!==null&&(l=t.alternate.memoizedState.cache),t=t.memoizedState.cache,t!==l&&(t.refCount++,l!=null&&Xa(l))}function At(l,t,u,e){if(t.subtreeFlags&10256)for(t=t.child;t!==null;)Vs(l,t,u,e),t=t.sibling}function Vs(l,t,u,e){var n=t.flags;switch(t.tag){case 0:case 11:case 15:At(l,t,u,e),n&2048&&Fa(9,t);break;case 1:At(l,t,u,e);break;case 3:At(l,t,u,e),n&2048&&(l=null,t.alternate!==null&&(l=t.alternate.memoizedState.cache),t=t.memoizedState.cache,t!==l&&(t.refCount++,l!=null&&Xa(l)));break;case 12:if(n&2048){At(l,t,u,e),l=t.stateNode;try{var f=t.memoizedProps,c=f.id,i=f.onPostCommit;typeof i=="function"&&i(c,t.alternate===null?"mount":"update",l.passiveEffectDuration,-0)}catch(s){al(t,t.return,s)}}else At(l,t,u,e);break;case 13:At(l,t,u,e);break;case 23:break;case 22:f=t.stateNode,c=t.alternate,t.memoizedState!==null?f._visibility&2?At(l,t,u,e):Pa(l,t):f._visibility&2?At(l,t,u,e):(f._visibility|=2,fa(l,t,u,e,(t.subtreeFlags&10256)!==0)),n&2048&&dc(c,t);break;case 24:At(l,t,u,e),n&2048&&hc(t.alternate,t);break;default:At(l,t,u,e)}}function fa(l,t,u,e,n){for(n=n&&(t.subtreeFlags&10256)!==0,t=t.child;t!==null;){var f=l,c=t,i=u,s=e,o=c.flags;switch(c.tag){case 0:case 11:case 15:fa(f,c,i,s,n),Fa(8,c);break;case 23:break;case 22:var g=c.stateNode;c.memoizedState!==null?g._visibility&2?fa(f,c,i,s,n):Pa(f,c):(g._visibility|=2,fa(f,c,i,s,n)),n&&o&2048&&dc(c.alternate,c);break;case 24:fa(f,c,i,s,n),n&&o&2048&&hc(c.alternate,c);break;default:fa(f,c,i,s,n)}t=t.sibling}}function Pa(l,t){if(t.subtreeFlags&10256)for(t=t.child;t!==null;){var u=l,e=t,n=e.flags;switch(e.tag){case 22:Pa(u,e),n&2048&&dc(e.alternate,e);break;case 24:Pa(u,e),n&2048&&hc(e.alternate,e);break;default:Pa(u,e)}t=t.sibling}}var le=8192;function ca(l){if(l.subtreeFlags&le)for(l=l.child;l!==null;)Ls(l),l=l.sibling}function Ls(l){switch(l.tag){case 26:ca(l),l.flags&le&&l.memoizedState!==null&&S1(mt,l.memoizedState,l.memoizedProps);break;case 5:ca(l);break;case 3:case 4:var t=mt;mt=An(l.stateNode.containerInfo),ca(l),mt=t;break;case 22:l.memoizedState===null&&(t=l.alternate,t!==null&&t.memoizedState!==null?(t=le,le=16777216,ca(l),le=t):ca(l));break;default:ca(l)}}function Ks(l){var t=l.alternate;if(t!==null&&(l=t.child,l!==null)){t.child=null;do t=l.sibling,l.sibling=null,l=t;while(l!==null)}}function te(l){var t=l.deletions;if((l.flags&16)!==0){if(t!==null)for(var u=0;u<t.length;u++){var e=t[u];Al=e,ws(e,l)}Ks(l)}if(l.subtreeFlags&10256)for(l=l.child;l!==null;)Js(l),l=l.sibling}function Js(l){switch(l.tag){case 0:case 11:case 15:te(l),l.flags&2048&&It(9,l,l.return);break;case 3:te(l);break;case 12:te(l);break;case 22:var t=l.stateNode;l.memoizedState!==null&&t._visibility&2&&(l.return===null||l.return.tag!==13)?(t._visibility&=-3,vn(l)):te(l);break;default:te(l)}}function vn(l){var t=l.deletions;if((l.flags&16)!==0){if(t!==null)for(var u=0;u<t.length;u++){var e=t[u];Al=e,ws(e,l)}Ks(l)}for(l=l.child;l!==null;){switch(t=l,t.tag){case 0:case 11:case 15:It(8,t,t.return),vn(t);break;case 22:u=t.stateNode,u._visibility&2&&(u._visibility&=-3,vn(t));break;default:vn(t)}l=l.sibling}}function ws(l,t){for(;Al!==null;){var u=Al;switch(u.tag){case 0:case 11:case 15:It(8,u,t);break;case 23:case 22:if(u.memoizedState!==null&&u.memoizedState.cachePool!==null){var e=u.memoizedState.cachePool.pool;e!=null&&e.refCount++}break;case 24:Xa(u.memoizedState.cache)}if(e=u.child,e!==null)e.return=u,Al=e;else l:for(u=l;Al!==null;){e=Al;var n=e.sibling,f=e.return;if(Qs(e),e===u){Al=null;break l}if(n!==null){n.return=f,Al=n;break l}Al=f}}}var Yd={getCacheForType:function(l){var t=Nl(gl),u=t.data.get(l);return u===void 0&&(u=l(),t.data.set(l,u)),u}},Bd=typeof WeakMap=="function"?WeakMap:Map,F=0,nl=null,C=null,L=0,I=0,lt=null,tu=!1,ia=!1,oc=!1,xt=0,dl=0,uu=0,Nu=0,mc=0,vt=0,sa=0,ue=null,Vl=null,rc=!1,Sc=0,yn=1/0,dn=null,au=null,_l=0,eu=null,va=null,ya=0,gc=0,bc=null,Ws=null,ae=0,Tc=null;function tt(){if((F&2)!==0&&L!==0)return L&-L;if(b.T!==null){var l=Iu;return l!==0?l:Dc()}return vi()}function $s(){vt===0&&(vt=(L&536870912)===0||$?fi():536870912);var l=st.current;return l!==null&&(l.flags|=32),vt}function ut(l,t,u){(l===nl&&(I===2||I===9)||l.cancelPendingCommit!==null)&&(da(l,0),nu(l,L,vt,!1)),Ea(l,u),((F&2)===0||l!==nl)&&(l===nl&&((F&2)===0&&(Nu|=u),dl===4&&nu(l,L,vt,!1)),zt(l))}function ks(l,t,u){if((F&6)!==0)throw Error(S(327));var e=!u&&(t&124)===0&&(t&l.expiredLanes)===0||Ta(l,t),n=e?Xd(l,t):zc(l,t,!0),f=e;do{if(n===0){ia&&!e&&nu(l,t,0,!1);break}else{if(u=l.current.alternate,f&&!pd(u)){n=zc(l,t,!1),f=!1;continue}if(n===2){if(f=t,l.errorRecoveryDisabledLanes&f)var c=0;else c=l.pendingLanes&-536870913,c=c!==0?c:c&536870912?536870912:0;if(c!==0){t=c;l:{var i=l;n=ue;var s=i.current.memoizedState.isDehydrated;if(s&&(da(i,c).flags|=256),c=zc(i,c,!1),c!==2){if(oc&&!s){i.errorRecoveryDisabledLanes|=f,Nu|=f,n=4;break l}f=Vl,Vl=n,f!==null&&(Vl===null?Vl=f:Vl.push.apply(Vl,f))}n=c}if(f=!1,n!==2)continue}}if(n===1){da(l,0),nu(l,t,0,!0);break}l:{switch(e=l,f=n,f){case 0:case 1:throw Error(S(345));case 4:if((t&4194048)!==t)break;case 6:nu(e,t,vt,!tu);break l;case 2:Vl=null;break;case 3:case 5:break;default:throw Error(S(329))}if((t&62914560)===t&&(n=Sc+300-gt(),10<n)){if(nu(e,t,vt,!tu),Ae(e,0,!0)!==0)break l;e.timeoutHandle=_v(Fs.bind(null,e,u,Vl,dn,rc,t,vt,Nu,sa,tu,f,2,-0,0),n);break l}Fs(e,u,Vl,dn,rc,t,vt,Nu,sa,tu,f,0,-0,0)}}break}while(!0);zt(l)}function Fs(l,t,u,e,n,f,c,i,s,o,g,E,m,r){if(l.timeoutHandle=-1,E=t.subtreeFlags,(E&8192||(E&16785408)===16785408)&&(ve={stylesheets:null,count:0,unsuspend:r1},Ls(t),E=g1(),E!==null)){l.cancelPendingCommit=E(ev.bind(null,l,t,f,u,e,n,c,i,s,g,1,m,r)),nu(l,f,c,!o);return}ev(l,t,f,u,e,n,c,i,s)}function pd(l){for(var t=l;;){var u=t.tag;if((u===0||u===11||u===15)&&t.flags&16384&&(u=t.updateQueue,u!==null&&(u=u.stores,u!==null)))for(var e=0;e<u.length;e++){var n=u[e],f=n.getSnapshot;n=n.value;try{if(!kl(f(),n))return!1}catch{return!1}}if(u=t.child,t.subtreeFlags&16384&&u!==null)u.return=t,t=u;else{if(t===l)break;for(;t.sibling===null;){if(t.return===null||t.return===l)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function nu(l,t,u,e){t&=~mc,t&=~Nu,l.suspendedLanes|=t,l.pingedLanes&=~t,e&&(l.warmLanes|=t),e=l.expirationTimes;for(var n=t;0<n;){var f=31-$l(n),c=1<<f;e[f]=-1,n&=~c}u!==0&&ii(l,u,t)}function hn(){return(F&6)===0?(ee(0),!1):!0}function Ec(){if(C!==null){if(I===0)var l=C.return;else l=C,Nt=_u=null,Qf(l),ea=null,Wa=0,l=C;for(;l!==null;)Hs(l.alternate,l),l=l.return;C=null}}function da(l,t){var u=l.timeoutHandle;u!==-1&&(l.timeoutHandle=-1,Pd(u)),u=l.cancelPendingCommit,u!==null&&(l.cancelPendingCommit=null,u()),Ec(),nl=l,C=u=Ut(l.current,null),L=t,I=0,lt=null,tu=!1,ia=Ta(l,t),oc=!1,sa=vt=mc=Nu=uu=dl=0,Vl=ue=null,rc=!1,(t&8)!==0&&(t|=t&32);var e=l.entangledLanes;if(e!==0)for(l=l.entanglements,e&=t;0<e;){var n=31-$l(e),f=1<<n;t|=l[n],e&=~f}return xt=t,Be(),u}function Is(l,t){x=null,b.H=Pe,t===xa||t===Ve?(t=m0(),I=3):t===d0?(t=m0(),I=4):I=t===rs?8:t!==null&&typeof t=="object"&&typeof t.then=="function"?6:1,lt=t,C===null&&(dl=1,en(l,nt(t,l.current)))}function Ps(){var l=b.H;return b.H=Pe,l===null?Pe:l}function lv(){var l=b.A;return b.A=Yd,l}function Ac(){dl=4,tu||(L&4194048)!==L&&st.current!==null||(ia=!0),(uu&134217727)===0&&(Nu&134217727)===0||nl===null||nu(nl,L,vt,!1)}function zc(l,t,u){var e=F;F|=2;var n=Ps(),f=lv();(nl!==l||L!==t)&&(dn=null,da(l,t)),t=!1;var c=dl;l:do try{if(I!==0&&C!==null){var i=C,s=lt;switch(I){case 8:Ec(),c=6;break l;case 3:case 2:case 9:case 6:st.current===null&&(t=!0);var o=I;if(I=0,lt=null,ha(l,i,s,o),u&&ia){c=0;break l}break;default:o=I,I=0,lt=null,ha(l,i,s,o)}}Gd(),c=dl;break}catch(g){Is(l,g)}while(!0);return t&&l.shellSuspendCounter++,Nt=_u=null,F=e,b.H=n,b.A=f,C===null&&(nl=null,L=0,Be()),c}function Gd(){for(;C!==null;)tv(C)}function Xd(l,t){var u=F;F|=2;var e=Ps(),n=lv();nl!==l||L!==t?(dn=null,yn=gt()+500,da(l,t)):ia=Ta(l,t);l:do try{if(I!==0&&C!==null){t=C;var f=lt;t:switch(I){case 1:I=0,lt=null,ha(l,t,f,1);break;case 2:case 9:if(h0(f)){I=0,lt=null,uv(t);break}t=function(){I!==2&&I!==9||nl!==l||(I=7),zt(l)},f.then(t,t);break l;case 3:I=7;break l;case 4:I=5;break l;case 7:h0(f)?(I=0,lt=null,uv(t)):(I=0,lt=null,ha(l,t,f,7));break;case 5:var c=null;switch(C.tag){case 26:c=C.memoizedState;case 5:case 27:var i=C;if(!c||Xv(c)){I=0,lt=null;var s=i.sibling;if(s!==null)C=s;else{var o=i.return;o!==null?(C=o,on(o)):C=null}break t}}I=0,lt=null,ha(l,t,f,5);break;case 6:I=0,lt=null,ha(l,t,f,6);break;case 8:Ec(),dl=6;break l;default:throw Error(S(462))}}Qd();break}catch(g){Is(l,g)}while(!0);return Nt=_u=null,b.H=e,b.A=n,F=u,C!==null?0:(nl=null,L=0,Be(),dl)}function Qd(){for(;C!==null&&!fy();)tv(C)}function tv(l){var t=Us(l.alternate,l,xt);l.memoizedProps=l.pendingProps,t===null?on(l):C=t}function uv(l){var t=l,u=t.alternate;switch(t.tag){case 15:case 0:t=As(u,t,t.pendingProps,t.type,void 0,L);break;case 11:t=As(u,t,t.pendingProps,t.type.render,t.ref,L);break;case 5:Qf(t);default:Hs(u,t),t=C=a0(t,xt),t=Us(u,t,xt)}l.memoizedProps=l.pendingProps,t===null?on(l):C=t}function ha(l,t,u,e){Nt=_u=null,Qf(t),ea=null,Wa=0;var n=t.return;try{if(Dd(l,n,t,u,L)){dl=1,en(l,nt(u,l.current)),C=null;return}}catch(f){if(n!==null)throw C=n,f;dl=1,en(l,nt(u,l.current)),C=null;return}t.flags&32768?($||e===1?l=!0:ia||(L&536870912)!==0?l=!1:(tu=l=!0,(e===2||e===9||e===3||e===6)&&(e=st.current,e!==null&&e.tag===13&&(e.flags|=16384))),av(t,l)):on(t)}function on(l){var t=l;do{if((t.flags&32768)!==0){av(t,tu);return}l=t.return;var u=Rd(t.alternate,t,xt);if(u!==null){C=u;return}if(t=t.sibling,t!==null){C=t;return}C=t=l}while(t!==null);dl===0&&(dl=5)}function av(l,t){do{var u=Hd(l.alternate,l);if(u!==null){u.flags&=32767,C=u;return}if(u=l.return,u!==null&&(u.flags|=32768,u.subtreeFlags=0,u.deletions=null),!t&&(l=l.sibling,l!==null)){C=l;return}C=l=u}while(l!==null);dl=6,C=null}function ev(l,t,u,e,n,f,c,i,s){l.cancelPendingCommit=null;do mn();while(_l!==0);if((F&6)!==0)throw Error(S(327));if(t!==null){if(t===l.current)throw Error(S(177));if(f=t.lanes|t.childLanes,f|=hf,ry(l,u,f,c,i,s),l===nl&&(C=nl=null,L=0),va=t,eu=l,ya=u,gc=f,bc=n,Ws=e,(t.subtreeFlags&10256)!==0||(t.flags&10256)!==0?(l.callbackNode=null,l.callbackPriority=0,Cd(be,function(){return sv(),null})):(l.callbackNode=null,l.callbackPriority=0),e=(t.flags&13878)!==0,(t.subtreeFlags&13878)!==0||e){e=b.T,b.T=null,n=_.p,_.p=2,c=F,F|=4;try{Nd(l,t,u)}finally{F=c,_.p=n,b.T=e}}_l=1,nv(),fv(),cv()}}function nv(){if(_l===1){_l=0;var l=eu,t=va,u=(t.flags&13878)!==0;if((t.subtreeFlags&13878)!==0||u){u=b.T,b.T=null;var e=_.p;_.p=2;var n=F;F|=4;try{js(t,l);var f=pc,c=wi(l.containerInfo),i=f.focusedElem,s=f.selectionRange;if(c!==i&&i&&i.ownerDocument&&Ji(i.ownerDocument.documentElement,i)){if(s!==null&&cf(i)){var o=s.start,g=s.end;if(g===void 0&&(g=o),"selectionStart"in i)i.selectionStart=o,i.selectionEnd=Math.min(g,i.value.length);else{var E=i.ownerDocument||document,m=E&&E.defaultView||window;if(m.getSelection){var r=m.getSelection(),G=i.textContent.length,Y=Math.min(s.start,G),tl=s.end===void 0?Y:Math.min(s.end,G);!r.extend&&Y>tl&&(c=tl,tl=Y,Y=c);var d=Ki(i,Y),y=Ki(i,tl);if(d&&y&&(r.rangeCount!==1||r.anchorNode!==d.node||r.anchorOffset!==d.offset||r.focusNode!==y.node||r.focusOffset!==y.offset)){var h=E.createRange();h.setStart(d.node,d.offset),r.removeAllRanges(),Y>tl?(r.addRange(h),r.extend(y.node,y.offset)):(h.setEnd(y.node,y.offset),r.addRange(h))}}}}for(E=[],r=i;r=r.parentNode;)r.nodeType===1&&E.push({element:r,left:r.scrollLeft,top:r.scrollTop});for(typeof i.focus=="function"&&i.focus(),i=0;i<E.length;i++){var T=E[i];T.element.scrollLeft=T.left,T.element.scrollTop=T.top}}Dn=!!Bc,pc=Bc=null}finally{F=n,_.p=e,b.T=u}}l.current=t,_l=2}}function fv(){if(_l===2){_l=0;var l=eu,t=va,u=(t.flags&8772)!==0;if((t.subtreeFlags&8772)!==0||u){u=b.T,b.T=null;var e=_.p;_.p=2;var n=F;F|=4;try{Xs(l,t.alternate,t)}finally{F=n,_.p=e,b.T=u}}_l=3}}function cv(){if(_l===4||_l===3){_l=0,cy();var l=eu,t=va,u=ya,e=Ws;(t.subtreeFlags&10256)!==0||(t.flags&10256)!==0?_l=5:(_l=0,va=eu=null,iv(l,l.pendingLanes));var n=l.pendingLanes;if(n===0&&(au=null),Zn(u),t=t.stateNode,Wl&&typeof Wl.onCommitFiberRoot=="function")try{Wl.onCommitFiberRoot(ba,t,void 0,(t.current.flags&128)===128)}catch{}if(e!==null){t=b.T,n=_.p,_.p=2,b.T=null;try{for(var f=l.onRecoverableError,c=0;c<e.length;c++){var i=e[c];f(i.value,{componentStack:i.stack})}}finally{b.T=t,_.p=n}}(ya&3)!==0&&mn(),zt(l),n=l.pendingLanes,(u&4194090)!==0&&(n&42)!==0?l===Tc?ae++:(ae=0,Tc=l):ae=0,ee(0)}}function iv(l,t){(l.pooledCacheLanes&=t)===0&&(t=l.pooledCache,t!=null&&(l.pooledCache=null,Xa(t)))}function mn(l){return nv(),fv(),cv(),sv()}function sv(){if(_l!==5)return!1;var l=eu,t=gc;gc=0;var u=Zn(ya),e=b.T,n=_.p;try{_.p=32>u?32:u,b.T=null,u=bc,bc=null;var f=eu,c=ya;if(_l=0,va=eu=null,ya=0,(F&6)!==0)throw Error(S(331));var i=F;if(F|=4,Js(f.current),Vs(f,f.current,c,u),F=i,ee(0,!1),Wl&&typeof Wl.onPostCommitFiberRoot=="function")try{Wl.onPostCommitFiberRoot(ba,f)}catch{}return!0}finally{_.p=n,b.T=e,iv(l,t)}}function vv(l,t,u){t=nt(u,t),t=If(l.stateNode,t,2),l=Wt(l,t,2),l!==null&&(Ea(l,2),zt(l))}function al(l,t,u){if(l.tag===3)vv(l,l,u);else for(;t!==null;){if(t.tag===3){vv(t,l,u);break}else if(t.tag===1){var e=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof e.componentDidCatch=="function"&&(au===null||!au.has(e))){l=nt(u,l),u=os(2),e=Wt(t,u,2),e!==null&&(ms(u,e,t,l),Ea(e,2),zt(e));break}}t=t.return}}function Oc(l,t,u){var e=l.pingCache;if(e===null){e=l.pingCache=new Bd;var n=new Set;e.set(t,n)}else n=e.get(t),n===void 0&&(n=new Set,e.set(t,n));n.has(u)||(oc=!0,n.add(u),l=xd.bind(null,l,t,u),t.then(l,l))}function xd(l,t,u){var e=l.pingCache;e!==null&&e.delete(t),l.pingedLanes|=l.suspendedLanes&u,l.warmLanes&=~u,nl===l&&(L&u)===u&&(dl===4||dl===3&&(L&62914560)===L&&300>gt()-Sc?(F&2)===0&&da(l,0):mc|=u,sa===L&&(sa=0)),zt(l)}function yv(l,t){t===0&&(t=ci()),l=Wu(l,t),l!==null&&(Ea(l,t),zt(l))}function Zd(l){var t=l.memoizedState,u=0;t!==null&&(u=t.retryLane),yv(l,u)}function jd(l,t){var u=0;switch(l.tag){case 13:var e=l.stateNode,n=l.memoizedState;n!==null&&(u=n.retryLane);break;case 19:e=l.stateNode;break;case 22:e=l.stateNode._retryCache;break;default:throw Error(S(314))}e!==null&&e.delete(t),yv(l,u)}function Cd(l,t){return Gn(l,t)}var rn=null,oa=null,_c=!1,Sn=!1,Mc=!1,qu=0;function zt(l){l!==oa&&l.next===null&&(oa===null?rn=oa=l:oa=oa.next=l),Sn=!0,_c||(_c=!0,Ld())}function ee(l,t){if(!Mc&&Sn){Mc=!0;do for(var u=!1,e=rn;e!==null;){if(l!==0){var n=e.pendingLanes;if(n===0)var f=0;else{var c=e.suspendedLanes,i=e.pingedLanes;f=(1<<31-$l(42|l)+1)-1,f&=n&~(c&~i),f=f&201326741?f&201326741|1:f?f|2:0}f!==0&&(u=!0,mv(e,f))}else f=L,f=Ae(e,e===nl?f:0,e.cancelPendingCommit!==null||e.timeoutHandle!==-1),(f&3)===0||Ta(e,f)||(u=!0,mv(e,f));e=e.next}while(u);Mc=!1}}function Vd(){dv()}function dv(){Sn=_c=!1;var l=0;qu!==0&&(Id()&&(l=qu),qu=0);for(var t=gt(),u=null,e=rn;e!==null;){var n=e.next,f=hv(e,t);f===0?(e.next=null,u===null?rn=n:u.next=n,n===null&&(oa=u)):(u=e,(l!==0||(f&3)!==0)&&(Sn=!0)),e=n}ee(l)}function hv(l,t){for(var u=l.suspendedLanes,e=l.pingedLanes,n=l.expirationTimes,f=l.pendingLanes&-62914561;0<f;){var c=31-$l(f),i=1<<c,s=n[c];s===-1?((i&u)===0||(i&e)!==0)&&(n[c]=my(i,t)):s<=t&&(l.expiredLanes|=i),f&=~i}if(t=nl,u=L,u=Ae(l,l===t?u:0,l.cancelPendingCommit!==null||l.timeoutHandle!==-1),e=l.callbackNode,u===0||l===t&&(I===2||I===9)||l.cancelPendingCommit!==null)return e!==null&&e!==null&&Xn(e),l.callbackNode=null,l.callbackPriority=0;if((u&3)===0||Ta(l,u)){if(t=u&-u,t===l.callbackPriority)return t;switch(e!==null&&Xn(e),Zn(u)){case 2:case 8:u=ei;break;case 32:u=be;break;case 268435456:u=ni;break;default:u=be}return e=ov.bind(null,l),u=Gn(u,e),l.callbackPriority=t,l.callbackNode=u,t}return e!==null&&e!==null&&Xn(e),l.callbackPriority=2,l.callbackNode=null,2}function ov(l,t){if(_l!==0&&_l!==5)return l.callbackNode=null,l.callbackPriority=0,null;var u=l.callbackNode;if(mn()&&l.callbackNode!==u)return null;var e=L;return e=Ae(l,l===nl?e:0,l.cancelPendingCommit!==null||l.timeoutHandle!==-1),e===0?null:(ks(l,e,t),hv(l,gt()),l.callbackNode!=null&&l.callbackNode===u?ov.bind(null,l):null)}function mv(l,t){if(mn())return null;ks(l,t,!0)}function Ld(){l1(function(){(F&6)!==0?Gn(ai,Vd):dv()})}function Dc(){return qu===0&&(qu=fi()),qu}function rv(l){return l==null||typeof l=="symbol"||typeof l=="boolean"?null:typeof l=="function"?l:De(""+l)}function Sv(l,t){var u=t.ownerDocument.createElement("input");return u.name=t.name,u.value=t.value,l.id&&u.setAttribute("form",l.id),t.parentNode.insertBefore(u,t),l=new FormData(l),u.parentNode.removeChild(u),l}function Kd(l,t,u,e,n){if(t==="submit"&&u&&u.stateNode===n){var f=rv((n[xl]||null).action),c=e.submitter;c&&(t=(t=c[xl]||null)?rv(t.formAction):c.getAttribute("formAction"),t!==null&&(f=t,c=null));var i=new Ne("action","action",null,e,n);l.push({event:i,listeners:[{instance:null,listener:function(){if(e.defaultPrevented){if(qu!==0){var s=c?Sv(n,c):new FormData(n);wf(u,{pending:!0,data:s,method:n.method,action:f},null,s)}}else typeof f=="function"&&(i.preventDefault(),s=c?Sv(n,c):new FormData(n),wf(u,{pending:!0,data:s,method:n.method,action:f},f,s))},currentTarget:n}]})}}for(var Uc=0;Uc<df.length;Uc++){var Rc=df[Uc],Jd=Rc.toLowerCase(),wd=Rc[0].toUpperCase()+Rc.slice(1);ot(Jd,"on"+wd)}ot(ki,"onAnimationEnd"),ot(Fi,"onAnimationIteration"),ot(Ii,"onAnimationStart"),ot("dblclick","onDoubleClick"),ot("focusin","onFocus"),ot("focusout","onBlur"),ot(vd,"onTransitionRun"),ot(yd,"onTransitionStart"),ot(dd,"onTransitionCancel"),ot(Pi,"onTransitionEnd"),Qu("onMouseEnter",["mouseout","mouseover"]),Qu("onMouseLeave",["mouseout","mouseover"]),Qu("onPointerEnter",["pointerout","pointerover"]),Qu("onPointerLeave",["pointerout","pointerover"]),ru("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),ru("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),ru("onBeforeInput",["compositionend","keypress","textInput","paste"]),ru("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),ru("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),ru("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var ne="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Wd=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(ne));function gv(l,t){t=(t&4)!==0;for(var u=0;u<l.length;u++){var e=l[u],n=e.event;e=e.listeners;l:{var f=void 0;if(t)for(var c=e.length-1;0<=c;c--){var i=e[c],s=i.instance,o=i.currentTarget;if(i=i.listener,s!==f&&n.isPropagationStopped())break l;f=i,n.currentTarget=o;try{f(n)}catch(g){an(g)}n.currentTarget=null,f=s}else for(c=0;c<e.length;c++){if(i=e[c],s=i.instance,o=i.currentTarget,i=i.listener,s!==f&&n.isPropagationStopped())break l;f=i,n.currentTarget=o;try{f(n)}catch(g){an(g)}n.currentTarget=null,f=s}}}}function V(l,t){var u=t[jn];u===void 0&&(u=t[jn]=new Set);var e=l+"__bubble";u.has(e)||(bv(t,l,2,!1),u.add(e))}function Hc(l,t,u){var e=0;t&&(e|=4),bv(u,l,e,t)}var gn="_reactListening"+Math.random().toString(36).slice(2);function Nc(l){if(!l[gn]){l[gn]=!0,di.forEach(function(u){u!=="selectionchange"&&(Wd.has(u)||Hc(u,!1,l),Hc(u,!0,l))});var t=l.nodeType===9?l:l.ownerDocument;t===null||t[gn]||(t[gn]=!0,Hc("selectionchange",!1,t))}}function bv(l,t,u,e){switch(Vv(t)){case 2:var n=E1;break;case 8:n=A1;break;default:n=Kc}u=n.bind(null,t,u,l),n=void 0,!In||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(n=!0),e?n!==void 0?l.addEventListener(t,u,{capture:!0,passive:n}):l.addEventListener(t,u,!0):n!==void 0?l.addEventListener(t,u,{passive:n}):l.addEventListener(t,u,!1)}function qc(l,t,u,e,n){var f=e;if((t&1)===0&&(t&2)===0&&e!==null)l:for(;;){if(e===null)return;var c=e.tag;if(c===3||c===4){var i=e.stateNode.containerInfo;if(i===n)break;if(c===4)for(c=e.return;c!==null;){var s=c.tag;if((s===3||s===4)&&c.stateNode.containerInfo===n)return;c=c.return}for(;i!==null;){if(c=pu(i),c===null)return;if(s=c.tag,s===5||s===6||s===26||s===27){e=f=c;continue l}i=i.parentNode}}e=e.return}Mi(function(){var o=f,g=kn(u),E=[];l:{var m=l0.get(l);if(m!==void 0){var r=Ne,G=l;switch(l){case"keypress":if(Re(u)===0)break l;case"keydown":case"keyup":r=Cy;break;case"focusin":G="focus",r=uf;break;case"focusout":G="blur",r=uf;break;case"beforeblur":case"afterblur":r=uf;break;case"click":if(u.button===2)break l;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":r=Ri;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":r=Hy;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":r=Ky;break;case ki:case Fi:case Ii:r=Yy;break;case Pi:r=wy;break;case"scroll":case"scrollend":r=Uy;break;case"wheel":r=$y;break;case"copy":case"cut":case"paste":r=py;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":r=Ni;break;case"toggle":case"beforetoggle":r=Fy}var Y=(t&4)!==0,tl=!Y&&(l==="scroll"||l==="scrollend"),d=Y?m!==null?m+"Capture":null:m;Y=[];for(var y=o,h;y!==null;){var T=y;if(h=T.stateNode,T=T.tag,T!==5&&T!==26&&T!==27||h===null||d===null||(T=Oa(y,d),T!=null&&Y.push(fe(y,T,h))),tl)break;y=y.return}0<Y.length&&(m=new r(m,G,null,u,g),E.push({event:m,listeners:Y}))}}if((t&7)===0){l:{if(m=l==="mouseover"||l==="pointerover",r=l==="mouseout"||l==="pointerout",m&&u!==$n&&(G=u.relatedTarget||u.fromElement)&&(pu(G)||G[Bu]))break l;if((r||m)&&(m=g.window===g?g:(m=g.ownerDocument)?m.defaultView||m.parentWindow:window,r?(G=u.relatedTarget||u.toElement,r=o,G=G?pu(G):null,G!==null&&(tl=W(G),Y=G.tag,G!==tl||Y!==5&&Y!==27&&Y!==6)&&(G=null)):(r=null,G=o),r!==G)){if(Y=Ri,T="onMouseLeave",d="onMouseEnter",y="mouse",(l==="pointerout"||l==="pointerover")&&(Y=Ni,T="onPointerLeave",d="onPointerEnter",y="pointer"),tl=r==null?m:za(r),h=G==null?m:za(G),m=new Y(T,y+"leave",r,u,g),m.target=tl,m.relatedTarget=h,T=null,pu(g)===o&&(Y=new Y(d,y+"enter",G,u,g),Y.target=h,Y.relatedTarget=tl,T=Y),tl=T,r&&G)t:{for(Y=r,d=G,y=0,h=Y;h;h=ma(h))y++;for(h=0,T=d;T;T=ma(T))h++;for(;0<y-h;)Y=ma(Y),y--;for(;0<h-y;)d=ma(d),h--;for(;y--;){if(Y===d||d!==null&&Y===d.alternate)break t;Y=ma(Y),d=ma(d)}Y=null}else Y=null;r!==null&&Tv(E,m,r,Y,!1),G!==null&&tl!==null&&Tv(E,tl,G,Y,!0)}}l:{if(m=o?za(o):window,r=m.nodeName&&m.nodeName.toLowerCase(),r==="select"||r==="input"&&m.type==="file")var D=xi;else if(Xi(m))if(Zi)D=cd;else{D=nd;var Z=ed}else r=m.nodeName,!r||r.toLowerCase()!=="input"||m.type!=="checkbox"&&m.type!=="radio"?o&&Wn(o.elementType)&&(D=xi):D=fd;if(D&&(D=D(l,o))){Qi(E,D,u,g);break l}Z&&Z(l,m,o),l==="focusout"&&o&&m.type==="number"&&o.memoizedProps.value!=null&&wn(m,"number",m.value)}switch(Z=o?za(o):window,l){case"focusin":(Xi(Z)||Z.contentEditable==="true")&&(Ku=Z,sf=o,qa=null);break;case"focusout":qa=sf=Ku=null;break;case"mousedown":vf=!0;break;case"contextmenu":case"mouseup":case"dragend":vf=!1,Wi(E,u,g);break;case"selectionchange":if(sd)break;case"keydown":case"keyup":Wi(E,u,g)}var R;if(ef)l:{switch(l){case"compositionstart":var B="onCompositionStart";break l;case"compositionend":B="onCompositionEnd";break l;case"compositionupdate":B="onCompositionUpdate";break l}B=void 0}else Lu?pi(l,u)&&(B="onCompositionEnd"):l==="keydown"&&u.keyCode===229&&(B="onCompositionStart");B&&(qi&&u.locale!=="ko"&&(Lu||B!=="onCompositionStart"?B==="onCompositionEnd"&&Lu&&(R=Di()):(Lt=g,Pn="value"in Lt?Lt.value:Lt.textContent,Lu=!0)),Z=bn(o,B),0<Z.length&&(B=new Hi(B,l,null,u,g),E.push({event:B,listeners:Z}),R?B.data=R:(R=Gi(u),R!==null&&(B.data=R)))),(R=Py?ld(l,u):td(l,u))&&(B=bn(o,"onBeforeInput"),0<B.length&&(Z=new Hi("onBeforeInput","beforeinput",null,u,g),E.push({event:Z,listeners:B}),Z.data=R)),Kd(E,l,o,u,g)}gv(E,t)})}function fe(l,t,u){return{instance:l,listener:t,currentTarget:u}}function bn(l,t){for(var u=t+"Capture",e=[];l!==null;){var n=l,f=n.stateNode;if(n=n.tag,n!==5&&n!==26&&n!==27||f===null||(n=Oa(l,u),n!=null&&e.unshift(fe(l,n,f)),n=Oa(l,t),n!=null&&e.push(fe(l,n,f))),l.tag===3)return e;l=l.return}return[]}function ma(l){if(l===null)return null;do l=l.return;while(l&&l.tag!==5&&l.tag!==27);return l||null}function Tv(l,t,u,e,n){for(var f=t._reactName,c=[];u!==null&&u!==e;){var i=u,s=i.alternate,o=i.stateNode;if(i=i.tag,s!==null&&s===e)break;i!==5&&i!==26&&i!==27||o===null||(s=o,n?(o=Oa(u,f),o!=null&&c.unshift(fe(u,o,s))):n||(o=Oa(u,f),o!=null&&c.push(fe(u,o,s)))),u=u.return}c.length!==0&&l.push({event:t,listeners:c})}var $d=/\r\n?/g,kd=/\u0000|\uFFFD/g;function Ev(l){return(typeof l=="string"?l:""+l).replace($d,`
`).replace(kd,"")}function Av(l,t){return t=Ev(t),Ev(l)===t}function Tn(){}function ll(l,t,u,e,n,f){switch(u){case"children":typeof e=="string"?t==="body"||t==="textarea"&&e===""||ju(l,e):(typeof e=="number"||typeof e=="bigint")&&t!=="body"&&ju(l,""+e);break;case"className":Oe(l,"class",e);break;case"tabIndex":Oe(l,"tabindex",e);break;case"dir":case"role":case"viewBox":case"width":case"height":Oe(l,u,e);break;case"style":Oi(l,e,f);break;case"data":if(t!=="object"){Oe(l,"data",e);break}case"src":case"href":if(e===""&&(t!=="a"||u!=="href")){l.removeAttribute(u);break}if(e==null||typeof e=="function"||typeof e=="symbol"||typeof e=="boolean"){l.removeAttribute(u);break}e=De(""+e),l.setAttribute(u,e);break;case"action":case"formAction":if(typeof e=="function"){l.setAttribute(u,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}else typeof f=="function"&&(u==="formAction"?(t!=="input"&&ll(l,t,"name",n.name,n,null),ll(l,t,"formEncType",n.formEncType,n,null),ll(l,t,"formMethod",n.formMethod,n,null),ll(l,t,"formTarget",n.formTarget,n,null)):(ll(l,t,"encType",n.encType,n,null),ll(l,t,"method",n.method,n,null),ll(l,t,"target",n.target,n,null)));if(e==null||typeof e=="symbol"||typeof e=="boolean"){l.removeAttribute(u);break}e=De(""+e),l.setAttribute(u,e);break;case"onClick":e!=null&&(l.onclick=Tn);break;case"onScroll":e!=null&&V("scroll",l);break;case"onScrollEnd":e!=null&&V("scrollend",l);break;case"dangerouslySetInnerHTML":if(e!=null){if(typeof e!="object"||!("__html"in e))throw Error(S(61));if(u=e.__html,u!=null){if(n.children!=null)throw Error(S(60));l.innerHTML=u}}break;case"multiple":l.multiple=e&&typeof e!="function"&&typeof e!="symbol";break;case"muted":l.muted=e&&typeof e!="function"&&typeof e!="symbol";break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":break;case"autoFocus":break;case"xlinkHref":if(e==null||typeof e=="function"||typeof e=="boolean"||typeof e=="symbol"){l.removeAttribute("xlink:href");break}u=De(""+e),l.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",u);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":e!=null&&typeof e!="function"&&typeof e!="symbol"?l.setAttribute(u,""+e):l.removeAttribute(u);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":e&&typeof e!="function"&&typeof e!="symbol"?l.setAttribute(u,""):l.removeAttribute(u);break;case"capture":case"download":e===!0?l.setAttribute(u,""):e!==!1&&e!=null&&typeof e!="function"&&typeof e!="symbol"?l.setAttribute(u,e):l.removeAttribute(u);break;case"cols":case"rows":case"size":case"span":e!=null&&typeof e!="function"&&typeof e!="symbol"&&!isNaN(e)&&1<=e?l.setAttribute(u,e):l.removeAttribute(u);break;case"rowSpan":case"start":e==null||typeof e=="function"||typeof e=="symbol"||isNaN(e)?l.removeAttribute(u):l.setAttribute(u,e);break;case"popover":V("beforetoggle",l),V("toggle",l),ze(l,"popover",e);break;case"xlinkActuate":Mt(l,"http://www.w3.org/1999/xlink","xlink:actuate",e);break;case"xlinkArcrole":Mt(l,"http://www.w3.org/1999/xlink","xlink:arcrole",e);break;case"xlinkRole":Mt(l,"http://www.w3.org/1999/xlink","xlink:role",e);break;case"xlinkShow":Mt(l,"http://www.w3.org/1999/xlink","xlink:show",e);break;case"xlinkTitle":Mt(l,"http://www.w3.org/1999/xlink","xlink:title",e);break;case"xlinkType":Mt(l,"http://www.w3.org/1999/xlink","xlink:type",e);break;case"xmlBase":Mt(l,"http://www.w3.org/XML/1998/namespace","xml:base",e);break;case"xmlLang":Mt(l,"http://www.w3.org/XML/1998/namespace","xml:lang",e);break;case"xmlSpace":Mt(l,"http://www.w3.org/XML/1998/namespace","xml:space",e);break;case"is":ze(l,"is",e);break;case"innerText":case"textContent":break;default:(!(2<u.length)||u[0]!=="o"&&u[0]!=="O"||u[1]!=="n"&&u[1]!=="N")&&(u=My.get(u)||u,ze(l,u,e))}}function Yc(l,t,u,e,n,f){switch(u){case"style":Oi(l,e,f);break;case"dangerouslySetInnerHTML":if(e!=null){if(typeof e!="object"||!("__html"in e))throw Error(S(61));if(u=e.__html,u!=null){if(n.children!=null)throw Error(S(60));l.innerHTML=u}}break;case"children":typeof e=="string"?ju(l,e):(typeof e=="number"||typeof e=="bigint")&&ju(l,""+e);break;case"onScroll":e!=null&&V("scroll",l);break;case"onScrollEnd":e!=null&&V("scrollend",l);break;case"onClick":e!=null&&(l.onclick=Tn);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":break;case"innerText":case"textContent":break;default:if(!hi.hasOwnProperty(u))l:{if(u[0]==="o"&&u[1]==="n"&&(n=u.endsWith("Capture"),t=u.slice(2,n?u.length-7:void 0),f=l[xl]||null,f=f!=null?f[u]:null,typeof f=="function"&&l.removeEventListener(t,f,n),typeof e=="function")){typeof f!="function"&&f!==null&&(u in l?l[u]=null:l.hasAttribute(u)&&l.removeAttribute(u)),l.addEventListener(t,e,n);break l}u in l?l[u]=e:e===!0?l.setAttribute(u,""):ze(l,u,e)}}}function Ml(l,t,u){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":V("error",l),V("load",l);var e=!1,n=!1,f;for(f in u)if(u.hasOwnProperty(f)){var c=u[f];if(c!=null)switch(f){case"src":e=!0;break;case"srcSet":n=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(S(137,t));default:ll(l,t,f,c,u,null)}}n&&ll(l,t,"srcSet",u.srcSet,u,null),e&&ll(l,t,"src",u.src,u,null);return;case"input":V("invalid",l);var i=f=c=n=null,s=null,o=null;for(e in u)if(u.hasOwnProperty(e)){var g=u[e];if(g!=null)switch(e){case"name":n=g;break;case"type":c=g;break;case"checked":s=g;break;case"defaultChecked":o=g;break;case"value":f=g;break;case"defaultValue":i=g;break;case"children":case"dangerouslySetInnerHTML":if(g!=null)throw Error(S(137,t));break;default:ll(l,t,e,g,u,null)}}Ti(l,f,i,s,o,c,n,!1),_e(l);return;case"select":V("invalid",l),e=c=f=null;for(n in u)if(u.hasOwnProperty(n)&&(i=u[n],i!=null))switch(n){case"value":f=i;break;case"defaultValue":c=i;break;case"multiple":e=i;default:ll(l,t,n,i,u,null)}t=f,u=c,l.multiple=!!e,t!=null?Zu(l,!!e,t,!1):u!=null&&Zu(l,!!e,u,!0);return;case"textarea":V("invalid",l),f=n=e=null;for(c in u)if(u.hasOwnProperty(c)&&(i=u[c],i!=null))switch(c){case"value":e=i;break;case"defaultValue":n=i;break;case"children":f=i;break;case"dangerouslySetInnerHTML":if(i!=null)throw Error(S(91));break;default:ll(l,t,c,i,u,null)}Ai(l,e,n,f),_e(l);return;case"option":for(s in u)if(u.hasOwnProperty(s)&&(e=u[s],e!=null))switch(s){case"selected":l.selected=e&&typeof e!="function"&&typeof e!="symbol";break;default:ll(l,t,s,e,u,null)}return;case"dialog":V("beforetoggle",l),V("toggle",l),V("cancel",l),V("close",l);break;case"iframe":case"object":V("load",l);break;case"video":case"audio":for(e=0;e<ne.length;e++)V(ne[e],l);break;case"image":V("error",l),V("load",l);break;case"details":V("toggle",l);break;case"embed":case"source":case"link":V("error",l),V("load",l);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(o in u)if(u.hasOwnProperty(o)&&(e=u[o],e!=null))switch(o){case"children":case"dangerouslySetInnerHTML":throw Error(S(137,t));default:ll(l,t,o,e,u,null)}return;default:if(Wn(t)){for(g in u)u.hasOwnProperty(g)&&(e=u[g],e!==void 0&&Yc(l,t,g,e,u,void 0));return}}for(i in u)u.hasOwnProperty(i)&&(e=u[i],e!=null&&ll(l,t,i,e,u,null))}function Fd(l,t,u,e){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var n=null,f=null,c=null,i=null,s=null,o=null,g=null;for(r in u){var E=u[r];if(u.hasOwnProperty(r)&&E!=null)switch(r){case"checked":break;case"value":break;case"defaultValue":s=E;default:e.hasOwnProperty(r)||ll(l,t,r,null,e,E)}}for(var m in e){var r=e[m];if(E=u[m],e.hasOwnProperty(m)&&(r!=null||E!=null))switch(m){case"type":f=r;break;case"name":n=r;break;case"checked":o=r;break;case"defaultChecked":g=r;break;case"value":c=r;break;case"defaultValue":i=r;break;case"children":case"dangerouslySetInnerHTML":if(r!=null)throw Error(S(137,t));break;default:r!==E&&ll(l,t,m,r,e,E)}}Jn(l,c,i,s,o,g,f,n);return;case"select":r=c=i=m=null;for(f in u)if(s=u[f],u.hasOwnProperty(f)&&s!=null)switch(f){case"value":break;case"multiple":r=s;default:e.hasOwnProperty(f)||ll(l,t,f,null,e,s)}for(n in e)if(f=e[n],s=u[n],e.hasOwnProperty(n)&&(f!=null||s!=null))switch(n){case"value":m=f;break;case"defaultValue":i=f;break;case"multiple":c=f;default:f!==s&&ll(l,t,n,f,e,s)}t=i,u=c,e=r,m!=null?Zu(l,!!u,m,!1):!!e!=!!u&&(t!=null?Zu(l,!!u,t,!0):Zu(l,!!u,u?[]:"",!1));return;case"textarea":r=m=null;for(i in u)if(n=u[i],u.hasOwnProperty(i)&&n!=null&&!e.hasOwnProperty(i))switch(i){case"value":break;case"children":break;default:ll(l,t,i,null,e,n)}for(c in e)if(n=e[c],f=u[c],e.hasOwnProperty(c)&&(n!=null||f!=null))switch(c){case"value":m=n;break;case"defaultValue":r=n;break;case"children":break;case"dangerouslySetInnerHTML":if(n!=null)throw Error(S(91));break;default:n!==f&&ll(l,t,c,n,e,f)}Ei(l,m,r);return;case"option":for(var G in u)if(m=u[G],u.hasOwnProperty(G)&&m!=null&&!e.hasOwnProperty(G))switch(G){case"selected":l.selected=!1;break;default:ll(l,t,G,null,e,m)}for(s in e)if(m=e[s],r=u[s],e.hasOwnProperty(s)&&m!==r&&(m!=null||r!=null))switch(s){case"selected":l.selected=m&&typeof m!="function"&&typeof m!="symbol";break;default:ll(l,t,s,m,e,r)}return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var Y in u)m=u[Y],u.hasOwnProperty(Y)&&m!=null&&!e.hasOwnProperty(Y)&&ll(l,t,Y,null,e,m);for(o in e)if(m=e[o],r=u[o],e.hasOwnProperty(o)&&m!==r&&(m!=null||r!=null))switch(o){case"children":case"dangerouslySetInnerHTML":if(m!=null)throw Error(S(137,t));break;default:ll(l,t,o,m,e,r)}return;default:if(Wn(t)){for(var tl in u)m=u[tl],u.hasOwnProperty(tl)&&m!==void 0&&!e.hasOwnProperty(tl)&&Yc(l,t,tl,void 0,e,m);for(g in e)m=e[g],r=u[g],!e.hasOwnProperty(g)||m===r||m===void 0&&r===void 0||Yc(l,t,g,m,e,r);return}}for(var d in u)m=u[d],u.hasOwnProperty(d)&&m!=null&&!e.hasOwnProperty(d)&&ll(l,t,d,null,e,m);for(E in e)m=e[E],r=u[E],!e.hasOwnProperty(E)||m===r||m==null&&r==null||ll(l,t,E,m,e,r)}var Bc=null,pc=null;function En(l){return l.nodeType===9?l:l.ownerDocument}function zv(l){switch(l){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Ov(l,t){if(l===0)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return l===1&&t==="foreignObject"?0:l}function Gc(l,t){return l==="textarea"||l==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.children=="bigint"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Xc=null;function Id(){var l=window.event;return l&&l.type==="popstate"?l===Xc?!1:(Xc=l,!0):(Xc=null,!1)}var _v=typeof setTimeout=="function"?setTimeout:void 0,Pd=typeof clearTimeout=="function"?clearTimeout:void 0,Mv=typeof Promise=="function"?Promise:void 0,l1=typeof queueMicrotask=="function"?queueMicrotask:typeof Mv<"u"?function(l){return Mv.resolve(null).then(l).catch(t1)}:_v;function t1(l){setTimeout(function(){throw l})}function fu(l){return l==="head"}function Dv(l,t){var u=t,e=0,n=0;do{var f=u.nextSibling;if(l.removeChild(u),f&&f.nodeType===8)if(u=f.data,u==="/$"){if(0<e&&8>e){u=e;var c=l.ownerDocument;if(u&1&&ce(c.documentElement),u&2&&ce(c.body),u&4)for(u=c.head,ce(u),c=u.firstChild;c;){var i=c.nextSibling,s=c.nodeName;c[Aa]||s==="SCRIPT"||s==="STYLE"||s==="LINK"&&c.rel.toLowerCase()==="stylesheet"||u.removeChild(c),c=i}}if(n===0){l.removeChild(f),me(t);return}n--}else u==="$"||u==="$?"||u==="$!"?n++:e=u.charCodeAt(0)-48;else e=0;u=f}while(u);me(t)}function Qc(l){var t=l.firstChild;for(t&&t.nodeType===10&&(t=t.nextSibling);t;){var u=t;switch(t=t.nextSibling,u.nodeName){case"HTML":case"HEAD":case"BODY":Qc(u),Cn(u);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if(u.rel.toLowerCase()==="stylesheet")continue}l.removeChild(u)}}function u1(l,t,u,e){for(;l.nodeType===1;){var n=u;if(l.nodeName.toLowerCase()!==t.toLowerCase()){if(!e&&(l.nodeName!=="INPUT"||l.type!=="hidden"))break}else if(e){if(!l[Aa])switch(t){case"meta":if(!l.hasAttribute("itemprop"))break;return l;case"link":if(f=l.getAttribute("rel"),f==="stylesheet"&&l.hasAttribute("data-precedence"))break;if(f!==n.rel||l.getAttribute("href")!==(n.href==null||n.href===""?null:n.href)||l.getAttribute("crossorigin")!==(n.crossOrigin==null?null:n.crossOrigin)||l.getAttribute("title")!==(n.title==null?null:n.title))break;return l;case"style":if(l.hasAttribute("data-precedence"))break;return l;case"script":if(f=l.getAttribute("src"),(f!==(n.src==null?null:n.src)||l.getAttribute("type")!==(n.type==null?null:n.type)||l.getAttribute("crossorigin")!==(n.crossOrigin==null?null:n.crossOrigin))&&f&&l.hasAttribute("async")&&!l.hasAttribute("itemprop"))break;return l;default:return l}}else if(t==="input"&&l.type==="hidden"){var f=n.name==null?null:""+n.name;if(n.type==="hidden"&&l.getAttribute("name")===f)return l}else return l;if(l=rt(l.nextSibling),l===null)break}return null}function a1(l,t,u){if(t==="")return null;for(;l.nodeType!==3;)if((l.nodeType!==1||l.nodeName!=="INPUT"||l.type!=="hidden")&&!u||(l=rt(l.nextSibling),l===null))return null;return l}function xc(l){return l.data==="$!"||l.data==="$?"&&l.ownerDocument.readyState==="complete"}function e1(l,t){var u=l.ownerDocument;if(l.data!=="$?"||u.readyState==="complete")t();else{var e=function(){t(),u.removeEventListener("DOMContentLoaded",e)};u.addEventListener("DOMContentLoaded",e),l._reactRetry=e}}function rt(l){for(;l!=null;l=l.nextSibling){var t=l.nodeType;if(t===1||t===3)break;if(t===8){if(t=l.data,t==="$"||t==="$!"||t==="$?"||t==="F!"||t==="F")break;if(t==="/$")return null}}return l}var Zc=null;function Uv(l){l=l.previousSibling;for(var t=0;l;){if(l.nodeType===8){var u=l.data;if(u==="$"||u==="$!"||u==="$?"){if(t===0)return l;t--}else u==="/$"&&t++}l=l.previousSibling}return null}function Rv(l,t,u){switch(t=En(u),l){case"html":if(l=t.documentElement,!l)throw Error(S(452));return l;case"head":if(l=t.head,!l)throw Error(S(453));return l;case"body":if(l=t.body,!l)throw Error(S(454));return l;default:throw Error(S(451))}}function ce(l){for(var t=l.attributes;t.length;)l.removeAttributeNode(t[0]);Cn(l)}var yt=new Map,Hv=new Set;function An(l){return typeof l.getRootNode=="function"?l.getRootNode():l.nodeType===9?l:l.ownerDocument}var Zt=_.d;_.d={f:n1,r:f1,D:c1,C:i1,L:s1,m:v1,X:d1,S:y1,M:h1};function n1(){var l=Zt.f(),t=hn();return l||t}function f1(l){var t=Gu(l);t!==null&&t.tag===5&&t.type==="form"?k0(t):Zt.r(l)}var ra=typeof document>"u"?null:document;function Nv(l,t,u){var e=ra;if(e&&typeof t=="string"&&t){var n=et(t);n='link[rel="'+l+'"][href="'+n+'"]',typeof u=="string"&&(n+='[crossorigin="'+u+'"]'),Hv.has(n)||(Hv.add(n),l={rel:l,crossOrigin:u,href:t},e.querySelector(n)===null&&(t=e.createElement("link"),Ml(t,"link",l),Tl(t),e.head.appendChild(t)))}}function c1(l){Zt.D(l),Nv("dns-prefetch",l,null)}function i1(l,t){Zt.C(l,t),Nv("preconnect",l,t)}function s1(l,t,u){Zt.L(l,t,u);var e=ra;if(e&&l&&t){var n='link[rel="preload"][as="'+et(t)+'"]';t==="image"&&u&&u.imageSrcSet?(n+='[imagesrcset="'+et(u.imageSrcSet)+'"]',typeof u.imageSizes=="string"&&(n+='[imagesizes="'+et(u.imageSizes)+'"]')):n+='[href="'+et(l)+'"]';var f=n;switch(t){case"style":f=Sa(l);break;case"script":f=ga(l)}yt.has(f)||(l=H({rel:"preload",href:t==="image"&&u&&u.imageSrcSet?void 0:l,as:t},u),yt.set(f,l),e.querySelector(n)!==null||t==="style"&&e.querySelector(ie(f))||t==="script"&&e.querySelector(se(f))||(t=e.createElement("link"),Ml(t,"link",l),Tl(t),e.head.appendChild(t)))}}function v1(l,t){Zt.m(l,t);var u=ra;if(u&&l){var e=t&&typeof t.as=="string"?t.as:"script",n='link[rel="modulepreload"][as="'+et(e)+'"][href="'+et(l)+'"]',f=n;switch(e){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":f=ga(l)}if(!yt.has(f)&&(l=H({rel:"modulepreload",href:l},t),yt.set(f,l),u.querySelector(n)===null)){switch(e){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(u.querySelector(se(f)))return}e=u.createElement("link"),Ml(e,"link",l),Tl(e),u.head.appendChild(e)}}}function y1(l,t,u){Zt.S(l,t,u);var e=ra;if(e&&l){var n=Xu(e).hoistableStyles,f=Sa(l);t=t||"default";var c=n.get(f);if(!c){var i={loading:0,preload:null};if(c=e.querySelector(ie(f)))i.loading=5;else{l=H({rel:"stylesheet",href:l,"data-precedence":t},u),(u=yt.get(f))&&jc(l,u);var s=c=e.createElement("link");Tl(s),Ml(s,"link",l),s._p=new Promise(function(o,g){s.onload=o,s.onerror=g}),s.addEventListener("load",function(){i.loading|=1}),s.addEventListener("error",function(){i.loading|=2}),i.loading|=4,zn(c,t,e)}c={type:"stylesheet",instance:c,count:1,state:i},n.set(f,c)}}}function d1(l,t){Zt.X(l,t);var u=ra;if(u&&l){var e=Xu(u).hoistableScripts,n=ga(l),f=e.get(n);f||(f=u.querySelector(se(n)),f||(l=H({src:l,async:!0},t),(t=yt.get(n))&&Cc(l,t),f=u.createElement("script"),Tl(f),Ml(f,"link",l),u.head.appendChild(f)),f={type:"script",instance:f,count:1,state:null},e.set(n,f))}}function h1(l,t){Zt.M(l,t);var u=ra;if(u&&l){var e=Xu(u).hoistableScripts,n=ga(l),f=e.get(n);f||(f=u.querySelector(se(n)),f||(l=H({src:l,async:!0,type:"module"},t),(t=yt.get(n))&&Cc(l,t),f=u.createElement("script"),Tl(f),Ml(f,"link",l),u.head.appendChild(f)),f={type:"script",instance:f,count:1,state:null},e.set(n,f))}}function qv(l,t,u,e){var n=(n=X.current)?An(n):null;if(!n)throw Error(S(446));switch(l){case"meta":case"title":return null;case"style":return typeof u.precedence=="string"&&typeof u.href=="string"?(t=Sa(u.href),u=Xu(n).hoistableStyles,e=u.get(t),e||(e={type:"style",instance:null,count:0,state:null},u.set(t,e)),e):{type:"void",instance:null,count:0,state:null};case"link":if(u.rel==="stylesheet"&&typeof u.href=="string"&&typeof u.precedence=="string"){l=Sa(u.href);var f=Xu(n).hoistableStyles,c=f.get(l);if(c||(n=n.ownerDocument||n,c={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},f.set(l,c),(f=n.querySelector(ie(l)))&&!f._p&&(c.instance=f,c.state.loading=5),yt.has(l)||(u={rel:"preload",as:"style",href:u.href,crossOrigin:u.crossOrigin,integrity:u.integrity,media:u.media,hrefLang:u.hrefLang,referrerPolicy:u.referrerPolicy},yt.set(l,u),f||o1(n,l,u,c.state))),t&&e===null)throw Error(S(528,""));return c}if(t&&e!==null)throw Error(S(529,""));return null;case"script":return t=u.async,u=u.src,typeof u=="string"&&t&&typeof t!="function"&&typeof t!="symbol"?(t=ga(u),u=Xu(n).hoistableScripts,e=u.get(t),e||(e={type:"script",instance:null,count:0,state:null},u.set(t,e)),e):{type:"void",instance:null,count:0,state:null};default:throw Error(S(444,l))}}function Sa(l){return'href="'+et(l)+'"'}function ie(l){return'link[rel="stylesheet"]['+l+"]"}function Yv(l){return H({},l,{"data-precedence":l.precedence,precedence:null})}function o1(l,t,u,e){l.querySelector('link[rel="preload"][as="style"]['+t+"]")?e.loading=1:(t=l.createElement("link"),e.preload=t,t.addEventListener("load",function(){return e.loading|=1}),t.addEventListener("error",function(){return e.loading|=2}),Ml(t,"link",u),Tl(t),l.head.appendChild(t))}function ga(l){return'[src="'+et(l)+'"]'}function se(l){return"script[async]"+l}function Bv(l,t,u){if(t.count++,t.instance===null)switch(t.type){case"style":var e=l.querySelector('style[data-href~="'+et(u.href)+'"]');if(e)return t.instance=e,Tl(e),e;var n=H({},u,{"data-href":u.href,"data-precedence":u.precedence,href:null,precedence:null});return e=(l.ownerDocument||l).createElement("style"),Tl(e),Ml(e,"style",n),zn(e,u.precedence,l),t.instance=e;case"stylesheet":n=Sa(u.href);var f=l.querySelector(ie(n));if(f)return t.state.loading|=4,t.instance=f,Tl(f),f;e=Yv(u),(n=yt.get(n))&&jc(e,n),f=(l.ownerDocument||l).createElement("link"),Tl(f);var c=f;return c._p=new Promise(function(i,s){c.onload=i,c.onerror=s}),Ml(f,"link",e),t.state.loading|=4,zn(f,u.precedence,l),t.instance=f;case"script":return f=ga(u.src),(n=l.querySelector(se(f)))?(t.instance=n,Tl(n),n):(e=u,(n=yt.get(f))&&(e=H({},u),Cc(e,n)),l=l.ownerDocument||l,n=l.createElement("script"),Tl(n),Ml(n,"link",e),l.head.appendChild(n),t.instance=n);case"void":return null;default:throw Error(S(443,t.type))}else t.type==="stylesheet"&&(t.state.loading&4)===0&&(e=t.instance,t.state.loading|=4,zn(e,u.precedence,l));return t.instance}function zn(l,t,u){for(var e=u.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),n=e.length?e[e.length-1]:null,f=n,c=0;c<e.length;c++){var i=e[c];if(i.dataset.precedence===t)f=i;else if(f!==n)break}f?f.parentNode.insertBefore(l,f.nextSibling):(t=u.nodeType===9?u.head:u,t.insertBefore(l,t.firstChild))}function jc(l,t){l.crossOrigin==null&&(l.crossOrigin=t.crossOrigin),l.referrerPolicy==null&&(l.referrerPolicy=t.referrerPolicy),l.title==null&&(l.title=t.title)}function Cc(l,t){l.crossOrigin==null&&(l.crossOrigin=t.crossOrigin),l.referrerPolicy==null&&(l.referrerPolicy=t.referrerPolicy),l.integrity==null&&(l.integrity=t.integrity)}var On=null;function pv(l,t,u){if(On===null){var e=new Map,n=On=new Map;n.set(u,e)}else n=On,e=n.get(u),e||(e=new Map,n.set(u,e));if(e.has(l))return e;for(e.set(l,null),u=u.getElementsByTagName(l),n=0;n<u.length;n++){var f=u[n];if(!(f[Aa]||f[Hl]||l==="link"&&f.getAttribute("rel")==="stylesheet")&&f.namespaceURI!=="http://www.w3.org/2000/svg"){var c=f.getAttribute(t)||"";c=l+c;var i=e.get(c);i?i.push(f):e.set(c,[f])}}return e}function Gv(l,t,u){l=l.ownerDocument||l,l.head.insertBefore(u,t==="title"?l.querySelector("head > title"):null)}function m1(l,t,u){if(u===1||t.itemProp!=null)return!1;switch(l){case"meta":case"title":return!0;case"style":if(typeof t.precedence!="string"||typeof t.href!="string"||t.href==="")break;return!0;case"link":if(typeof t.rel!="string"||typeof t.href!="string"||t.href===""||t.onLoad||t.onError)break;switch(t.rel){case"stylesheet":return l=t.disabled,typeof t.precedence=="string"&&l==null;default:return!0}case"script":if(t.async&&typeof t.async!="function"&&typeof t.async!="symbol"&&!t.onLoad&&!t.onError&&t.src&&typeof t.src=="string")return!0}return!1}function Xv(l){return!(l.type==="stylesheet"&&(l.state.loading&3)===0)}var ve=null;function r1(){}function S1(l,t,u){if(ve===null)throw Error(S(475));var e=ve;if(t.type==="stylesheet"&&(typeof u.media!="string"||matchMedia(u.media).matches!==!1)&&(t.state.loading&4)===0){if(t.instance===null){var n=Sa(u.href),f=l.querySelector(ie(n));if(f){l=f._p,l!==null&&typeof l=="object"&&typeof l.then=="function"&&(e.count++,e=_n.bind(e),l.then(e,e)),t.state.loading|=4,t.instance=f,Tl(f);return}f=l.ownerDocument||l,u=Yv(u),(n=yt.get(n))&&jc(u,n),f=f.createElement("link"),Tl(f);var c=f;c._p=new Promise(function(i,s){c.onload=i,c.onerror=s}),Ml(f,"link",u),t.instance=f}e.stylesheets===null&&(e.stylesheets=new Map),e.stylesheets.set(t,l),(l=t.state.preload)&&(t.state.loading&3)===0&&(e.count++,t=_n.bind(e),l.addEventListener("load",t),l.addEventListener("error",t))}}function g1(){if(ve===null)throw Error(S(475));var l=ve;return l.stylesheets&&l.count===0&&Vc(l,l.stylesheets),0<l.count?function(t){var u=setTimeout(function(){if(l.stylesheets&&Vc(l,l.stylesheets),l.unsuspend){var e=l.unsuspend;l.unsuspend=null,e()}},6e4);return l.unsuspend=t,function(){l.unsuspend=null,clearTimeout(u)}}:null}function _n(){if(this.count--,this.count===0){if(this.stylesheets)Vc(this,this.stylesheets);else if(this.unsuspend){var l=this.unsuspend;this.unsuspend=null,l()}}}var Mn=null;function Vc(l,t){l.stylesheets=null,l.unsuspend!==null&&(l.count++,Mn=new Map,t.forEach(b1,l),Mn=null,_n.call(l))}function b1(l,t){if(!(t.state.loading&4)){var u=Mn.get(l);if(u)var e=u.get(null);else{u=new Map,Mn.set(l,u);for(var n=l.querySelectorAll("link[data-precedence],style[data-precedence]"),f=0;f<n.length;f++){var c=n[f];(c.nodeName==="LINK"||c.getAttribute("media")!=="not all")&&(u.set(c.dataset.precedence,c),e=c)}e&&u.set(null,e)}n=t.instance,c=n.getAttribute("data-precedence"),f=u.get(c)||e,f===e&&u.set(null,n),u.set(c,n),this.count++,e=_n.bind(this),n.addEventListener("load",e),n.addEventListener("error",e),f?f.parentNode.insertBefore(n,f.nextSibling):(l=l.nodeType===9?l.head:l,l.insertBefore(n,l.firstChild)),t.state.loading|=4}}var ye={$$typeof:Dl,Provider:null,Consumer:null,_currentValue:p,_currentValue2:p,_threadCount:0};function T1(l,t,u,e,n,f,c,i){this.tag=1,this.containerInfo=l,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Qn(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Qn(0),this.hiddenUpdates=Qn(null),this.identifierPrefix=e,this.onUncaughtError=n,this.onCaughtError=f,this.onRecoverableError=c,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Qv(l,t,u,e,n,f,c,i,s,o,g,E){return l=new T1(l,t,u,c,i,s,o,E),t=1,f===!0&&(t|=24),f=Fl(3,null,null,t),l.current=f,f.stateNode=l,t=Of(),t.refCount++,l.pooledCache=t,t.refCount++,f.memoizedState={element:e,isDehydrated:u,cache:t},Uf(f),l}function xv(l){return l?(l=$u,l):$u}function Zv(l,t,u,e,n,f){n=xv(n),e.context===null?e.context=n:e.pendingContext=n,e=wt(t),e.payload={element:u},f=f===void 0?null:f,f!==null&&(e.callback=f),u=Wt(l,e,t),u!==null&&(ut(u,l,t),ja(u,l,t))}function jv(l,t){if(l=l.memoizedState,l!==null&&l.dehydrated!==null){var u=l.retryLane;l.retryLane=u!==0&&u<t?u:t}}function Lc(l,t){jv(l,t),(l=l.alternate)&&jv(l,t)}function Cv(l){if(l.tag===13){var t=Wu(l,67108864);t!==null&&ut(t,l,67108864),Lc(l,67108864)}}var Dn=!0;function E1(l,t,u,e){var n=b.T;b.T=null;var f=_.p;try{_.p=2,Kc(l,t,u,e)}finally{_.p=f,b.T=n}}function A1(l,t,u,e){var n=b.T;b.T=null;var f=_.p;try{_.p=8,Kc(l,t,u,e)}finally{_.p=f,b.T=n}}function Kc(l,t,u,e){if(Dn){var n=Jc(e);if(n===null)qc(l,t,e,Un,u),Lv(l,e);else if(O1(n,l,t,u,e))e.stopPropagation();else if(Lv(l,e),t&4&&-1<z1.indexOf(l)){for(;n!==null;){var f=Gu(n);if(f!==null)switch(f.tag){case 3:if(f=f.stateNode,f.current.memoizedState.isDehydrated){var c=mu(f.pendingLanes);if(c!==0){var i=f;for(i.pendingLanes|=2,i.entangledLanes|=2;c;){var s=1<<31-$l(c);i.entanglements[1]|=s,c&=~s}zt(f),(F&6)===0&&(yn=gt()+500,ee(0))}}break;case 13:i=Wu(f,2),i!==null&&ut(i,f,2),hn(),Lc(f,2)}if(f=Jc(e),f===null&&qc(l,t,e,Un,u),f===n)break;n=f}n!==null&&e.stopPropagation()}else qc(l,t,e,null,u)}}function Jc(l){return l=kn(l),wc(l)}var Un=null;function wc(l){if(Un=null,l=pu(l),l!==null){var t=W(l);if(t===null)l=null;else{var u=t.tag;if(u===13){if(l=hl(t),l!==null)return l;l=null}else if(u===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;l=null}else t!==l&&(l=null)}}return Un=l,null}function Vv(l){switch(l){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(iy()){case ai:return 2;case ei:return 8;case be:case sy:return 32;case ni:return 268435456;default:return 32}default:return 32}}var Wc=!1,cu=null,iu=null,su=null,de=new Map,he=new Map,vu=[],z1="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function Lv(l,t){switch(l){case"focusin":case"focusout":cu=null;break;case"dragenter":case"dragleave":iu=null;break;case"mouseover":case"mouseout":su=null;break;case"pointerover":case"pointerout":de.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":he.delete(t.pointerId)}}function oe(l,t,u,e,n,f){return l===null||l.nativeEvent!==f?(l={blockedOn:t,domEventName:u,eventSystemFlags:e,nativeEvent:f,targetContainers:[n]},t!==null&&(t=Gu(t),t!==null&&Cv(t)),l):(l.eventSystemFlags|=e,t=l.targetContainers,n!==null&&t.indexOf(n)===-1&&t.push(n),l)}function O1(l,t,u,e,n){switch(t){case"focusin":return cu=oe(cu,l,t,u,e,n),!0;case"dragenter":return iu=oe(iu,l,t,u,e,n),!0;case"mouseover":return su=oe(su,l,t,u,e,n),!0;case"pointerover":var f=n.pointerId;return de.set(f,oe(de.get(f)||null,l,t,u,e,n)),!0;case"gotpointercapture":return f=n.pointerId,he.set(f,oe(he.get(f)||null,l,t,u,e,n)),!0}return!1}function Kv(l){var t=pu(l.target);if(t!==null){var u=W(t);if(u!==null){if(t=u.tag,t===13){if(t=hl(u),t!==null){l.blockedOn=t,Sy(l.priority,function(){if(u.tag===13){var e=tt();e=xn(e);var n=Wu(u,e);n!==null&&ut(n,u,e),Lc(u,e)}});return}}else if(t===3&&u.stateNode.current.memoizedState.isDehydrated){l.blockedOn=u.tag===3?u.stateNode.containerInfo:null;return}}}l.blockedOn=null}function Rn(l){if(l.blockedOn!==null)return!1;for(var t=l.targetContainers;0<t.length;){var u=Jc(l.nativeEvent);if(u===null){u=l.nativeEvent;var e=new u.constructor(u.type,u);$n=e,u.target.dispatchEvent(e),$n=null}else return t=Gu(u),t!==null&&Cv(t),l.blockedOn=u,!1;t.shift()}return!0}function Jv(l,t,u){Rn(l)&&u.delete(t)}function _1(){Wc=!1,cu!==null&&Rn(cu)&&(cu=null),iu!==null&&Rn(iu)&&(iu=null),su!==null&&Rn(su)&&(su=null),de.forEach(Jv),he.forEach(Jv)}function Hn(l,t){l.blockedOn===t&&(l.blockedOn=null,Wc||(Wc=!0,U.unstable_scheduleCallback(U.unstable_NormalPriority,_1)))}var Nn=null;function wv(l){Nn!==l&&(Nn=l,U.unstable_scheduleCallback(U.unstable_NormalPriority,function(){Nn===l&&(Nn=null);for(var t=0;t<l.length;t+=3){var u=l[t],e=l[t+1],n=l[t+2];if(typeof e!="function"){if(wc(e||u)===null)continue;break}var f=Gu(u);f!==null&&(l.splice(t,3),t-=3,wf(f,{pending:!0,data:n,method:u.method,action:e},e,n))}}))}function me(l){function t(s){return Hn(s,l)}cu!==null&&Hn(cu,l),iu!==null&&Hn(iu,l),su!==null&&Hn(su,l),de.forEach(t),he.forEach(t);for(var u=0;u<vu.length;u++){var e=vu[u];e.blockedOn===l&&(e.blockedOn=null)}for(;0<vu.length&&(u=vu[0],u.blockedOn===null);)Kv(u),u.blockedOn===null&&vu.shift();if(u=(l.ownerDocument||l).$$reactFormReplay,u!=null)for(e=0;e<u.length;e+=3){var n=u[e],f=u[e+1],c=n[xl]||null;if(typeof f=="function")c||wv(u);else if(c){var i=null;if(f&&f.hasAttribute("formAction")){if(n=f,c=f[xl]||null)i=c.formAction;else if(wc(n)!==null)continue}else i=c.action;typeof i=="function"?u[e+1]=i:(u.splice(e,3),e-=3),wv(u)}}}function $c(l){this._internalRoot=l}qn.prototype.render=$c.prototype.render=function(l){var t=this._internalRoot;if(t===null)throw Error(S(409));var u=t.current,e=tt();Zv(u,e,l,t,null,null)},qn.prototype.unmount=$c.prototype.unmount=function(){var l=this._internalRoot;if(l!==null){this._internalRoot=null;var t=l.containerInfo;Zv(l.current,2,null,l,null,null),hn(),t[Bu]=null}};function qn(l){this._internalRoot=l}qn.prototype.unstable_scheduleHydration=function(l){if(l){var t=vi();l={blockedOn:null,target:l,priority:t};for(var u=0;u<vu.length&&t!==0&&t<vu[u].priority;u++);vu.splice(u,0,l),u===0&&Kv(l)}};var Wv=sl.version;if(Wv!=="19.1.1")throw Error(S(527,Wv,"19.1.1"));_.findDOMNode=function(l){var t=l._reactInternals;if(t===void 0)throw typeof l.render=="function"?Error(S(188)):(l=Object.keys(l).join(","),Error(S(268,l)));return l=N(t),l=l!==null?z(l):null,l=l===null?null:l.stateNode,l};var M1={bundleType:0,version:"19.1.1",rendererPackageName:"react-dom",currentDispatcherRef:b,reconcilerVersion:"19.1.1"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Yn=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Yn.isDisabled&&Yn.supportsFiber)try{ba=Yn.inject(M1),Wl=Yn}catch{}}return Se.createRoot=function(l,t){if(!j(l))throw Error(S(299));var u=!1,e="",n=vs,f=ys,c=ds,i=null;return t!=null&&(t.unstable_strictMode===!0&&(u=!0),t.identifierPrefix!==void 0&&(e=t.identifierPrefix),t.onUncaughtError!==void 0&&(n=t.onUncaughtError),t.onCaughtError!==void 0&&(f=t.onCaughtError),t.onRecoverableError!==void 0&&(c=t.onRecoverableError),t.unstable_transitionCallbacks!==void 0&&(i=t.unstable_transitionCallbacks)),t=Qv(l,1,!1,null,null,u,e,n,f,c,i,null),l[Bu]=t.current,Nc(l),new $c(t)},Se.hydrateRoot=function(l,t,u){if(!j(l))throw Error(S(299));var e=!1,n="",f=vs,c=ys,i=ds,s=null,o=null;return u!=null&&(u.unstable_strictMode===!0&&(e=!0),u.identifierPrefix!==void 0&&(n=u.identifierPrefix),u.onUncaughtError!==void 0&&(f=u.onUncaughtError),u.onCaughtError!==void 0&&(c=u.onCaughtError),u.onRecoverableError!==void 0&&(i=u.onRecoverableError),u.unstable_transitionCallbacks!==void 0&&(s=u.unstable_transitionCallbacks),u.formState!==void 0&&(o=u.formState)),t=Qv(l,1,!0,t,u??null,e,n,f,c,i,s,o),t.context=xv(null),u=t.current,e=tt(),e=xn(e),n=wt(e),n.callback=null,Wt(u,n,e),u=e,t.current.lanes=u,Ea(t,u),zt(t),l[Bu]=t.current,Nc(l),new qn(t)},Se.version="19.1.1",Se}var ey;function G1(){if(ey)return Ic.exports;ey=1;function U(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(U)}catch(sl){console.error(sl)}}return U(),Ic.exports=p1(),Ic.exports}var X1=G1();const Q1=""+new URL("react-CHdo91hT.svg",import.meta.url).href,x1=""+new URL("../vite.svg",import.meta.url).href;function Z1(){const[U,sl]=ny.useState(0),k=()=>{console.log("click",a)};return Xl.jsxs(Xl.Fragment,{children:[Xl.jsxs("div",{children:[Xl.jsx("a",{href:"https://vite.dev",target:"_blank",children:Xl.jsx("img",{src:x1,className:"logo",alt:"Vite logo"})}),Xl.jsx("a",{href:"https://react.dev",target:"_blank",children:Xl.jsx("img",{src:Q1,className:"logo react",alt:"React logo"})})]}),Xl.jsx("h1",{onClick:k,children:"Vite + React+1"}),Xl.jsxs("div",{className:"card",children:[Xl.jsxs("button",{onClick:()=>sl(S=>S+1),children:["count is ",U]}),Xl.jsxs("p",{children:["Edit ",Xl.jsx("code",{children:"src/App.tsx"})," and save to test HMR"]})]}),Xl.jsx("p",{className:"read-the-docs",children:"Click on the Vite and React logos to learn more"})]})}X1.createRoot(document.getElementById("root")).render(Xl.jsx(ny.StrictMode,{children:Xl.jsx(Z1,{})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtREtTYkpneHkuanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWFjdEAxOS4xLjEvbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0QDE5LjEuMS9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVhY3RAMTkuMS4xL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWFjdEAxOS4xLjEvbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NjaGVkdWxlckAwLjI2LjAvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2NoZWR1bGVyQDAuMjYuMC9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LWRvbUAxOS4xLjFfcmVhY3RAMTkuMS4xL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LWRvbUAxOS4xLjFfcmVhY3RAMTkuMS4xL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVhY3QtZG9tQDE5LjEuMV9yZWFjdEAxOS4xLjEvbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLWNsaWVudC5wcm9kdWN0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LWRvbUAxOS4xLjFfcmVhY3RAMTkuMS4xL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwiLi4vLi4vc3JjL2Fzc2V0cy9yZWFjdC5zdmciLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi92aXRlLnN2ZyIsIi4uLy4uL3NyYy9BcHAudHN4IiwiLi4vLi4vc3JjL21haW4udHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiKSxcbiAgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTtcbmZ1bmN0aW9uIGpzeFByb2QodHlwZSwgY29uZmlnLCBtYXliZUtleSkge1xuICB2YXIga2V5ID0gbnVsbDtcbiAgdm9pZCAwICE9PSBtYXliZUtleSAmJiAoa2V5ID0gXCJcIiArIG1heWJlS2V5KTtcbiAgdm9pZCAwICE9PSBjb25maWcua2V5ICYmIChrZXkgPSBcIlwiICsgY29uZmlnLmtleSk7XG4gIGlmIChcImtleVwiIGluIGNvbmZpZykge1xuICAgIG1heWJlS2V5ID0ge307XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gY29uZmlnKVxuICAgICAgXCJrZXlcIiAhPT0gcHJvcE5hbWUgJiYgKG1heWJlS2V5W3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV0pO1xuICB9IGVsc2UgbWF5YmVLZXkgPSBjb25maWc7XG4gIGNvbmZpZyA9IG1heWJlS2V5LnJlZjtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfRUxFTUVOVF9UWVBFLFxuICAgIHR5cGU6IHR5cGUsXG4gICAga2V5OiBrZXksXG4gICAgcmVmOiB2b2lkIDAgIT09IGNvbmZpZyA/IGNvbmZpZyA6IG51bGwsXG4gICAgcHJvcHM6IG1heWJlS2V5XG4gIH07XG59XG5leHBvcnRzLkZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbmV4cG9ydHMuanN4ID0ganN4UHJvZDtcbmV4cG9ydHMuanN4cyA9IGpzeFByb2Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnRyYW5zaXRpb25hbC5lbGVtZW50XCIpLFxuICBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksXG4gIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksXG4gIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksXG4gIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksXG4gIFJFQUNUX0NPTlNVTUVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29uc3VtZXJcIiksXG4gIFJFQUNUX0NPTlRFWFRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLFxuICBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLFxuICBSRUFDVF9TVVNQRU5TRV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLFxuICBSRUFDVF9NRU1PX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxcbiAgUkVBQ1RfTEFaWV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksXG4gIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IFN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobnVsbCA9PT0gbWF5YmVJdGVyYWJsZSB8fCBcIm9iamVjdFwiICE9PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSkgcmV0dXJuIG51bGw7XG4gIG1heWJlSXRlcmFibGUgPVxuICAgIChNQVlCRV9JVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtNQVlCRV9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgIG1heWJlSXRlcmFibGVbXCJAQGl0ZXJhdG9yXCJdO1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSA/IG1heWJlSXRlcmFibGUgOiBudWxsO1xufVxudmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0ge1xuICAgIGlzTW91bnRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICExO1xuICAgIH0sXG4gICAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbiAoKSB7fSxcbiAgICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAoKSB7fSxcbiAgICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uICgpIHt9XG4gIH0sXG4gIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24sXG4gIGVtcHR5T2JqZWN0ID0ge307XG5mdW5jdGlvbiBDb21wb25lbnQocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbn1cbkNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuQ29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gIGlmIChcbiAgICBcIm9iamVjdFwiICE9PSB0eXBlb2YgcGFydGlhbFN0YXRlICYmXG4gICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcGFydGlhbFN0YXRlICYmXG4gICAgbnVsbCAhPSBwYXJ0aWFsU3RhdGVcbiAgKVxuICAgIHRocm93IEVycm9yKFxuICAgICAgXCJ0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIlxuICAgICk7XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcywgcGFydGlhbFN0YXRlLCBjYWxsYmFjaywgXCJzZXRTdGF0ZVwiKTtcbn07XG5Db21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcywgY2FsbGJhY2ssIFwiZm9yY2VVcGRhdGVcIik7XG59O1xuZnVuY3Rpb24gQ29tcG9uZW50RHVtbXkoKSB7fVxuQ29tcG9uZW50RHVtbXkucHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcbmZ1bmN0aW9uIFB1cmVDb21wb25lbnQocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbn1cbnZhciBwdXJlQ29tcG9uZW50UHJvdG90eXBlID0gKFB1cmVDb21wb25lbnQucHJvdG90eXBlID0gbmV3IENvbXBvbmVudER1bW15KCkpO1xucHVyZUNvbXBvbmVudFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFB1cmVDb21wb25lbnQ7XG5hc3NpZ24ocHVyZUNvbXBvbmVudFByb3RvdHlwZSwgQ29tcG9uZW50LnByb3RvdHlwZSk7XG5wdXJlQ29tcG9uZW50UHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50ID0gITA7XG52YXIgaXNBcnJheUltcGwgPSBBcnJheS5pc0FycmF5LFxuICBSZWFjdFNoYXJlZEludGVybmFscyA9IHsgSDogbnVsbCwgQTogbnVsbCwgVDogbnVsbCwgUzogbnVsbCwgVjogbnVsbCB9LFxuICBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCBzZWxmLCBzb3VyY2UsIG93bmVyLCBwcm9wcykge1xuICBzZWxmID0gcHJvcHMucmVmO1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHZvaWQgMCAhPT0gc2VsZiA/IHNlbGYgOiBudWxsLFxuICAgIHByb3BzOiBwcm9wc1xuICB9O1xufVxuZnVuY3Rpb24gY2xvbmVBbmRSZXBsYWNlS2V5KG9sZEVsZW1lbnQsIG5ld0tleSkge1xuICByZXR1cm4gUmVhY3RFbGVtZW50KFxuICAgIG9sZEVsZW1lbnQudHlwZSxcbiAgICBuZXdLZXksXG4gICAgdm9pZCAwLFxuICAgIHZvaWQgMCxcbiAgICB2b2lkIDAsXG4gICAgb2xkRWxlbWVudC5wcm9wc1xuICApO1xufVxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiAoXG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9iamVjdCAmJlxuICAgIG51bGwgIT09IG9iamVjdCAmJlxuICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG4gICk7XG59XG5mdW5jdGlvbiBlc2NhcGUoa2V5KSB7XG4gIHZhciBlc2NhcGVyTG9va3VwID0geyBcIj1cIjogXCI9MFwiLCBcIjpcIjogXCI9MlwiIH07XG4gIHJldHVybiAoXG4gICAgXCIkXCIgK1xuICAgIGtleS5yZXBsYWNlKC9bPTpdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgcmV0dXJuIGVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICAgIH0pXG4gICk7XG59XG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvXFwvKy9nO1xuZnVuY3Rpb24gZ2V0RWxlbWVudEtleShlbGVtZW50LCBpbmRleCkge1xuICByZXR1cm4gXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVsZW1lbnQgJiYgbnVsbCAhPT0gZWxlbWVudCAmJiBudWxsICE9IGVsZW1lbnQua2V5XG4gICAgPyBlc2NhcGUoXCJcIiArIGVsZW1lbnQua2V5KVxuICAgIDogaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuZnVuY3Rpb24gbm9vcCQxKCkge31cbmZ1bmN0aW9uIHJlc29sdmVUaGVuYWJsZSh0aGVuYWJsZSkge1xuICBzd2l0Y2ggKHRoZW5hYmxlLnN0YXR1cykge1xuICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgIHRocm93IHRoZW5hYmxlLnJlYXNvbjtcbiAgICBkZWZhdWx0OlxuICAgICAgc3dpdGNoIChcbiAgICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0aGVuYWJsZS5zdGF0dXNcbiAgICAgICAgICA/IHRoZW5hYmxlLnRoZW4obm9vcCQxLCBub29wJDEpXG4gICAgICAgICAgOiAoKHRoZW5hYmxlLnN0YXR1cyA9IFwicGVuZGluZ1wiKSxcbiAgICAgICAgICAgIHRoZW5hYmxlLnRoZW4oXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChmdWxmaWxsZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMgJiZcbiAgICAgICAgICAgICAgICAgICgodGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIiksXG4gICAgICAgICAgICAgICAgICAodGhlbmFibGUudmFsdWUgPSBmdWxmaWxsZWRWYWx1ZSkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBcInBlbmRpbmdcIiA9PT0gdGhlbmFibGUuc3RhdHVzICYmXG4gICAgICAgICAgICAgICAgICAoKHRoZW5hYmxlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIiksICh0aGVuYWJsZS5yZWFzb24gPSBlcnJvcikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApKSxcbiAgICAgICAgdGhlbmFibGUuc3RhdHVzKVxuICAgICAgKSB7XG4gICAgICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgICAgICByZXR1cm4gdGhlbmFibGUudmFsdWU7XG4gICAgICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgICAgIHRocm93IHRoZW5hYmxlLnJlYXNvbjtcbiAgICAgIH1cbiAgfVxuICB0aHJvdyB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIG1hcEludG9BcnJheShjaGlsZHJlbiwgYXJyYXksIGVzY2FwZWRQcmVmaXgsIG5hbWVTb0ZhciwgY2FsbGJhY2spIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgY2hpbGRyZW47XG4gIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlIHx8IFwiYm9vbGVhblwiID09PSB0eXBlKSBjaGlsZHJlbiA9IG51bGw7XG4gIHZhciBpbnZva2VDYWxsYmFjayA9ICExO1xuICBpZiAobnVsbCA9PT0gY2hpbGRyZW4pIGludm9rZUNhbGxiYWNrID0gITA7XG4gIGVsc2VcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgaW52b2tlQ2FsbGJhY2sgPSAhMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgIHN3aXRjaCAoY2hpbGRyZW4uJCR0eXBlb2YpIHtcbiAgICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2sgPSAhMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgKGludm9rZUNhbGxiYWNrID0gY2hpbGRyZW4uX2luaXQpLFxuICAgICAgICAgICAgICBtYXBJbnRvQXJyYXkoXG4gICAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2soY2hpbGRyZW4uX3BheWxvYWQpLFxuICAgICAgICAgICAgICAgIGFycmF5LFxuICAgICAgICAgICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgICAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG4gIGlmIChpbnZva2VDYWxsYmFjaylcbiAgICByZXR1cm4gKFxuICAgICAgKGNhbGxiYWNrID0gY2FsbGJhY2soY2hpbGRyZW4pKSxcbiAgICAgIChpbnZva2VDYWxsYmFjayA9XG4gICAgICAgIFwiXCIgPT09IG5hbWVTb0ZhciA/IFwiLlwiICsgZ2V0RWxlbWVudEtleShjaGlsZHJlbiwgMCkgOiBuYW1lU29GYXIpLFxuICAgICAgaXNBcnJheUltcGwoY2FsbGJhY2spXG4gICAgICAgID8gKChlc2NhcGVkUHJlZml4ID0gXCJcIiksXG4gICAgICAgICAgbnVsbCAhPSBpbnZva2VDYWxsYmFjayAmJlxuICAgICAgICAgICAgKGVzY2FwZWRQcmVmaXggPVxuICAgICAgICAgICAgICBpbnZva2VDYWxsYmFjay5yZXBsYWNlKHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4LCBcIiQmL1wiKSArIFwiL1wiKSxcbiAgICAgICAgICBtYXBJbnRvQXJyYXkoY2FsbGJhY2ssIGFycmF5LCBlc2NhcGVkUHJlZml4LCBcIlwiLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgfSkpXG4gICAgICAgIDogbnVsbCAhPSBjYWxsYmFjayAmJlxuICAgICAgICAgIChpc1ZhbGlkRWxlbWVudChjYWxsYmFjaykgJiZcbiAgICAgICAgICAgIChjYWxsYmFjayA9IGNsb25lQW5kUmVwbGFjZUtleShcbiAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgIGVzY2FwZWRQcmVmaXggK1xuICAgICAgICAgICAgICAgIChudWxsID09IGNhbGxiYWNrLmtleSB8fFxuICAgICAgICAgICAgICAgIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5rZXkgPT09IGNhbGxiYWNrLmtleSlcbiAgICAgICAgICAgICAgICAgID8gXCJcIlxuICAgICAgICAgICAgICAgICAgOiAoXCJcIiArIGNhbGxiYWNrLmtleSkucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgICB1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCxcbiAgICAgICAgICAgICAgICAgICAgICBcIiQmL1wiXG4gICAgICAgICAgICAgICAgICAgICkgKyBcIi9cIikgK1xuICAgICAgICAgICAgICAgIGludm9rZUNhbGxiYWNrXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICBhcnJheS5wdXNoKGNhbGxiYWNrKSksXG4gICAgICAxXG4gICAgKTtcbiAgaW52b2tlQ2FsbGJhY2sgPSAwO1xuICB2YXIgbmV4dE5hbWVQcmVmaXggPSBcIlwiID09PSBuYW1lU29GYXIgPyBcIi5cIiA6IG5hbWVTb0ZhciArIFwiOlwiO1xuICBpZiAoaXNBcnJheUltcGwoY2hpbGRyZW4pKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspXG4gICAgICAobmFtZVNvRmFyID0gY2hpbGRyZW5baV0pLFxuICAgICAgICAodHlwZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0RWxlbWVudEtleShuYW1lU29GYXIsIGkpKSxcbiAgICAgICAgKGludm9rZUNhbGxiYWNrICs9IG1hcEludG9BcnJheShcbiAgICAgICAgICBuYW1lU29GYXIsXG4gICAgICAgICAgYXJyYXksXG4gICAgICAgICAgZXNjYXBlZFByZWZpeCxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICkpO1xuICBlbHNlIGlmICgoKGkgPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKSksIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGkpKVxuICAgIGZvciAoXG4gICAgICBjaGlsZHJlbiA9IGkuY2FsbChjaGlsZHJlbiksIGkgPSAwO1xuICAgICAgIShuYW1lU29GYXIgPSBjaGlsZHJlbi5uZXh0KCkpLmRvbmU7XG5cbiAgICApXG4gICAgICAobmFtZVNvRmFyID0gbmFtZVNvRmFyLnZhbHVlKSxcbiAgICAgICAgKHR5cGUgPSBuZXh0TmFtZVByZWZpeCArIGdldEVsZW1lbnRLZXkobmFtZVNvRmFyLCBpKyspKSxcbiAgICAgICAgKGludm9rZUNhbGxiYWNrICs9IG1hcEludG9BcnJheShcbiAgICAgICAgICBuYW1lU29GYXIsXG4gICAgICAgICAgYXJyYXksXG4gICAgICAgICAgZXNjYXBlZFByZWZpeCxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICkpO1xuICBlbHNlIGlmIChcIm9iamVjdFwiID09PSB0eXBlKSB7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNoaWxkcmVuLnRoZW4pXG4gICAgICByZXR1cm4gbWFwSW50b0FycmF5KFxuICAgICAgICByZXNvbHZlVGhlbmFibGUoY2hpbGRyZW4pLFxuICAgICAgICBhcnJheSxcbiAgICAgICAgZXNjYXBlZFByZWZpeCxcbiAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICBjYWxsYmFja1xuICAgICAgKTtcbiAgICBhcnJheSA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIgK1xuICAgICAgICAoXCJbb2JqZWN0IE9iamVjdF1cIiA9PT0gYXJyYXlcbiAgICAgICAgICA/IFwib2JqZWN0IHdpdGgga2V5cyB7XCIgKyBPYmplY3Qua2V5cyhjaGlsZHJlbikuam9pbihcIiwgXCIpICsgXCJ9XCJcbiAgICAgICAgICA6IGFycmF5KSArXG4gICAgICAgIFwiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiXG4gICAgKTtcbiAgfVxuICByZXR1cm4gaW52b2tlQ2FsbGJhY2s7XG59XG5mdW5jdGlvbiBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuYywgY29udGV4dCkge1xuICBpZiAobnVsbCA9PSBjaGlsZHJlbikgcmV0dXJuIGNoaWxkcmVuO1xuICB2YXIgcmVzdWx0ID0gW10sXG4gICAgY291bnQgPSAwO1xuICBtYXBJbnRvQXJyYXkoY2hpbGRyZW4sIHJlc3VsdCwgXCJcIiwgXCJcIiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgY291bnQrKyk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbGF6eUluaXRpYWxpemVyKHBheWxvYWQpIHtcbiAgaWYgKC0xID09PSBwYXlsb2FkLl9zdGF0dXMpIHtcbiAgICB2YXIgY3RvciA9IHBheWxvYWQuX3Jlc3VsdDtcbiAgICBjdG9yID0gY3RvcigpO1xuICAgIGN0b3IudGhlbihcbiAgICAgIGZ1bmN0aW9uIChtb2R1bGVPYmplY3QpIHtcbiAgICAgICAgaWYgKDAgPT09IHBheWxvYWQuX3N0YXR1cyB8fCAtMSA9PT0gcGF5bG9hZC5fc3RhdHVzKVxuICAgICAgICAgIChwYXlsb2FkLl9zdGF0dXMgPSAxKSwgKHBheWxvYWQuX3Jlc3VsdCA9IG1vZHVsZU9iamVjdCk7XG4gICAgICB9LFxuICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICgwID09PSBwYXlsb2FkLl9zdGF0dXMgfHwgLTEgPT09IHBheWxvYWQuX3N0YXR1cylcbiAgICAgICAgICAocGF5bG9hZC5fc3RhdHVzID0gMiksIChwYXlsb2FkLl9yZXN1bHQgPSBlcnJvcik7XG4gICAgICB9XG4gICAgKTtcbiAgICAtMSA9PT0gcGF5bG9hZC5fc3RhdHVzICYmICgocGF5bG9hZC5fc3RhdHVzID0gMCksIChwYXlsb2FkLl9yZXN1bHQgPSBjdG9yKSk7XG4gIH1cbiAgaWYgKDEgPT09IHBheWxvYWQuX3N0YXR1cykgcmV0dXJuIHBheWxvYWQuX3Jlc3VsdC5kZWZhdWx0O1xuICB0aHJvdyBwYXlsb2FkLl9yZXN1bHQ7XG59XG52YXIgcmVwb3J0R2xvYmFsRXJyb3IgPVxuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXBvcnRFcnJvclxuICAgID8gcmVwb3J0RXJyb3JcbiAgICA6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHdpbmRvdyAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdpbmRvdy5FcnJvckV2ZW50XG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBldmVudCA9IG5ldyB3aW5kb3cuRXJyb3JFdmVudChcImVycm9yXCIsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6ICEwLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogITAsXG4gICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgZXJyb3IgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZXJyb3IgJiZcbiAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGVycm9yLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICA/IFN0cmluZyhlcnJvci5tZXNzYWdlKVxuICAgICAgICAgICAgICAgIDogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmICghd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHByb2Nlc3MgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcm9jZXNzLmVtaXRcbiAgICAgICAgKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KFwidW5jYXVnaHRFeGNlcHRpb25cIiwgZXJyb3IpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH07XG5mdW5jdGlvbiBub29wKCkge31cbmV4cG9ydHMuQ2hpbGRyZW4gPSB7XG4gIG1hcDogbWFwQ2hpbGRyZW4sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIChjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gICAgbWFwQ2hpbGRyZW4oXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yRWFjaEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH0sXG4gICAgICBmb3JFYWNoQ29udGV4dFxuICAgICk7XG4gIH0sXG4gIGNvdW50OiBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgbiA9IDA7XG4gICAgbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmN0aW9uICgpIHtcbiAgICAgIG4rKztcbiAgICB9KTtcbiAgICByZXR1cm4gbjtcbiAgfSxcbiAgdG9BcnJheTogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfSkgfHwgW11cbiAgICApO1xuICB9LFxuICBvbmx5OiBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSlcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICBcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiXG4gICAgICApO1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxufTtcbmV4cG9ydHMuQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuZXhwb3J0cy5GcmFnbWVudCA9IFJFQUNUX0ZSQUdNRU5UX1RZUEU7XG5leHBvcnRzLlByb2ZpbGVyID0gUkVBQ1RfUFJPRklMRVJfVFlQRTtcbmV4cG9ydHMuUHVyZUNvbXBvbmVudCA9IFB1cmVDb21wb25lbnQ7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFO1xuZXhwb3J0cy5TdXNwZW5zZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEU7XG5leHBvcnRzLl9fQ0xJRU5UX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSA9XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzO1xuZXhwb3J0cy5fX0NPTVBJTEVSX1JVTlRJTUUgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgYzogZnVuY3Rpb24gKHNpemUpIHtcbiAgICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VNZW1vQ2FjaGUoc2l6ZSk7XG4gIH1cbn07XG5leHBvcnRzLmNhY2hlID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgY29uZmlnLCBjaGlsZHJlbikge1xuICBpZiAobnVsbCA9PT0gZWxlbWVudCB8fCB2b2lkIDAgPT09IGVsZW1lbnQpXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBcIlRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIgKyBlbGVtZW50ICsgXCIuXCJcbiAgICApO1xuICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMpLFxuICAgIGtleSA9IGVsZW1lbnQua2V5LFxuICAgIG93bmVyID0gdm9pZCAwO1xuICBpZiAobnVsbCAhPSBjb25maWcpXG4gICAgZm9yIChwcm9wTmFtZSBpbiAodm9pZCAwICE9PSBjb25maWcucmVmICYmIChvd25lciA9IHZvaWQgMCksXG4gICAgdm9pZCAwICE9PSBjb25maWcua2V5ICYmIChrZXkgPSBcIlwiICsgY29uZmlnLmtleSksXG4gICAgY29uZmlnKSlcbiAgICAgICFoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpIHx8XG4gICAgICAgIFwia2V5XCIgPT09IHByb3BOYW1lIHx8XG4gICAgICAgIFwiX19zZWxmXCIgPT09IHByb3BOYW1lIHx8XG4gICAgICAgIFwiX19zb3VyY2VcIiA9PT0gcHJvcE5hbWUgfHxcbiAgICAgICAgKFwicmVmXCIgPT09IHByb3BOYW1lICYmIHZvaWQgMCA9PT0gY29uZmlnLnJlZikgfHxcbiAgICAgICAgKHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV0pO1xuICB2YXIgcHJvcE5hbWUgPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKDEgPT09IHByb3BOYW1lKSBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICBlbHNlIGlmICgxIDwgcHJvcE5hbWUpIHtcbiAgICBmb3IgKHZhciBjaGlsZEFycmF5ID0gQXJyYXkocHJvcE5hbWUpLCBpID0gMDsgaSA8IHByb3BOYW1lOyBpKyspXG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cbiAgcmV0dXJuIFJlYWN0RWxlbWVudChlbGVtZW50LnR5cGUsIGtleSwgdm9pZCAwLCB2b2lkIDAsIG93bmVyLCBwcm9wcyk7XG59O1xuZXhwb3J0cy5jcmVhdGVDb250ZXh0ID0gZnVuY3Rpb24gKGRlZmF1bHRWYWx1ZSkge1xuICBkZWZhdWx0VmFsdWUgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICBfY3VycmVudFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgX2N1cnJlbnRWYWx1ZTI6IGRlZmF1bHRWYWx1ZSxcbiAgICBfdGhyZWFkQ291bnQ6IDAsXG4gICAgUHJvdmlkZXI6IG51bGwsXG4gICAgQ29uc3VtZXI6IG51bGxcbiAgfTtcbiAgZGVmYXVsdFZhbHVlLlByb3ZpZGVyID0gZGVmYXVsdFZhbHVlO1xuICBkZWZhdWx0VmFsdWUuQ29uc3VtZXIgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlNVTUVSX1RZUEUsXG4gICAgX2NvbnRleHQ6IGRlZmF1bHRWYWx1ZVxuICB9O1xuICByZXR1cm4gZGVmYXVsdFZhbHVlO1xufTtcbmV4cG9ydHMuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZSxcbiAgICBwcm9wcyA9IHt9LFxuICAgIGtleSA9IG51bGw7XG4gIGlmIChudWxsICE9IGNvbmZpZylcbiAgICBmb3IgKHByb3BOYW1lIGluICh2b2lkIDAgIT09IGNvbmZpZy5rZXkgJiYgKGtleSA9IFwiXCIgKyBjb25maWcua2V5KSwgY29uZmlnKSlcbiAgICAgIGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgJiZcbiAgICAgICAgXCJrZXlcIiAhPT0gcHJvcE5hbWUgJiZcbiAgICAgICAgXCJfX3NlbGZcIiAhPT0gcHJvcE5hbWUgJiZcbiAgICAgICAgXCJfX3NvdXJjZVwiICE9PSBwcm9wTmFtZSAmJlxuICAgICAgICAocHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXSk7XG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoMSA9PT0gY2hpbGRyZW5MZW5ndGgpIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIGVsc2UgaWYgKDEgPCBjaGlsZHJlbkxlbmd0aCkge1xuICAgIGZvciAodmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCksIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKylcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcylcbiAgICBmb3IgKHByb3BOYW1lIGluICgoY2hpbGRyZW5MZW5ndGggPSB0eXBlLmRlZmF1bHRQcm9wcyksIGNoaWxkcmVuTGVuZ3RoKSlcbiAgICAgIHZvaWQgMCA9PT0gcHJvcHNbcHJvcE5hbWVdICYmXG4gICAgICAgIChwcm9wc1twcm9wTmFtZV0gPSBjaGlsZHJlbkxlbmd0aFtwcm9wTmFtZV0pO1xuICByZXR1cm4gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgdm9pZCAwLCB2b2lkIDAsIG51bGwsIHByb3BzKTtcbn07XG5leHBvcnRzLmNyZWF0ZVJlZiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHsgY3VycmVudDogbnVsbCB9O1xufTtcbmV4cG9ydHMuZm9yd2FyZFJlZiA9IGZ1bmN0aW9uIChyZW5kZXIpIHtcbiAgcmV0dXJuIHsgJCR0eXBlb2Y6IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUsIHJlbmRlcjogcmVuZGVyIH07XG59O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudCA9IGlzVmFsaWRFbGVtZW50O1xuZXhwb3J0cy5sYXp5ID0gZnVuY3Rpb24gKGN0b3IpIHtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfTEFaWV9UWVBFLFxuICAgIF9wYXlsb2FkOiB7IF9zdGF0dXM6IC0xLCBfcmVzdWx0OiBjdG9yIH0sXG4gICAgX2luaXQ6IGxhenlJbml0aWFsaXplclxuICB9O1xufTtcbmV4cG9ydHMubWVtbyA9IGZ1bmN0aW9uICh0eXBlLCBjb21wYXJlKSB7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX01FTU9fVFlQRSxcbiAgICB0eXBlOiB0eXBlLFxuICAgIGNvbXBhcmU6IHZvaWQgMCA9PT0gY29tcGFyZSA/IG51bGwgOiBjb21wYXJlXG4gIH07XG59O1xuZXhwb3J0cy5zdGFydFRyYW5zaXRpb24gPSBmdW5jdGlvbiAoc2NvcGUpIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gIHRyeSB7XG4gICAgdmFyIHJldHVyblZhbHVlID0gc2NvcGUoKSxcbiAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2goY3VycmVudFRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgcmV0dXJuVmFsdWUgJiZcbiAgICAgIG51bGwgIT09IHJldHVyblZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuICYmXG4gICAgICByZXR1cm5WYWx1ZS50aGVuKG5vb3AsIHJlcG9ydEdsb2JhbEVycm9yKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG4gIH0gZmluYWxseSB7XG4gICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uO1xuICB9XG59O1xuZXhwb3J0cy51bnN0YWJsZV91c2VDYWNoZVJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUNhY2hlUmVmcmVzaCgpO1xufTtcbmV4cG9ydHMudXNlID0gZnVuY3Rpb24gKHVzYWJsZSkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2UodXNhYmxlKTtcbn07XG5leHBvcnRzLnVzZUFjdGlvblN0YXRlID0gZnVuY3Rpb24gKGFjdGlvbiwgaW5pdGlhbFN0YXRlLCBwZXJtYWxpbmspIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlQWN0aW9uU3RhdGUoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluayk7XG59O1xuZXhwb3J0cy51c2VDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaywgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VDYWxsYmFjayhjYWxsYmFjaywgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VDb250ZXh0ID0gZnVuY3Rpb24gKENvbnRleHQpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlQ29udGV4dChDb250ZXh0KTtcbn07XG5leHBvcnRzLnVzZURlYnVnVmFsdWUgPSBmdW5jdGlvbiAoKSB7fTtcbmV4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZURlZmVycmVkVmFsdWUodmFsdWUsIGluaXRpYWxWYWx1ZSk7XG59O1xuZXhwb3J0cy51c2VFZmZlY3QgPSBmdW5jdGlvbiAoY3JlYXRlLCBjcmVhdGVEZXBzLCB1cGRhdGUpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSBSZWFjdFNoYXJlZEludGVybmFscy5IO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdXBkYXRlKVxuICAgIHRocm93IEVycm9yKFxuICAgICAgXCJ1c2VFZmZlY3QgQ1JVRCBvdmVybG9hZCBpcyBub3QgZW5hYmxlZCBpbiB0aGlzIGJ1aWxkIG9mIFJlYWN0LlwiXG4gICAgKTtcbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlRWZmZWN0KGNyZWF0ZSwgY3JlYXRlRGVwcyk7XG59O1xuZXhwb3J0cy51c2VJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSWQoKTtcbn07XG5leHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGUgPSBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3QgPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0ID0gZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VMYXlvdXRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZU1lbW8gPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZU1lbW8oY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZU9wdGltaXN0aWMgPSBmdW5jdGlvbiAocGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlT3B0aW1pc3RpYyhwYXNzdGhyb3VnaCwgcmVkdWNlcik7XG59O1xuZXhwb3J0cy51c2VSZWR1Y2VyID0gZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KTtcbn07XG5leHBvcnRzLnVzZVJlZiA9IGZ1bmN0aW9uIChpbml0aWFsVmFsdWUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlUmVmKGluaXRpYWxWYWx1ZSk7XG59O1xuZXhwb3J0cy51c2VTdGF0ZSA9IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlU3RhdGUoaW5pdGlhbFN0YXRlKTtcbn07XG5leHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlID0gZnVuY3Rpb24gKFxuICBzdWJzY3JpYmUsXG4gIGdldFNuYXBzaG90LFxuICBnZXRTZXJ2ZXJTbmFwc2hvdFxuKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZVN5bmNFeHRlcm5hbFN0b3JlKFxuICAgIHN1YnNjcmliZSxcbiAgICBnZXRTbmFwc2hvdCxcbiAgICBnZXRTZXJ2ZXJTbmFwc2hvdFxuICApO1xufTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlVHJhbnNpdGlvbigpO1xufTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMS4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gcHVzaChoZWFwLCBub2RlKSB7XG4gIHZhciBpbmRleCA9IGhlYXAubGVuZ3RoO1xuICBoZWFwLnB1c2gobm9kZSk7XG4gIGE6IGZvciAoOyAwIDwgaW5kZXg7ICkge1xuICAgIHZhciBwYXJlbnRJbmRleCA9IChpbmRleCAtIDEpID4+PiAxLFxuICAgICAgcGFyZW50ID0gaGVhcFtwYXJlbnRJbmRleF07XG4gICAgaWYgKDAgPCBjb21wYXJlKHBhcmVudCwgbm9kZSkpXG4gICAgICAoaGVhcFtwYXJlbnRJbmRleF0gPSBub2RlKSwgKGhlYXBbaW5kZXhdID0gcGFyZW50KSwgKGluZGV4ID0gcGFyZW50SW5kZXgpO1xuICAgIGVsc2UgYnJlYWsgYTtcbiAgfVxufVxuZnVuY3Rpb24gcGVlayhoZWFwKSB7XG4gIHJldHVybiAwID09PSBoZWFwLmxlbmd0aCA/IG51bGwgOiBoZWFwWzBdO1xufVxuZnVuY3Rpb24gcG9wKGhlYXApIHtcbiAgaWYgKDAgPT09IGhlYXAubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgdmFyIGZpcnN0ID0gaGVhcFswXSxcbiAgICBsYXN0ID0gaGVhcC5wb3AoKTtcbiAgaWYgKGxhc3QgIT09IGZpcnN0KSB7XG4gICAgaGVhcFswXSA9IGxhc3Q7XG4gICAgYTogZm9yIChcbiAgICAgIHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGhlYXAubGVuZ3RoLCBoYWxmTGVuZ3RoID0gbGVuZ3RoID4+PiAxO1xuICAgICAgaW5kZXggPCBoYWxmTGVuZ3RoO1xuXG4gICAgKSB7XG4gICAgICB2YXIgbGVmdEluZGV4ID0gMiAqIChpbmRleCArIDEpIC0gMSxcbiAgICAgICAgbGVmdCA9IGhlYXBbbGVmdEluZGV4XSxcbiAgICAgICAgcmlnaHRJbmRleCA9IGxlZnRJbmRleCArIDEsXG4gICAgICAgIHJpZ2h0ID0gaGVhcFtyaWdodEluZGV4XTtcbiAgICAgIGlmICgwID4gY29tcGFyZShsZWZ0LCBsYXN0KSlcbiAgICAgICAgcmlnaHRJbmRleCA8IGxlbmd0aCAmJiAwID4gY29tcGFyZShyaWdodCwgbGVmdClcbiAgICAgICAgICA/ICgoaGVhcFtpbmRleF0gPSByaWdodCksXG4gICAgICAgICAgICAoaGVhcFtyaWdodEluZGV4XSA9IGxhc3QpLFxuICAgICAgICAgICAgKGluZGV4ID0gcmlnaHRJbmRleCkpXG4gICAgICAgICAgOiAoKGhlYXBbaW5kZXhdID0gbGVmdCksXG4gICAgICAgICAgICAoaGVhcFtsZWZ0SW5kZXhdID0gbGFzdCksXG4gICAgICAgICAgICAoaW5kZXggPSBsZWZ0SW5kZXgpKTtcbiAgICAgIGVsc2UgaWYgKHJpZ2h0SW5kZXggPCBsZW5ndGggJiYgMCA+IGNvbXBhcmUocmlnaHQsIGxhc3QpKVxuICAgICAgICAoaGVhcFtpbmRleF0gPSByaWdodCksIChoZWFwW3JpZ2h0SW5kZXhdID0gbGFzdCksIChpbmRleCA9IHJpZ2h0SW5kZXgpO1xuICAgICAgZWxzZSBicmVhayBhO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmlyc3Q7XG59XG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgdmFyIGRpZmYgPSBhLnNvcnRJbmRleCAtIGIuc29ydEluZGV4O1xuICByZXR1cm4gMCAhPT0gZGlmZiA/IGRpZmYgOiBhLmlkIC0gYi5pZDtcbn1cbmV4cG9ydHMudW5zdGFibGVfbm93ID0gdm9pZCAwO1xuaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBwZXJmb3JtYW5jZSAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgdmFyIGxvY2FsUGVyZm9ybWFuY2UgPSBwZXJmb3JtYW5jZTtcbiAgZXhwb3J0cy51bnN0YWJsZV9ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGxvY2FsUGVyZm9ybWFuY2Uubm93KCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgbG9jYWxEYXRlID0gRGF0ZSxcbiAgICBpbml0aWFsVGltZSA9IGxvY2FsRGF0ZS5ub3coKTtcbiAgZXhwb3J0cy51bnN0YWJsZV9ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGxvY2FsRGF0ZS5ub3coKSAtIGluaXRpYWxUaW1lO1xuICB9O1xufVxudmFyIHRhc2tRdWV1ZSA9IFtdLFxuICB0aW1lclF1ZXVlID0gW10sXG4gIHRhc2tJZENvdW50ZXIgPSAxLFxuICBjdXJyZW50VGFzayA9IG51bGwsXG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gMyxcbiAgaXNQZXJmb3JtaW5nV29yayA9ICExLFxuICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICExLFxuICBpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITEsXG4gIG5lZWRzUGFpbnQgPSAhMSxcbiAgbG9jYWxTZXRUaW1lb3V0ID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygc2V0VGltZW91dCA/IHNldFRpbWVvdXQgOiBudWxsLFxuICBsb2NhbENsZWFyVGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNsZWFyVGltZW91dCA/IGNsZWFyVGltZW91dCA6IG51bGwsXG4gIGxvY2FsU2V0SW1tZWRpYXRlID0gXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHNldEltbWVkaWF0ZSA/IHNldEltbWVkaWF0ZSA6IG51bGw7XG5mdW5jdGlvbiBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKSB7XG4gIGZvciAodmFyIHRpbWVyID0gcGVlayh0aW1lclF1ZXVlKTsgbnVsbCAhPT0gdGltZXI7ICkge1xuICAgIGlmIChudWxsID09PSB0aW1lci5jYWxsYmFjaykgcG9wKHRpbWVyUXVldWUpO1xuICAgIGVsc2UgaWYgKHRpbWVyLnN0YXJ0VGltZSA8PSBjdXJyZW50VGltZSlcbiAgICAgIHBvcCh0aW1lclF1ZXVlKSxcbiAgICAgICAgKHRpbWVyLnNvcnRJbmRleCA9IHRpbWVyLmV4cGlyYXRpb25UaW1lKSxcbiAgICAgICAgcHVzaCh0YXNrUXVldWUsIHRpbWVyKTtcbiAgICBlbHNlIGJyZWFrO1xuICAgIHRpbWVyID0gcGVlayh0aW1lclF1ZXVlKTtcbiAgfVxufVxuZnVuY3Rpb24gaGFuZGxlVGltZW91dChjdXJyZW50VGltZSkge1xuICBpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITE7XG4gIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpO1xuICBpZiAoIWlzSG9zdENhbGxiYWNrU2NoZWR1bGVkKVxuICAgIGlmIChudWxsICE9PSBwZWVrKHRhc2tRdWV1ZSkpXG4gICAgICAoaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMCksXG4gICAgICAgIGlzTWVzc2FnZUxvb3BSdW5uaW5nIHx8XG4gICAgICAgICAgKChpc01lc3NhZ2VMb29wUnVubmluZyA9ICEwKSwgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUoKSk7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgZmlyc3RUaW1lciA9IHBlZWsodGltZXJRdWV1ZSk7XG4gICAgICBudWxsICE9PSBmaXJzdFRpbWVyICYmXG4gICAgICAgIHJlcXVlc3RIb3N0VGltZW91dChoYW5kbGVUaW1lb3V0LCBmaXJzdFRpbWVyLnN0YXJ0VGltZSAtIGN1cnJlbnRUaW1lKTtcbiAgICB9XG59XG52YXIgaXNNZXNzYWdlTG9vcFJ1bm5pbmcgPSAhMSxcbiAgdGFza1RpbWVvdXRJRCA9IC0xLFxuICBmcmFtZUludGVydmFsID0gNSxcbiAgc3RhcnRUaW1lID0gLTE7XG5mdW5jdGlvbiBzaG91bGRZaWVsZFRvSG9zdCgpIHtcbiAgcmV0dXJuIG5lZWRzUGFpbnRcbiAgICA/ICEwXG4gICAgOiBleHBvcnRzLnVuc3RhYmxlX25vdygpIC0gc3RhcnRUaW1lIDwgZnJhbWVJbnRlcnZhbFxuICAgICAgPyAhMVxuICAgICAgOiAhMDtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSgpIHtcbiAgbmVlZHNQYWludCA9ICExO1xuICBpZiAoaXNNZXNzYWdlTG9vcFJ1bm5pbmcpIHtcbiAgICB2YXIgY3VycmVudFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICAgIHN0YXJ0VGltZSA9IGN1cnJlbnRUaW1lO1xuICAgIHZhciBoYXNNb3JlV29yayA9ICEwO1xuICAgIHRyeSB7XG4gICAgICBhOiB7XG4gICAgICAgIGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITE7XG4gICAgICAgIGlzSG9zdFRpbWVvdXRTY2hlZHVsZWQgJiZcbiAgICAgICAgICAoKGlzSG9zdFRpbWVvdXRTY2hlZHVsZWQgPSAhMSksXG4gICAgICAgICAgbG9jYWxDbGVhclRpbWVvdXQodGFza1RpbWVvdXRJRCksXG4gICAgICAgICAgKHRhc2tUaW1lb3V0SUQgPSAtMSkpO1xuICAgICAgICBpc1BlcmZvcm1pbmdXb3JrID0gITA7XG4gICAgICAgIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBiOiB7XG4gICAgICAgICAgICBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgIGN1cnJlbnRUYXNrID0gcGVlayh0YXNrUXVldWUpO1xuICAgICAgICAgICAgICBudWxsICE9PSBjdXJyZW50VGFzayAmJlxuICAgICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrLmV4cGlyYXRpb25UaW1lID4gY3VycmVudFRpbWUgJiYgc2hvdWxkWWllbGRUb0hvc3QoKVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gY3VycmVudFRhc2suY2FsbGJhY2s7XG4gICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrLmNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRUYXNrLnByaW9yaXR5TGV2ZWw7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRpbnVhdGlvbkNhbGxiYWNrID0gY2FsbGJhY2soXG4gICAgICAgICAgICAgICAgICBjdXJyZW50VGFzay5leHBpcmF0aW9uVGltZSA8PSBjdXJyZW50VGltZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY3VycmVudFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICAgICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250aW51YXRpb25DYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgY3VycmVudFRhc2suY2FsbGJhY2sgPSBjb250aW51YXRpb25DYWxsYmFjaztcbiAgICAgICAgICAgICAgICAgIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICAgICAgaGFzTW9yZVdvcmsgPSAhMDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrID09PSBwZWVrKHRhc2tRdWV1ZSkgJiYgcG9wKHRhc2tRdWV1ZSk7XG4gICAgICAgICAgICAgICAgYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBwb3AodGFza1F1ZXVlKTtcbiAgICAgICAgICAgICAgY3VycmVudFRhc2sgPSBwZWVrKHRhc2tRdWV1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gY3VycmVudFRhc2spIGhhc01vcmVXb3JrID0gITA7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGZpcnN0VGltZXIgPSBwZWVrKHRpbWVyUXVldWUpO1xuICAgICAgICAgICAgICBudWxsICE9PSBmaXJzdFRpbWVyICYmXG4gICAgICAgICAgICAgICAgcmVxdWVzdEhvc3RUaW1lb3V0KFxuICAgICAgICAgICAgICAgICAgaGFuZGxlVGltZW91dCxcbiAgICAgICAgICAgICAgICAgIGZpcnN0VGltZXIuc3RhcnRUaW1lIC0gY3VycmVudFRpbWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBoYXNNb3JlV29yayA9ICExO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhayBhO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIChjdXJyZW50VGFzayA9IG51bGwpLFxuICAgICAgICAgICAgKGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJldmlvdXNQcmlvcml0eUxldmVsKSxcbiAgICAgICAgICAgIChpc1BlcmZvcm1pbmdXb3JrID0gITEpO1xuICAgICAgICB9XG4gICAgICAgIGhhc01vcmVXb3JrID0gdm9pZCAwO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBoYXNNb3JlV29ya1xuICAgICAgICA/IHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lKClcbiAgICAgICAgOiAoaXNNZXNzYWdlTG9vcFJ1bm5pbmcgPSAhMSk7XG4gICAgfVxuICB9XG59XG52YXIgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmU7XG5pZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbG9jYWxTZXRJbW1lZGlhdGUpXG4gIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgIGxvY2FsU2V0SW1tZWRpYXRlKHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSk7XG4gIH07XG5lbHNlIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgTWVzc2FnZUNoYW5uZWwpIHtcbiAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKSxcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBwZXJmb3JtV29ya1VudGlsRGVhZGxpbmU7XG4gIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgIHBvcnQucG9zdE1lc3NhZ2UobnVsbCk7XG4gIH07XG59IGVsc2VcbiAgc2NoZWR1bGVQZXJmb3JtV29ya1VudGlsRGVhZGxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbG9jYWxTZXRUaW1lb3V0KHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSwgMCk7XG4gIH07XG5mdW5jdGlvbiByZXF1ZXN0SG9zdFRpbWVvdXQoY2FsbGJhY2ssIG1zKSB7XG4gIHRhc2tUaW1lb3V0SUQgPSBsb2NhbFNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGNhbGxiYWNrKGV4cG9ydHMudW5zdGFibGVfbm93KCkpO1xuICB9LCBtcyk7XG59XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eSA9IDU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5ID0gMTtcbmV4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHkgPSA0O1xuZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSA9IDM7XG5leHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZyA9IG51bGw7XG5leHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5ID0gMjtcbmV4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2sgPSBmdW5jdGlvbiAodGFzaykge1xuICB0YXNrLmNhbGxiYWNrID0gbnVsbDtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlID0gZnVuY3Rpb24gKGZwcykge1xuICAwID4gZnBzIHx8IDEyNSA8IGZwc1xuICAgID8gY29uc29sZS5lcnJvcihcbiAgICAgICAgXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIlxuICAgICAgKVxuICAgIDogKGZyYW1lSW50ZXJ2YWwgPSAwIDwgZnBzID8gTWF0aC5mbG9vcigxZTMgLyBmcHMpIDogNSk7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGN1cnJlbnRQcmlvcml0eUxldmVsO1xufTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dCA9IGZ1bmN0aW9uIChldmVudEhhbmRsZXIpIHtcbiAgc3dpdGNoIChjdXJyZW50UHJpb3JpdHlMZXZlbCkge1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIDI6XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHByaW9yaXR5TGV2ZWwgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgfVxuICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJpb3JpdHlMZXZlbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXZlbnRIYW5kbGVyKCk7XG4gIH0gZmluYWxseSB7XG4gICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWw7XG4gIH1cbn07XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludCA9IGZ1bmN0aW9uICgpIHtcbiAgbmVlZHNQYWludCA9ICEwO1xufTtcbmV4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5ID0gZnVuY3Rpb24gKHByaW9yaXR5TGV2ZWwsIGV2ZW50SGFuZGxlcikge1xuICBzd2l0Y2ggKHByaW9yaXR5TGV2ZWwpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcbiAgICBjYXNlIDQ6XG4gICAgY2FzZSA1OlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHByaW9yaXR5TGV2ZWwgPSAzO1xuICB9XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmlvcml0eUxldmVsO1xuICB0cnkge1xuICAgIHJldHVybiBldmVudEhhbmRsZXIoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgfVxufTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayA9IGZ1bmN0aW9uIChcbiAgcHJpb3JpdHlMZXZlbCxcbiAgY2FsbGJhY2ssXG4gIG9wdGlvbnNcbikge1xuICB2YXIgY3VycmVudFRpbWUgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJiBudWxsICE9PSBvcHRpb25zXG4gICAgPyAoKG9wdGlvbnMgPSBvcHRpb25zLmRlbGF5KSxcbiAgICAgIChvcHRpb25zID1cbiAgICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG9wdGlvbnMgJiYgMCA8IG9wdGlvbnNcbiAgICAgICAgICA/IGN1cnJlbnRUaW1lICsgb3B0aW9uc1xuICAgICAgICAgIDogY3VycmVudFRpbWUpKVxuICAgIDogKG9wdGlvbnMgPSBjdXJyZW50VGltZSk7XG4gIHN3aXRjaCAocHJpb3JpdHlMZXZlbCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB0aW1lb3V0ID0gLTE7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB0aW1lb3V0ID0gMjUwO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgdGltZW91dCA9IDEwNzM3NDE4MjM7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICB0aW1lb3V0ID0gMWU0O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRpbWVvdXQgPSA1ZTM7XG4gIH1cbiAgdGltZW91dCA9IG9wdGlvbnMgKyB0aW1lb3V0O1xuICBwcmlvcml0eUxldmVsID0ge1xuICAgIGlkOiB0YXNrSWRDb3VudGVyKyssXG4gICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgIHByaW9yaXR5TGV2ZWw6IHByaW9yaXR5TGV2ZWwsXG4gICAgc3RhcnRUaW1lOiBvcHRpb25zLFxuICAgIGV4cGlyYXRpb25UaW1lOiB0aW1lb3V0LFxuICAgIHNvcnRJbmRleDogLTFcbiAgfTtcbiAgb3B0aW9ucyA+IGN1cnJlbnRUaW1lXG4gICAgPyAoKHByaW9yaXR5TGV2ZWwuc29ydEluZGV4ID0gb3B0aW9ucyksXG4gICAgICBwdXNoKHRpbWVyUXVldWUsIHByaW9yaXR5TGV2ZWwpLFxuICAgICAgbnVsbCA9PT0gcGVlayh0YXNrUXVldWUpICYmXG4gICAgICAgIHByaW9yaXR5TGV2ZWwgPT09IHBlZWsodGltZXJRdWV1ZSkgJiZcbiAgICAgICAgKGlzSG9zdFRpbWVvdXRTY2hlZHVsZWRcbiAgICAgICAgICA/IChsb2NhbENsZWFyVGltZW91dCh0YXNrVGltZW91dElEKSwgKHRhc2tUaW1lb3V0SUQgPSAtMSkpXG4gICAgICAgICAgOiAoaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICEwKSxcbiAgICAgICAgcmVxdWVzdEhvc3RUaW1lb3V0KGhhbmRsZVRpbWVvdXQsIG9wdGlvbnMgLSBjdXJyZW50VGltZSkpKVxuICAgIDogKChwcmlvcml0eUxldmVsLnNvcnRJbmRleCA9IHRpbWVvdXQpLFxuICAgICAgcHVzaCh0YXNrUXVldWUsIHByaW9yaXR5TGV2ZWwpLFxuICAgICAgaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgfHxcbiAgICAgICAgaXNQZXJmb3JtaW5nV29yayB8fFxuICAgICAgICAoKGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITApLFxuICAgICAgICBpc01lc3NhZ2VMb29wUnVubmluZyB8fFxuICAgICAgICAgICgoaXNNZXNzYWdlTG9vcFJ1bm5pbmcgPSAhMCksIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lKCkpKSk7XG4gIHJldHVybiBwcmlvcml0eUxldmVsO1xufTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQgPSBzaG91bGRZaWVsZFRvSG9zdDtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBwYXJlbnRQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByZXZpb3VzUHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcGFyZW50UHJpb3JpdHlMZXZlbDtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJldmlvdXNQcmlvcml0eUxldmVsO1xuICAgIH1cbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5mdW5jdGlvbiBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgdmFyIHVybCA9IFwiaHR0cHM6Ly9yZWFjdC5kZXYvZXJyb3JzL1wiICsgY29kZTtcbiAgaWYgKDEgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgdXJsICs9IFwiP2FyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbMV0pO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgdXJsICs9IFwiJmFyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG4gIHJldHVybiAoXG4gICAgXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIgK1xuICAgIGNvZGUgK1xuICAgIFwiOyB2aXNpdCBcIiArXG4gICAgdXJsICtcbiAgICBcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJcbiAgKTtcbn1cbmZ1bmN0aW9uIG5vb3AoKSB7fVxudmFyIEludGVybmFscyA9IHtcbiAgICBkOiB7XG4gICAgICBmOiBub29wLFxuICAgICAgcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyMikpO1xuICAgICAgfSxcbiAgICAgIEQ6IG5vb3AsXG4gICAgICBDOiBub29wLFxuICAgICAgTDogbm9vcCxcbiAgICAgIG06IG5vb3AsXG4gICAgICBYOiBub29wLFxuICAgICAgUzogbm9vcCxcbiAgICAgIE06IG5vb3BcbiAgICB9LFxuICAgIHA6IDAsXG4gICAgZmluZERPTU5vZGU6IG51bGxcbiAgfSxcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpO1xuZnVuY3Rpb24gY3JlYXRlUG9ydGFsJDEoY2hpbGRyZW4sIGNvbnRhaW5lckluZm8sIGltcGxlbWVudGF0aW9uKSB7XG4gIHZhciBrZXkgPVxuICAgIDMgPCBhcmd1bWVudHMubGVuZ3RoICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzNdID8gYXJndW1lbnRzWzNdIDogbnVsbDtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfUE9SVEFMX1RZUEUsXG4gICAga2V5OiBudWxsID09IGtleSA/IG51bGwgOiBcIlwiICsga2V5LFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBjb250YWluZXJJbmZvOiBjb250YWluZXJJbmZvLFxuICAgIGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvblxuICB9O1xufVxudmFyIFJlYWN0U2hhcmVkSW50ZXJuYWxzID1cbiAgUmVhY3QuX19DTElFTlRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFO1xuZnVuY3Rpb24gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhhcywgaW5wdXQpIHtcbiAgaWYgKFwiZm9udFwiID09PSBhcykgcmV0dXJuIFwiXCI7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaW5wdXQpXG4gICAgcmV0dXJuIFwidXNlLWNyZWRlbnRpYWxzXCIgPT09IGlucHV0ID8gaW5wdXQgOiBcIlwiO1xufVxuZXhwb3J0cy5fX0RPTV9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUgPVxuICBJbnRlcm5hbHM7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbCA9IGZ1bmN0aW9uIChjaGlsZHJlbiwgY29udGFpbmVyKSB7XG4gIHZhciBrZXkgPVxuICAgIDIgPCBhcmd1bWVudHMubGVuZ3RoICYmIHZvaWQgMCAhPT0gYXJndW1lbnRzWzJdID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgaWYgKFxuICAgICFjb250YWluZXIgfHxcbiAgICAoMSAhPT0gY29udGFpbmVyLm5vZGVUeXBlICYmXG4gICAgICA5ICE9PSBjb250YWluZXIubm9kZVR5cGUgJiZcbiAgICAgIDExICE9PSBjb250YWluZXIubm9kZVR5cGUpXG4gIClcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI5OSkpO1xuICByZXR1cm4gY3JlYXRlUG9ydGFsJDEoY2hpbGRyZW4sIGNvbnRhaW5lciwgbnVsbCwga2V5KTtcbn07XG5leHBvcnRzLmZsdXNoU3luYyA9IGZ1bmN0aW9uIChmbikge1xuICB2YXIgcHJldmlvdXNUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBwcmV2aW91c1VwZGF0ZVByaW9yaXR5ID0gSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgaWYgKCgoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGwpLCAoSW50ZXJuYWxzLnAgPSAyKSwgZm4pKSByZXR1cm4gZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZpb3VzVHJhbnNpdGlvbiksXG4gICAgICAoSW50ZXJuYWxzLnAgPSBwcmV2aW91c1VwZGF0ZVByaW9yaXR5KSxcbiAgICAgIEludGVybmFscy5kLmYoKTtcbiAgfVxufTtcbmV4cG9ydHMucHJlY29ubmVjdCA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmXG4gICAgKG9wdGlvbnNcbiAgICAgID8gKChvcHRpb25zID0gb3B0aW9ucy5jcm9zc09yaWdpbiksXG4gICAgICAgIChvcHRpb25zID1cbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9uc1xuICAgICAgICAgICAgPyBcInVzZS1jcmVkZW50aWFsc1wiID09PSBvcHRpb25zXG4gICAgICAgICAgICAgID8gb3B0aW9uc1xuICAgICAgICAgICAgICA6IFwiXCJcbiAgICAgICAgICAgIDogdm9pZCAwKSlcbiAgICAgIDogKG9wdGlvbnMgPSBudWxsKSxcbiAgICBJbnRlcm5hbHMuZC5DKGhyZWYsIG9wdGlvbnMpKTtcbn07XG5leHBvcnRzLnByZWZldGNoRE5TID0gZnVuY3Rpb24gKGhyZWYpIHtcbiAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgSW50ZXJuYWxzLmQuRChocmVmKTtcbn07XG5leHBvcnRzLnByZWluaXQgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgb3B0aW9ucyAmJiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hcykge1xuICAgIHZhciBhcyA9IG9wdGlvbnMuYXMsXG4gICAgICBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMoYXMsIG9wdGlvbnMuY3Jvc3NPcmlnaW4pLFxuICAgICAgaW50ZWdyaXR5ID1cbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5ID8gb3B0aW9ucy5pbnRlZ3JpdHkgOiB2b2lkIDAsXG4gICAgICBmZXRjaFByaW9yaXR5ID1cbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuZmV0Y2hQcmlvcml0eVxuICAgICAgICAgID8gb3B0aW9ucy5mZXRjaFByaW9yaXR5XG4gICAgICAgICAgOiB2b2lkIDA7XG4gICAgXCJzdHlsZVwiID09PSBhc1xuICAgICAgPyBJbnRlcm5hbHMuZC5TKFxuICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMucHJlY2VkZW5jZSA/IG9wdGlvbnMucHJlY2VkZW5jZSA6IHZvaWQgMCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgICBpbnRlZ3JpdHk6IGludGVncml0eSxcbiAgICAgICAgICAgIGZldGNoUHJpb3JpdHk6IGZldGNoUHJpb3JpdHlcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIDogXCJzY3JpcHRcIiA9PT0gYXMgJiZcbiAgICAgICAgSW50ZXJuYWxzLmQuWChocmVmLCB7XG4gICAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICAgIGludGVncml0eTogaW50ZWdyaXR5LFxuICAgICAgICAgIGZldGNoUHJpb3JpdHk6IGZldGNoUHJpb3JpdHksXG4gICAgICAgICAgbm9uY2U6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLm5vbmNlID8gb3B0aW9ucy5ub25jZSA6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgfVxufTtcbmV4cG9ydHMucHJlaW5pdE1vZHVsZSA9IGZ1bmN0aW9uIChocmVmLCBvcHRpb25zKSB7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZilcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9wdGlvbnMgJiYgbnVsbCAhPT0gb3B0aW9ucykge1xuICAgICAgaWYgKG51bGwgPT0gb3B0aW9ucy5hcyB8fCBcInNjcmlwdFwiID09PSBvcHRpb25zLmFzKSB7XG4gICAgICAgIHZhciBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMoXG4gICAgICAgICAgb3B0aW9ucy5hcyxcbiAgICAgICAgICBvcHRpb25zLmNyb3NzT3JpZ2luXG4gICAgICAgICk7XG4gICAgICAgIEludGVybmFscy5kLk0oaHJlZiwge1xuICAgICAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgICAgICBpbnRlZ3JpdHk6XG4gICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMCxcbiAgICAgICAgICBub25jZTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubm9uY2UgPyBvcHRpb25zLm5vbmNlIDogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBudWxsID09IG9wdGlvbnMgJiYgSW50ZXJuYWxzLmQuTShocmVmKTtcbn07XG5leHBvcnRzLnByZWxvYWQgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICBpZiAoXG4gICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiZcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJlxuICAgIG51bGwgIT09IG9wdGlvbnMgJiZcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hc1xuICApIHtcbiAgICB2YXIgYXMgPSBvcHRpb25zLmFzLFxuICAgICAgY3Jvc3NPcmlnaW4gPSBnZXRDcm9zc09yaWdpblN0cmluZ0FzKGFzLCBvcHRpb25zLmNyb3NzT3JpZ2luKTtcbiAgICBJbnRlcm5hbHMuZC5MKGhyZWYsIGFzLCB7XG4gICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICBpbnRlZ3JpdHk6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmludGVncml0eSA/IG9wdGlvbnMuaW50ZWdyaXR5IDogdm9pZCAwLFxuICAgICAgbm9uY2U6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLm5vbmNlID8gb3B0aW9ucy5ub25jZSA6IHZvaWQgMCxcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLnR5cGUgPyBvcHRpb25zLnR5cGUgOiB2b2lkIDAsXG4gICAgICBmZXRjaFByaW9yaXR5OlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5mZXRjaFByaW9yaXR5XG4gICAgICAgICAgPyBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA6IHZvaWQgMCxcbiAgICAgIHJlZmVycmVyUG9saWN5OlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5yZWZlcnJlclBvbGljeVxuICAgICAgICAgID8gb3B0aW9ucy5yZWZlcnJlclBvbGljeVxuICAgICAgICAgIDogdm9pZCAwLFxuICAgICAgaW1hZ2VTcmNTZXQ6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmltYWdlU3JjU2V0ID8gb3B0aW9ucy5pbWFnZVNyY1NldCA6IHZvaWQgMCxcbiAgICAgIGltYWdlU2l6ZXM6XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmltYWdlU2l6ZXMgPyBvcHRpb25zLmltYWdlU2l6ZXMgOiB2b2lkIDAsXG4gICAgICBtZWRpYTogXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMubWVkaWEgPyBvcHRpb25zLm1lZGlhIDogdm9pZCAwXG4gICAgfSk7XG4gIH1cbn07XG5leHBvcnRzLnByZWxvYWRNb2R1bGUgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYpXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIHZhciBjcm9zc09yaWdpbiA9IGdldENyb3NzT3JpZ2luU3RyaW5nQXMob3B0aW9ucy5hcywgb3B0aW9ucy5jcm9zc09yaWdpbik7XG4gICAgICBJbnRlcm5hbHMuZC5tKGhyZWYsIHtcbiAgICAgICAgYXM6XG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuYXMgJiYgXCJzY3JpcHRcIiAhPT0gb3B0aW9ucy5hc1xuICAgICAgICAgICAgPyBvcHRpb25zLmFzXG4gICAgICAgICAgICA6IHZvaWQgMCxcbiAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICBpbnRlZ3JpdHk6XG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5ID8gb3B0aW9ucy5pbnRlZ3JpdHkgOiB2b2lkIDBcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBJbnRlcm5hbHMuZC5tKGhyZWYpO1xufTtcbmV4cG9ydHMucmVxdWVzdEZvcm1SZXNldCA9IGZ1bmN0aW9uIChmb3JtKSB7XG4gIEludGVybmFscy5kLnIoZm9ybSk7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyA9IGZ1bmN0aW9uIChmbiwgYSkge1xuICByZXR1cm4gZm4oYSk7XG59O1xuZXhwb3J0cy51c2VGb3JtU3RhdGUgPSBmdW5jdGlvbiAoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluaykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VGb3JtU3RhdGUoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluayk7XG59O1xuZXhwb3J0cy51c2VGb3JtU3RhdHVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VIb3N0VHJhbnNpdGlvblN0YXR1cygpO1xufTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMS4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS1jbGllbnQucHJvZHVjdGlvbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG5cInVzZSBzdHJpY3RcIjtcbnZhciBTY2hlZHVsZXIgPSByZXF1aXJlKFwic2NoZWR1bGVyXCIpLFxuICBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKSxcbiAgUmVhY3RET00gPSByZXF1aXJlKFwicmVhY3QtZG9tXCIpO1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHZhciB1cmwgPSBcImh0dHBzOi8vcmVhY3QuZGV2L2Vycm9ycy9cIiArIGNvZGU7XG4gIGlmICgxIDwgYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHVybCArPSBcIj9hcmdzW109XCIgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzWzFdKTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIHVybCArPSBcIiZhcmdzW109XCIgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiICtcbiAgICBjb2RlICtcbiAgICBcIjsgdmlzaXQgXCIgK1xuICAgIHVybCArXG4gICAgXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiXG4gICk7XG59XG5mdW5jdGlvbiBpc1ZhbGlkQ29udGFpbmVyKG5vZGUpIHtcbiAgcmV0dXJuICEoXG4gICAgIW5vZGUgfHxcbiAgICAoMSAhPT0gbm9kZS5ub2RlVHlwZSAmJiA5ICE9PSBub2RlLm5vZGVUeXBlICYmIDExICE9PSBub2RlLm5vZGVUeXBlKVxuICApO1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihmaWJlcikge1xuICB2YXIgbm9kZSA9IGZpYmVyLFxuICAgIG5lYXJlc3RNb3VudGVkID0gZmliZXI7XG4gIGlmIChmaWJlci5hbHRlcm5hdGUpIGZvciAoOyBub2RlLnJldHVybjsgKSBub2RlID0gbm9kZS5yZXR1cm47XG4gIGVsc2Uge1xuICAgIGZpYmVyID0gbm9kZTtcbiAgICBkb1xuICAgICAgKG5vZGUgPSBmaWJlciksXG4gICAgICAgIDAgIT09IChub2RlLmZsYWdzICYgNDA5OCkgJiYgKG5lYXJlc3RNb3VudGVkID0gbm9kZS5yZXR1cm4pLFxuICAgICAgICAoZmliZXIgPSBub2RlLnJldHVybik7XG4gICAgd2hpbGUgKGZpYmVyKTtcbiAgfVxuICByZXR1cm4gMyA9PT0gbm9kZS50YWcgPyBuZWFyZXN0TW91bnRlZCA6IG51bGw7XG59XG5mdW5jdGlvbiBnZXRTdXNwZW5zZUluc3RhbmNlRnJvbUZpYmVyKGZpYmVyKSB7XG4gIGlmICgxMyA9PT0gZmliZXIudGFnKSB7XG4gICAgdmFyIHN1c3BlbnNlU3RhdGUgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICAgIG51bGwgPT09IHN1c3BlbnNlU3RhdGUgJiZcbiAgICAgICgoZmliZXIgPSBmaWJlci5hbHRlcm5hdGUpLFxuICAgICAgbnVsbCAhPT0gZmliZXIgJiYgKHN1c3BlbnNlU3RhdGUgPSBmaWJlci5tZW1vaXplZFN0YXRlKSk7XG4gICAgaWYgKG51bGwgIT09IHN1c3BlbnNlU3RhdGUpIHJldHVybiBzdXNwZW5zZVN0YXRlLmRlaHlkcmF0ZWQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBhc3NlcnRJc01vdW50ZWQoZmliZXIpIHtcbiAgaWYgKGdldE5lYXJlc3RNb3VudGVkRmliZXIoZmliZXIpICE9PSBmaWJlcilcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OCkpO1xufVxuZnVuY3Rpb24gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgoZmliZXIpIHtcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgaWYgKCFhbHRlcm5hdGUpIHtcbiAgICBhbHRlcm5hdGUgPSBnZXROZWFyZXN0TW91bnRlZEZpYmVyKGZpYmVyKTtcbiAgICBpZiAobnVsbCA9PT0gYWx0ZXJuYXRlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OCkpO1xuICAgIHJldHVybiBhbHRlcm5hdGUgIT09IGZpYmVyID8gbnVsbCA6IGZpYmVyO1xuICB9XG4gIGZvciAodmFyIGEgPSBmaWJlciwgYiA9IGFsdGVybmF0ZTsgOyApIHtcbiAgICB2YXIgcGFyZW50QSA9IGEucmV0dXJuO1xuICAgIGlmIChudWxsID09PSBwYXJlbnRBKSBicmVhaztcbiAgICB2YXIgcGFyZW50QiA9IHBhcmVudEEuYWx0ZXJuYXRlO1xuICAgIGlmIChudWxsID09PSBwYXJlbnRCKSB7XG4gICAgICBiID0gcGFyZW50QS5yZXR1cm47XG4gICAgICBpZiAobnVsbCAhPT0gYikge1xuICAgICAgICBhID0gYjtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKHBhcmVudEEuY2hpbGQgPT09IHBhcmVudEIuY2hpbGQpIHtcbiAgICAgIGZvciAocGFyZW50QiA9IHBhcmVudEEuY2hpbGQ7IHBhcmVudEI7ICkge1xuICAgICAgICBpZiAocGFyZW50QiA9PT0gYSkgcmV0dXJuIGFzc2VydElzTW91bnRlZChwYXJlbnRBKSwgZmliZXI7XG4gICAgICAgIGlmIChwYXJlbnRCID09PSBiKSByZXR1cm4gYXNzZXJ0SXNNb3VudGVkKHBhcmVudEEpLCBhbHRlcm5hdGU7XG4gICAgICAgIHBhcmVudEIgPSBwYXJlbnRCLnNpYmxpbmc7XG4gICAgICB9XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OCkpO1xuICAgIH1cbiAgICBpZiAoYS5yZXR1cm4gIT09IGIucmV0dXJuKSAoYSA9IHBhcmVudEEpLCAoYiA9IHBhcmVudEIpO1xuICAgIGVsc2Uge1xuICAgICAgZm9yICh2YXIgZGlkRmluZENoaWxkID0gITEsIGNoaWxkJDAgPSBwYXJlbnRBLmNoaWxkOyBjaGlsZCQwOyApIHtcbiAgICAgICAgaWYgKGNoaWxkJDAgPT09IGEpIHtcbiAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMDtcbiAgICAgICAgICBhID0gcGFyZW50QTtcbiAgICAgICAgICBiID0gcGFyZW50QjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGQkMCA9PT0gYikge1xuICAgICAgICAgIGRpZEZpbmRDaGlsZCA9ICEwO1xuICAgICAgICAgIGIgPSBwYXJlbnRBO1xuICAgICAgICAgIGEgPSBwYXJlbnRCO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNoaWxkJDAgPSBjaGlsZCQwLnNpYmxpbmc7XG4gICAgICB9XG4gICAgICBpZiAoIWRpZEZpbmRDaGlsZCkge1xuICAgICAgICBmb3IgKGNoaWxkJDAgPSBwYXJlbnRCLmNoaWxkOyBjaGlsZCQwOyApIHtcbiAgICAgICAgICBpZiAoY2hpbGQkMCA9PT0gYSkge1xuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gITA7XG4gICAgICAgICAgICBhID0gcGFyZW50QjtcbiAgICAgICAgICAgIGIgPSBwYXJlbnRBO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGlsZCQwID09PSBiKSB7XG4gICAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMDtcbiAgICAgICAgICAgIGIgPSBwYXJlbnRCO1xuICAgICAgICAgICAgYSA9IHBhcmVudEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hpbGQkMCA9IGNoaWxkJDAuc2libGluZztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRpZEZpbmRDaGlsZCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODkpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGEuYWx0ZXJuYXRlICE9PSBiKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE5MCkpO1xuICB9XG4gIGlmICgzICE9PSBhLnRhZykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxODgpKTtcbiAgcmV0dXJuIGEuc3RhdGVOb2RlLmN1cnJlbnQgPT09IGEgPyBmaWJlciA6IGFsdGVybmF0ZTtcbn1cbmZ1bmN0aW9uIGZpbmRDdXJyZW50SG9zdEZpYmVySW1wbChub2RlKSB7XG4gIHZhciB0YWcgPSBub2RlLnRhZztcbiAgaWYgKDUgPT09IHRhZyB8fCAyNiA9PT0gdGFnIHx8IDI3ID09PSB0YWcgfHwgNiA9PT0gdGFnKSByZXR1cm4gbm9kZTtcbiAgZm9yIChub2RlID0gbm9kZS5jaGlsZDsgbnVsbCAhPT0gbm9kZTsgKSB7XG4gICAgdGFnID0gZmluZEN1cnJlbnRIb3N0RmliZXJJbXBsKG5vZGUpO1xuICAgIGlmIChudWxsICE9PSB0YWcpIHJldHVybiB0YWc7XG4gICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduLFxuICBSRUFDVF9MRUdBQ1lfRUxFTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksXG4gIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiKSxcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLFxuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLFxuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLFxuICBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLFxuICBSRUFDVF9QUk9WSURFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLFxuICBSRUFDVF9DT05TVU1FUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnN1bWVyXCIpLFxuICBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxcbiAgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksXG4gIFJFQUNUX01FTU9fVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLFxuICBSRUFDVF9MQVpZX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtcbnZhciBSRUFDVF9BQ1RJVklUWV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmFjdGl2aXR5XCIpO1xuU3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7XG5TeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7XG52YXIgUkVBQ1RfTUVNT19DQUNIRV9TRU5USU5FTCA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vX2NhY2hlX3NlbnRpbmVsXCIpO1xuU3ltYm9sLmZvcihcInJlYWN0LnZpZXdfdHJhbnNpdGlvblwiKTtcbnZhciBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgPSBTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgaWYgKG51bGwgPT09IG1heWJlSXRlcmFibGUgfHwgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG1heWJlSXRlcmFibGUpIHJldHVybiBudWxsO1xuICBtYXliZUl0ZXJhYmxlID1cbiAgICAoTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSkgfHxcbiAgICBtYXliZUl0ZXJhYmxlW1wiQEBpdGVyYXRvclwiXTtcbiAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG1heWJlSXRlcmFibGUgPyBtYXliZUl0ZXJhYmxlIDogbnVsbDtcbn1cbnZhciBSRUFDVF9DTElFTlRfUkVGRVJFTkNFID0gU3ltYm9sLmZvcihcInJlYWN0LmNsaWVudC5yZWZlcmVuY2VcIik7XG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZSkge1xuICBpZiAobnVsbCA9PSB0eXBlKSByZXR1cm4gbnVsbDtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHR5cGUpXG4gICAgcmV0dXJuIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0VcbiAgICAgID8gbnVsbFxuICAgICAgOiB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBudWxsO1xuICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHR5cGUpIHJldHVybiB0eXBlO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICByZXR1cm4gXCJGcmFnbWVudFwiO1xuICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgIHJldHVybiBcIlByb2ZpbGVyXCI7XG4gICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgcmV0dXJuIFwiU3RyaWN0TW9kZVwiO1xuICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgIHJldHVybiBcIlN1c3BlbnNlXCI7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gXCJTdXNwZW5zZUxpc3RcIjtcbiAgICBjYXNlIFJFQUNUX0FDVElWSVRZX1RZUEU6XG4gICAgICByZXR1cm4gXCJBY3Rpdml0eVwiO1xuICB9XG4gIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgdHlwZSlcbiAgICBzd2l0Y2ggKHR5cGUuJCR0eXBlb2YpIHtcbiAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgIHJldHVybiBcIlBvcnRhbFwiO1xuICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgIHJldHVybiAodHlwZS5kaXNwbGF5TmFtZSB8fCBcIkNvbnRleHRcIikgKyBcIi5Qcm92aWRlclwiO1xuICAgICAgY2FzZSBSRUFDVF9DT05TVU1FUl9UWVBFOlxuICAgICAgICByZXR1cm4gKHR5cGUuX2NvbnRleHQuZGlzcGxheU5hbWUgfHwgXCJDb250ZXh0XCIpICsgXCIuQ29uc3VtZXJcIjtcbiAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgdmFyIGlubmVyVHlwZSA9IHR5cGUucmVuZGVyO1xuICAgICAgICB0eXBlID0gdHlwZS5kaXNwbGF5TmFtZTtcbiAgICAgICAgdHlwZSB8fFxuICAgICAgICAgICgodHlwZSA9IGlubmVyVHlwZS5kaXNwbGF5TmFtZSB8fCBpbm5lclR5cGUubmFtZSB8fCBcIlwiKSxcbiAgICAgICAgICAodHlwZSA9IFwiXCIgIT09IHR5cGUgPyBcIkZvcndhcmRSZWYoXCIgKyB0eXBlICsgXCIpXCIgOiBcIkZvcndhcmRSZWZcIikpO1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChpbm5lclR5cGUgPSB0eXBlLmRpc3BsYXlOYW1lIHx8IG51bGwpLFxuICAgICAgICAgIG51bGwgIT09IGlubmVyVHlwZVxuICAgICAgICAgICAgPyBpbm5lclR5cGVcbiAgICAgICAgICAgIDogZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUudHlwZSkgfHwgXCJNZW1vXCJcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICBpbm5lclR5cGUgPSB0eXBlLl9wYXlsb2FkO1xuICAgICAgICB0eXBlID0gdHlwZS5faW5pdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUoaW5uZXJUeXBlKSk7XG4gICAgICAgIH0gY2F0Y2ggKHgpIHt9XG4gICAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBpc0FycmF5SW1wbCA9IEFycmF5LmlzQXJyYXksXG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzID1cbiAgICBSZWFjdC5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUsXG4gIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzID1cbiAgICBSZWFjdERPTS5fX0RPTV9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUsXG4gIHNoYXJlZE5vdFBlbmRpbmdPYmplY3QgPSB7XG4gICAgcGVuZGluZzogITEsXG4gICAgZGF0YTogbnVsbCxcbiAgICBtZXRob2Q6IG51bGwsXG4gICAgYWN0aW9uOiBudWxsXG4gIH0sXG4gIHZhbHVlU3RhY2sgPSBbXSxcbiAgaW5kZXggPSAtMTtcbmZ1bmN0aW9uIGNyZWF0ZUN1cnNvcihkZWZhdWx0VmFsdWUpIHtcbiAgcmV0dXJuIHsgY3VycmVudDogZGVmYXVsdFZhbHVlIH07XG59XG5mdW5jdGlvbiBwb3AoY3Vyc29yKSB7XG4gIDAgPiBpbmRleCB8fFxuICAgICgoY3Vyc29yLmN1cnJlbnQgPSB2YWx1ZVN0YWNrW2luZGV4XSksICh2YWx1ZVN0YWNrW2luZGV4XSA9IG51bGwpLCBpbmRleC0tKTtcbn1cbmZ1bmN0aW9uIHB1c2goY3Vyc29yLCB2YWx1ZSkge1xuICBpbmRleCsrO1xuICB2YWx1ZVN0YWNrW2luZGV4XSA9IGN1cnNvci5jdXJyZW50O1xuICBjdXJzb3IuY3VycmVudCA9IHZhbHVlO1xufVxudmFyIGNvbnRleHRTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgY29udGV4dEZpYmVyU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICBob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpO1xuZnVuY3Rpb24gcHVzaEhvc3RDb250YWluZXIoZmliZXIsIG5leHRSb290SW5zdGFuY2UpIHtcbiAgcHVzaChyb290SW5zdGFuY2VTdGFja0N1cnNvciwgbmV4dFJvb3RJbnN0YW5jZSk7XG4gIHB1c2goY29udGV4dEZpYmVyU3RhY2tDdXJzb3IsIGZpYmVyKTtcbiAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIG51bGwpO1xuICBzd2l0Y2ggKG5leHRSb290SW5zdGFuY2Uubm9kZVR5cGUpIHtcbiAgICBjYXNlIDk6XG4gICAgY2FzZSAxMTpcbiAgICAgIGZpYmVyID0gKGZpYmVyID0gbmV4dFJvb3RJbnN0YW5jZS5kb2N1bWVudEVsZW1lbnQpXG4gICAgICAgID8gKGZpYmVyID0gZmliZXIubmFtZXNwYWNlVVJJKVxuICAgICAgICAgID8gZ2V0T3duSG9zdENvbnRleHQoZmliZXIpXG4gICAgICAgICAgOiAwXG4gICAgICAgIDogMDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoXG4gICAgICAgICgoZmliZXIgPSBuZXh0Um9vdEluc3RhbmNlLnRhZ05hbWUpLFxuICAgICAgICAobmV4dFJvb3RJbnN0YW5jZSA9IG5leHRSb290SW5zdGFuY2UubmFtZXNwYWNlVVJJKSlcbiAgICAgIClcbiAgICAgICAgKG5leHRSb290SW5zdGFuY2UgPSBnZXRPd25Ib3N0Q29udGV4dChuZXh0Um9vdEluc3RhbmNlKSksXG4gICAgICAgICAgKGZpYmVyID0gZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QobmV4dFJvb3RJbnN0YW5jZSwgZmliZXIpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgc3dpdGNoIChmaWJlcikge1xuICAgICAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgICAgIGZpYmVyID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJtYXRoXCI6XG4gICAgICAgICAgICBmaWJlciA9IDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZmliZXIgPSAwO1xuICAgICAgICB9XG4gIH1cbiAgcG9wKGNvbnRleHRTdGFja0N1cnNvcik7XG4gIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBmaWJlcik7XG59XG5mdW5jdGlvbiBwb3BIb3N0Q29udGFpbmVyKCkge1xuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yKTtcbiAgcG9wKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yKTtcbiAgcG9wKHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yKTtcbn1cbmZ1bmN0aW9uIHB1c2hIb3N0Q29udGV4dChmaWJlcikge1xuICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmIHB1c2goaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvciwgZmliZXIpO1xuICB2YXIgY29udGV4dCA9IGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QoY29udGV4dCwgZmliZXIudHlwZSk7XG4gIGNvbnRleHQgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgIChwdXNoKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlciksXG4gICAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xufVxuZnVuY3Rpb24gcG9wSG9zdENvbnRleHQoZmliZXIpIHtcbiAgY29udGV4dEZpYmVyU3RhY2tDdXJzb3IuY3VycmVudCA9PT0gZmliZXIgJiZcbiAgICAocG9wKGNvbnRleHRTdGFja0N1cnNvciksIHBvcChjb250ZXh0RmliZXJTdGFja0N1cnNvcikpO1xuICBob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yLmN1cnJlbnQgPT09IGZpYmVyICYmXG4gICAgKHBvcChob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yKSxcbiAgICAoSG9zdFRyYW5zaXRpb25Db250ZXh0Ll9jdXJyZW50VmFsdWUgPSBzaGFyZWROb3RQZW5kaW5nT2JqZWN0KSk7XG59XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICBzY2hlZHVsZUNhbGxiYWNrJDMgPSBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxcbiAgY2FuY2VsQ2FsbGJhY2skMSA9IFNjaGVkdWxlci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxcbiAgc2hvdWxkWWllbGQgPSBTY2hlZHVsZXIudW5zdGFibGVfc2hvdWxkWWllbGQsXG4gIHJlcXVlc3RQYWludCA9IFNjaGVkdWxlci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsXG4gIG5vdyA9IFNjaGVkdWxlci51bnN0YWJsZV9ub3csXG4gIGdldEN1cnJlbnRQcmlvcml0eUxldmVsID0gU2NoZWR1bGVyLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFxuICBJbW1lZGlhdGVQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxcbiAgVXNlckJsb2NraW5nUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksXG4gIE5vcm1hbFByaW9yaXR5JDEgPSBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gIExvd1ByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFxuICBJZGxlUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFxuICBsb2ckMSA9IFNjaGVkdWxlci5sb2csXG4gIHVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlLFxuICByZW5kZXJlcklEID0gbnVsbCxcbiAgaW5qZWN0ZWRIb29rID0gbnVsbDtcbmZ1bmN0aW9uIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKG5ld0lzU3RyaWN0TW9kZSkge1xuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBsb2ckMSAmJiB1bnN0YWJsZV9zZXREaXNhYmxlWWllbGRWYWx1ZShuZXdJc1N0cmljdE1vZGUpO1xuICBpZiAoaW5qZWN0ZWRIb29rICYmIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluamVjdGVkSG9vay5zZXRTdHJpY3RNb2RlKVxuICAgIHRyeSB7XG4gICAgICBpbmplY3RlZEhvb2suc2V0U3RyaWN0TW9kZShyZW5kZXJlcklELCBuZXdJc1N0cmljdE1vZGUpO1xuICAgIH0gY2F0Y2ggKGVycikge31cbn1cbnZhciBjbHozMiA9IE1hdGguY2x6MzIgPyBNYXRoLmNsejMyIDogY2x6MzJGYWxsYmFjayxcbiAgbG9nID0gTWF0aC5sb2csXG4gIExOMiA9IE1hdGguTE4yO1xuZnVuY3Rpb24gY2x6MzJGYWxsYmFjayh4KSB7XG4gIHggPj4+PSAwO1xuICByZXR1cm4gMCA9PT0geCA/IDMyIDogKDMxIC0gKChsb2coeCkgLyBMTjIpIHwgMCkpIHwgMDtcbn1cbnZhciBuZXh0VHJhbnNpdGlvbkxhbmUgPSAyNTYsXG4gIG5leHRSZXRyeUxhbmUgPSA0MTk0MzA0O1xuZnVuY3Rpb24gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMobGFuZXMpIHtcbiAgdmFyIHBlbmRpbmdTeW5jTGFuZXMgPSBsYW5lcyAmIDQyO1xuICBpZiAoMCAhPT0gcGVuZGluZ1N5bmNMYW5lcykgcmV0dXJuIHBlbmRpbmdTeW5jTGFuZXM7XG4gIHN3aXRjaCAobGFuZXMgJiAtbGFuZXMpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gNDtcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gODtcbiAgICBjYXNlIDE2OlxuICAgICAgcmV0dXJuIDE2O1xuICAgIGNhc2UgMzI6XG4gICAgICByZXR1cm4gMzI7XG4gICAgY2FzZSA2NDpcbiAgICAgIHJldHVybiA2NDtcbiAgICBjYXNlIDEyODpcbiAgICAgIHJldHVybiAxMjg7XG4gICAgY2FzZSAyNTY6XG4gICAgY2FzZSA1MTI6XG4gICAgY2FzZSAxMDI0OlxuICAgIGNhc2UgMjA0ODpcbiAgICBjYXNlIDQwOTY6XG4gICAgY2FzZSA4MTkyOlxuICAgIGNhc2UgMTYzODQ6XG4gICAgY2FzZSAzMjc2ODpcbiAgICBjYXNlIDY1NTM2OlxuICAgIGNhc2UgMTMxMDcyOlxuICAgIGNhc2UgMjYyMTQ0OlxuICAgIGNhc2UgNTI0Mjg4OlxuICAgIGNhc2UgMTA0ODU3NjpcbiAgICBjYXNlIDIwOTcxNTI6XG4gICAgICByZXR1cm4gbGFuZXMgJiA0MTk0MDQ4O1xuICAgIGNhc2UgNDE5NDMwNDpcbiAgICBjYXNlIDgzODg2MDg6XG4gICAgY2FzZSAxNjc3NzIxNjpcbiAgICBjYXNlIDMzNTU0NDMyOlxuICAgICAgcmV0dXJuIGxhbmVzICYgNjI5MTQ1NjA7XG4gICAgY2FzZSA2NzEwODg2NDpcbiAgICAgIHJldHVybiA2NzEwODg2NDtcbiAgICBjYXNlIDEzNDIxNzcyODpcbiAgICAgIHJldHVybiAxMzQyMTc3Mjg7XG4gICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICByZXR1cm4gMjY4NDM1NDU2O1xuICAgIGNhc2UgNTM2ODcwOTEyOlxuICAgICAgcmV0dXJuIDUzNjg3MDkxMjtcbiAgICBjYXNlIDEwNzM3NDE4MjQ6XG4gICAgICByZXR1cm4gMDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGxhbmVzO1xuICB9XG59XG5mdW5jdGlvbiBnZXROZXh0TGFuZXMocm9vdCwgd2lwTGFuZXMsIHJvb3RIYXNQZW5kaW5nQ29tbWl0KSB7XG4gIHZhciBwZW5kaW5nTGFuZXMgPSByb290LnBlbmRpbmdMYW5lcztcbiAgaWYgKDAgPT09IHBlbmRpbmdMYW5lcykgcmV0dXJuIDA7XG4gIHZhciBuZXh0TGFuZXMgPSAwLFxuICAgIHN1c3BlbmRlZExhbmVzID0gcm9vdC5zdXNwZW5kZWRMYW5lcyxcbiAgICBwaW5nZWRMYW5lcyA9IHJvb3QucGluZ2VkTGFuZXM7XG4gIHJvb3QgPSByb290Lndhcm1MYW5lcztcbiAgdmFyIG5vbklkbGVQZW5kaW5nTGFuZXMgPSBwZW5kaW5nTGFuZXMgJiAxMzQyMTc3Mjc7XG4gIDAgIT09IG5vbklkbGVQZW5kaW5nTGFuZXNcbiAgICA/ICgocGVuZGluZ0xhbmVzID0gbm9uSWRsZVBlbmRpbmdMYW5lcyAmIH5zdXNwZW5kZWRMYW5lcyksXG4gICAgICAwICE9PSBwZW5kaW5nTGFuZXNcbiAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMocGVuZGluZ0xhbmVzKSlcbiAgICAgICAgOiAoKHBpbmdlZExhbmVzICY9IG5vbklkbGVQZW5kaW5nTGFuZXMpLFxuICAgICAgICAgIDAgIT09IHBpbmdlZExhbmVzXG4gICAgICAgICAgICA/IChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhwaW5nZWRMYW5lcykpXG4gICAgICAgICAgICA6IHJvb3RIYXNQZW5kaW5nQ29tbWl0IHx8XG4gICAgICAgICAgICAgICgocm9vdEhhc1BlbmRpbmdDb21taXQgPSBub25JZGxlUGVuZGluZ0xhbmVzICYgfnJvb3QpLFxuICAgICAgICAgICAgICAwICE9PSByb290SGFzUGVuZGluZ0NvbW1pdCAmJlxuICAgICAgICAgICAgICAgIChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhyb290SGFzUGVuZGluZ0NvbW1pdCkpKSkpXG4gICAgOiAoKG5vbklkbGVQZW5kaW5nTGFuZXMgPSBwZW5kaW5nTGFuZXMgJiB+c3VzcGVuZGVkTGFuZXMpLFxuICAgICAgMCAhPT0gbm9uSWRsZVBlbmRpbmdMYW5lc1xuICAgICAgICA/IChuZXh0TGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhub25JZGxlUGVuZGluZ0xhbmVzKSlcbiAgICAgICAgOiAwICE9PSBwaW5nZWRMYW5lc1xuICAgICAgICAgID8gKG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKHBpbmdlZExhbmVzKSlcbiAgICAgICAgICA6IHJvb3RIYXNQZW5kaW5nQ29tbWl0IHx8XG4gICAgICAgICAgICAoKHJvb3RIYXNQZW5kaW5nQ29tbWl0ID0gcGVuZGluZ0xhbmVzICYgfnJvb3QpLFxuICAgICAgICAgICAgMCAhPT0gcm9vdEhhc1BlbmRpbmdDb21taXQgJiZcbiAgICAgICAgICAgICAgKG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKHJvb3RIYXNQZW5kaW5nQ29tbWl0KSkpKTtcbiAgcmV0dXJuIDAgPT09IG5leHRMYW5lc1xuICAgID8gMFxuICAgIDogMCAhPT0gd2lwTGFuZXMgJiZcbiAgICAgICAgd2lwTGFuZXMgIT09IG5leHRMYW5lcyAmJlxuICAgICAgICAwID09PSAod2lwTGFuZXMgJiBzdXNwZW5kZWRMYW5lcykgJiZcbiAgICAgICAgKChzdXNwZW5kZWRMYW5lcyA9IG5leHRMYW5lcyAmIC1uZXh0TGFuZXMpLFxuICAgICAgICAocm9vdEhhc1BlbmRpbmdDb21taXQgPSB3aXBMYW5lcyAmIC13aXBMYW5lcyksXG4gICAgICAgIHN1c3BlbmRlZExhbmVzID49IHJvb3RIYXNQZW5kaW5nQ29tbWl0IHx8XG4gICAgICAgICAgKDMyID09PSBzdXNwZW5kZWRMYW5lcyAmJiAwICE9PSAocm9vdEhhc1BlbmRpbmdDb21taXQgJiA0MTk0MDQ4KSkpXG4gICAgICA/IHdpcExhbmVzXG4gICAgICA6IG5leHRMYW5lcztcbn1cbmZ1bmN0aW9uIGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCwgcmVuZGVyTGFuZXMpIHtcbiAgcmV0dXJuIChcbiAgICAwID09PVxuICAgIChyb290LnBlbmRpbmdMYW5lcyAmXG4gICAgICB+KHJvb3Quc3VzcGVuZGVkTGFuZXMgJiB+cm9vdC5waW5nZWRMYW5lcykgJlxuICAgICAgcmVuZGVyTGFuZXMpXG4gICk7XG59XG5mdW5jdGlvbiBjb21wdXRlRXhwaXJhdGlvblRpbWUobGFuZSwgY3VycmVudFRpbWUpIHtcbiAgc3dpdGNoIChsYW5lKSB7XG4gICAgY2FzZSAxOlxuICAgIGNhc2UgMjpcbiAgICBjYXNlIDQ6XG4gICAgY2FzZSA4OlxuICAgIGNhc2UgNjQ6XG4gICAgICByZXR1cm4gY3VycmVudFRpbWUgKyAyNTA7XG4gICAgY2FzZSAxNjpcbiAgICBjYXNlIDMyOlxuICAgIGNhc2UgMTI4OlxuICAgIGNhc2UgMjU2OlxuICAgIGNhc2UgNTEyOlxuICAgIGNhc2UgMTAyNDpcbiAgICBjYXNlIDIwNDg6XG4gICAgY2FzZSA0MDk2OlxuICAgIGNhc2UgODE5MjpcbiAgICBjYXNlIDE2Mzg0OlxuICAgIGNhc2UgMzI3Njg6XG4gICAgY2FzZSA2NTUzNjpcbiAgICBjYXNlIDEzMTA3MjpcbiAgICBjYXNlIDI2MjE0NDpcbiAgICBjYXNlIDUyNDI4ODpcbiAgICBjYXNlIDEwNDg1NzY6XG4gICAgY2FzZSAyMDk3MTUyOlxuICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lICsgNWUzO1xuICAgIGNhc2UgNDE5NDMwNDpcbiAgICBjYXNlIDgzODg2MDg6XG4gICAgY2FzZSAxNjc3NzIxNjpcbiAgICBjYXNlIDMzNTU0NDMyOlxuICAgICAgcmV0dXJuIC0xO1xuICAgIGNhc2UgNjcxMDg4NjQ6XG4gICAgY2FzZSAxMzQyMTc3Mjg6XG4gICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgY2FzZSA1MzY4NzA5MTI6XG4gICAgY2FzZSAxMDczNzQxODI0OlxuICAgICAgcmV0dXJuIC0xO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gLTE7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsYWltTmV4dFRyYW5zaXRpb25MYW5lKCkge1xuICB2YXIgbGFuZSA9IG5leHRUcmFuc2l0aW9uTGFuZTtcbiAgbmV4dFRyYW5zaXRpb25MYW5lIDw8PSAxO1xuICAwID09PSAobmV4dFRyYW5zaXRpb25MYW5lICYgNDE5NDA0OCkgJiYgKG5leHRUcmFuc2l0aW9uTGFuZSA9IDI1Nik7XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gY2xhaW1OZXh0UmV0cnlMYW5lKCkge1xuICB2YXIgbGFuZSA9IG5leHRSZXRyeUxhbmU7XG4gIG5leHRSZXRyeUxhbmUgPDw9IDE7XG4gIDAgPT09IChuZXh0UmV0cnlMYW5lICYgNjI5MTQ1NjApICYmIChuZXh0UmV0cnlMYW5lID0gNDE5NDMwNCk7XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gY3JlYXRlTGFuZU1hcChpbml0aWFsKSB7XG4gIGZvciAodmFyIGxhbmVNYXAgPSBbXSwgaSA9IDA7IDMxID4gaTsgaSsrKSBsYW5lTWFwLnB1c2goaW5pdGlhbCk7XG4gIHJldHVybiBsYW5lTWFwO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RVcGRhdGVkJDEocm9vdCwgdXBkYXRlTGFuZSkge1xuICByb290LnBlbmRpbmdMYW5lcyB8PSB1cGRhdGVMYW5lO1xuICAyNjg0MzU0NTYgIT09IHVwZGF0ZUxhbmUgJiZcbiAgICAoKHJvb3Quc3VzcGVuZGVkTGFuZXMgPSAwKSwgKHJvb3QucGluZ2VkTGFuZXMgPSAwKSwgKHJvb3Qud2FybUxhbmVzID0gMCkpO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RGaW5pc2hlZChcbiAgcm9vdCxcbiAgZmluaXNoZWRMYW5lcyxcbiAgcmVtYWluaW5nTGFuZXMsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXNcbikge1xuICB2YXIgcHJldmlvdXNseVBlbmRpbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICByb290LnBlbmRpbmdMYW5lcyA9IHJlbWFpbmluZ0xhbmVzO1xuICByb290LnN1c3BlbmRlZExhbmVzID0gMDtcbiAgcm9vdC5waW5nZWRMYW5lcyA9IDA7XG4gIHJvb3Qud2FybUxhbmVzID0gMDtcbiAgcm9vdC5leHBpcmVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3QuZW50YW5nbGVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3QuZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3Quc2hlbGxTdXNwZW5kQ291bnRlciA9IDA7XG4gIHZhciBlbnRhbmdsZW1lbnRzID0gcm9vdC5lbnRhbmdsZW1lbnRzLFxuICAgIGV4cGlyYXRpb25UaW1lcyA9IHJvb3QuZXhwaXJhdGlvblRpbWVzLFxuICAgIGhpZGRlblVwZGF0ZXMgPSByb290LmhpZGRlblVwZGF0ZXM7XG4gIGZvciAoXG4gICAgcmVtYWluaW5nTGFuZXMgPSBwcmV2aW91c2x5UGVuZGluZ0xhbmVzICYgfnJlbWFpbmluZ0xhbmVzO1xuICAgIDAgPCByZW1haW5pbmdMYW5lcztcblxuICApIHtcbiAgICB2YXIgaW5kZXgkNSA9IDMxIC0gY2x6MzIocmVtYWluaW5nTGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNTtcbiAgICBlbnRhbmdsZW1lbnRzW2luZGV4JDVdID0gMDtcbiAgICBleHBpcmF0aW9uVGltZXNbaW5kZXgkNV0gPSAtMTtcbiAgICB2YXIgaGlkZGVuVXBkYXRlc0ZvckxhbmUgPSBoaWRkZW5VcGRhdGVzW2luZGV4JDVdO1xuICAgIGlmIChudWxsICE9PSBoaWRkZW5VcGRhdGVzRm9yTGFuZSlcbiAgICAgIGZvciAoXG4gICAgICAgIGhpZGRlblVwZGF0ZXNbaW5kZXgkNV0gPSBudWxsLCBpbmRleCQ1ID0gMDtcbiAgICAgICAgaW5kZXgkNSA8IGhpZGRlblVwZGF0ZXNGb3JMYW5lLmxlbmd0aDtcbiAgICAgICAgaW5kZXgkNSsrXG4gICAgICApIHtcbiAgICAgICAgdmFyIHVwZGF0ZSA9IGhpZGRlblVwZGF0ZXNGb3JMYW5lW2luZGV4JDVdO1xuICAgICAgICBudWxsICE9PSB1cGRhdGUgJiYgKHVwZGF0ZS5sYW5lICY9IC01MzY4NzA5MTMpO1xuICAgICAgfVxuICAgIHJlbWFpbmluZ0xhbmVzICY9IH5sYW5lO1xuICB9XG4gIDAgIT09IHNwYXduZWRMYW5lICYmIG1hcmtTcGF3bmVkRGVmZXJyZWRMYW5lKHJvb3QsIHNwYXduZWRMYW5lLCAwKTtcbiAgMCAhPT0gc3VzcGVuZGVkUmV0cnlMYW5lcyAmJlxuICAgIDAgPT09IHVwZGF0ZWRMYW5lcyAmJlxuICAgIDAgIT09IHJvb3QudGFnICYmXG4gICAgKHJvb3Quc3VzcGVuZGVkTGFuZXMgfD1cbiAgICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMgJiB+KHByZXZpb3VzbHlQZW5kaW5nTGFuZXMgJiB+ZmluaXNoZWRMYW5lcykpO1xufVxuZnVuY3Rpb24gbWFya1NwYXduZWREZWZlcnJlZExhbmUocm9vdCwgc3Bhd25lZExhbmUsIGVudGFuZ2xlZExhbmVzKSB7XG4gIHJvb3QucGVuZGluZ0xhbmVzIHw9IHNwYXduZWRMYW5lO1xuICByb290LnN1c3BlbmRlZExhbmVzICY9IH5zcGF3bmVkTGFuZTtcbiAgdmFyIHNwYXduZWRMYW5lSW5kZXggPSAzMSAtIGNsejMyKHNwYXduZWRMYW5lKTtcbiAgcm9vdC5lbnRhbmdsZWRMYW5lcyB8PSBzcGF3bmVkTGFuZTtcbiAgcm9vdC5lbnRhbmdsZW1lbnRzW3NwYXduZWRMYW5lSW5kZXhdID1cbiAgICByb290LmVudGFuZ2xlbWVudHNbc3Bhd25lZExhbmVJbmRleF0gfFxuICAgIDEwNzM3NDE4MjQgfFxuICAgIChlbnRhbmdsZWRMYW5lcyAmIDQxOTQwOTApO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgZW50YW5nbGVkTGFuZXMpIHtcbiAgdmFyIHJvb3RFbnRhbmdsZWRMYW5lcyA9IChyb290LmVudGFuZ2xlZExhbmVzIHw9IGVudGFuZ2xlZExhbmVzKTtcbiAgZm9yIChyb290ID0gcm9vdC5lbnRhbmdsZW1lbnRzOyByb290RW50YW5nbGVkTGFuZXM7ICkge1xuICAgIHZhciBpbmRleCQ2ID0gMzEgLSBjbHozMihyb290RW50YW5nbGVkTGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNjtcbiAgICAobGFuZSAmIGVudGFuZ2xlZExhbmVzKSB8IChyb290W2luZGV4JDZdICYgZW50YW5nbGVkTGFuZXMpICYmXG4gICAgICAocm9vdFtpbmRleCQ2XSB8PSBlbnRhbmdsZWRMYW5lcyk7XG4gICAgcm9vdEVudGFuZ2xlZExhbmVzICY9IH5sYW5lO1xuICB9XG59XG5mdW5jdGlvbiBnZXRCdW1wZWRMYW5lRm9ySHlkcmF0aW9uQnlMYW5lKGxhbmUpIHtcbiAgc3dpdGNoIChsYW5lKSB7XG4gICAgY2FzZSAyOlxuICAgICAgbGFuZSA9IDE7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICBsYW5lID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzI6XG4gICAgICBsYW5lID0gMTY7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI1NjpcbiAgICBjYXNlIDUxMjpcbiAgICBjYXNlIDEwMjQ6XG4gICAgY2FzZSAyMDQ4OlxuICAgIGNhc2UgNDA5NjpcbiAgICBjYXNlIDgxOTI6XG4gICAgY2FzZSAxNjM4NDpcbiAgICBjYXNlIDMyNzY4OlxuICAgIGNhc2UgNjU1MzY6XG4gICAgY2FzZSAxMzEwNzI6XG4gICAgY2FzZSAyNjIxNDQ6XG4gICAgY2FzZSA1MjQyODg6XG4gICAgY2FzZSAxMDQ4NTc2OlxuICAgIGNhc2UgMjA5NzE1MjpcbiAgICBjYXNlIDQxOTQzMDQ6XG4gICAgY2FzZSA4Mzg4NjA4OlxuICAgIGNhc2UgMTY3NzcyMTY6XG4gICAgY2FzZSAzMzU1NDQzMjpcbiAgICAgIGxhbmUgPSAxMjg7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI2ODQzNTQ1NjpcbiAgICAgIGxhbmUgPSAxMzQyMTc3Mjg7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbGFuZSA9IDA7XG4gIH1cbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBsYW5lc1RvRXZlbnRQcmlvcml0eShsYW5lcykge1xuICBsYW5lcyAmPSAtbGFuZXM7XG4gIHJldHVybiAyIDwgbGFuZXNcbiAgICA/IDggPCBsYW5lc1xuICAgICAgPyAwICE9PSAobGFuZXMgJiAxMzQyMTc3MjcpXG4gICAgICAgID8gMzJcbiAgICAgICAgOiAyNjg0MzU0NTZcbiAgICAgIDogOFxuICAgIDogMjtcbn1cbmZ1bmN0aW9uIHJlc29sdmVVcGRhdGVQcmlvcml0eSgpIHtcbiAgdmFyIHVwZGF0ZVByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgaWYgKDAgIT09IHVwZGF0ZVByaW9yaXR5KSByZXR1cm4gdXBkYXRlUHJpb3JpdHk7XG4gIHVwZGF0ZVByaW9yaXR5ID0gd2luZG93LmV2ZW50O1xuICByZXR1cm4gdm9pZCAwID09PSB1cGRhdGVQcmlvcml0eSA/IDMyIDogZ2V0RXZlbnRQcmlvcml0eSh1cGRhdGVQcmlvcml0eS50eXBlKTtcbn1cbmZ1bmN0aW9uIHJ1bldpdGhQcmlvcml0eShwcmlvcml0eSwgZm4pIHtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICB0cnkge1xuICAgIHJldHVybiAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByaW9yaXR5KSwgZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eTtcbiAgfVxufVxudmFyIHJhbmRvbUtleSA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLFxuICBpbnRlcm5hbEluc3RhbmNlS2V5ID0gXCJfX3JlYWN0RmliZXIkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsUHJvcHNLZXkgPSBcIl9fcmVhY3RQcm9wcyRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleSA9IFwiX19yZWFjdENvbnRhaW5lciRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5ID0gXCJfX3JlYWN0RXZlbnRzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlckxpc3RlbmVyc0tleSA9IFwiX19yZWFjdExpc3RlbmVycyRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxFdmVudEhhbmRsZXNTZXRLZXkgPSBcIl9fcmVhY3RIYW5kbGVzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5ID0gXCJfX3JlYWN0UmVzb3VyY2VzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEhvaXN0YWJsZU1hcmtlciA9IFwiX19yZWFjdE1hcmtlciRcIiArIHJhbmRvbUtleTtcbmZ1bmN0aW9uIGRldGFjaERlbGV0ZWRJbnN0YW5jZShub2RlKSB7XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbFByb3BzS2V5XTtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XTtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxFdmVudEhhbmRsZXJMaXN0ZW5lcnNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlc1NldEtleV07XG59XG5mdW5jdGlvbiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSh0YXJnZXROb2RlKSB7XG4gIHZhciB0YXJnZXRJbnN0ID0gdGFyZ2V0Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcbiAgaWYgKHRhcmdldEluc3QpIHJldHVybiB0YXJnZXRJbnN0O1xuICBmb3IgKHZhciBwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZS5wYXJlbnROb2RlOyBwYXJlbnROb2RlOyApIHtcbiAgICBpZiAoXG4gICAgICAodGFyZ2V0SW5zdCA9XG4gICAgICAgIHBhcmVudE5vZGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gfHxcbiAgICAgICAgcGFyZW50Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSlcbiAgICApIHtcbiAgICAgIHBhcmVudE5vZGUgPSB0YXJnZXRJbnN0LmFsdGVybmF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCAhPT0gdGFyZ2V0SW5zdC5jaGlsZCB8fFxuICAgICAgICAobnVsbCAhPT0gcGFyZW50Tm9kZSAmJiBudWxsICE9PSBwYXJlbnROb2RlLmNoaWxkKVxuICAgICAgKVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIHRhcmdldE5vZGUgPSBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldE5vZGUpO1xuICAgICAgICAgIG51bGwgIT09IHRhcmdldE5vZGU7XG5cbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKChwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSkpIHJldHVybiBwYXJlbnROb2RlO1xuICAgICAgICAgIHRhcmdldE5vZGUgPSBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldE5vZGUpO1xuICAgICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0SW5zdDtcbiAgICB9XG4gICAgdGFyZ2V0Tm9kZSA9IHBhcmVudE5vZGU7XG4gICAgcGFyZW50Tm9kZSA9IHRhcmdldE5vZGUucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkge1xuICBpZiAoXG4gICAgKG5vZGUgPSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldIHx8IG5vZGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0pXG4gICkge1xuICAgIHZhciB0YWcgPSBub2RlLnRhZztcbiAgICBpZiAoXG4gICAgICA1ID09PSB0YWcgfHxcbiAgICAgIDYgPT09IHRhZyB8fFxuICAgICAgMTMgPT09IHRhZyB8fFxuICAgICAgMjYgPT09IHRhZyB8fFxuICAgICAgMjcgPT09IHRhZyB8fFxuICAgICAgMyA9PT0gdGFnXG4gICAgKVxuICAgICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBnZXROb2RlRnJvbUluc3RhbmNlKGluc3QpIHtcbiAgdmFyIHRhZyA9IGluc3QudGFnO1xuICBpZiAoNSA9PT0gdGFnIHx8IDI2ID09PSB0YWcgfHwgMjcgPT09IHRhZyB8fCA2ID09PSB0YWcpIHJldHVybiBpbnN0LnN0YXRlTm9kZTtcbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMykpO1xufVxuZnVuY3Rpb24gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qocm9vdCkge1xuICB2YXIgcmVzb3VyY2VzID0gcm9vdFtpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5XTtcbiAgcmVzb3VyY2VzIHx8XG4gICAgKHJlc291cmNlcyA9IHJvb3RbaW50ZXJuYWxSb290Tm9kZVJlc291cmNlc0tleV0gPVxuICAgICAgeyBob2lzdGFibGVTdHlsZXM6IG5ldyBNYXAoKSwgaG9pc3RhYmxlU2NyaXB0czogbmV3IE1hcCgpIH0pO1xuICByZXR1cm4gcmVzb3VyY2VzO1xufVxuZnVuY3Rpb24gbWFya05vZGVBc0hvaXN0YWJsZShub2RlKSB7XG4gIG5vZGVbaW50ZXJuYWxIb2lzdGFibGVNYXJrZXJdID0gITA7XG59XG52YXIgYWxsTmF0aXZlRXZlbnRzID0gbmV3IFNldCgpLFxuICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzID0ge307XG5mdW5jdGlvbiByZWdpc3RlclR3b1BoYXNlRXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gIHJlZ2lzdGVyRGlyZWN0RXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKTtcbiAgcmVnaXN0ZXJEaXJlY3RFdmVudChyZWdpc3RyYXRpb25OYW1lICsgXCJDYXB0dXJlXCIsIGRlcGVuZGVuY2llcyk7XG59XG5mdW5jdGlvbiByZWdpc3RlckRpcmVjdEV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUsIGRlcGVuZGVuY2llcykge1xuICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gZGVwZW5kZW5jaWVzO1xuICBmb3IgKFxuICAgIHJlZ2lzdHJhdGlvbk5hbWUgPSAwO1xuICAgIHJlZ2lzdHJhdGlvbk5hbWUgPCBkZXBlbmRlbmNpZXMubGVuZ3RoO1xuICAgIHJlZ2lzdHJhdGlvbk5hbWUrK1xuICApXG4gICAgYWxsTmF0aXZlRXZlbnRzLmFkZChkZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0pO1xufVxudmFyIFZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYID0gUmVnRXhwKFxuICAgIFwiXls6QS1aX2EtelxcXFx1MDBDMC1cXFxcdTAwRDZcXFxcdTAwRDgtXFxcXHUwMEY2XFxcXHUwMEY4LVxcXFx1MDJGRlxcXFx1MDM3MC1cXFxcdTAzN0RcXFxcdTAzN0YtXFxcXHUxRkZGXFxcXHUyMDBDLVxcXFx1MjAwRFxcXFx1MjA3MC1cXFxcdTIxOEZcXFxcdTJDMDAtXFxcXHUyRkVGXFxcXHUzMDAxLVxcXFx1RDdGRlxcXFx1RjkwMC1cXFxcdUZEQ0ZcXFxcdUZERjAtXFxcXHVGRkZEXVs6QS1aX2EtelxcXFx1MDBDMC1cXFxcdTAwRDZcXFxcdTAwRDgtXFxcXHUwMEY2XFxcXHUwMEY4LVxcXFx1MDJGRlxcXFx1MDM3MC1cXFxcdTAzN0RcXFxcdTAzN0YtXFxcXHUxRkZGXFxcXHUyMDBDLVxcXFx1MjAwRFxcXFx1MjA3MC1cXFxcdTIxOEZcXFxcdTJDMDAtXFxcXHUyRkVGXFxcXHUzMDAxLVxcXFx1RDdGRlxcXFx1RjkwMC1cXFxcdUZEQ0ZcXFxcdUZERjAtXFxcXHVGRkZEXFxcXC0uMC05XFxcXHUwMEI3XFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MjAzRi1cXFxcdTIwNDBdKiRcIlxuICApLFxuICBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlID0ge30sXG4gIHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xuZnVuY3Rpb24gaXNBdHRyaWJ1dGVOYW1lU2FmZShhdHRyaWJ1dGVOYW1lKSB7XG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSwgYXR0cmlidXRlTmFtZSkpXG4gICAgcmV0dXJuICEwO1xuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlLCBhdHRyaWJ1dGVOYW1lKSkgcmV0dXJuICExO1xuICBpZiAoVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVgudGVzdChhdHRyaWJ1dGVOYW1lKSlcbiAgICByZXR1cm4gKHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZVthdHRyaWJ1dGVOYW1lXSA9ICEwKTtcbiAgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZVthdHRyaWJ1dGVOYW1lXSA9ICEwO1xuICByZXR1cm4gITE7XG59XG5mdW5jdGlvbiBzZXRWYWx1ZUZvckF0dHJpYnV0ZShub2RlLCBuYW1lLCB2YWx1ZSkge1xuICBpZiAoaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSlcbiAgICBpZiAobnVsbCA9PT0gdmFsdWUpIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2Uge1xuICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgICB2YXIgcHJlZml4JDggPSBuYW1lLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCwgNSk7XG4gICAgICAgICAgaWYgKFwiZGF0YS1cIiAhPT0gcHJlZml4JDggJiYgXCJhcmlhLVwiICE9PSBwcmVmaXgkOCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgXCJcIiArIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gIGlmIChudWxsID09PSB2YWx1ZSkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIGVsc2Uge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsIFwiXCIgKyB2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShub2RlLCBuYW1lc3BhY2UsIG5hbWUsIHZhbHVlKSB7XG4gIGlmIChudWxsID09PSB2YWx1ZSkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIGVsc2Uge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIG5vZGUuc2V0QXR0cmlidXRlTlMobmFtZXNwYWNlLCBuYW1lLCBcIlwiICsgdmFsdWUpO1xuICB9XG59XG52YXIgcHJlZml4LCBzdWZmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lKSB7XG4gIGlmICh2b2lkIDAgPT09IHByZWZpeClcbiAgICB0cnkge1xuICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICB2YXIgbWF0Y2ggPSB4LnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO1xuICAgICAgcHJlZml4ID0gKG1hdGNoICYmIG1hdGNoWzFdKSB8fCBcIlwiO1xuICAgICAgc3VmZml4ID1cbiAgICAgICAgLTEgPCB4LnN0YWNrLmluZGV4T2YoXCJcXG4gICAgYXRcIilcbiAgICAgICAgICA/IFwiICg8YW5vbnltb3VzPilcIlxuICAgICAgICAgIDogLTEgPCB4LnN0YWNrLmluZGV4T2YoXCJAXCIpXG4gICAgICAgICAgICA/IFwiQHVua25vd246MDowXCJcbiAgICAgICAgICAgIDogXCJcIjtcbiAgICB9XG4gIHJldHVybiBcIlxcblwiICsgcHJlZml4ICsgbmFtZSArIHN1ZmZpeDtcbn1cbnZhciByZWVudHJ5ID0gITE7XG5mdW5jdGlvbiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZuLCBjb25zdHJ1Y3QpIHtcbiAgaWYgKCFmbiB8fCByZWVudHJ5KSByZXR1cm4gXCJcIjtcbiAgcmVlbnRyeSA9ICEwO1xuICB2YXIgcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSA9IEVycm9yLnByZXBhcmVTdGFja1RyYWNlO1xuICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHZvaWQgMDtcbiAgdHJ5IHtcbiAgICB2YXIgUnVuSW5Sb290RnJhbWUgPSB7XG4gICAgICBEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoY29uc3RydWN0KSB7XG4gICAgICAgICAgICB2YXIgRmFrZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFrZS5wcm90b3R5cGUsIFwicHJvcHNcIiwge1xuICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgUmVmbGVjdCAmJiBSZWZsZWN0LmNvbnN0cnVjdCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KEZha2UsIFtdKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250cm9sID0geDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChmbiwgW10sIEZha2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBGYWtlLmNhbGwoKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoeCQ5KSB7XG4gICAgICAgICAgICAgICAgY29udHJvbCA9IHgkOTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmbi5jYWxsKEZha2UucHJvdG90eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKHgkMTApIHtcbiAgICAgICAgICAgICAgY29udHJvbCA9IHgkMTA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAoRmFrZSA9IGZuKCkpICYmXG4gICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIEZha2UuY2F0Y2ggJiZcbiAgICAgICAgICAgICAgRmFrZS5jYXRjaChmdW5jdGlvbiAoKSB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChzYW1wbGUpIHtcbiAgICAgICAgICBpZiAoc2FtcGxlICYmIGNvbnRyb2wgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHNhbXBsZS5zdGFjaylcbiAgICAgICAgICAgIHJldHVybiBbc2FtcGxlLnN0YWNrLCBjb250cm9sLnN0YWNrXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW251bGwsIG51bGxdO1xuICAgICAgfVxuICAgIH07XG4gICAgUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290LmRpc3BsYXlOYW1lID1cbiAgICAgIFwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290XCI7XG4gICAgdmFyIG5hbWVQcm9wRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gICAgICBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QsXG4gICAgICBcIm5hbWVcIlxuICAgICk7XG4gICAgbmFtZVByb3BEZXNjcmlwdG9yICYmXG4gICAgICBuYW1lUHJvcERlc2NyaXB0b3IuY29uZmlndXJhYmxlICYmXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoXG4gICAgICAgIFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCxcbiAgICAgICAgXCJuYW1lXCIsXG4gICAgICAgIHsgdmFsdWU6IFwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290XCIgfVxuICAgICAgKTtcbiAgICB2YXIgX1J1bkluUm9vdEZyYW1lJERldGVyID0gUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290KCksXG4gICAgICBzYW1wbGVTdGFjayA9IF9SdW5JblJvb3RGcmFtZSREZXRlclswXSxcbiAgICAgIGNvbnRyb2xTdGFjayA9IF9SdW5JblJvb3RGcmFtZSREZXRlclsxXTtcbiAgICBpZiAoc2FtcGxlU3RhY2sgJiYgY29udHJvbFN0YWNrKSB7XG4gICAgICB2YXIgc2FtcGxlTGluZXMgPSBzYW1wbGVTdGFjay5zcGxpdChcIlxcblwiKSxcbiAgICAgICAgY29udHJvbExpbmVzID0gY29udHJvbFN0YWNrLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgZm9yIChcbiAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yID0gUnVuSW5Sb290RnJhbWUgPSAwO1xuICAgICAgICBSdW5JblJvb3RGcmFtZSA8IHNhbXBsZUxpbmVzLmxlbmd0aCAmJlxuICAgICAgICAhc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdLmluY2x1ZGVzKFwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290XCIpO1xuXG4gICAgICApXG4gICAgICAgIFJ1bkluUm9vdEZyYW1lKys7XG4gICAgICBmb3IgKFxuICAgICAgICA7XG4gICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvciA8IGNvbnRyb2xMaW5lcy5sZW5ndGggJiZcbiAgICAgICAgIWNvbnRyb2xMaW5lc1tuYW1lUHJvcERlc2NyaXB0b3JdLmluY2x1ZGVzKFxuICAgICAgICAgIFwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290XCJcbiAgICAgICAgKTtcblxuICAgICAgKVxuICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IrKztcbiAgICAgIGlmIChcbiAgICAgICAgUnVuSW5Sb290RnJhbWUgPT09IHNhbXBsZUxpbmVzLmxlbmd0aCB8fFxuICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IgPT09IGNvbnRyb2xMaW5lcy5sZW5ndGhcbiAgICAgIClcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBSdW5JblJvb3RGcmFtZSA9IHNhbXBsZUxpbmVzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IgPSBjb250cm9sTGluZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAxIDw9IFJ1bkluUm9vdEZyYW1lICYmXG4gICAgICAgICAgMCA8PSBuYW1lUHJvcERlc2NyaXB0b3IgJiZcbiAgICAgICAgICBzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0gIT09IGNvbnRyb2xMaW5lc1tuYW1lUHJvcERlc2NyaXB0b3JdO1xuXG4gICAgICAgIClcbiAgICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3ItLTtcbiAgICAgIGZvciAoXG4gICAgICAgIDtcbiAgICAgICAgMSA8PSBSdW5JblJvb3RGcmFtZSAmJiAwIDw9IG5hbWVQcm9wRGVzY3JpcHRvcjtcbiAgICAgICAgUnVuSW5Sb290RnJhbWUtLSwgbmFtZVByb3BEZXNjcmlwdG9yLS1cbiAgICAgIClcbiAgICAgICAgaWYgKHNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXSAhPT0gY29udHJvbExpbmVzW25hbWVQcm9wRGVzY3JpcHRvcl0pIHtcbiAgICAgICAgICBpZiAoMSAhPT0gUnVuSW5Sb290RnJhbWUgfHwgMSAhPT0gbmFtZVByb3BEZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBkb1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKFJ1bkluUm9vdEZyYW1lLS0sXG4gICAgICAgICAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yLS0sXG4gICAgICAgICAgICAgICAgMCA+IG5hbWVQcm9wRGVzY3JpcHRvciB8fFxuICAgICAgICAgICAgICAgICAgc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdICE9PVxuICAgICAgICAgICAgICAgICAgICBjb250cm9sTGluZXNbbmFtZVByb3BEZXNjcmlwdG9yXSlcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZyYW1lID1cbiAgICAgICAgICAgICAgICAgIFwiXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdLnJlcGxhY2UoXCIgYXQgbmV3IFwiLCBcIiBhdCBcIik7XG4gICAgICAgICAgICAgICAgZm4uZGlzcGxheU5hbWUgJiZcbiAgICAgICAgICAgICAgICAgIGZyYW1lLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikgJiZcbiAgICAgICAgICAgICAgICAgIChmcmFtZSA9IGZyYW1lLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLCBmbi5kaXNwbGF5TmFtZSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmcmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKDEgPD0gUnVuSW5Sb290RnJhbWUgJiYgMCA8PSBuYW1lUHJvcERlc2NyaXB0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAocmVlbnRyeSA9ICExKSwgKEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gcHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSk7XG4gIH1cbiAgcmV0dXJuIChwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlID0gZm4gPyBmbi5kaXNwbGF5TmFtZSB8fCBmbi5uYW1lIDogXCJcIilcbiAgICA/IGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UpXG4gICAgOiBcIlwiO1xufVxuZnVuY3Rpb24gZGVzY3JpYmVGaWJlcihmaWJlcikge1xuICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgIGNhc2UgMjY6XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZSk7XG4gICAgY2FzZSAxNjpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShcIkxhenlcIik7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShcIlN1c3BlbnNlXCIpO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoXCJTdXNwZW5zZUxpc3RcIik7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShmaWJlci50eXBlLCAhMSk7XG4gICAgY2FzZSAxMTpcbiAgICAgIHJldHVybiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUucmVuZGVyLCAhMSk7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZSwgITApO1xuICAgIGNhc2UgMzE6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoXCJBY3Rpdml0eVwiKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZCh3b3JrSW5Qcm9ncmVzcykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gXCJcIjtcbiAgICBkb1xuICAgICAgKGluZm8gKz0gZGVzY3JpYmVGaWJlcih3b3JrSW5Qcm9ncmVzcykpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm4pO1xuICAgIHdoaWxlICh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgcmV0dXJuIGluZm87XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICByZXR1cm4gXCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIiArIHgubWVzc2FnZSArIFwiXFxuXCIgKyB4LnN0YWNrO1xuICB9XG59XG5mdW5jdGlvbiBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSBcImJpZ2ludFwiOlxuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuZnVuY3Rpb24gaXNDaGVja2FibGUoZWxlbSkge1xuICB2YXIgdHlwZSA9IGVsZW0udHlwZTtcbiAgcmV0dXJuIChcbiAgICAoZWxlbSA9IGVsZW0ubm9kZU5hbWUpICYmXG4gICAgXCJpbnB1dFwiID09PSBlbGVtLnRvTG93ZXJDYXNlKCkgJiZcbiAgICAoXCJjaGVja2JveFwiID09PSB0eXBlIHx8IFwicmFkaW9cIiA9PT0gdHlwZSlcbiAgKTtcbn1cbmZ1bmN0aW9uIHRyYWNrVmFsdWVPbk5vZGUobm9kZSkge1xuICB2YXIgdmFsdWVGaWVsZCA9IGlzQ2hlY2thYmxlKG5vZGUpID8gXCJjaGVja2VkXCIgOiBcInZhbHVlXCIsXG4gICAgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoXG4gICAgICBub2RlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcbiAgICAgIHZhbHVlRmllbGRcbiAgICApLFxuICAgIGN1cnJlbnRWYWx1ZSA9IFwiXCIgKyBub2RlW3ZhbHVlRmllbGRdO1xuICBpZiAoXG4gICAgIW5vZGUuaGFzT3duUHJvcGVydHkodmFsdWVGaWVsZCkgJiZcbiAgICBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgZGVzY3JpcHRvciAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGRlc2NyaXB0b3IuZ2V0ICYmXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGVzY3JpcHRvci5zZXRcbiAgKSB7XG4gICAgdmFyIGdldCA9IGRlc2NyaXB0b3IuZ2V0LFxuICAgICAgc2V0ID0gZGVzY3JpcHRvci5zZXQ7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vZGUsIHZhbHVlRmllbGQsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldC5jYWxsKHRoaXMpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGN1cnJlbnRWYWx1ZSA9IFwiXCIgKyB2YWx1ZTtcbiAgICAgICAgc2V0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCB2YWx1ZUZpZWxkLCB7XG4gICAgICBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGVcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZTtcbiAgICAgIH0sXG4gICAgICBzZXRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGN1cnJlbnRWYWx1ZSA9IFwiXCIgKyB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICBzdG9wVHJhY2tpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbm9kZS5fdmFsdWVUcmFja2VyID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIG5vZGVbdmFsdWVGaWVsZF07XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gdHJhY2sobm9kZSkge1xuICBub2RlLl92YWx1ZVRyYWNrZXIgfHwgKG5vZGUuX3ZhbHVlVHJhY2tlciA9IHRyYWNrVmFsdWVPbk5vZGUobm9kZSkpO1xufVxuZnVuY3Rpb24gdXBkYXRlVmFsdWVJZkNoYW5nZWQobm9kZSkge1xuICBpZiAoIW5vZGUpIHJldHVybiAhMTtcbiAgdmFyIHRyYWNrZXIgPSBub2RlLl92YWx1ZVRyYWNrZXI7XG4gIGlmICghdHJhY2tlcikgcmV0dXJuICEwO1xuICB2YXIgbGFzdFZhbHVlID0gdHJhY2tlci5nZXRWYWx1ZSgpO1xuICB2YXIgdmFsdWUgPSBcIlwiO1xuICBub2RlICYmXG4gICAgKHZhbHVlID0gaXNDaGVja2FibGUobm9kZSlcbiAgICAgID8gbm9kZS5jaGVja2VkXG4gICAgICAgID8gXCJ0cnVlXCJcbiAgICAgICAgOiBcImZhbHNlXCJcbiAgICAgIDogbm9kZS52YWx1ZSk7XG4gIG5vZGUgPSB2YWx1ZTtcbiAgcmV0dXJuIG5vZGUgIT09IGxhc3RWYWx1ZSA/ICh0cmFja2VyLnNldFZhbHVlKG5vZGUpLCAhMCkgOiAhMTtcbn1cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSB7XG4gIGRvYyA9IGRvYyB8fCAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGRvY3VtZW50ID8gZG9jdW1lbnQgOiB2b2lkIDApO1xuICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIGRvYykgcmV0dXJuIG51bGw7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG52YXIgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlc1JlZ2V4ID0gL1tcXG5cIlxcXFxdL2c7XG5mdW5jdGlvbiBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKFxuICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXNSZWdleCxcbiAgICBmdW5jdGlvbiAoY2gpIHtcbiAgICAgIHJldHVybiBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpICsgXCIgXCI7XG4gICAgfVxuICApO1xufVxuZnVuY3Rpb24gdXBkYXRlSW5wdXQoXG4gIGVsZW1lbnQsXG4gIHZhbHVlLFxuICBkZWZhdWx0VmFsdWUsXG4gIGxhc3REZWZhdWx0VmFsdWUsXG4gIGNoZWNrZWQsXG4gIGRlZmF1bHRDaGVja2VkLFxuICB0eXBlLFxuICBuYW1lXG4pIHtcbiAgZWxlbWVudC5uYW1lID0gXCJcIjtcbiAgbnVsbCAhPSB0eXBlICYmXG4gIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgXCJib29sZWFuXCIgIT09IHR5cGVvZiB0eXBlXG4gICAgPyAoZWxlbWVudC50eXBlID0gdHlwZSlcbiAgICA6IGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKTtcbiAgaWYgKG51bGwgIT0gdmFsdWUpXG4gICAgaWYgKFwibnVtYmVyXCIgPT09IHR5cGUpIHtcbiAgICAgIGlmICgoMCA9PT0gdmFsdWUgJiYgXCJcIiA9PT0gZWxlbWVudC52YWx1ZSkgfHwgZWxlbWVudC52YWx1ZSAhPSB2YWx1ZSlcbiAgICAgICAgZWxlbWVudC52YWx1ZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKTtcbiAgICB9IGVsc2VcbiAgICAgIGVsZW1lbnQudmFsdWUgIT09IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSAmJlxuICAgICAgICAoZWxlbWVudC52YWx1ZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSk7XG4gIGVsc2VcbiAgICAoXCJzdWJtaXRcIiAhPT0gdHlwZSAmJiBcInJlc2V0XCIgIT09IHR5cGUpIHx8IGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7XG4gIG51bGwgIT0gdmFsdWVcbiAgICA/IHNldERlZmF1bHRWYWx1ZShlbGVtZW50LCB0eXBlLCBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSlcbiAgICA6IG51bGwgIT0gZGVmYXVsdFZhbHVlXG4gICAgICA/IHNldERlZmF1bHRWYWx1ZShlbGVtZW50LCB0eXBlLCBnZXRUb1N0cmluZ1ZhbHVlKGRlZmF1bHRWYWx1ZSkpXG4gICAgICA6IG51bGwgIT0gbGFzdERlZmF1bHRWYWx1ZSAmJiBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO1xuICBudWxsID09IGNoZWNrZWQgJiZcbiAgICBudWxsICE9IGRlZmF1bHRDaGVja2VkICYmXG4gICAgKGVsZW1lbnQuZGVmYXVsdENoZWNrZWQgPSAhIWRlZmF1bHRDaGVja2VkKTtcbiAgbnVsbCAhPSBjaGVja2VkICYmXG4gICAgKGVsZW1lbnQuY2hlY2tlZCA9XG4gICAgICBjaGVja2VkICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNoZWNrZWQgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIGNoZWNrZWQpO1xuICBudWxsICE9IG5hbWUgJiZcbiAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICBcInN5bWJvbFwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIG5hbWVcbiAgICA/IChlbGVtZW50Lm5hbWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZShuYW1lKSlcbiAgICA6IGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwibmFtZVwiKTtcbn1cbmZ1bmN0aW9uIGluaXRJbnB1dChcbiAgZWxlbWVudCxcbiAgdmFsdWUsXG4gIGRlZmF1bHRWYWx1ZSxcbiAgY2hlY2tlZCxcbiAgZGVmYXVsdENoZWNrZWQsXG4gIHR5cGUsXG4gIG5hbWUsXG4gIGlzSHlkcmF0aW5nXG4pIHtcbiAgbnVsbCAhPSB0eXBlICYmXG4gICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gICAgXCJib29sZWFuXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gICAgKGVsZW1lbnQudHlwZSA9IHR5cGUpO1xuICBpZiAobnVsbCAhPSB2YWx1ZSB8fCBudWxsICE9IGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChcbiAgICAgICEoXG4gICAgICAgIChcInN1Ym1pdFwiICE9PSB0eXBlICYmIFwicmVzZXRcIiAhPT0gdHlwZSkgfHxcbiAgICAgICAgKHZvaWQgMCAhPT0gdmFsdWUgJiYgbnVsbCAhPT0gdmFsdWUpXG4gICAgICApXG4gICAgKVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHRWYWx1ZSA9XG4gICAgICBudWxsICE9IGRlZmF1bHRWYWx1ZSA/IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKGRlZmF1bHRWYWx1ZSkgOiBcIlwiO1xuICAgIHZhbHVlID0gbnVsbCAhPSB2YWx1ZSA/IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKHZhbHVlKSA6IGRlZmF1bHRWYWx1ZTtcbiAgICBpc0h5ZHJhdGluZyB8fCB2YWx1ZSA9PT0gZWxlbWVudC52YWx1ZSB8fCAoZWxlbWVudC52YWx1ZSA9IHZhbHVlKTtcbiAgICBlbGVtZW50LmRlZmF1bHRWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIGNoZWNrZWQgPSBudWxsICE9IGNoZWNrZWQgPyBjaGVja2VkIDogZGVmYXVsdENoZWNrZWQ7XG4gIGNoZWNrZWQgPVxuICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNoZWNrZWQgJiYgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIGNoZWNrZWQgJiYgISFjaGVja2VkO1xuICBlbGVtZW50LmNoZWNrZWQgPSBpc0h5ZHJhdGluZyA/IGVsZW1lbnQuY2hlY2tlZCA6ICEhY2hlY2tlZDtcbiAgZWxlbWVudC5kZWZhdWx0Q2hlY2tlZCA9ICEhY2hlY2tlZDtcbiAgbnVsbCAhPSBuYW1lICYmXG4gICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgbmFtZSAmJlxuICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gICAgXCJib29sZWFuXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gICAgKGVsZW1lbnQubmFtZSA9IG5hbWUpO1xufVxuZnVuY3Rpb24gc2V0RGVmYXVsdFZhbHVlKG5vZGUsIHR5cGUsIHZhbHVlKSB7XG4gIChcIm51bWJlclwiID09PSB0eXBlICYmIGdldEFjdGl2ZUVsZW1lbnQobm9kZS5vd25lckRvY3VtZW50KSA9PT0gbm9kZSkgfHxcbiAgICBub2RlLmRlZmF1bHRWYWx1ZSA9PT0gXCJcIiArIHZhbHVlIHx8XG4gICAgKG5vZGUuZGVmYXVsdFZhbHVlID0gXCJcIiArIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMobm9kZSwgbXVsdGlwbGUsIHByb3BWYWx1ZSwgc2V0RGVmYXVsdFNlbGVjdGVkKSB7XG4gIG5vZGUgPSBub2RlLm9wdGlvbnM7XG4gIGlmIChtdWx0aXBsZSkge1xuICAgIG11bHRpcGxlID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspXG4gICAgICBtdWx0aXBsZVtcIiRcIiArIHByb3BWYWx1ZVtpXV0gPSAhMDtcbiAgICBmb3IgKHByb3BWYWx1ZSA9IDA7IHByb3BWYWx1ZSA8IG5vZGUubGVuZ3RoOyBwcm9wVmFsdWUrKylcbiAgICAgIChpID0gbXVsdGlwbGUuaGFzT3duUHJvcGVydHkoXCIkXCIgKyBub2RlW3Byb3BWYWx1ZV0udmFsdWUpKSxcbiAgICAgICAgbm9kZVtwcm9wVmFsdWVdLnNlbGVjdGVkICE9PSBpICYmIChub2RlW3Byb3BWYWx1ZV0uc2VsZWN0ZWQgPSBpKSxcbiAgICAgICAgaSAmJiBzZXREZWZhdWx0U2VsZWN0ZWQgJiYgKG5vZGVbcHJvcFZhbHVlXS5kZWZhdWx0U2VsZWN0ZWQgPSAhMCk7XG4gIH0gZWxzZSB7XG4gICAgcHJvcFZhbHVlID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUocHJvcFZhbHVlKTtcbiAgICBtdWx0aXBsZSA9IG51bGw7XG4gICAgZm9yIChpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChub2RlW2ldLnZhbHVlID09PSBwcm9wVmFsdWUpIHtcbiAgICAgICAgbm9kZVtpXS5zZWxlY3RlZCA9ICEwO1xuICAgICAgICBzZXREZWZhdWx0U2VsZWN0ZWQgJiYgKG5vZGVbaV0uZGVmYXVsdFNlbGVjdGVkID0gITApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBudWxsICE9PSBtdWx0aXBsZSB8fCBub2RlW2ldLmRpc2FibGVkIHx8IChtdWx0aXBsZSA9IG5vZGVbaV0pO1xuICAgIH1cbiAgICBudWxsICE9PSBtdWx0aXBsZSAmJiAobXVsdGlwbGUuc2VsZWN0ZWQgPSAhMCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZVRleHRhcmVhKGVsZW1lbnQsIHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKFxuICAgIG51bGwgIT0gdmFsdWUgJiZcbiAgICAoKHZhbHVlID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpKSxcbiAgICB2YWx1ZSAhPT0gZWxlbWVudC52YWx1ZSAmJiAoZWxlbWVudC52YWx1ZSA9IHZhbHVlKSxcbiAgICBudWxsID09IGRlZmF1bHRWYWx1ZSlcbiAgKSB7XG4gICAgZWxlbWVudC5kZWZhdWx0VmFsdWUgIT09IHZhbHVlICYmIChlbGVtZW50LmRlZmF1bHRWYWx1ZSA9IHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH1cbiAgZWxlbWVudC5kZWZhdWx0VmFsdWUgPVxuICAgIG51bGwgIT0gZGVmYXVsdFZhbHVlID8gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUoZGVmYXVsdFZhbHVlKSA6IFwiXCI7XG59XG5mdW5jdGlvbiBpbml0VGV4dGFyZWEoZWxlbWVudCwgdmFsdWUsIGRlZmF1bHRWYWx1ZSwgY2hpbGRyZW4pIHtcbiAgaWYgKG51bGwgPT0gdmFsdWUpIHtcbiAgICBpZiAobnVsbCAhPSBjaGlsZHJlbikge1xuICAgICAgaWYgKG51bGwgIT0gZGVmYXVsdFZhbHVlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkyKSk7XG4gICAgICBpZiAoaXNBcnJheUltcGwoY2hpbGRyZW4pKSB7XG4gICAgICAgIGlmICgxIDwgY2hpbGRyZW4ubGVuZ3RoKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkzKSk7XG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW5bMF07XG4gICAgICB9XG4gICAgICBkZWZhdWx0VmFsdWUgPSBjaGlsZHJlbjtcbiAgICB9XG4gICAgbnVsbCA9PSBkZWZhdWx0VmFsdWUgJiYgKGRlZmF1bHRWYWx1ZSA9IFwiXCIpO1xuICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICB9XG4gIGRlZmF1bHRWYWx1ZSA9IGdldFRvU3RyaW5nVmFsdWUodmFsdWUpO1xuICBlbGVtZW50LmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgY2hpbGRyZW4gPSBlbGVtZW50LnRleHRDb250ZW50O1xuICBjaGlsZHJlbiA9PT0gZGVmYXVsdFZhbHVlICYmXG4gICAgXCJcIiAhPT0gY2hpbGRyZW4gJiZcbiAgICBudWxsICE9PSBjaGlsZHJlbiAmJlxuICAgIChlbGVtZW50LnZhbHVlID0gY2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQobm9kZSwgdGV4dCkge1xuICBpZiAodGV4dCkge1xuICAgIHZhciBmaXJzdENoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgIGlmIChcbiAgICAgIGZpcnN0Q2hpbGQgJiZcbiAgICAgIGZpcnN0Q2hpbGQgPT09IG5vZGUubGFzdENoaWxkICYmXG4gICAgICAzID09PSBmaXJzdENoaWxkLm5vZGVUeXBlXG4gICAgKSB7XG4gICAgICBmaXJzdENoaWxkLm5vZGVWYWx1ZSA9IHRleHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxudmFyIHVuaXRsZXNzTnVtYmVycyA9IG5ldyBTZXQoXG4gIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgYXNwZWN0UmF0aW8gYm9yZGVySW1hZ2VPdXRzZXQgYm9yZGVySW1hZ2VTbGljZSBib3JkZXJJbWFnZVdpZHRoIGJveEZsZXggYm94RmxleEdyb3VwIGJveE9yZGluYWxHcm91cCBjb2x1bW5Db3VudCBjb2x1bW5zIGZsZXggZmxleEdyb3cgZmxleFBvc2l0aXZlIGZsZXhTaHJpbmsgZmxleE5lZ2F0aXZlIGZsZXhPcmRlciBncmlkQXJlYSBncmlkUm93IGdyaWRSb3dFbmQgZ3JpZFJvd1NwYW4gZ3JpZFJvd1N0YXJ0IGdyaWRDb2x1bW4gZ3JpZENvbHVtbkVuZCBncmlkQ29sdW1uU3BhbiBncmlkQ29sdW1uU3RhcnQgZm9udFdlaWdodCBsaW5lQ2xhbXAgbGluZUhlaWdodCBvcGFjaXR5IG9yZGVyIG9ycGhhbnMgc2NhbGUgdGFiU2l6ZSB3aWRvd3MgekluZGV4IHpvb20gZmlsbE9wYWNpdHkgZmxvb2RPcGFjaXR5IHN0b3BPcGFjaXR5IHN0cm9rZURhc2hhcnJheSBzdHJva2VEYXNob2Zmc2V0IHN0cm9rZU1pdGVybGltaXQgc3Ryb2tlT3BhY2l0eSBzdHJva2VXaWR0aCBNb3pBbmltYXRpb25JdGVyYXRpb25Db3VudCBNb3pCb3hGbGV4IE1vekJveEZsZXhHcm91cCBNb3pMaW5lQ2xhbXAgbXNBbmltYXRpb25JdGVyYXRpb25Db3VudCBtc0ZsZXggbXNab29tIG1zRmxleEdyb3cgbXNGbGV4TmVnYXRpdmUgbXNGbGV4T3JkZXIgbXNGbGV4UG9zaXRpdmUgbXNGbGV4U2hyaW5rIG1zR3JpZENvbHVtbiBtc0dyaWRDb2x1bW5TcGFuIG1zR3JpZFJvdyBtc0dyaWRSb3dTcGFuIFdlYmtpdEFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IFdlYmtpdEJveEZsZXggV2ViS2l0Qm94RmxleEdyb3VwIFdlYmtpdEJveE9yZGluYWxHcm91cCBXZWJraXRDb2x1bW5Db3VudCBXZWJraXRDb2x1bW5zIFdlYmtpdEZsZXggV2Via2l0RmxleEdyb3cgV2Via2l0RmxleFBvc2l0aXZlIFdlYmtpdEZsZXhTaHJpbmsgV2Via2l0TGluZUNsYW1wXCIuc3BsaXQoXG4gICAgXCIgXCJcbiAgKVxuKTtcbmZ1bmN0aW9uIHNldFZhbHVlRm9yU3R5bGUoc3R5bGUsIHN0eWxlTmFtZSwgdmFsdWUpIHtcbiAgdmFyIGlzQ3VzdG9tUHJvcGVydHkgPSAwID09PSBzdHlsZU5hbWUuaW5kZXhPZihcIi0tXCIpO1xuICBudWxsID09IHZhbHVlIHx8IFwiYm9vbGVhblwiID09PSB0eXBlb2YgdmFsdWUgfHwgXCJcIiA9PT0gdmFsdWVcbiAgICA/IGlzQ3VzdG9tUHJvcGVydHlcbiAgICAgID8gc3R5bGUuc2V0UHJvcGVydHkoc3R5bGVOYW1lLCBcIlwiKVxuICAgICAgOiBcImZsb2F0XCIgPT09IHN0eWxlTmFtZVxuICAgICAgICA/IChzdHlsZS5jc3NGbG9hdCA9IFwiXCIpXG4gICAgICAgIDogKHN0eWxlW3N0eWxlTmFtZV0gPSBcIlwiKVxuICAgIDogaXNDdXN0b21Qcm9wZXJ0eVxuICAgICAgPyBzdHlsZS5zZXRQcm9wZXJ0eShzdHlsZU5hbWUsIHZhbHVlKVxuICAgICAgOiBcIm51bWJlclwiICE9PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgICAwID09PSB2YWx1ZSB8fFxuICAgICAgICAgIHVuaXRsZXNzTnVtYmVycy5oYXMoc3R5bGVOYW1lKVxuICAgICAgICA/IFwiZmxvYXRcIiA9PT0gc3R5bGVOYW1lXG4gICAgICAgICAgPyAoc3R5bGUuY3NzRmxvYXQgPSB2YWx1ZSlcbiAgICAgICAgICA6IChzdHlsZVtzdHlsZU5hbWVdID0gKFwiXCIgKyB2YWx1ZSkudHJpbSgpKVxuICAgICAgICA6IChzdHlsZVtzdHlsZU5hbWVdID0gdmFsdWUgKyBcInB4XCIpO1xufVxuZnVuY3Rpb24gc2V0VmFsdWVGb3JTdHlsZXMobm9kZSwgc3R5bGVzLCBwcmV2U3R5bGVzKSB7XG4gIGlmIChudWxsICE9IHN0eWxlcyAmJiBcIm9iamVjdFwiICE9PSB0eXBlb2Ygc3R5bGVzKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNjIpKTtcbiAgbm9kZSA9IG5vZGUuc3R5bGU7XG4gIGlmIChudWxsICE9IHByZXZTdHlsZXMpIHtcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gcHJldlN0eWxlcylcbiAgICAgICFwcmV2U3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgfHxcbiAgICAgICAgKG51bGwgIT0gc3R5bGVzICYmIHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB8fFxuICAgICAgICAoMCA9PT0gc3R5bGVOYW1lLmluZGV4T2YoXCItLVwiKVxuICAgICAgICAgID8gbm9kZS5zZXRQcm9wZXJ0eShzdHlsZU5hbWUsIFwiXCIpXG4gICAgICAgICAgOiBcImZsb2F0XCIgPT09IHN0eWxlTmFtZVxuICAgICAgICAgICAgPyAobm9kZS5jc3NGbG9hdCA9IFwiXCIpXG4gICAgICAgICAgICA6IChub2RlW3N0eWxlTmFtZV0gPSBcIlwiKSk7XG4gICAgZm9yICh2YXIgc3R5bGVOYW1lJDE2IGluIHN0eWxlcylcbiAgICAgIChzdHlsZU5hbWUgPSBzdHlsZXNbc3R5bGVOYW1lJDE2XSksXG4gICAgICAgIHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUkMTYpICYmXG4gICAgICAgICAgcHJldlN0eWxlc1tzdHlsZU5hbWUkMTZdICE9PSBzdHlsZU5hbWUgJiZcbiAgICAgICAgICBzZXRWYWx1ZUZvclN0eWxlKG5vZGUsIHN0eWxlTmFtZSQxNiwgc3R5bGVOYW1lKTtcbiAgfSBlbHNlXG4gICAgZm9yICh2YXIgc3R5bGVOYW1lJDE3IGluIHN0eWxlcylcbiAgICAgIHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUkMTcpICYmXG4gICAgICAgIHNldFZhbHVlRm9yU3R5bGUobm9kZSwgc3R5bGVOYW1lJDE3LCBzdHlsZXNbc3R5bGVOYW1lJDE3XSk7XG59XG5mdW5jdGlvbiBpc0N1c3RvbUVsZW1lbnQodGFnTmFtZSkge1xuICBpZiAoLTEgPT09IHRhZ05hbWUuaW5kZXhPZihcIi1cIikpIHJldHVybiAhMTtcbiAgc3dpdGNoICh0YWdOYW1lKSB7XG4gICAgY2FzZSBcImFubm90YXRpb24teG1sXCI6XG4gICAgY2FzZSBcImNvbG9yLXByb2ZpbGVcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZS1zcmNcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLXVyaVwiOlxuICAgIGNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6XG4gICAgY2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpcbiAgICAgIHJldHVybiAhMTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICEwO1xuICB9XG59XG52YXIgYWxpYXNlcyA9IG5ldyBNYXAoW1xuICAgIFtcImFjY2VwdENoYXJzZXRcIiwgXCJhY2NlcHQtY2hhcnNldFwiXSxcbiAgICBbXCJodG1sRm9yXCIsIFwiZm9yXCJdLFxuICAgIFtcImh0dHBFcXVpdlwiLCBcImh0dHAtZXF1aXZcIl0sXG4gICAgW1wiY3Jvc3NPcmlnaW5cIiwgXCJjcm9zc29yaWdpblwiXSxcbiAgICBbXCJhY2NlbnRIZWlnaHRcIiwgXCJhY2NlbnQtaGVpZ2h0XCJdLFxuICAgIFtcImFsaWdubWVudEJhc2VsaW5lXCIsIFwiYWxpZ25tZW50LWJhc2VsaW5lXCJdLFxuICAgIFtcImFyYWJpY0Zvcm1cIiwgXCJhcmFiaWMtZm9ybVwiXSxcbiAgICBbXCJiYXNlbGluZVNoaWZ0XCIsIFwiYmFzZWxpbmUtc2hpZnRcIl0sXG4gICAgW1wiY2FwSGVpZ2h0XCIsIFwiY2FwLWhlaWdodFwiXSxcbiAgICBbXCJjbGlwUGF0aFwiLCBcImNsaXAtcGF0aFwiXSxcbiAgICBbXCJjbGlwUnVsZVwiLCBcImNsaXAtcnVsZVwiXSxcbiAgICBbXCJjb2xvckludGVycG9sYXRpb25cIiwgXCJjb2xvci1pbnRlcnBvbGF0aW9uXCJdLFxuICAgIFtcImNvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnNcIiwgXCJjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnNcIl0sXG4gICAgW1wiY29sb3JQcm9maWxlXCIsIFwiY29sb3ItcHJvZmlsZVwiXSxcbiAgICBbXCJjb2xvclJlbmRlcmluZ1wiLCBcImNvbG9yLXJlbmRlcmluZ1wiXSxcbiAgICBbXCJkb21pbmFudEJhc2VsaW5lXCIsIFwiZG9taW5hbnQtYmFzZWxpbmVcIl0sXG4gICAgW1wiZW5hYmxlQmFja2dyb3VuZFwiLCBcImVuYWJsZS1iYWNrZ3JvdW5kXCJdLFxuICAgIFtcImZpbGxPcGFjaXR5XCIsIFwiZmlsbC1vcGFjaXR5XCJdLFxuICAgIFtcImZpbGxSdWxlXCIsIFwiZmlsbC1ydWxlXCJdLFxuICAgIFtcImZsb29kQ29sb3JcIiwgXCJmbG9vZC1jb2xvclwiXSxcbiAgICBbXCJmbG9vZE9wYWNpdHlcIiwgXCJmbG9vZC1vcGFjaXR5XCJdLFxuICAgIFtcImZvbnRGYW1pbHlcIiwgXCJmb250LWZhbWlseVwiXSxcbiAgICBbXCJmb250U2l6ZVwiLCBcImZvbnQtc2l6ZVwiXSxcbiAgICBbXCJmb250U2l6ZUFkanVzdFwiLCBcImZvbnQtc2l6ZS1hZGp1c3RcIl0sXG4gICAgW1wiZm9udFN0cmV0Y2hcIiwgXCJmb250LXN0cmV0Y2hcIl0sXG4gICAgW1wiZm9udFN0eWxlXCIsIFwiZm9udC1zdHlsZVwiXSxcbiAgICBbXCJmb250VmFyaWFudFwiLCBcImZvbnQtdmFyaWFudFwiXSxcbiAgICBbXCJmb250V2VpZ2h0XCIsIFwiZm9udC13ZWlnaHRcIl0sXG4gICAgW1wiZ2x5cGhOYW1lXCIsIFwiZ2x5cGgtbmFtZVwiXSxcbiAgICBbXCJnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbFwiLCBcImdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWxcIl0sXG4gICAgW1wiZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsXCIsIFwiZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWxcIl0sXG4gICAgW1wiaG9yaXpBZHZYXCIsIFwiaG9yaXotYWR2LXhcIl0sXG4gICAgW1wiaG9yaXpPcmlnaW5YXCIsIFwiaG9yaXotb3JpZ2luLXhcIl0sXG4gICAgW1wiaW1hZ2VSZW5kZXJpbmdcIiwgXCJpbWFnZS1yZW5kZXJpbmdcIl0sXG4gICAgW1wibGV0dGVyU3BhY2luZ1wiLCBcImxldHRlci1zcGFjaW5nXCJdLFxuICAgIFtcImxpZ2h0aW5nQ29sb3JcIiwgXCJsaWdodGluZy1jb2xvclwiXSxcbiAgICBbXCJtYXJrZXJFbmRcIiwgXCJtYXJrZXItZW5kXCJdLFxuICAgIFtcIm1hcmtlck1pZFwiLCBcIm1hcmtlci1taWRcIl0sXG4gICAgW1wibWFya2VyU3RhcnRcIiwgXCJtYXJrZXItc3RhcnRcIl0sXG4gICAgW1wib3ZlcmxpbmVQb3NpdGlvblwiLCBcIm92ZXJsaW5lLXBvc2l0aW9uXCJdLFxuICAgIFtcIm92ZXJsaW5lVGhpY2tuZXNzXCIsIFwib3ZlcmxpbmUtdGhpY2tuZXNzXCJdLFxuICAgIFtcInBhaW50T3JkZXJcIiwgXCJwYWludC1vcmRlclwiXSxcbiAgICBbXCJwYW5vc2UtMVwiLCBcInBhbm9zZS0xXCJdLFxuICAgIFtcInBvaW50ZXJFdmVudHNcIiwgXCJwb2ludGVyLWV2ZW50c1wiXSxcbiAgICBbXCJyZW5kZXJpbmdJbnRlbnRcIiwgXCJyZW5kZXJpbmctaW50ZW50XCJdLFxuICAgIFtcInNoYXBlUmVuZGVyaW5nXCIsIFwic2hhcGUtcmVuZGVyaW5nXCJdLFxuICAgIFtcInN0b3BDb2xvclwiLCBcInN0b3AtY29sb3JcIl0sXG4gICAgW1wic3RvcE9wYWNpdHlcIiwgXCJzdG9wLW9wYWNpdHlcIl0sXG4gICAgW1wic3RyaWtldGhyb3VnaFBvc2l0aW9uXCIsIFwic3RyaWtldGhyb3VnaC1wb3NpdGlvblwiXSxcbiAgICBbXCJzdHJpa2V0aHJvdWdoVGhpY2tuZXNzXCIsIFwic3RyaWtldGhyb3VnaC10aGlja25lc3NcIl0sXG4gICAgW1wic3Ryb2tlRGFzaGFycmF5XCIsIFwic3Ryb2tlLWRhc2hhcnJheVwiXSxcbiAgICBbXCJzdHJva2VEYXNob2Zmc2V0XCIsIFwic3Ryb2tlLWRhc2hvZmZzZXRcIl0sXG4gICAgW1wic3Ryb2tlTGluZWNhcFwiLCBcInN0cm9rZS1saW5lY2FwXCJdLFxuICAgIFtcInN0cm9rZUxpbmVqb2luXCIsIFwic3Ryb2tlLWxpbmVqb2luXCJdLFxuICAgIFtcInN0cm9rZU1pdGVybGltaXRcIiwgXCJzdHJva2UtbWl0ZXJsaW1pdFwiXSxcbiAgICBbXCJzdHJva2VPcGFjaXR5XCIsIFwic3Ryb2tlLW9wYWNpdHlcIl0sXG4gICAgW1wic3Ryb2tlV2lkdGhcIiwgXCJzdHJva2Utd2lkdGhcIl0sXG4gICAgW1widGV4dEFuY2hvclwiLCBcInRleHQtYW5jaG9yXCJdLFxuICAgIFtcInRleHREZWNvcmF0aW9uXCIsIFwidGV4dC1kZWNvcmF0aW9uXCJdLFxuICAgIFtcInRleHRSZW5kZXJpbmdcIiwgXCJ0ZXh0LXJlbmRlcmluZ1wiXSxcbiAgICBbXCJ0cmFuc2Zvcm1PcmlnaW5cIiwgXCJ0cmFuc2Zvcm0tb3JpZ2luXCJdLFxuICAgIFtcInVuZGVybGluZVBvc2l0aW9uXCIsIFwidW5kZXJsaW5lLXBvc2l0aW9uXCJdLFxuICAgIFtcInVuZGVybGluZVRoaWNrbmVzc1wiLCBcInVuZGVybGluZS10aGlja25lc3NcIl0sXG4gICAgW1widW5pY29kZUJpZGlcIiwgXCJ1bmljb2RlLWJpZGlcIl0sXG4gICAgW1widW5pY29kZVJhbmdlXCIsIFwidW5pY29kZS1yYW5nZVwiXSxcbiAgICBbXCJ1bml0c1BlckVtXCIsIFwidW5pdHMtcGVyLWVtXCJdLFxuICAgIFtcInZBbHBoYWJldGljXCIsIFwidi1hbHBoYWJldGljXCJdLFxuICAgIFtcInZIYW5naW5nXCIsIFwidi1oYW5naW5nXCJdLFxuICAgIFtcInZJZGVvZ3JhcGhpY1wiLCBcInYtaWRlb2dyYXBoaWNcIl0sXG4gICAgW1widk1hdGhlbWF0aWNhbFwiLCBcInYtbWF0aGVtYXRpY2FsXCJdLFxuICAgIFtcInZlY3RvckVmZmVjdFwiLCBcInZlY3Rvci1lZmZlY3RcIl0sXG4gICAgW1widmVydEFkdllcIiwgXCJ2ZXJ0LWFkdi15XCJdLFxuICAgIFtcInZlcnRPcmlnaW5YXCIsIFwidmVydC1vcmlnaW4teFwiXSxcbiAgICBbXCJ2ZXJ0T3JpZ2luWVwiLCBcInZlcnQtb3JpZ2luLXlcIl0sXG4gICAgW1wid29yZFNwYWNpbmdcIiwgXCJ3b3JkLXNwYWNpbmdcIl0sXG4gICAgW1wid3JpdGluZ01vZGVcIiwgXCJ3cml0aW5nLW1vZGVcIl0sXG4gICAgW1wieG1sbnNYbGlua1wiLCBcInhtbG5zOnhsaW5rXCJdLFxuICAgIFtcInhIZWlnaHRcIiwgXCJ4LWhlaWdodFwiXVxuICBdKSxcbiAgaXNKYXZhU2NyaXB0UHJvdG9jb2wgPVxuICAgIC9eW1xcdTAwMDAtXFx1MDAxRiBdKmpbXFxyXFxuXFx0XSphW1xcclxcblxcdF0qdltcXHJcXG5cXHRdKmFbXFxyXFxuXFx0XSpzW1xcclxcblxcdF0qY1tcXHJcXG5cXHRdKnJbXFxyXFxuXFx0XSppW1xcclxcblxcdF0qcFtcXHJcXG5cXHRdKnRbXFxyXFxuXFx0XSo6L2k7XG5mdW5jdGlvbiBzYW5pdGl6ZVVSTCh1cmwpIHtcbiAgcmV0dXJuIGlzSmF2YVNjcmlwdFByb3RvY29sLnRlc3QoXCJcIiArIHVybClcbiAgICA/IFwiamF2YXNjcmlwdDp0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0IGhhcyBibG9ja2VkIGEgamF2YXNjcmlwdDogVVJMIGFzIGEgc2VjdXJpdHkgcHJlY2F1dGlvbi4nKVwiXG4gICAgOiB1cmw7XG59XG52YXIgY3VycmVudFJlcGxheWluZ0V2ZW50ID0gbnVsbDtcbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIG5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQudGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQgfHwgd2luZG93O1xuICBuYXRpdmVFdmVudC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCAmJlxuICAgIChuYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtcbiAgcmV0dXJuIDMgPT09IG5hdGl2ZUV2ZW50Lm5vZGVUeXBlID8gbmF0aXZlRXZlbnQucGFyZW50Tm9kZSA6IG5hdGl2ZUV2ZW50O1xufVxudmFyIHJlc3RvcmVUYXJnZXQgPSBudWxsLFxuICByZXN0b3JlUXVldWUgPSBudWxsO1xuZnVuY3Rpb24gcmVzdG9yZVN0YXRlT2ZUYXJnZXQodGFyZ2V0KSB7XG4gIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW5zdGFuY2VGcm9tTm9kZSh0YXJnZXQpO1xuICBpZiAoaW50ZXJuYWxJbnN0YW5jZSAmJiAodGFyZ2V0ID0gaW50ZXJuYWxJbnN0YW5jZS5zdGF0ZU5vZGUpKSB7XG4gICAgdmFyIHByb3BzID0gdGFyZ2V0W2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gICAgYTogc3dpdGNoICgoKHRhcmdldCA9IGludGVybmFsSW5zdGFuY2Uuc3RhdGVOb2RlKSwgaW50ZXJuYWxJbnN0YW5jZS50eXBlKSkge1xuICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgIHVwZGF0ZUlucHV0KFxuICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICBwcm9wcy52YWx1ZSxcbiAgICAgICAgICBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIHByb3BzLmNoZWNrZWQsXG4gICAgICAgICAgcHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICAgICAgcHJvcHMudHlwZSxcbiAgICAgICAgICBwcm9wcy5uYW1lXG4gICAgICAgICk7XG4gICAgICAgIGludGVybmFsSW5zdGFuY2UgPSBwcm9wcy5uYW1lO1xuICAgICAgICBpZiAoXCJyYWRpb1wiID09PSBwcm9wcy50eXBlICYmIG51bGwgIT0gaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgICAgIGZvciAocHJvcHMgPSB0YXJnZXQ7IHByb3BzLnBhcmVudE5vZGU7ICkgcHJvcHMgPSBwcm9wcy5wYXJlbnROb2RlO1xuICAgICAgICAgIHByb3BzID0gcHJvcHMucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgICdpbnB1dFtuYW1lPVwiJyArXG4gICAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoXG4gICAgICAgICAgICAgICAgXCJcIiArIGludGVybmFsSW5zdGFuY2VcbiAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICdcIl1bdHlwZT1cInJhZGlvXCJdJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UgPSAwO1xuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA8IHByb3BzLmxlbmd0aDtcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UrK1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdmFyIG90aGVyTm9kZSA9IHByb3BzW2ludGVybmFsSW5zdGFuY2VdO1xuICAgICAgICAgICAgaWYgKG90aGVyTm9kZSAhPT0gdGFyZ2V0ICYmIG90aGVyTm9kZS5mb3JtID09PSB0YXJnZXQuZm9ybSkge1xuICAgICAgICAgICAgICB2YXIgb3RoZXJQcm9wcyA9IG90aGVyTm9kZVtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsO1xuICAgICAgICAgICAgICBpZiAoIW90aGVyUHJvcHMpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTApKTtcbiAgICAgICAgICAgICAgdXBkYXRlSW5wdXQoXG4gICAgICAgICAgICAgICAgb3RoZXJOb2RlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMudmFsdWUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5jaGVja2VkLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy50eXBlLFxuICAgICAgICAgICAgICAgIG90aGVyUHJvcHMubmFtZVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA9IDA7XG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlIDwgcHJvcHMubGVuZ3RoO1xuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSsrXG4gICAgICAgICAgKVxuICAgICAgICAgICAgKG90aGVyTm9kZSA9IHByb3BzW2ludGVybmFsSW5zdGFuY2VdKSxcbiAgICAgICAgICAgICAgb3RoZXJOb2RlLmZvcm0gPT09IHRhcmdldC5mb3JtICYmIHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKG90aGVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWsgYTtcbiAgICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgICB1cGRhdGVUZXh0YXJlYSh0YXJnZXQsIHByb3BzLnZhbHVlLCBwcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgICBicmVhayBhO1xuICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAoaW50ZXJuYWxJbnN0YW5jZSA9IHByb3BzLnZhbHVlKSxcbiAgICAgICAgICBudWxsICE9IGludGVybmFsSW5zdGFuY2UgJiZcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbnModGFyZ2V0LCAhIXByb3BzLm11bHRpcGxlLCBpbnRlcm5hbEluc3RhbmNlLCAhMSk7XG4gICAgfVxuICB9XG59XG52YXIgaXNJbnNpZGVFdmVudEhhbmRsZXIgPSAhMTtcbmZ1bmN0aW9uIGJhdGNoZWRVcGRhdGVzJDEoZm4sIGEsIGIpIHtcbiAgaWYgKGlzSW5zaWRlRXZlbnRIYW5kbGVyKSByZXR1cm4gZm4oYSwgYik7XG4gIGlzSW5zaWRlRXZlbnRIYW5kbGVyID0gITA7XG4gIHRyeSB7XG4gICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGZuKGEpO1xuICAgIHJldHVybiBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKFxuICAgICAgKChpc0luc2lkZUV2ZW50SGFuZGxlciA9ICExKSxcbiAgICAgIG51bGwgIT09IHJlc3RvcmVUYXJnZXQgfHwgbnVsbCAhPT0gcmVzdG9yZVF1ZXVlKVxuICAgIClcbiAgICAgIGlmIChcbiAgICAgICAgKGZsdXNoU3luY1dvcmskMSgpLFxuICAgICAgICByZXN0b3JlVGFyZ2V0ICYmXG4gICAgICAgICAgKChhID0gcmVzdG9yZVRhcmdldCksXG4gICAgICAgICAgKGZuID0gcmVzdG9yZVF1ZXVlKSxcbiAgICAgICAgICAocmVzdG9yZVF1ZXVlID0gcmVzdG9yZVRhcmdldCA9IG51bGwpLFxuICAgICAgICAgIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KGEpLFxuICAgICAgICAgIGZuKSlcbiAgICAgIClcbiAgICAgICAgZm9yIChhID0gMDsgYSA8IGZuLmxlbmd0aDsgYSsrKSByZXN0b3JlU3RhdGVPZlRhcmdldChmblthXSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldExpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgdmFyIHN0YXRlTm9kZSA9IGluc3Quc3RhdGVOb2RlO1xuICBpZiAobnVsbCA9PT0gc3RhdGVOb2RlKSByZXR1cm4gbnVsbDtcbiAgdmFyIHByb3BzID0gc3RhdGVOb2RlW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gIGlmIChudWxsID09PSBwcm9wcykgcmV0dXJuIG51bGw7XG4gIHN0YXRlTm9kZSA9IHByb3BzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICBhOiBzd2l0Y2ggKHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBjYXNlIFwib25DbGlja1wiOlxuICAgIGNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6XG4gICAgY2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VEb3duXCI6XG4gICAgY2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlTW92ZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZVVwXCI6XG4gICAgY2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZUVudGVyXCI6XG4gICAgICAocHJvcHMgPSAhcHJvcHMuZGlzYWJsZWQpIHx8XG4gICAgICAgICgoaW5zdCA9IGluc3QudHlwZSksXG4gICAgICAgIChwcm9wcyA9ICEoXG4gICAgICAgICAgXCJidXR0b25cIiA9PT0gaW5zdCB8fFxuICAgICAgICAgIFwiaW5wdXRcIiA9PT0gaW5zdCB8fFxuICAgICAgICAgIFwic2VsZWN0XCIgPT09IGluc3QgfHxcbiAgICAgICAgICBcInRleHRhcmVhXCIgPT09IGluc3RcbiAgICAgICAgKSkpO1xuICAgICAgaW5zdCA9ICFwcm9wcztcbiAgICAgIGJyZWFrIGE7XG4gICAgZGVmYXVsdDpcbiAgICAgIGluc3QgPSAhMTtcbiAgfVxuICBpZiAoaW5zdCkgcmV0dXJuIG51bGw7XG4gIGlmIChzdGF0ZU5vZGUgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2Ygc3RhdGVOb2RlKVxuICAgIHRocm93IEVycm9yKFxuICAgICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyMzEsIHJlZ2lzdHJhdGlvbk5hbWUsIHR5cGVvZiBzdGF0ZU5vZGUpXG4gICAgKTtcbiAgcmV0dXJuIHN0YXRlTm9kZTtcbn1cbnZhciBjYW5Vc2VET00gPSAhKFxuICAgIFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3aW5kb3cgfHxcbiAgICBcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd2luZG93LmRvY3VtZW50IHx8XG4gICAgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50XG4gICksXG4gIHBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkID0gITE7XG5pZiAoY2FuVXNlRE9NKVxuICB0cnkge1xuICAgIHZhciBvcHRpb25zID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdGlvbnMsIFwicGFzc2l2ZVwiLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMTtcbiAgfVxudmFyIHJvb3QgPSBudWxsLFxuICBzdGFydFRleHQgPSBudWxsLFxuICBmYWxsYmFja1RleHQgPSBudWxsO1xuZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgaWYgKGZhbGxiYWNrVGV4dCkgcmV0dXJuIGZhbGxiYWNrVGV4dDtcbiAgdmFyIHN0YXJ0LFxuICAgIHN0YXJ0VmFsdWUgPSBzdGFydFRleHQsXG4gICAgc3RhcnRMZW5ndGggPSBzdGFydFZhbHVlLmxlbmd0aCxcbiAgICBlbmQsXG4gICAgZW5kVmFsdWUgPSBcInZhbHVlXCIgaW4gcm9vdCA/IHJvb3QudmFsdWUgOiByb290LnRleHRDb250ZW50LFxuICAgIGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcbiAgZm9yIChcbiAgICBzdGFydCA9IDA7XG4gICAgc3RhcnQgPCBzdGFydExlbmd0aCAmJiBzdGFydFZhbHVlW3N0YXJ0XSA9PT0gZW5kVmFsdWVbc3RhcnRdO1xuICAgIHN0YXJ0KytcbiAgKTtcbiAgdmFyIG1pbkVuZCA9IHN0YXJ0TGVuZ3RoIC0gc3RhcnQ7XG4gIGZvciAoXG4gICAgZW5kID0gMTtcbiAgICBlbmQgPD0gbWluRW5kICYmXG4gICAgc3RhcnRWYWx1ZVtzdGFydExlbmd0aCAtIGVuZF0gPT09IGVuZFZhbHVlW2VuZExlbmd0aCAtIGVuZF07XG4gICAgZW5kKytcbiAgKTtcbiAgcmV0dXJuIChmYWxsYmFja1RleHQgPSBlbmRWYWx1ZS5zbGljZShzdGFydCwgMSA8IGVuZCA/IDEgLSBlbmQgOiB2b2lkIDApKTtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuICBcImNoYXJDb2RlXCIgaW4gbmF0aXZlRXZlbnRcbiAgICA/ICgobmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC5jaGFyQ29kZSksXG4gICAgICAwID09PSBuYXRpdmVFdmVudCAmJiAxMyA9PT0ga2V5Q29kZSAmJiAobmF0aXZlRXZlbnQgPSAxMykpXG4gICAgOiAobmF0aXZlRXZlbnQgPSBrZXlDb2RlKTtcbiAgMTAgPT09IG5hdGl2ZUV2ZW50ICYmIChuYXRpdmVFdmVudCA9IDEzKTtcbiAgcmV0dXJuIDMyIDw9IG5hdGl2ZUV2ZW50IHx8IDEzID09PSBuYXRpdmVFdmVudCA/IG5hdGl2ZUV2ZW50IDogMDtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlKCkge1xuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UoKSB7XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEludGVyZmFjZSkge1xuICBmdW5jdGlvbiBTeW50aGV0aWNCYXNlRXZlbnQoXG4gICAgcmVhY3ROYW1lLFxuICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgIHRhcmdldEluc3QsXG4gICAgbmF0aXZlRXZlbnQsXG4gICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgKSB7XG4gICAgdGhpcy5fcmVhY3ROYW1lID0gcmVhY3ROYW1lO1xuICAgIHRoaXMuX3RhcmdldEluc3QgPSB0YXJnZXRJbnN0O1xuICAgIHRoaXMudHlwZSA9IHJlYWN0RXZlbnRUeXBlO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgICB0aGlzLnRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgIHRoaXMuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKVxuICAgICAgSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSAmJlxuICAgICAgICAoKHJlYWN0TmFtZSA9IEludGVyZmFjZVtwcm9wTmFtZV0pLFxuICAgICAgICAodGhpc1twcm9wTmFtZV0gPSByZWFjdE5hbWVcbiAgICAgICAgICA/IHJlYWN0TmFtZShuYXRpdmVFdmVudClcbiAgICAgICAgICA6IG5hdGl2ZUV2ZW50W3Byb3BOYW1lXSkpO1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gKFxuICAgICAgbnVsbCAhPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkXG4gICAgICAgID8gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZFxuICAgICAgICA6ICExID09PSBuYXRpdmVFdmVudC5yZXR1cm5WYWx1ZVxuICAgIClcbiAgICAgID8gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWVcbiAgICAgIDogZnVuY3Rpb25UaGF0UmV0dXJuc0ZhbHNlO1xuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgYXNzaWduKFN5bnRoZXRpY0Jhc2VFdmVudC5wcm90b3R5cGUsIHtcbiAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gITA7XG4gICAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgICAgZXZlbnQgJiZcbiAgICAgICAgKGV2ZW50LnByZXZlbnREZWZhdWx0XG4gICAgICAgICAgPyBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgOiBcInVua25vd25cIiAhPT0gdHlwZW9mIGV2ZW50LnJldHVyblZhbHVlICYmIChldmVudC5yZXR1cm5WYWx1ZSA9ICExKSxcbiAgICAgICAgKHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUpKTtcbiAgICB9LFxuICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICAgIGV2ZW50ICYmXG4gICAgICAgIChldmVudC5zdG9wUHJvcGFnYXRpb25cbiAgICAgICAgICA/IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgOiBcInVua25vd25cIiAhPT0gdHlwZW9mIGV2ZW50LmNhbmNlbEJ1YmJsZSAmJlxuICAgICAgICAgICAgKGV2ZW50LmNhbmNlbEJ1YmJsZSA9ICEwKSxcbiAgICAgICAgKHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSkpO1xuICAgIH0sXG4gICAgcGVyc2lzdDogZnVuY3Rpb24gKCkge30sXG4gICAgaXNQZXJzaXN0ZW50OiBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZVxuICB9KTtcbiAgcmV0dXJuIFN5bnRoZXRpY0Jhc2VFdmVudDtcbn1cbnZhciBFdmVudEludGVyZmFjZSA9IHtcbiAgICBldmVudFBoYXNlOiAwLFxuICAgIGJ1YmJsZXM6IDAsXG4gICAgY2FuY2VsYWJsZTogMCxcbiAgICB0aW1lU3RhbXA6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuICAgIH0sXG4gICAgZGVmYXVsdFByZXZlbnRlZDogMCxcbiAgICBpc1RydXN0ZWQ6IDBcbiAgfSxcbiAgU3ludGhldGljRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChFdmVudEludGVyZmFjZSksXG4gIFVJRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7IHZpZXc6IDAsIGRldGFpbDogMCB9KSxcbiAgU3ludGhldGljVUlFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFVJRXZlbnRJbnRlcmZhY2UpLFxuICBsYXN0TW92ZW1lbnRYLFxuICBsYXN0TW92ZW1lbnRZLFxuICBsYXN0TW91c2VFdmVudCxcbiAgTW91c2VFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwge1xuICAgIHNjcmVlblg6IDAsXG4gICAgc2NyZWVuWTogMCxcbiAgICBjbGllbnRYOiAwLFxuICAgIGNsaWVudFk6IDAsXG4gICAgcGFnZVg6IDAsXG4gICAgcGFnZVk6IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gICAgYnV0dG9uOiAwLFxuICAgIGJ1dHRvbnM6IDAsXG4gICAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gdm9pZCAwID09PSBldmVudC5yZWxhdGVkVGFyZ2V0XG4gICAgICAgID8gZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnNyY0VsZW1lbnRcbiAgICAgICAgICA/IGV2ZW50LnRvRWxlbWVudFxuICAgICAgICAgIDogZXZlbnQuZnJvbUVsZW1lbnRcbiAgICAgICAgOiBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIH0sXG4gICAgbW92ZW1lbnRYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChcIm1vdmVtZW50WFwiIGluIGV2ZW50KSByZXR1cm4gZXZlbnQubW92ZW1lbnRYO1xuICAgICAgZXZlbnQgIT09IGxhc3RNb3VzZUV2ZW50ICYmXG4gICAgICAgIChsYXN0TW91c2VFdmVudCAmJiBcIm1vdXNlbW92ZVwiID09PSBldmVudC50eXBlXG4gICAgICAgICAgPyAoKGxhc3RNb3ZlbWVudFggPSBldmVudC5zY3JlZW5YIC0gbGFzdE1vdXNlRXZlbnQuc2NyZWVuWCksXG4gICAgICAgICAgICAobGFzdE1vdmVtZW50WSA9IGV2ZW50LnNjcmVlblkgLSBsYXN0TW91c2VFdmVudC5zY3JlZW5ZKSlcbiAgICAgICAgICA6IChsYXN0TW92ZW1lbnRZID0gbGFzdE1vdmVtZW50WCA9IDApLFxuICAgICAgICAobGFzdE1vdXNlRXZlbnQgPSBldmVudCkpO1xuICAgICAgcmV0dXJuIGxhc3RNb3ZlbWVudFg7XG4gICAgfSxcbiAgICBtb3ZlbWVudFk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwibW92ZW1lbnRZXCIgaW4gZXZlbnQgPyBldmVudC5tb3ZlbWVudFkgOiBsYXN0TW92ZW1lbnRZO1xuICAgIH1cbiAgfSksXG4gIFN5bnRoZXRpY01vdXNlRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChNb3VzZUV2ZW50SW50ZXJmYWNlKSxcbiAgRHJhZ0V2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBNb3VzZUV2ZW50SW50ZXJmYWNlLCB7IGRhdGFUcmFuc2ZlcjogMCB9KSxcbiAgU3ludGhldGljRHJhZ0V2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoRHJhZ0V2ZW50SW50ZXJmYWNlKSxcbiAgRm9jdXNFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwgeyByZWxhdGVkVGFyZ2V0OiAwIH0pLFxuICBTeW50aGV0aWNGb2N1c0V2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoRm9jdXNFdmVudEludGVyZmFjZSksXG4gIEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIGFuaW1hdGlvbk5hbWU6IDAsXG4gICAgZWxhcHNlZFRpbWU6IDAsXG4gICAgcHNldWRvRWxlbWVudDogMFxuICB9KSxcbiAgU3ludGhldGljQW5pbWF0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChBbmltYXRpb25FdmVudEludGVyZmFjZSksXG4gIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIGNsaXBib2FyZERhdGE6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiY2xpcGJvYXJkRGF0YVwiIGluIGV2ZW50XG4gICAgICAgID8gZXZlbnQuY2xpcGJvYXJkRGF0YVxuICAgICAgICA6IHdpbmRvdy5jbGlwYm9hcmREYXRhO1xuICAgIH1cbiAgfSksXG4gIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpLFxuICBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwgeyBkYXRhOiAwIH0pLFxuICBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSksXG4gIG5vcm1hbGl6ZUtleSA9IHtcbiAgICBFc2M6IFwiRXNjYXBlXCIsXG4gICAgU3BhY2ViYXI6IFwiIFwiLFxuICAgIExlZnQ6IFwiQXJyb3dMZWZ0XCIsXG4gICAgVXA6IFwiQXJyb3dVcFwiLFxuICAgIFJpZ2h0OiBcIkFycm93UmlnaHRcIixcbiAgICBEb3duOiBcIkFycm93RG93blwiLFxuICAgIERlbDogXCJEZWxldGVcIixcbiAgICBXaW46IFwiT1NcIixcbiAgICBNZW51OiBcIkNvbnRleHRNZW51XCIsXG4gICAgQXBwczogXCJDb250ZXh0TWVudVwiLFxuICAgIFNjcm9sbDogXCJTY3JvbGxMb2NrXCIsXG4gICAgTW96UHJpbnRhYmxlS2V5OiBcIlVuaWRlbnRpZmllZFwiXG4gIH0sXG4gIHRyYW5zbGF0ZVRvS2V5ID0ge1xuICAgIDg6IFwiQmFja3NwYWNlXCIsXG4gICAgOTogXCJUYWJcIixcbiAgICAxMjogXCJDbGVhclwiLFxuICAgIDEzOiBcIkVudGVyXCIsXG4gICAgMTY6IFwiU2hpZnRcIixcbiAgICAxNzogXCJDb250cm9sXCIsXG4gICAgMTg6IFwiQWx0XCIsXG4gICAgMTk6IFwiUGF1c2VcIixcbiAgICAyMDogXCJDYXBzTG9ja1wiLFxuICAgIDI3OiBcIkVzY2FwZVwiLFxuICAgIDMyOiBcIiBcIixcbiAgICAzMzogXCJQYWdlVXBcIixcbiAgICAzNDogXCJQYWdlRG93blwiLFxuICAgIDM1OiBcIkVuZFwiLFxuICAgIDM2OiBcIkhvbWVcIixcbiAgICAzNzogXCJBcnJvd0xlZnRcIixcbiAgICAzODogXCJBcnJvd1VwXCIsXG4gICAgMzk6IFwiQXJyb3dSaWdodFwiLFxuICAgIDQwOiBcIkFycm93RG93blwiLFxuICAgIDQ1OiBcIkluc2VydFwiLFxuICAgIDQ2OiBcIkRlbGV0ZVwiLFxuICAgIDExMjogXCJGMVwiLFxuICAgIDExMzogXCJGMlwiLFxuICAgIDExNDogXCJGM1wiLFxuICAgIDExNTogXCJGNFwiLFxuICAgIDExNjogXCJGNVwiLFxuICAgIDExNzogXCJGNlwiLFxuICAgIDExODogXCJGN1wiLFxuICAgIDExOTogXCJGOFwiLFxuICAgIDEyMDogXCJGOVwiLFxuICAgIDEyMTogXCJGMTBcIixcbiAgICAxMjI6IFwiRjExXCIsXG4gICAgMTIzOiBcIkYxMlwiLFxuICAgIDE0NDogXCJOdW1Mb2NrXCIsXG4gICAgMTQ1OiBcIlNjcm9sbExvY2tcIixcbiAgICAyMjQ6IFwiTWV0YVwiXG4gIH0sXG4gIG1vZGlmaWVyS2V5VG9Qcm9wID0ge1xuICAgIEFsdDogXCJhbHRLZXlcIixcbiAgICBDb250cm9sOiBcImN0cmxLZXlcIixcbiAgICBNZXRhOiBcIm1ldGFLZXlcIixcbiAgICBTaGlmdDogXCJzaGlmdEtleVwiXG4gIH07XG5mdW5jdGlvbiBtb2RpZmllclN0YXRlR2V0dGVyKGtleUFyZykge1xuICB2YXIgbmF0aXZlRXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICByZXR1cm4gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZVxuICAgID8gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXlBcmcpXG4gICAgOiAoa2V5QXJnID0gbW9kaWZpZXJLZXlUb1Byb3Bba2V5QXJnXSlcbiAgICAgID8gISFuYXRpdmVFdmVudFtrZXlBcmddXG4gICAgICA6ICExO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKCkge1xuICByZXR1cm4gbW9kaWZpZXJTdGF0ZUdldHRlcjtcbn1cbnZhciBLZXlib2FyZEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7XG4gICAga2V5OiBmdW5jdGlvbiAobmF0aXZlRXZlbnQpIHtcbiAgICAgIGlmIChuYXRpdmVFdmVudC5rZXkpIHtcbiAgICAgICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcbiAgICAgICAgaWYgKFwiVW5pZGVudGlmaWVkXCIgIT09IGtleSkgcmV0dXJuIGtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IG5hdGl2ZUV2ZW50LnR5cGVcbiAgICAgICAgPyAoKG5hdGl2ZUV2ZW50ID0gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkpLFxuICAgICAgICAgIDEzID09PSBuYXRpdmVFdmVudCA/IFwiRW50ZXJcIiA6IFN0cmluZy5mcm9tQ2hhckNvZGUobmF0aXZlRXZlbnQpKVxuICAgICAgICA6IFwia2V5ZG93blwiID09PSBuYXRpdmVFdmVudC50eXBlIHx8IFwia2V5dXBcIiA9PT0gbmF0aXZlRXZlbnQudHlwZVxuICAgICAgICAgID8gdHJhbnNsYXRlVG9LZXlbbmF0aXZlRXZlbnQua2V5Q29kZV0gfHwgXCJVbmlkZW50aWZpZWRcIlxuICAgICAgICAgIDogXCJcIjtcbiAgICB9LFxuICAgIGNvZGU6IDAsXG4gICAgbG9jYXRpb246IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICByZXBlYXQ6IDAsXG4gICAgbG9jYWxlOiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgICBjaGFyQ29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlwcmVzc1wiID09PSBldmVudC50eXBlID8gZ2V0RXZlbnRDaGFyQ29kZShldmVudCkgOiAwO1xuICAgIH0sXG4gICAga2V5Q29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlkb3duXCIgPT09IGV2ZW50LnR5cGUgfHwgXCJrZXl1cFwiID09PSBldmVudC50eXBlXG4gICAgICAgID8gZXZlbnQua2V5Q29kZVxuICAgICAgICA6IDA7XG4gICAgfSxcbiAgICB3aGljaDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlwcmVzc1wiID09PSBldmVudC50eXBlXG4gICAgICAgID8gZ2V0RXZlbnRDaGFyQ29kZShldmVudClcbiAgICAgICAgOiBcImtleWRvd25cIiA9PT0gZXZlbnQudHlwZSB8fCBcImtleXVwXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgICA/IGV2ZW50LmtleUNvZGVcbiAgICAgICAgICA6IDA7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEtleWJvYXJkRXZlbnRJbnRlcmZhY2UpLFxuICBQb2ludGVyRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBwb2ludGVySWQ6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHByZXNzdXJlOiAwLFxuICAgIHRhbmdlbnRpYWxQcmVzc3VyZTogMCxcbiAgICB0aWx0WDogMCxcbiAgICB0aWx0WTogMCxcbiAgICB0d2lzdDogMCxcbiAgICBwb2ludGVyVHlwZTogMCxcbiAgICBpc1ByaW1hcnk6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1BvaW50ZXJFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFBvaW50ZXJFdmVudEludGVyZmFjZSksXG4gIFRvdWNoRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIFVJRXZlbnRJbnRlcmZhY2UsIHtcbiAgICB0b3VjaGVzOiAwLFxuICAgIHRhcmdldFRvdWNoZXM6IDAsXG4gICAgY2hhbmdlZFRvdWNoZXM6IDAsXG4gICAgYWx0S2V5OiAwLFxuICAgIG1ldGFLZXk6IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGVcbiAgfSksXG4gIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUb3VjaEV2ZW50SW50ZXJmYWNlKSxcbiAgVHJhbnNpdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIHByb3BlcnR5TmFtZTogMCxcbiAgICBlbGFwc2VkVGltZTogMCxcbiAgICBwc2V1ZG9FbGVtZW50OiAwXG4gIH0pLFxuICBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UpLFxuICBXaGVlbEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBNb3VzZUV2ZW50SW50ZXJmYWNlLCB7XG4gICAgZGVsdGFYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImRlbHRhWFwiIGluIGV2ZW50XG4gICAgICAgID8gZXZlbnQuZGVsdGFYXG4gICAgICAgIDogXCJ3aGVlbERlbHRhWFwiIGluIGV2ZW50XG4gICAgICAgICAgPyAtZXZlbnQud2hlZWxEZWx0YVhcbiAgICAgICAgICA6IDA7XG4gICAgfSxcbiAgICBkZWx0YVk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiZGVsdGFZXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5kZWx0YVlcbiAgICAgICAgOiBcIndoZWVsRGVsdGFZXCIgaW4gZXZlbnRcbiAgICAgICAgICA/IC1ldmVudC53aGVlbERlbHRhWVxuICAgICAgICAgIDogXCJ3aGVlbERlbHRhXCIgaW4gZXZlbnRcbiAgICAgICAgICAgID8gLWV2ZW50LndoZWVsRGVsdGFcbiAgICAgICAgICAgIDogMDtcbiAgICB9LFxuICAgIGRlbHRhWjogMCxcbiAgICBkZWx0YU1vZGU6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1doZWVsRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChXaGVlbEV2ZW50SW50ZXJmYWNlKSxcbiAgVG9nZ2xlRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgbmV3U3RhdGU6IDAsXG4gICAgb2xkU3RhdGU6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1RvZ2dsZUV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoVG9nZ2xlRXZlbnRJbnRlcmZhY2UpLFxuICBFTkRfS0VZQ09ERVMgPSBbOSwgMTMsIDI3LCAzMl0sXG4gIGNhblVzZUNvbXBvc2l0aW9uRXZlbnQgPSBjYW5Vc2VET00gJiYgXCJDb21wb3NpdGlvbkV2ZW50XCIgaW4gd2luZG93LFxuICBkb2N1bWVudE1vZGUgPSBudWxsO1xuY2FuVXNlRE9NICYmXG4gIFwiZG9jdW1lbnRNb2RlXCIgaW4gZG9jdW1lbnQgJiZcbiAgKGRvY3VtZW50TW9kZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgY2FuVXNlVGV4dElucHV0RXZlbnQgPSBjYW5Vc2VET00gJiYgXCJUZXh0RXZlbnRcIiBpbiB3aW5kb3cgJiYgIWRvY3VtZW50TW9kZSxcbiAgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPVxuICAgIGNhblVzZURPTSAmJlxuICAgICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCB8fFxuICAgICAgKGRvY3VtZW50TW9kZSAmJiA4IDwgZG9jdW1lbnRNb2RlICYmIDExID49IGRvY3VtZW50TW9kZSkpLFxuICBTUEFDRUJBUl9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMiksXG4gIGhhc1NwYWNlS2V5cHJlc3MgPSAhMTtcbmZ1bmN0aW9uIGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImtleXVwXCI6XG4gICAgICByZXR1cm4gLTEgIT09IEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpO1xuICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICByZXR1cm4gMjI5ICE9PSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgIHJldHVybiAhMDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICExO1xuICB9XG59XG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIG5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQuZGV0YWlsO1xuICByZXR1cm4gXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5hdGl2ZUV2ZW50ICYmIFwiZGF0YVwiIGluIG5hdGl2ZUV2ZW50XG4gICAgPyBuYXRpdmVFdmVudC5kYXRhXG4gICAgOiBudWxsO1xufVxudmFyIGlzQ29tcG9zaW5nID0gITE7XG5mdW5jdGlvbiBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICAgIHJldHVybiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgIGlmICgzMiAhPT0gbmF0aXZlRXZlbnQud2hpY2gpIHJldHVybiBudWxsO1xuICAgICAgaGFzU3BhY2VLZXlwcmVzcyA9ICEwO1xuICAgICAgcmV0dXJuIFNQQUNFQkFSX0NIQVI7XG4gICAgY2FzZSBcInRleHRJbnB1dFwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGRvbUV2ZW50TmFtZSA9IG5hdGl2ZUV2ZW50LmRhdGEpLFxuICAgICAgICBkb21FdmVudE5hbWUgPT09IFNQQUNFQkFSX0NIQVIgJiYgaGFzU3BhY2VLZXlwcmVzcyA/IG51bGwgOiBkb21FdmVudE5hbWVcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICBpZiAoaXNDb21wb3NpbmcpXG4gICAgcmV0dXJuIFwiY29tcG9zaXRpb25lbmRcIiA9PT0gZG9tRXZlbnROYW1lIHx8XG4gICAgICAoIWNhblVzZUNvbXBvc2l0aW9uRXZlbnQgJiZcbiAgICAgICAgaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpKVxuICAgICAgPyAoKGRvbUV2ZW50TmFtZSA9IGdldERhdGEoKSksXG4gICAgICAgIChmYWxsYmFja1RleHQgPSBzdGFydFRleHQgPSByb290ID0gbnVsbCksXG4gICAgICAgIChpc0NvbXBvc2luZyA9ICExKSxcbiAgICAgICAgZG9tRXZlbnROYW1lKVxuICAgICAgOiBudWxsO1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgICBpZiAoXG4gICAgICAgICEobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgfHxcbiAgICAgICAgKG5hdGl2ZUV2ZW50LmN0cmxLZXkgJiYgbmF0aXZlRXZlbnQuYWx0S2V5KVxuICAgICAgKSB7XG4gICAgICAgIGlmIChuYXRpdmVFdmVudC5jaGFyICYmIDEgPCBuYXRpdmVFdmVudC5jaGFyLmxlbmd0aClcbiAgICAgICAgICByZXR1cm4gbmF0aXZlRXZlbnQuY2hhcjtcbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LndoaWNoKSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudC53aGljaCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSAmJiBcImtvXCIgIT09IG5hdGl2ZUV2ZW50LmxvY2FsZVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxudmFyIHN1cHBvcnRlZElucHV0VHlwZXMgPSB7XG4gIGNvbG9yOiAhMCxcbiAgZGF0ZTogITAsXG4gIGRhdGV0aW1lOiAhMCxcbiAgXCJkYXRldGltZS1sb2NhbFwiOiAhMCxcbiAgZW1haWw6ICEwLFxuICBtb250aDogITAsXG4gIG51bWJlcjogITAsXG4gIHBhc3N3b3JkOiAhMCxcbiAgcmFuZ2U6ICEwLFxuICBzZWFyY2g6ICEwLFxuICB0ZWw6ICEwLFxuICB0ZXh0OiAhMCxcbiAgdGltZTogITAsXG4gIHVybDogITAsXG4gIHdlZWs6ICEwXG59O1xuZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIFwiaW5wdXRcIiA9PT0gbm9kZU5hbWVcbiAgICA/ICEhc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdXG4gICAgOiBcInRleHRhcmVhXCIgPT09IG5vZGVOYW1lXG4gICAgICA/ICEwXG4gICAgICA6ICExO1xufVxuZnVuY3Rpb24gY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICBkaXNwYXRjaFF1ZXVlLFxuICBpbnN0LFxuICBuYXRpdmVFdmVudCxcbiAgdGFyZ2V0XG4pIHtcbiAgcmVzdG9yZVRhcmdldFxuICAgID8gcmVzdG9yZVF1ZXVlXG4gICAgICA/IHJlc3RvcmVRdWV1ZS5wdXNoKHRhcmdldClcbiAgICAgIDogKHJlc3RvcmVRdWV1ZSA9IFt0YXJnZXRdKVxuICAgIDogKHJlc3RvcmVUYXJnZXQgPSB0YXJnZXQpO1xuICBpbnN0ID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKGluc3QsIFwib25DaGFuZ2VcIik7XG4gIDAgPCBpbnN0Lmxlbmd0aCAmJlxuICAgICgobmF0aXZlRXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICBcIm9uQ2hhbmdlXCIsXG4gICAgICBcImNoYW5nZVwiLFxuICAgICAgbnVsbCxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgdGFyZ2V0XG4gICAgKSksXG4gICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IG5hdGl2ZUV2ZW50LCBsaXN0ZW5lcnM6IGluc3QgfSkpO1xufVxudmFyIGFjdGl2ZUVsZW1lbnQkMSA9IG51bGwsXG4gIGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSBudWxsO1xuZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGRpc3BhdGNoUXVldWUpIHtcbiAgcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgMCk7XG59XG5mdW5jdGlvbiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCkge1xuICB2YXIgdGFyZ2V0Tm9kZSA9IGdldE5vZGVGcm9tSW5zdGFuY2UodGFyZ2V0SW5zdCk7XG4gIGlmICh1cGRhdGVWYWx1ZUlmQ2hhbmdlZCh0YXJnZXROb2RlKSkgcmV0dXJuIHRhcmdldEluc3Q7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImNoYW5nZVwiID09PSBkb21FdmVudE5hbWUpIHJldHVybiB0YXJnZXRJbnN0O1xufVxudmFyIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9ICExO1xuaWYgKGNhblVzZURPTSkge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODI7XG4gIGlmIChjYW5Vc2VET00pIHtcbiAgICB2YXIgaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTcgPSBcIm9uaW5wdXRcIiBpbiBkb2N1bWVudDtcbiAgICBpZiAoIWlzU3VwcG9ydGVkJGpzY29tcCRpbmxpbmVfNDE3KSB7XG4gICAgICB2YXIgZWxlbWVudCRqc2NvbXAkaW5saW5lXzQxOCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE4LnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIiwgXCJyZXR1cm47XCIpO1xuICAgICAgaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTcgPVxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE4Lm9uaW5wdXQ7XG4gICAgfVxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgyID0gaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTc7XG4gIH0gZWxzZSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MiA9ICExO1xuICBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPVxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgyICYmXG4gICAgKCFkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgOSA8IGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG59XG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpIHtcbiAgYWN0aXZlRWxlbWVudCQxICYmXG4gICAgKGFjdGl2ZUVsZW1lbnQkMS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIiwgaGFuZGxlUHJvcGVydHlDaGFuZ2UpLFxuICAgIChhY3RpdmVFbGVtZW50SW5zdCQxID0gYWN0aXZlRWxlbWVudCQxID0gbnVsbCkpO1xufVxuZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcbiAgaWYgKFxuICAgIFwidmFsdWVcIiA9PT0gbmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICYmXG4gICAgZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0JDEpXG4gICkge1xuICAgIHZhciBkaXNwYXRjaFF1ZXVlID0gW107XG4gICAgY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgIGFjdGl2ZUVsZW1lbnRJbnN0JDEsXG4gICAgICBuYXRpdmVFdmVudCxcbiAgICAgIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KVxuICAgICk7XG4gICAgYmF0Y2hlZFVwZGF0ZXMkMShydW5FdmVudEluQmF0Y2gsIGRpc3BhdGNoUXVldWUpO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGwoZG9tRXZlbnROYW1lLCB0YXJnZXQsIHRhcmdldEluc3QpIHtcbiAgXCJmb2N1c2luXCIgPT09IGRvbUV2ZW50TmFtZVxuICAgID8gKHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCksXG4gICAgICAoYWN0aXZlRWxlbWVudCQxID0gdGFyZ2V0KSxcbiAgICAgIChhY3RpdmVFbGVtZW50SW5zdCQxID0gdGFyZ2V0SW5zdCksXG4gICAgICBhY3RpdmVFbGVtZW50JDEuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKSlcbiAgICA6IFwiZm9jdXNvdXRcIiA9PT0gZG9tRXZlbnROYW1lICYmIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsKGRvbUV2ZW50TmFtZSkge1xuICBpZiAoXG4gICAgXCJzZWxlY3Rpb25jaGFuZ2VcIiA9PT0gZG9tRXZlbnROYW1lIHx8XG4gICAgXCJrZXl1cFwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICBcImtleWRvd25cIiA9PT0gZG9tRXZlbnROYW1lXG4gIClcbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0JDEpO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImNsaWNrXCIgPT09IGRvbUV2ZW50TmFtZSkgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImlucHV0XCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcImNoYW5nZVwiID09PSBkb21FdmVudE5hbWUpXG4gICAgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KTtcbn1cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgcmV0dXJuICh4ID09PSB5ICYmICgwICE9PSB4IHx8IDEgLyB4ID09PSAxIC8geSkpIHx8ICh4ICE9PSB4ICYmIHkgIT09IHkpO1xufVxudmFyIG9iamVjdElzID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgT2JqZWN0LmlzID8gT2JqZWN0LmlzIDogaXM7XG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAob2JqZWN0SXMob2JqQSwgb2JqQikpIHJldHVybiAhMDtcbiAgaWYgKFxuICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBvYmpBIHx8XG4gICAgbnVsbCA9PT0gb2JqQSB8fFxuICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBvYmpCIHx8XG4gICAgbnVsbCA9PT0gb2JqQlxuICApXG4gICAgcmV0dXJuICExO1xuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKSxcbiAgICBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiAhMTtcbiAgZm9yIChrZXlzQiA9IDA7IGtleXNCIDwga2V5c0EubGVuZ3RoOyBrZXlzQisrKSB7XG4gICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzQVtrZXlzQl07XG4gICAgaWYgKFxuICAgICAgIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwgY3VycmVudEtleSkgfHxcbiAgICAgICFvYmplY3RJcyhvYmpBW2N1cnJlbnRLZXldLCBvYmpCW2N1cnJlbnRLZXldKVxuICAgIClcbiAgICAgIHJldHVybiAhMTtcbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIGZvciAoOyBub2RlICYmIG5vZGUuZmlyc3RDaGlsZDsgKSBub2RlID0gbm9kZS5maXJzdENoaWxkO1xuICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQocm9vdCwgb2Zmc2V0KSB7XG4gIHZhciBub2RlID0gZ2V0TGVhZk5vZGUocm9vdCk7XG4gIHJvb3QgPSAwO1xuICBmb3IgKHZhciBub2RlRW5kOyBub2RlOyApIHtcbiAgICBpZiAoMyA9PT0gbm9kZS5ub2RlVHlwZSkge1xuICAgICAgbm9kZUVuZCA9IHJvb3QgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICAgIGlmIChyb290IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldClcbiAgICAgICAgcmV0dXJuIHsgbm9kZTogbm9kZSwgb2Zmc2V0OiBvZmZzZXQgLSByb290IH07XG4gICAgICByb290ID0gbm9kZUVuZDtcbiAgICB9XG4gICAgYToge1xuICAgICAgZm9yICg7IG5vZGU7ICkge1xuICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSB2b2lkIDA7XG4gICAgfVxuICAgIG5vZGUgPSBnZXRMZWFmTm9kZShub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIHJldHVybiBvdXRlck5vZGUgJiYgaW5uZXJOb2RlXG4gICAgPyBvdXRlck5vZGUgPT09IGlubmVyTm9kZVxuICAgICAgPyAhMFxuICAgICAgOiBvdXRlck5vZGUgJiYgMyA9PT0gb3V0ZXJOb2RlLm5vZGVUeXBlXG4gICAgICAgID8gITFcbiAgICAgICAgOiBpbm5lck5vZGUgJiYgMyA9PT0gaW5uZXJOb2RlLm5vZGVUeXBlXG4gICAgICAgICAgPyBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgICA6IFwiY29udGFpbnNcIiBpbiBvdXRlck5vZGVcbiAgICAgICAgICAgID8gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSlcbiAgICAgICAgICAgIDogb3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG4gICAgICAgICAgICAgID8gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNilcbiAgICAgICAgICAgICAgOiAhMVxuICAgIDogITE7XG59XG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50RGVlcChjb250YWluZXJJbmZvKSB7XG4gIGNvbnRhaW5lckluZm8gPVxuICAgIG51bGwgIT0gY29udGFpbmVySW5mbyAmJlxuICAgIG51bGwgIT0gY29udGFpbmVySW5mby5vd25lckRvY3VtZW50ICYmXG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXdcbiAgICAgID8gY29udGFpbmVySW5mby5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3XG4gICAgICA6IHdpbmRvdztcbiAgZm9yIChcbiAgICB2YXIgZWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVySW5mby5kb2N1bWVudCk7XG4gICAgZWxlbWVudCBpbnN0YW5jZW9mIGNvbnRhaW5lckluZm8uSFRNTElGcmFtZUVsZW1lbnQ7XG5cbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgZWxlbWVudC5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAhMTtcbiAgICB9XG4gICAgaWYgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkgY29udGFpbmVySW5mbyA9IGVsZW1lbnQuY29udGVudFdpbmRvdztcbiAgICBlbHNlIGJyZWFrO1xuICAgIGVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50KGNvbnRhaW5lckluZm8uZG9jdW1lbnQpO1xuICB9XG4gIHJldHVybiBlbGVtZW50O1xufVxuZnVuY3Rpb24gaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChcbiAgICBub2RlTmFtZSAmJlxuICAgICgoXCJpbnB1dFwiID09PSBub2RlTmFtZSAmJlxuICAgICAgKFwidGV4dFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJzZWFyY2hcIiA9PT0gZWxlbS50eXBlIHx8XG4gICAgICAgIFwidGVsXCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInVybFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJwYXNzd29yZFwiID09PSBlbGVtLnR5cGUpKSB8fFxuICAgICAgXCJ0ZXh0YXJlYVwiID09PSBub2RlTmFtZSB8fFxuICAgICAgXCJ0cnVlXCIgPT09IGVsZW0uY29udGVudEVkaXRhYmxlKVxuICApO1xufVxudmFyIHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCA9XG4gICAgY2FuVXNlRE9NICYmIFwiZG9jdW1lbnRNb2RlXCIgaW4gZG9jdW1lbnQgJiYgMTEgPj0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFxuICBhY3RpdmVFbGVtZW50ID0gbnVsbCxcbiAgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsLFxuICBsYXN0U2VsZWN0aW9uID0gbnVsbCxcbiAgbW91c2VEb3duID0gITE7XG5mdW5jdGlvbiBjb25zdHJ1Y3RTZWxlY3RFdmVudChkaXNwYXRjaFF1ZXVlLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgdmFyIGRvYyA9XG4gICAgbmF0aXZlRXZlbnRUYXJnZXQud2luZG93ID09PSBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgPyBuYXRpdmVFdmVudFRhcmdldC5kb2N1bWVudFxuICAgICAgOiA5ID09PSBuYXRpdmVFdmVudFRhcmdldC5ub2RlVHlwZVxuICAgICAgICA/IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgIDogbmF0aXZlRXZlbnRUYXJnZXQub3duZXJEb2N1bWVudDtcbiAgbW91c2VEb3duIHx8XG4gICAgbnVsbCA9PSBhY3RpdmVFbGVtZW50IHx8XG4gICAgYWN0aXZlRWxlbWVudCAhPT0gZ2V0QWN0aXZlRWxlbWVudChkb2MpIHx8XG4gICAgKChkb2MgPSBhY3RpdmVFbGVtZW50KSxcbiAgICBcInNlbGVjdGlvblN0YXJ0XCIgaW4gZG9jICYmIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhkb2MpXG4gICAgICA/IChkb2MgPSB7IHN0YXJ0OiBkb2Muc2VsZWN0aW9uU3RhcnQsIGVuZDogZG9jLnNlbGVjdGlvbkVuZCB9KVxuICAgICAgOiAoKGRvYyA9IChcbiAgICAgICAgICAoZG9jLm93bmVyRG9jdW1lbnQgJiYgZG9jLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpIHx8XG4gICAgICAgICAgd2luZG93XG4gICAgICAgICkuZ2V0U2VsZWN0aW9uKCkpLFxuICAgICAgICAoZG9jID0ge1xuICAgICAgICAgIGFuY2hvck5vZGU6IGRvYy5hbmNob3JOb2RlLFxuICAgICAgICAgIGFuY2hvck9mZnNldDogZG9jLmFuY2hvck9mZnNldCxcbiAgICAgICAgICBmb2N1c05vZGU6IGRvYy5mb2N1c05vZGUsXG4gICAgICAgICAgZm9jdXNPZmZzZXQ6IGRvYy5mb2N1c09mZnNldFxuICAgICAgICB9KSksXG4gICAgKGxhc3RTZWxlY3Rpb24gJiYgc2hhbGxvd0VxdWFsKGxhc3RTZWxlY3Rpb24sIGRvYykpIHx8XG4gICAgICAoKGxhc3RTZWxlY3Rpb24gPSBkb2MpLFxuICAgICAgKGRvYyA9IGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyhhY3RpdmVFbGVtZW50SW5zdCwgXCJvblNlbGVjdFwiKSksXG4gICAgICAwIDwgZG9jLmxlbmd0aCAmJlxuICAgICAgICAoKG5hdGl2ZUV2ZW50ID0gbmV3IFN5bnRoZXRpY0V2ZW50KFxuICAgICAgICAgIFwib25TZWxlY3RcIixcbiAgICAgICAgICBcInNlbGVjdFwiLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgKSksXG4gICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiBuYXRpdmVFdmVudCwgbGlzdGVuZXJzOiBkb2MgfSksXG4gICAgICAgIChuYXRpdmVFdmVudC50YXJnZXQgPSBhY3RpdmVFbGVtZW50KSkpKTtcbn1cbmZ1bmN0aW9uIG1ha2VQcmVmaXhNYXAoc3R5bGVQcm9wLCBldmVudE5hbWUpIHtcbiAgdmFyIHByZWZpeGVzID0ge307XG4gIHByZWZpeGVzW3N0eWxlUHJvcC50b0xvd2VyQ2FzZSgpXSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICBwcmVmaXhlc1tcIldlYmtpdFwiICsgc3R5bGVQcm9wXSA9IFwid2Via2l0XCIgKyBldmVudE5hbWU7XG4gIHByZWZpeGVzW1wiTW96XCIgKyBzdHlsZVByb3BdID0gXCJtb3pcIiArIGV2ZW50TmFtZTtcbiAgcmV0dXJuIHByZWZpeGVzO1xufVxudmFyIHZlbmRvclByZWZpeGVzID0ge1xuICAgIGFuaW1hdGlvbmVuZDogbWFrZVByZWZpeE1hcChcIkFuaW1hdGlvblwiLCBcIkFuaW1hdGlvbkVuZFwiKSxcbiAgICBhbmltYXRpb25pdGVyYXRpb246IG1ha2VQcmVmaXhNYXAoXCJBbmltYXRpb25cIiwgXCJBbmltYXRpb25JdGVyYXRpb25cIiksXG4gICAgYW5pbWF0aW9uc3RhcnQ6IG1ha2VQcmVmaXhNYXAoXCJBbmltYXRpb25cIiwgXCJBbmltYXRpb25TdGFydFwiKSxcbiAgICB0cmFuc2l0aW9ucnVuOiBtYWtlUHJlZml4TWFwKFwiVHJhbnNpdGlvblwiLCBcIlRyYW5zaXRpb25SdW5cIiksXG4gICAgdHJhbnNpdGlvbnN0YXJ0OiBtYWtlUHJlZml4TWFwKFwiVHJhbnNpdGlvblwiLCBcIlRyYW5zaXRpb25TdGFydFwiKSxcbiAgICB0cmFuc2l0aW9uY2FuY2VsOiBtYWtlUHJlZml4TWFwKFwiVHJhbnNpdGlvblwiLCBcIlRyYW5zaXRpb25DYW5jZWxcIiksXG4gICAgdHJhbnNpdGlvbmVuZDogbWFrZVByZWZpeE1hcChcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uRW5kXCIpXG4gIH0sXG4gIHByZWZpeGVkRXZlbnROYW1lcyA9IHt9LFxuICBzdHlsZSA9IHt9O1xuY2FuVXNlRE9NICYmXG4gICgoc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlKSxcbiAgXCJBbmltYXRpb25FdmVudFwiIGluIHdpbmRvdyB8fFxuICAgIChkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcbiAgXCJUcmFuc2l0aW9uRXZlbnRcIiBpbiB3aW5kb3cgfHxcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKGV2ZW50TmFtZSkge1xuICBpZiAocHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0pIHJldHVybiBwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXTtcbiAgaWYgKCF2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdKSByZXR1cm4gZXZlbnROYW1lO1xuICB2YXIgcHJlZml4TWFwID0gdmVuZG9yUHJlZml4ZXNbZXZlbnROYW1lXSxcbiAgICBzdHlsZVByb3A7XG4gIGZvciAoc3R5bGVQcm9wIGluIHByZWZpeE1hcClcbiAgICBpZiAocHJlZml4TWFwLmhhc093blByb3BlcnR5KHN0eWxlUHJvcCkgJiYgc3R5bGVQcm9wIGluIHN0eWxlKVxuICAgICAgcmV0dXJuIChwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSA9IHByZWZpeE1hcFtzdHlsZVByb3BdKTtcbiAgcmV0dXJuIGV2ZW50TmFtZTtcbn1cbnZhciBBTklNQVRJT05fRU5EID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJhbmltYXRpb25lbmRcIiksXG4gIEFOSU1BVElPTl9JVEVSQVRJT04gPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxcbiAgQU5JTUFUSU9OX1NUQVJUID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJhbmltYXRpb25zdGFydFwiKSxcbiAgVFJBTlNJVElPTl9SVU4gPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcInRyYW5zaXRpb25ydW5cIiksXG4gIFRSQU5TSVRJT05fU1RBUlQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcInRyYW5zaXRpb25zdGFydFwiKSxcbiAgVFJBTlNJVElPTl9DQU5DRUwgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcInRyYW5zaXRpb25jYW5jZWxcIiksXG4gIFRSQU5TSVRJT05fRU5EID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoXCJ0cmFuc2l0aW9uZW5kXCIpLFxuICB0b3BMZXZlbEV2ZW50c1RvUmVhY3ROYW1lcyA9IG5ldyBNYXAoKSxcbiAgc2ltcGxlRXZlbnRQbHVnaW5FdmVudHMgPVxuICAgIFwiYWJvcnQgYXV4Q2xpY2sgYmVmb3JlVG9nZ2xlIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXG4gICAgICBcIiBcIlxuICAgICk7XG5zaW1wbGVFdmVudFBsdWdpbkV2ZW50cy5wdXNoKFwic2Nyb2xsRW5kXCIpO1xuZnVuY3Rpb24gcmVnaXN0ZXJTaW1wbGVFdmVudChkb21FdmVudE5hbWUsIHJlYWN0TmFtZSkge1xuICB0b3BMZXZlbEV2ZW50c1RvUmVhY3ROYW1lcy5zZXQoZG9tRXZlbnROYW1lLCByZWFjdE5hbWUpO1xuICByZWdpc3RlclR3b1BoYXNlRXZlbnQocmVhY3ROYW1lLCBbZG9tRXZlbnROYW1lXSk7XG59XG52YXIgQ2FwdHVyZWRTdGFja3MgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodmFsdWUsIHNvdXJjZSkge1xuICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHZhbHVlICYmIG51bGwgIT09IHZhbHVlKSB7XG4gICAgdmFyIGV4aXN0aW5nID0gQ2FwdHVyZWRTdGFja3MuZ2V0KHZhbHVlKTtcbiAgICBpZiAodm9pZCAwICE9PSBleGlzdGluZykgcmV0dXJuIGV4aXN0aW5nO1xuICAgIHNvdXJjZSA9IHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgc3RhY2s6IGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChzb3VyY2UpXG4gICAgfTtcbiAgICBDYXB0dXJlZFN0YWNrcy5zZXQodmFsdWUsIHNvdXJjZSk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICBzdGFjazogZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKHNvdXJjZSlcbiAgfTtcbn1cbnZhciBjb25jdXJyZW50UXVldWVzID0gW10sXG4gIGNvbmN1cnJlbnRRdWV1ZXNJbmRleCA9IDAsXG4gIGNvbmN1cnJlbnRseVVwZGF0ZWRMYW5lcyA9IDA7XG5mdW5jdGlvbiBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCkge1xuICBmb3IgKFxuICAgIHZhciBlbmRJbmRleCA9IGNvbmN1cnJlbnRRdWV1ZXNJbmRleCxcbiAgICAgIGkgPSAoY29uY3VycmVudGx5VXBkYXRlZExhbmVzID0gY29uY3VycmVudFF1ZXVlc0luZGV4ID0gMCk7XG4gICAgaSA8IGVuZEluZGV4O1xuXG4gICkge1xuICAgIHZhciBmaWJlciA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgcXVldWUgPSBjb25jdXJyZW50UXVldWVzW2ldO1xuICAgIGNvbmN1cnJlbnRRdWV1ZXNbaSsrXSA9IG51bGw7XG4gICAgdmFyIHVwZGF0ZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgbGFuZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICBpZiAobnVsbCAhPT0gcXVldWUgJiYgbnVsbCAhPT0gdXBkYXRlKSB7XG4gICAgICB2YXIgcGVuZGluZyA9IHF1ZXVlLnBlbmRpbmc7XG4gICAgICBudWxsID09PSBwZW5kaW5nXG4gICAgICAgID8gKHVwZGF0ZS5uZXh0ID0gdXBkYXRlKVxuICAgICAgICA6ICgodXBkYXRlLm5leHQgPSBwZW5kaW5nLm5leHQpLCAocGVuZGluZy5uZXh0ID0gdXBkYXRlKSk7XG4gICAgICBxdWV1ZS5wZW5kaW5nID0gdXBkYXRlO1xuICAgIH1cbiAgICAwICE9PSBsYW5lICYmIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KGZpYmVyLCB1cGRhdGUsIGxhbmUpO1xuICB9XG59XG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlJDEoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpIHtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBmaWJlcjtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBxdWV1ZTtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSB1cGRhdGU7XG4gIGNvbmN1cnJlbnRRdWV1ZXNbY29uY3VycmVudFF1ZXVlc0luZGV4KytdID0gbGFuZTtcbiAgY29uY3VycmVudGx5VXBkYXRlZExhbmVzIHw9IGxhbmU7XG4gIGZpYmVyLmxhbmVzIHw9IGxhbmU7XG4gIGZpYmVyID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBmaWJlciAmJiAoZmliZXIubGFuZXMgfD0gbGFuZSk7XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpIHtcbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCBsYW5lKSB7XG4gIGVucXVldWVVcGRhdGUkMShmaWJlciwgbnVsbCwgbnVsbCwgbGFuZSk7XG4gIHJldHVybiBnZXRSb290Rm9yVXBkYXRlZEZpYmVyKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KHNvdXJjZUZpYmVyLCB1cGRhdGUsIGxhbmUpIHtcbiAgc291cmNlRmliZXIubGFuZXMgfD0gbGFuZTtcbiAgdmFyIGFsdGVybmF0ZSA9IHNvdXJjZUZpYmVyLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUubGFuZXMgfD0gbGFuZSk7XG4gIGZvciAodmFyIGlzSGlkZGVuID0gITEsIHBhcmVudCA9IHNvdXJjZUZpYmVyLnJldHVybjsgbnVsbCAhPT0gcGFyZW50OyApXG4gICAgKHBhcmVudC5jaGlsZExhbmVzIHw9IGxhbmUpLFxuICAgICAgKGFsdGVybmF0ZSA9IHBhcmVudC5hbHRlcm5hdGUpLFxuICAgICAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSBsYW5lKSxcbiAgICAgIDIyID09PSBwYXJlbnQudGFnICYmXG4gICAgICAgICgoc291cmNlRmliZXIgPSBwYXJlbnQuc3RhdGVOb2RlKSxcbiAgICAgICAgbnVsbCA9PT0gc291cmNlRmliZXIgfHwgc291cmNlRmliZXIuX3Zpc2liaWxpdHkgJiAxIHx8IChpc0hpZGRlbiA9ICEwKSksXG4gICAgICAoc291cmNlRmliZXIgPSBwYXJlbnQpLFxuICAgICAgKHBhcmVudCA9IHBhcmVudC5yZXR1cm4pO1xuICByZXR1cm4gMyA9PT0gc291cmNlRmliZXIudGFnXG4gICAgPyAoKHBhcmVudCA9IHNvdXJjZUZpYmVyLnN0YXRlTm9kZSksXG4gICAgICBpc0hpZGRlbiAmJlxuICAgICAgICBudWxsICE9PSB1cGRhdGUgJiZcbiAgICAgICAgKChpc0hpZGRlbiA9IDMxIC0gY2x6MzIobGFuZSkpLFxuICAgICAgICAoc291cmNlRmliZXIgPSBwYXJlbnQuaGlkZGVuVXBkYXRlcyksXG4gICAgICAgIChhbHRlcm5hdGUgPSBzb3VyY2VGaWJlcltpc0hpZGRlbl0pLFxuICAgICAgICBudWxsID09PSBhbHRlcm5hdGVcbiAgICAgICAgICA/IChzb3VyY2VGaWJlcltpc0hpZGRlbl0gPSBbdXBkYXRlXSlcbiAgICAgICAgICA6IGFsdGVybmF0ZS5wdXNoKHVwZGF0ZSksXG4gICAgICAgICh1cGRhdGUubGFuZSA9IGxhbmUgfCA1MzY4NzA5MTIpKSxcbiAgICAgIHBhcmVudClcbiAgICA6IG51bGw7XG59XG5mdW5jdGlvbiBnZXRSb290Rm9yVXBkYXRlZEZpYmVyKHNvdXJjZUZpYmVyKSB7XG4gIGlmICg1MCA8IG5lc3RlZFVwZGF0ZUNvdW50KVxuICAgIHRocm93IChcbiAgICAgICgobmVzdGVkVXBkYXRlQ291bnQgPSAwKSxcbiAgICAgIChyb290V2l0aE5lc3RlZFVwZGF0ZXMgPSBudWxsKSxcbiAgICAgIEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg1KSkpXG4gICAgKTtcbiAgZm9yICh2YXIgcGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7IClcbiAgICAoc291cmNlRmliZXIgPSBwYXJlbnQpLCAocGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuKTtcbiAgcmV0dXJuIDMgPT09IHNvdXJjZUZpYmVyLnRhZyA/IHNvdXJjZUZpYmVyLnN0YXRlTm9kZSA6IG51bGw7XG59XG52YXIgZW1wdHlDb250ZXh0T2JqZWN0ID0ge307XG5mdW5jdGlvbiBGaWJlck5vZGUodGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5rZXkgPSBrZXk7XG4gIHRoaXMuc2libGluZyA9XG4gICAgdGhpcy5jaGlsZCA9XG4gICAgdGhpcy5yZXR1cm4gPVxuICAgIHRoaXMuc3RhdGVOb2RlID1cbiAgICB0aGlzLnR5cGUgPVxuICAgIHRoaXMuZWxlbWVudFR5cGUgPVxuICAgICAgbnVsbDtcbiAgdGhpcy5pbmRleCA9IDA7XG4gIHRoaXMucmVmQ2xlYW51cCA9IHRoaXMucmVmID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHM7XG4gIHRoaXMuZGVwZW5kZW5jaWVzID1cbiAgICB0aGlzLm1lbW9pemVkU3RhdGUgPVxuICAgIHRoaXMudXBkYXRlUXVldWUgPVxuICAgIHRoaXMubWVtb2l6ZWRQcm9wcyA9XG4gICAgICBudWxsO1xuICB0aGlzLm1vZGUgPSBtb2RlO1xuICB0aGlzLnN1YnRyZWVGbGFncyA9IHRoaXMuZmxhZ3MgPSAwO1xuICB0aGlzLmRlbGV0aW9ucyA9IG51bGw7XG4gIHRoaXMuY2hpbGRMYW5lcyA9IHRoaXMubGFuZXMgPSAwO1xuICB0aGlzLmFsdGVybmF0ZSA9IG51bGw7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckltcGxDbGFzcyh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIHJldHVybiBuZXcgRmliZXJOb2RlKHRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xufVxuZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkge1xuICBDb21wb25lbnQgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISghQ29tcG9uZW50IHx8ICFDb21wb25lbnQuaXNSZWFjdENvbXBvbmVudCk7XG59XG5mdW5jdGlvbiBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBwZW5kaW5nUHJvcHMpIHtcbiAgdmFyIHdvcmtJblByb2dyZXNzID0gY3VycmVudC5hbHRlcm5hdGU7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzXG4gICAgPyAoKHdvcmtJblByb2dyZXNzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoXG4gICAgICAgIGN1cnJlbnQudGFnLFxuICAgICAgICBwZW5kaW5nUHJvcHMsXG4gICAgICAgIGN1cnJlbnQua2V5LFxuICAgICAgICBjdXJyZW50Lm1vZGVcbiAgICAgICkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlID0gY3VycmVudC5lbGVtZW50VHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudC5zdGF0ZU5vZGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IGN1cnJlbnQpLFxuICAgICAgKGN1cnJlbnQuYWx0ZXJuYXRlID0gd29ya0luUHJvZ3Jlc3MpKVxuICAgIDogKCh3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnR5cGUgPSBjdXJyZW50LnR5cGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gbnVsbCkpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IGN1cnJlbnQuZmxhZ3MgJiA2NTAxMTcxMjtcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IGN1cnJlbnQuY2hpbGRMYW5lcztcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQ7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHM7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudC51cGRhdGVRdWV1ZTtcbiAgcGVuZGluZ1Byb3BzID0gY3VycmVudC5kZXBlbmRlbmNpZXM7XG4gIHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcyA9XG4gICAgbnVsbCA9PT0gcGVuZGluZ1Byb3BzXG4gICAgICA/IG51bGxcbiAgICAgIDogeyBsYW5lczogcGVuZGluZ1Byb3BzLmxhbmVzLCBmaXJzdENvbnRleHQ6IHBlbmRpbmdQcm9wcy5maXJzdENvbnRleHQgfTtcbiAgd29ya0luUHJvZ3Jlc3Muc2libGluZyA9IGN1cnJlbnQuc2libGluZztcbiAgd29ya0luUHJvZ3Jlc3MuaW5kZXggPSBjdXJyZW50LmluZGV4O1xuICB3b3JrSW5Qcm9ncmVzcy5yZWYgPSBjdXJyZW50LnJlZjtcbiAgd29ya0luUHJvZ3Jlc3MucmVmQ2xlYW51cCA9IGN1cnJlbnQucmVmQ2xlYW51cDtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xufVxuZnVuY3Rpb24gcmVzZXRXb3JrSW5Qcm9ncmVzcyh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gNjUwMTE3MTQ7XG4gIHZhciBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlO1xuICBudWxsID09PSBjdXJyZW50XG4gICAgPyAoKHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IHJlbmRlckxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBudWxsKSlcbiAgICA6ICgod29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IGN1cnJlbnQuY2hpbGRMYW5lcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmRlbGV0aW9ucyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudC51cGRhdGVRdWV1ZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAocmVuZGVyTGFuZXMgPSBjdXJyZW50LmRlcGVuZGVuY2llcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID1cbiAgICAgICAgbnVsbCA9PT0gcmVuZGVyTGFuZXNcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgbGFuZXM6IHJlbmRlckxhbmVzLmxhbmVzLFxuICAgICAgICAgICAgICBmaXJzdENvbnRleHQ6IHJlbmRlckxhbmVzLmZpcnN0Q29udGV4dFxuICAgICAgICAgICAgfSkpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gIHR5cGUsXG4gIGtleSxcbiAgcGVuZGluZ1Byb3BzLFxuICBvd25lcixcbiAgbW9kZSxcbiAgbGFuZXNcbikge1xuICB2YXIgZmliZXJUYWcgPSAwO1xuICBvd25lciA9IHR5cGU7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB0eXBlKSBzaG91bGRDb25zdHJ1Y3QodHlwZSkgJiYgKGZpYmVyVGFnID0gMSk7XG4gIGVsc2UgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0eXBlKVxuICAgIGZpYmVyVGFnID0gaXNIb3N0SG9pc3RhYmxlVHlwZShcbiAgICAgIHR5cGUsXG4gICAgICBwZW5kaW5nUHJvcHMsXG4gICAgICBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudFxuICAgIClcbiAgICAgID8gMjZcbiAgICAgIDogXCJodG1sXCIgPT09IHR5cGUgfHwgXCJoZWFkXCIgPT09IHR5cGUgfHwgXCJib2R5XCIgPT09IHR5cGVcbiAgICAgICAgPyAyN1xuICAgICAgICA6IDU7XG4gIGVsc2VcbiAgICBhOiBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgUkVBQ1RfQUNUSVZJVFlfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDMxLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkpLFxuICAgICAgICAgICh0eXBlLmVsZW1lbnRUeXBlID0gUkVBQ1RfQUNUSVZJVFlfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgICByZXR1cm4gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQocGVuZGluZ1Byb3BzLmNoaWxkcmVuLCBtb2RlLCBsYW5lcywga2V5KTtcbiAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgZmliZXJUYWcgPSA4O1xuICAgICAgICBtb2RlIHw9IDI0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDEyLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSB8IDIpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1BST0ZJTEVSX1RZUEUpLFxuICAgICAgICAgICh0eXBlLmxhbmVzID0gbGFuZXMpLFxuICAgICAgICAgIHR5cGVcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAodHlwZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDEzLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkpLFxuICAgICAgICAgICh0eXBlLmVsZW1lbnRUeXBlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHR5cGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcygxOSwgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSksXG4gICAgICAgICAgKHR5cGUubGFuZXMgPSBsYW5lcyksXG4gICAgICAgICAgdHlwZVxuICAgICAgICApO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiB0eXBlICYmIG51bGwgIT09IHR5cGUpXG4gICAgICAgICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxMDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OU1VNRVJfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSA5O1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBmaWJlclRhZyA9IDExO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gMTQ7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxNjtcbiAgICAgICAgICAgICAgb3duZXIgPSBudWxsO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgZmliZXJUYWcgPSAyOTtcbiAgICAgICAgcGVuZGluZ1Byb3BzID0gRXJyb3IoXG4gICAgICAgICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzAsIG51bGwgPT09IHR5cGUgPyBcIm51bGxcIiA6IHR5cGVvZiB0eXBlLCBcIlwiKVxuICAgICAgICApO1xuICAgICAgICBvd25lciA9IG51bGw7XG4gICAgfVxuICBrZXkgPSBjcmVhdGVGaWJlckltcGxDbGFzcyhmaWJlclRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xuICBrZXkuZWxlbWVudFR5cGUgPSB0eXBlO1xuICBrZXkudHlwZSA9IG93bmVyO1xuICBrZXkubGFuZXMgPSBsYW5lcztcbiAgcmV0dXJuIGtleTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGVsZW1lbnRzLCBtb2RlLCBsYW5lcywga2V5KSB7XG4gIGVsZW1lbnRzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoNywgZWxlbWVudHMsIGtleSwgbW9kZSk7XG4gIGVsZW1lbnRzLmxhbmVzID0gbGFuZXM7XG4gIHJldHVybiBlbGVtZW50cztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVRleHQoY29udGVudCwgbW9kZSwgbGFuZXMpIHtcbiAgY29udGVudCA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDYsIGNvbnRlbnQsIG51bGwsIG1vZGUpO1xuICBjb250ZW50LmxhbmVzID0gbGFuZXM7XG4gIHJldHVybiBjb250ZW50O1xufVxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tUG9ydGFsKHBvcnRhbCwgbW9kZSwgbGFuZXMpIHtcbiAgbW9kZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKFxuICAgIDQsXG4gICAgbnVsbCAhPT0gcG9ydGFsLmNoaWxkcmVuID8gcG9ydGFsLmNoaWxkcmVuIDogW10sXG4gICAgcG9ydGFsLmtleSxcbiAgICBtb2RlXG4gICk7XG4gIG1vZGUubGFuZXMgPSBsYW5lcztcbiAgbW9kZS5zdGF0ZU5vZGUgPSB7XG4gICAgY29udGFpbmVySW5mbzogcG9ydGFsLmNvbnRhaW5lckluZm8sXG4gICAgcGVuZGluZ0NoaWxkcmVuOiBudWxsLFxuICAgIGltcGxlbWVudGF0aW9uOiBwb3J0YWwuaW1wbGVtZW50YXRpb25cbiAgfTtcbiAgcmV0dXJuIG1vZGU7XG59XG52YXIgZm9ya1N0YWNrID0gW10sXG4gIGZvcmtTdGFja0luZGV4ID0gMCxcbiAgdHJlZUZvcmtQcm92aWRlciA9IG51bGwsXG4gIHRyZWVGb3JrQ291bnQgPSAwLFxuICBpZFN0YWNrID0gW10sXG4gIGlkU3RhY2tJbmRleCA9IDAsXG4gIHRyZWVDb250ZXh0UHJvdmlkZXIgPSBudWxsLFxuICB0cmVlQ29udGV4dElkID0gMSxcbiAgdHJlZUNvbnRleHRPdmVyZmxvdyA9IFwiXCI7XG5mdW5jdGlvbiBwdXNoVHJlZUZvcmsod29ya0luUHJvZ3Jlc3MsIHRvdGFsQ2hpbGRyZW4pIHtcbiAgZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4KytdID0gdHJlZUZvcmtDb3VudDtcbiAgZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4KytdID0gdHJlZUZvcmtQcm92aWRlcjtcbiAgdHJlZUZvcmtQcm92aWRlciA9IHdvcmtJblByb2dyZXNzO1xuICB0cmVlRm9ya0NvdW50ID0gdG90YWxDaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIHB1c2hUcmVlSWQod29ya0luUHJvZ3Jlc3MsIHRvdGFsQ2hpbGRyZW4sIGluZGV4KSB7XG4gIGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRJZDtcbiAgaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICBpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0UHJvdmlkZXI7XG4gIHRyZWVDb250ZXh0UHJvdmlkZXIgPSB3b3JrSW5Qcm9ncmVzcztcbiAgdmFyIGJhc2VJZFdpdGhMZWFkaW5nQml0ID0gdHJlZUNvbnRleHRJZDtcbiAgd29ya0luUHJvZ3Jlc3MgPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICB2YXIgYmFzZUxlbmd0aCA9IDMyIC0gY2x6MzIoYmFzZUlkV2l0aExlYWRpbmdCaXQpIC0gMTtcbiAgYmFzZUlkV2l0aExlYWRpbmdCaXQgJj0gfigxIDw8IGJhc2VMZW5ndGgpO1xuICBpbmRleCArPSAxO1xuICB2YXIgbGVuZ3RoID0gMzIgLSBjbHozMih0b3RhbENoaWxkcmVuKSArIGJhc2VMZW5ndGg7XG4gIGlmICgzMCA8IGxlbmd0aCkge1xuICAgIHZhciBudW1iZXJPZk92ZXJmbG93Qml0cyA9IGJhc2VMZW5ndGggLSAoYmFzZUxlbmd0aCAlIDUpO1xuICAgIGxlbmd0aCA9IChcbiAgICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0ICZcbiAgICAgICgoMSA8PCBudW1iZXJPZk92ZXJmbG93Qml0cykgLSAxKVxuICAgICkudG9TdHJpbmcoMzIpO1xuICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0ID4+PSBudW1iZXJPZk92ZXJmbG93Qml0cztcbiAgICBiYXNlTGVuZ3RoIC09IG51bWJlck9mT3ZlcmZsb3dCaXRzO1xuICAgIHRyZWVDb250ZXh0SWQgPVxuICAgICAgKDEgPDwgKDMyIC0gY2x6MzIodG90YWxDaGlsZHJlbikgKyBiYXNlTGVuZ3RoKSkgfFxuICAgICAgKGluZGV4IDw8IGJhc2VMZW5ndGgpIHxcbiAgICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0O1xuICAgIHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBsZW5ndGggKyB3b3JrSW5Qcm9ncmVzcztcbiAgfSBlbHNlXG4gICAgKHRyZWVDb250ZXh0SWQgPVxuICAgICAgKDEgPDwgbGVuZ3RoKSB8IChpbmRleCA8PCBiYXNlTGVuZ3RoKSB8IGJhc2VJZFdpdGhMZWFkaW5nQml0KSxcbiAgICAgICh0cmVlQ29udGV4dE92ZXJmbG93ID0gd29ya0luUHJvZ3Jlc3MpO1xufVxuZnVuY3Rpb24gcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcykge1xuICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm4gJiZcbiAgICAocHVzaFRyZWVGb3JrKHdvcmtJblByb2dyZXNzLCAxKSwgcHVzaFRyZWVJZCh3b3JrSW5Qcm9ncmVzcywgMSwgMCkpO1xufVxuZnVuY3Rpb24gcG9wVHJlZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgZm9yICg7IHdvcmtJblByb2dyZXNzID09PSB0cmVlRm9ya1Byb3ZpZGVyOyApXG4gICAgKHRyZWVGb3JrUHJvdmlkZXIgPSBmb3JrU3RhY2tbLS1mb3JrU3RhY2tJbmRleF0pLFxuICAgICAgKGZvcmtTdGFja1tmb3JrU3RhY2tJbmRleF0gPSBudWxsKSxcbiAgICAgICh0cmVlRm9ya0NvdW50ID0gZm9ya1N0YWNrWy0tZm9ya1N0YWNrSW5kZXhdKSxcbiAgICAgIChmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXhdID0gbnVsbCk7XG4gIGZvciAoOyB3b3JrSW5Qcm9ncmVzcyA9PT0gdHJlZUNvbnRleHRQcm92aWRlcjsgKVxuICAgICh0cmVlQ29udGV4dFByb3ZpZGVyID0gaWRTdGFja1stLWlkU3RhY2tJbmRleF0pLFxuICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4XSA9IG51bGwpLFxuICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBpZFN0YWNrWy0taWRTdGFja0luZGV4XSksXG4gICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXhdID0gbnVsbCksXG4gICAgICAodHJlZUNvbnRleHRJZCA9IGlkU3RhY2tbLS1pZFN0YWNrSW5kZXhdKSxcbiAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleF0gPSBudWxsKTtcbn1cbnZhciBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGwsXG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsLFxuICBpc0h5ZHJhdGluZyA9ICExLFxuICBoeWRyYXRpb25FcnJvcnMgPSBudWxsLFxuICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEsXG4gIEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MTkpKTtcbmZ1bmN0aW9uIHRocm93T25IeWRyYXRpb25NaXNtYXRjaChmaWJlcikge1xuICB2YXIgZXJyb3IgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQxOCwgXCJcIikpO1xuICBxdWV1ZUh5ZHJhdGlvbkVycm9yKGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKGVycm9yLCBmaWJlcikpO1xuICB0aHJvdyBIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbjtcbn1cbmZ1bmN0aW9uIHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UoZmliZXIpIHtcbiAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlLFxuICAgIHR5cGUgPSBmaWJlci50eXBlLFxuICAgIHByb3BzID0gZmliZXIubWVtb2l6ZWRQcm9wcztcbiAgaW5zdGFuY2VbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSBmaWJlcjtcbiAgaW5zdGFuY2VbaW50ZXJuYWxQcm9wc0tleV0gPSBwcm9wcztcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImRpYWxvZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImNhbmNlbFwiLCBpbnN0YW5jZSk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiY2xvc2VcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlmcmFtZVwiOlxuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgZm9yICh0eXBlID0gMDsgdHlwZSA8IG1lZGlhRXZlbnRUeXBlcy5sZW5ndGg7IHR5cGUrKylcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbdHlwZV0sIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzb3VyY2VcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgY2FzZSBcImltYWdlXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBpbnN0YW5jZSk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGV0YWlsc1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGluc3RhbmNlKTtcbiAgICAgIGluaXRJbnB1dChcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgIHByb3BzLnZhbHVlLFxuICAgICAgICBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgIHByb3BzLmNoZWNrZWQsXG4gICAgICAgIHByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgICBwcm9wcy50eXBlLFxuICAgICAgICBwcm9wcy5uYW1lLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICAgIHRyYWNrKGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpLFxuICAgICAgICBpbml0VGV4dGFyZWEoaW5zdGFuY2UsIHByb3BzLnZhbHVlLCBwcm9wcy5kZWZhdWx0VmFsdWUsIHByb3BzLmNoaWxkcmVuKSxcbiAgICAgICAgdHJhY2soaW5zdGFuY2UpO1xuICB9XG4gIHR5cGUgPSBwcm9wcy5jaGlsZHJlbjtcbiAgKFwic3RyaW5nXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gICAgXCJudW1iZXJcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcImJpZ2ludFwiICE9PSB0eXBlb2YgdHlwZSkgfHxcbiAgaW5zdGFuY2UudGV4dENvbnRlbnQgPT09IFwiXCIgKyB0eXBlIHx8XG4gICEwID09PSBwcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgfHxcbiAgY2hlY2tGb3JVbm1hdGNoZWRUZXh0KGluc3RhbmNlLnRleHRDb250ZW50LCB0eXBlKVxuICAgID8gKG51bGwgIT0gcHJvcHMucG9wb3ZlciAmJlxuICAgICAgICAobGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImJlZm9yZXRvZ2dsZVwiLCBpbnN0YW5jZSksXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJ0b2dnbGVcIiwgaW5zdGFuY2UpKSxcbiAgICAgIG51bGwgIT0gcHJvcHMub25TY3JvbGwgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBpbnN0YW5jZSksXG4gICAgICBudWxsICE9IHByb3BzLm9uU2Nyb2xsRW5kICYmXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgaW5zdGFuY2UpLFxuICAgICAgbnVsbCAhPSBwcm9wcy5vbkNsaWNrICYmIChpbnN0YW5jZS5vbmNsaWNrID0gbm9vcCQxKSxcbiAgICAgIChpbnN0YW5jZSA9ICEwKSlcbiAgICA6IChpbnN0YW5jZSA9ICExKTtcbiAgaW5zdGFuY2UgfHwgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpIHtcbiAgZm9yIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IGZpYmVyLnJldHVybjsgaHlkcmF0aW9uUGFyZW50RmliZXI7IClcbiAgICBzd2l0Y2ggKGh5ZHJhdGlvblBhcmVudEZpYmVyLnRhZykge1xuICAgICAgY2FzZSA1OlxuICAgICAgY2FzZSAxMzpcbiAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dCA9ICExO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIDI3OlxuICAgICAgY2FzZSAzOlxuICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITA7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gaHlkcmF0aW9uUGFyZW50RmliZXIucmV0dXJuO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBvcEh5ZHJhdGlvblN0YXRlKGZpYmVyKSB7XG4gIGlmIChmaWJlciAhPT0gaHlkcmF0aW9uUGFyZW50RmliZXIpIHJldHVybiAhMTtcbiAgaWYgKCFpc0h5ZHJhdGluZykgcmV0dXJuIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpLCAoaXNIeWRyYXRpbmcgPSAhMCksICExO1xuICB2YXIgdGFnID0gZmliZXIudGFnLFxuICAgIEpTQ29tcGlsZXJfdGVtcDtcbiAgaWYgKChKU0NvbXBpbGVyX3RlbXAgPSAzICE9PSB0YWcgJiYgMjcgIT09IHRhZykpIHtcbiAgICBpZiAoKEpTQ29tcGlsZXJfdGVtcCA9IDUgPT09IHRhZykpXG4gICAgICAoSlNDb21waWxlcl90ZW1wID0gZmliZXIudHlwZSksXG4gICAgICAgIChKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICAgICEoXCJmb3JtXCIgIT09IEpTQ29tcGlsZXJfdGVtcCAmJiBcImJ1dHRvblwiICE9PSBKU0NvbXBpbGVyX3RlbXApIHx8XG4gICAgICAgICAgc2hvdWxkU2V0VGV4dENvbnRlbnQoZmliZXIudHlwZSwgZmliZXIubWVtb2l6ZWRQcm9wcykpO1xuICAgIEpTQ29tcGlsZXJfdGVtcCA9ICFKU0NvbXBpbGVyX3RlbXA7XG4gIH1cbiAgSlNDb21waWxlcl90ZW1wICYmIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgJiYgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKTtcbiAgcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcik7XG4gIGlmICgxMyA9PT0gdGFnKSB7XG4gICAgZmliZXIgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICAgIGZpYmVyID0gbnVsbCAhPT0gZmliZXIgPyBmaWJlci5kZWh5ZHJhdGVkIDogbnVsbDtcbiAgICBpZiAoIWZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxNykpO1xuICAgIGE6IHtcbiAgICAgIGZpYmVyID0gZmliZXIubmV4dFNpYmxpbmc7XG4gICAgICBmb3IgKHRhZyA9IDA7IGZpYmVyOyApIHtcbiAgICAgICAgaWYgKDggPT09IGZpYmVyLm5vZGVUeXBlKVxuICAgICAgICAgIGlmICgoKEpTQ29tcGlsZXJfdGVtcCA9IGZpYmVyLmRhdGEpLCBcIi8kXCIgPT09IEpTQ29tcGlsZXJfdGVtcCkpIHtcbiAgICAgICAgICAgIGlmICgwID09PSB0YWcpIHtcbiAgICAgICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGZpYmVyLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRhZy0tO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgKFwiJFwiICE9PSBKU0NvbXBpbGVyX3RlbXAgJiZcbiAgICAgICAgICAgICAgXCIkIVwiICE9PSBKU0NvbXBpbGVyX3RlbXAgJiZcbiAgICAgICAgICAgICAgXCIkP1wiICE9PSBKU0NvbXBpbGVyX3RlbXApIHx8XG4gICAgICAgICAgICAgIHRhZysrO1xuICAgICAgICBmaWJlciA9IGZpYmVyLm5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICB9IGVsc2VcbiAgICAyNyA9PT0gdGFnXG4gICAgICA/ICgodGFnID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSksXG4gICAgICAgIGlzU2luZ2xldG9uU2NvcGUoZmliZXIudHlwZSlcbiAgICAgICAgICA/ICgoZmliZXIgPSBwcmV2aW91c0h5ZHJhdGFibGVPbkVudGVyaW5nU2NvcGVkU2luZ2xldG9uKSxcbiAgICAgICAgICAgIChwcmV2aW91c0h5ZHJhdGFibGVPbkVudGVyaW5nU2NvcGVkU2luZ2xldG9uID0gbnVsbCksXG4gICAgICAgICAgICAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGZpYmVyKSlcbiAgICAgICAgICA6IChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gdGFnKSlcbiAgICAgIDogKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBoeWRyYXRpb25QYXJlbnRGaWJlclxuICAgICAgICAgID8gZ2V0TmV4dEh5ZHJhdGFibGUoZmliZXIuc3RhdGVOb2RlLm5leHRTaWJsaW5nKVxuICAgICAgICAgIDogbnVsbCk7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSB7XG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGw7XG4gIGlzSHlkcmF0aW5nID0gITE7XG59XG5mdW5jdGlvbiB1cGdyYWRlSHlkcmF0aW9uRXJyb3JzVG9SZWNvdmVyYWJsZSgpIHtcbiAgdmFyIHF1ZXVlZEVycm9ycyA9IGh5ZHJhdGlvbkVycm9ycztcbiAgbnVsbCAhPT0gcXVldWVkRXJyb3JzICYmXG4gICAgKG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzXG4gICAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IHF1ZXVlZEVycm9ycylcbiAgICAgIDogd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMucHVzaC5hcHBseShcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICBxdWV1ZWRFcnJvcnNcbiAgICAgICAgKSxcbiAgICAoaHlkcmF0aW9uRXJyb3JzID0gbnVsbCkpO1xuICByZXR1cm4gcXVldWVkRXJyb3JzO1xufVxuZnVuY3Rpb24gcXVldWVIeWRyYXRpb25FcnJvcihlcnJvcikge1xuICBudWxsID09PSBoeWRyYXRpb25FcnJvcnNcbiAgICA/IChoeWRyYXRpb25FcnJvcnMgPSBbZXJyb3JdKVxuICAgIDogaHlkcmF0aW9uRXJyb3JzLnB1c2goZXJyb3IpO1xufVxudmFyIHZhbHVlQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbCxcbiAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbnVsbDtcbmZ1bmN0aW9uIHB1c2hQcm92aWRlcihwcm92aWRlckZpYmVyLCBjb250ZXh0LCBuZXh0VmFsdWUpIHtcbiAgcHVzaCh2YWx1ZUN1cnNvciwgY29udGV4dC5fY3VycmVudFZhbHVlKTtcbiAgY29udGV4dC5fY3VycmVudFZhbHVlID0gbmV4dFZhbHVlO1xufVxuZnVuY3Rpb24gcG9wUHJvdmlkZXIoY29udGV4dCkge1xuICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSB2YWx1ZUN1cnNvci5jdXJyZW50O1xuICBwb3AodmFsdWVDdXJzb3IpO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChwYXJlbnQsIHJlbmRlckxhbmVzLCBwcm9wYWdhdGlvblJvb3QpIHtcbiAgZm9yICg7IG51bGwgIT09IHBhcmVudDsgKSB7XG4gICAgdmFyIGFsdGVybmF0ZSA9IHBhcmVudC5hbHRlcm5hdGU7XG4gICAgKHBhcmVudC5jaGlsZExhbmVzICYgcmVuZGVyTGFuZXMpICE9PSByZW5kZXJMYW5lc1xuICAgICAgPyAoKHBhcmVudC5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSByZW5kZXJMYW5lcykpXG4gICAgICA6IG51bGwgIT09IGFsdGVybmF0ZSAmJlxuICAgICAgICAoYWx0ZXJuYXRlLmNoaWxkTGFuZXMgJiByZW5kZXJMYW5lcykgIT09IHJlbmRlckxhbmVzICYmXG4gICAgICAgIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSByZW5kZXJMYW5lcyk7XG4gICAgaWYgKHBhcmVudCA9PT0gcHJvcGFnYXRpb25Sb290KSBicmVhaztcbiAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICB9XG59XG5mdW5jdGlvbiBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGNvbnRleHRzLFxuICByZW5kZXJMYW5lcyxcbiAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4pIHtcbiAgdmFyIGZpYmVyID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIG51bGwgIT09IGZpYmVyICYmIChmaWJlci5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyk7XG4gIGZvciAoOyBudWxsICE9PSBmaWJlcjsgKSB7XG4gICAgdmFyIGxpc3QgPSBmaWJlci5kZXBlbmRlbmNpZXM7XG4gICAgaWYgKG51bGwgIT09IGxpc3QpIHtcbiAgICAgIHZhciBuZXh0RmliZXIgPSBmaWJlci5jaGlsZDtcbiAgICAgIGxpc3QgPSBsaXN0LmZpcnN0Q29udGV4dDtcbiAgICAgIGE6IGZvciAoOyBudWxsICE9PSBsaXN0OyApIHtcbiAgICAgICAgdmFyIGRlcGVuZGVuY3kgPSBsaXN0O1xuICAgICAgICBsaXN0ID0gZmliZXI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGV4dHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgaWYgKGRlcGVuZGVuY3kuY29udGV4dCA9PT0gY29udGV4dHNbaV0pIHtcbiAgICAgICAgICAgIGxpc3QubGFuZXMgfD0gcmVuZGVyTGFuZXM7XG4gICAgICAgICAgICBkZXBlbmRlbmN5ID0gbGlzdC5hbHRlcm5hdGU7XG4gICAgICAgICAgICBudWxsICE9PSBkZXBlbmRlbmN5ICYmIChkZXBlbmRlbmN5LmxhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICAgICAgICAgIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgoXG4gICAgICAgICAgICAgIGxpc3QucmV0dXJuLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWUgfHwgKG5leHRGaWJlciA9IG51bGwpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgIGxpc3QgPSBkZXBlbmRlbmN5Lm5leHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgxOCA9PT0gZmliZXIudGFnKSB7XG4gICAgICBuZXh0RmliZXIgPSBmaWJlci5yZXR1cm47XG4gICAgICBpZiAobnVsbCA9PT0gbmV4dEZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0MSkpO1xuICAgICAgbmV4dEZpYmVyLmxhbmVzIHw9IHJlbmRlckxhbmVzO1xuICAgICAgbGlzdCA9IG5leHRGaWJlci5hbHRlcm5hdGU7XG4gICAgICBudWxsICE9PSBsaXN0ICYmIChsaXN0LmxhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICAgIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgobmV4dEZpYmVyLCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgbmV4dEZpYmVyID0gbnVsbDtcbiAgICB9IGVsc2UgbmV4dEZpYmVyID0gZmliZXIuY2hpbGQ7XG4gICAgaWYgKG51bGwgIT09IG5leHRGaWJlcikgbmV4dEZpYmVyLnJldHVybiA9IGZpYmVyO1xuICAgIGVsc2VcbiAgICAgIGZvciAobmV4dEZpYmVyID0gZmliZXI7IG51bGwgIT09IG5leHRGaWJlcjsgKSB7XG4gICAgICAgIGlmIChuZXh0RmliZXIgPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgbmV4dEZpYmVyID0gbnVsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBmaWJlciA9IG5leHRGaWJlci5zaWJsaW5nO1xuICAgICAgICBpZiAobnVsbCAhPT0gZmliZXIpIHtcbiAgICAgICAgICBmaWJlci5yZXR1cm4gPSBuZXh0RmliZXIucmV0dXJuO1xuICAgICAgICAgIG5leHRGaWJlciA9IGZpYmVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5leHRGaWJlciA9IG5leHRGaWJlci5yZXR1cm47XG4gICAgICB9XG4gICAgZmliZXIgPSBuZXh0RmliZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgcmVuZGVyTGFuZXMsXG4gIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZVxuKSB7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBmb3IgKFxuICAgIHZhciBwYXJlbnQgPSB3b3JrSW5Qcm9ncmVzcywgaXNJbnNpZGVQcm9wYWdhdGlvbkJhaWxvdXQgPSAhMTtcbiAgICBudWxsICE9PSBwYXJlbnQ7XG5cbiAgKSB7XG4gICAgaWYgKCFpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dClcbiAgICAgIGlmICgwICE9PSAocGFyZW50LmZsYWdzICYgNTI0Mjg4KSkgaXNJbnNpZGVQcm9wYWdhdGlvbkJhaWxvdXQgPSAhMDtcbiAgICAgIGVsc2UgaWYgKDAgIT09IChwYXJlbnQuZmxhZ3MgJiAyNjIxNDQpKSBicmVhaztcbiAgICBpZiAoMTAgPT09IHBhcmVudC50YWcpIHtcbiAgICAgIHZhciBjdXJyZW50UGFyZW50ID0gcGFyZW50LmFsdGVybmF0ZTtcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50UGFyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM4NykpO1xuICAgICAgY3VycmVudFBhcmVudCA9IGN1cnJlbnRQYXJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gcGFyZW50LnR5cGU7XG4gICAgICAgIG9iamVjdElzKHBhcmVudC5wZW5kaW5nUHJvcHMudmFsdWUsIGN1cnJlbnRQYXJlbnQudmFsdWUpIHx8XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50LnB1c2goY29udGV4dCkgOiAoY3VycmVudCA9IFtjb250ZXh0XSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyZW50ID09PSBob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yLmN1cnJlbnQpIHtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuYWx0ZXJuYXRlO1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzg3KSk7XG4gICAgICBjdXJyZW50UGFyZW50Lm1lbW9pemVkU3RhdGUubWVtb2l6ZWRTdGF0ZSAhPT1cbiAgICAgICAgcGFyZW50Lm1lbW9pemVkU3RhdGUubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAobnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgID8gY3VycmVudC5wdXNoKEhvc3RUcmFuc2l0aW9uQ29udGV4dClcbiAgICAgICAgICA6IChjdXJyZW50ID0gW0hvc3RUcmFuc2l0aW9uQ29udGV4dF0pKTtcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgfVxuICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgcHJvcGFnYXRlQ29udGV4dENoYW5nZXMoXG4gICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgIGN1cnJlbnQsXG4gICAgICByZW5kZXJMYW5lcyxcbiAgICAgIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZVxuICAgICk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDI2MjE0NDtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50RGVwZW5kZW5jaWVzKSB7XG4gIGZvciAoXG4gICAgY3VycmVudERlcGVuZGVuY2llcyA9IGN1cnJlbnREZXBlbmRlbmNpZXMuZmlyc3RDb250ZXh0O1xuICAgIG51bGwgIT09IGN1cnJlbnREZXBlbmRlbmNpZXM7XG5cbiAgKSB7XG4gICAgaWYgKFxuICAgICAgIW9iamVjdElzKFxuICAgICAgICBjdXJyZW50RGVwZW5kZW5jaWVzLmNvbnRleHQuX2N1cnJlbnRWYWx1ZSxcbiAgICAgICAgY3VycmVudERlcGVuZGVuY2llcy5tZW1vaXplZFZhbHVlXG4gICAgICApXG4gICAgKVxuICAgICAgcmV0dXJuICEwO1xuICAgIGN1cnJlbnREZXBlbmRlbmNpZXMgPSBjdXJyZW50RGVwZW5kZW5jaWVzLm5leHQ7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSA9IHdvcmtJblByb2dyZXNzO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcztcbiAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MgJiYgKHdvcmtJblByb2dyZXNzLmZpcnN0Q29udGV4dCA9IG51bGwpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHQoY29udGV4dCkge1xuICByZXR1cm4gcmVhZENvbnRleHRGb3JDb25zdW1lcihjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24oY29uc3VtZXIsIGNvbnRleHQpIHtcbiAgbnVsbCA9PT0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSAmJiBwcmVwYXJlVG9SZWFkQ29udGV4dChjb25zdW1lcik7XG4gIHJldHVybiByZWFkQ29udGV4dEZvckNvbnN1bWVyKGNvbnN1bWVyLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHJlYWRDb250ZXh0Rm9yQ29uc3VtZXIoY29uc3VtZXIsIGNvbnRleHQpIHtcbiAgdmFyIHZhbHVlID0gY29udGV4dC5fY3VycmVudFZhbHVlO1xuICBjb250ZXh0ID0geyBjb250ZXh0OiBjb250ZXh0LCBtZW1vaXplZFZhbHVlOiB2YWx1ZSwgbmV4dDogbnVsbCB9O1xuICBpZiAobnVsbCA9PT0gbGFzdENvbnRleHREZXBlbmRlbmN5KSB7XG4gICAgaWYgKG51bGwgPT09IGNvbnN1bWVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwOCkpO1xuICAgIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGNvbnRleHQ7XG4gICAgY29uc3VtZXIuZGVwZW5kZW5jaWVzID0geyBsYW5lczogMCwgZmlyc3RDb250ZXh0OiBjb250ZXh0IH07XG4gICAgY29uc3VtZXIuZmxhZ3MgfD0gNTI0Mjg4O1xuICB9IGVsc2UgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbGFzdENvbnRleHREZXBlbmRlbmN5Lm5leHQgPSBjb250ZXh0O1xuICByZXR1cm4gdmFsdWU7XG59XG52YXIgQWJvcnRDb250cm9sbGVyTG9jYWwgPVxuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBBYm9ydENvbnRyb2xsZXJcbiAgICAgID8gQWJvcnRDb250cm9sbGVyXG4gICAgICA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gW10sXG4gICAgICAgICAgICBzaWduYWwgPSAodGhpcy5zaWduYWwgPSB7XG4gICAgICAgICAgICAgIGFib3J0ZWQ6ICExLFxuICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzaWduYWwuYWJvcnRlZCA9ICEwO1xuICAgICAgICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lcigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgc2NoZWR1bGVDYWxsYmFjayQyID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssXG4gIE5vcm1hbFByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICBDYWNoZUNvbnRleHQgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICBDb25zdW1lcjogbnVsbCxcbiAgICBQcm92aWRlcjogbnVsbCxcbiAgICBfY3VycmVudFZhbHVlOiBudWxsLFxuICAgIF9jdXJyZW50VmFsdWUyOiBudWxsLFxuICAgIF90aHJlYWRDb3VudDogMFxuICB9O1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogbmV3IEFib3J0Q29udHJvbGxlckxvY2FsKCksXG4gICAgZGF0YTogbmV3IE1hcCgpLFxuICAgIHJlZkNvdW50OiAwXG4gIH07XG59XG5mdW5jdGlvbiByZWxlYXNlQ2FjaGUoY2FjaGUpIHtcbiAgY2FjaGUucmVmQ291bnQtLTtcbiAgMCA9PT0gY2FjaGUucmVmQ291bnQgJiZcbiAgICBzY2hlZHVsZUNhbGxiYWNrJDIoTm9ybWFsUHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhY2hlLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB9KTtcbn1cbnZhciBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzID0gbnVsbCxcbiAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCA9IDAsXG4gIGN1cnJlbnRFbnRhbmdsZWRMYW5lID0gMCxcbiAgY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gbnVsbDtcbmZ1bmN0aW9uIGVudGFuZ2xlQXN5bmNBY3Rpb24odHJhbnNpdGlvbiwgdGhlbmFibGUpIHtcbiAgaWYgKG51bGwgPT09IGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMpIHtcbiAgICB2YXIgZW50YW5nbGVkTGlzdGVuZXJzID0gKGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMgPSBbXSk7XG4gICAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCA9IDA7XG4gICAgY3VycmVudEVudGFuZ2xlZExhbmUgPSByZXF1ZXN0VHJhbnNpdGlvbkxhbmUoKTtcbiAgICBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgPSB7XG4gICAgICBzdGF0dXM6IFwicGVuZGluZ1wiLFxuICAgICAgdmFsdWU6IHZvaWQgMCxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGVudGFuZ2xlZExpc3RlbmVycy5wdXNoKHJlc29sdmUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCsrO1xuICB0aGVuYWJsZS50aGVuKHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUsIHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUpO1xuICByZXR1cm4gdGhlbmFibGU7XG59XG5mdW5jdGlvbiBwaW5nRW5ndGFuZ2xlZEFjdGlvblNjb3BlKCkge1xuICBpZiAoXG4gICAgMCA9PT0gLS1jdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ICYmXG4gICAgbnVsbCAhPT0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVyc1xuICApIHtcbiAgICBudWxsICE9PSBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgJiZcbiAgICAgIChjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIik7XG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnM7XG4gICAgY3VycmVudEVudGFuZ2xlZExpc3RlbmVycyA9IG51bGw7XG4gICAgY3VycmVudEVudGFuZ2xlZExhbmUgPSAwO1xuICAgIGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSA9IG51bGw7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspICgwLCBsaXN0ZW5lcnNbaV0pKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNoYWluVGhlbmFibGVWYWx1ZSh0aGVuYWJsZSwgcmVzdWx0KSB7XG4gIHZhciBsaXN0ZW5lcnMgPSBbXSxcbiAgICB0aGVuYWJsZVdpdGhPdmVycmlkZSA9IHtcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIsXG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIHJlYXNvbjogbnVsbCxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKHJlc29sdmUpO1xuICAgICAgfVxuICAgIH07XG4gIHRoZW5hYmxlLnRoZW4oXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnZhbHVlID0gcmVzdWx0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspICgwLCBsaXN0ZW5lcnNbaV0pKHJlc3VsdCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnJlYXNvbiA9IGVycm9yO1xuICAgICAgZm9yIChlcnJvciA9IDA7IGVycm9yIDwgbGlzdGVuZXJzLmxlbmd0aDsgZXJyb3IrKylcbiAgICAgICAgKDAsIGxpc3RlbmVyc1tlcnJvcl0pKHZvaWQgMCk7XG4gICAgfVxuICApO1xuICByZXR1cm4gdGhlbmFibGVXaXRoT3ZlcnJpZGU7XG59XG52YXIgcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcblJlYWN0U2hhcmVkSW50ZXJuYWxzLlMgPSBmdW5jdGlvbiAodHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpIHtcbiAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gICAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuICYmXG4gICAgZW50YW5nbGVBc3luY0FjdGlvbih0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG4gIG51bGwgIT09IHByZXZPblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgIHByZXZPblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCh0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG59O1xudmFyIHJlc3VtZWRDYWNoZSA9IGNyZWF0ZUN1cnNvcihudWxsKTtcbmZ1bmN0aW9uIHBlZWtDYWNoZUZyb21Qb29sKCkge1xuICB2YXIgY2FjaGVSZXN1bWVkRnJvbVByZXZpb3VzUmVuZGVyID0gcmVzdW1lZENhY2hlLmN1cnJlbnQ7XG4gIHJldHVybiBudWxsICE9PSBjYWNoZVJlc3VtZWRGcm9tUHJldmlvdXNSZW5kZXJcbiAgICA/IGNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlclxuICAgIDogd29ya0luUHJvZ3Jlc3NSb290LnBvb2xlZENhY2hlO1xufVxuZnVuY3Rpb24gcHVzaFRyYW5zaXRpb24ob2Zmc2NyZWVuV29ya0luUHJvZ3Jlc3MsIHByZXZDYWNoZVBvb2wpIHtcbiAgbnVsbCA9PT0gcHJldkNhY2hlUG9vbFxuICAgID8gcHVzaChyZXN1bWVkQ2FjaGUsIHJlc3VtZWRDYWNoZS5jdXJyZW50KVxuICAgIDogcHVzaChyZXN1bWVkQ2FjaGUsIHByZXZDYWNoZVBvb2wucG9vbCk7XG59XG5mdW5jdGlvbiBnZXRTdXNwZW5kZWRDYWNoZSgpIHtcbiAgdmFyIGNhY2hlRnJvbVBvb2wgPSBwZWVrQ2FjaGVGcm9tUG9vbCgpO1xuICByZXR1cm4gbnVsbCA9PT0gY2FjaGVGcm9tUG9vbFxuICAgID8gbnVsbFxuICAgIDogeyBwYXJlbnQ6IENhY2hlQ29udGV4dC5fY3VycmVudFZhbHVlLCBwb29sOiBjYWNoZUZyb21Qb29sIH07XG59XG52YXIgU3VzcGVuc2VFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2MCkpLFxuICBTdXNwZW5zZXlDb21taXRFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NCkpLFxuICBTdXNwZW5zZUFjdGlvbkV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTQyKSksXG4gIG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZSA9IHsgdGhlbjogZnVuY3Rpb24gKCkge30gfTtcbmZ1bmN0aW9uIGlzVGhlbmFibGVSZXNvbHZlZCh0aGVuYWJsZSkge1xuICB0aGVuYWJsZSA9IHRoZW5hYmxlLnN0YXR1cztcbiAgcmV0dXJuIFwiZnVsZmlsbGVkXCIgPT09IHRoZW5hYmxlIHx8IFwicmVqZWN0ZWRcIiA9PT0gdGhlbmFibGU7XG59XG5mdW5jdGlvbiBub29wJDMoKSB7fVxuZnVuY3Rpb24gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSwgdGhlbmFibGUsIGluZGV4KSB7XG4gIGluZGV4ID0gdGhlbmFibGVTdGF0ZVtpbmRleF07XG4gIHZvaWQgMCA9PT0gaW5kZXhcbiAgICA/IHRoZW5hYmxlU3RhdGUucHVzaCh0aGVuYWJsZSlcbiAgICA6IGluZGV4ICE9PSB0aGVuYWJsZSAmJiAodGhlbmFibGUudGhlbihub29wJDMsIG5vb3AkMyksICh0aGVuYWJsZSA9IGluZGV4KSk7XG4gIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgdGhyb3cgKFxuICAgICAgICAoKHRoZW5hYmxlU3RhdGUgPSB0aGVuYWJsZS5yZWFzb24pLFxuICAgICAgICBjaGVja0lmVXNlV3JhcHBlZEluQXN5bmNDYXRjaCh0aGVuYWJsZVN0YXRlKSxcbiAgICAgICAgdGhlbmFibGVTdGF0ZSlcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgdGhlbmFibGUuc3RhdHVzKSB0aGVuYWJsZS50aGVuKG5vb3AkMywgbm9vcCQzKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGVuYWJsZVN0YXRlID0gd29ya0luUHJvZ3Jlc3NSb290O1xuICAgICAgICBpZiAobnVsbCAhPT0gdGhlbmFibGVTdGF0ZSAmJiAxMDAgPCB0aGVuYWJsZVN0YXRlLnNoZWxsU3VzcGVuZENvdW50ZXIpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODIpKTtcbiAgICAgICAgdGhlbmFibGVTdGF0ZSA9IHRoZW5hYmxlO1xuICAgICAgICB0aGVuYWJsZVN0YXRlLnN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgICAgICB0aGVuYWJsZVN0YXRlLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKGZ1bGZpbGxlZFZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cykge1xuICAgICAgICAgICAgICB2YXIgZnVsZmlsbGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgICAgICAgICAgZnVsZmlsbGVkVGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgICAgICAgICAgZnVsZmlsbGVkVGhlbmFibGUudmFsdWUgPSBmdWxmaWxsZWRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdmFyIHJlamVjdGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgICAgICAgICAgcmVqZWN0ZWRUaGVuYWJsZS5zdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgICAgICAgIHJlamVjdGVkVGhlbmFibGUucmVhc29uID0gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSBcImZ1bGZpbGxlZFwiOlxuICAgICAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICAgICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICAgICAgdGhyb3cgKFxuICAgICAgICAgICAgKCh0aGVuYWJsZVN0YXRlID0gdGhlbmFibGUucmVhc29uKSxcbiAgICAgICAgICAgIGNoZWNrSWZVc2VXcmFwcGVkSW5Bc3luY0NhdGNoKHRoZW5hYmxlU3RhdGUpLFxuICAgICAgICAgICAgdGhlbmFibGVTdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgc3VzcGVuZGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgIHRocm93IFN1c3BlbnNlRXhjZXB0aW9uO1xuICB9XG59XG52YXIgc3VzcGVuZGVkVGhlbmFibGUgPSBudWxsO1xuZnVuY3Rpb24gZ2V0U3VzcGVuZGVkVGhlbmFibGUoKSB7XG4gIGlmIChudWxsID09PSBzdXNwZW5kZWRUaGVuYWJsZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTkpKTtcbiAgdmFyIHRoZW5hYmxlID0gc3VzcGVuZGVkVGhlbmFibGU7XG4gIHN1c3BlbmRlZFRoZW5hYmxlID0gbnVsbDtcbiAgcmV0dXJuIHRoZW5hYmxlO1xufVxuZnVuY3Rpb24gY2hlY2tJZlVzZVdyYXBwZWRJbkFzeW5jQ2F0Y2gocmVqZWN0ZWRSZWFzb24pIHtcbiAgaWYgKFxuICAgIHJlamVjdGVkUmVhc29uID09PSBTdXNwZW5zZUV4Y2VwdGlvbiB8fFxuICAgIHJlamVjdGVkUmVhc29uID09PSBTdXNwZW5zZUFjdGlvbkV4Y2VwdGlvblxuICApXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODMpKTtcbn1cbnZhciBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuZnVuY3Rpb24gaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKGZpYmVyKSB7XG4gIGZpYmVyLnVwZGF0ZVF1ZXVlID0ge1xuICAgIGJhc2VTdGF0ZTogZmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICBmaXJzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgbGFzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgc2hhcmVkOiB7IHBlbmRpbmc6IG51bGwsIGxhbmVzOiAwLCBoaWRkZW5DYWxsYmFja3M6IG51bGwgfSxcbiAgICBjYWxsYmFja3M6IG51bGxcbiAgfTtcbn1cbmZ1bmN0aW9uIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID09PSBjdXJyZW50ICYmXG4gICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0ge1xuICAgICAgYmFzZVN0YXRlOiBjdXJyZW50LmJhc2VTdGF0ZSxcbiAgICAgIGZpcnN0QmFzZVVwZGF0ZTogY3VycmVudC5maXJzdEJhc2VVcGRhdGUsXG4gICAgICBsYXN0QmFzZVVwZGF0ZTogY3VycmVudC5sYXN0QmFzZVVwZGF0ZSxcbiAgICAgIHNoYXJlZDogY3VycmVudC5zaGFyZWQsXG4gICAgICBjYWxsYmFja3M6IG51bGxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZShsYW5lKSB7XG4gIHJldHVybiB7IGxhbmU6IGxhbmUsIHRhZzogMCwgcGF5bG9hZDogbnVsbCwgY2FsbGJhY2s6IG51bGwsIG5leHQ6IG51bGwgfTtcbn1cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoZmliZXIsIHVwZGF0ZSwgbGFuZSkge1xuICB2YXIgdXBkYXRlUXVldWUgPSBmaWJlci51cGRhdGVRdWV1ZTtcbiAgaWYgKG51bGwgPT09IHVwZGF0ZVF1ZXVlKSByZXR1cm4gbnVsbDtcbiAgdXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZS5zaGFyZWQ7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpKSB7XG4gICAgdmFyIHBlbmRpbmcgPSB1cGRhdGVRdWV1ZS5wZW5kaW5nO1xuICAgIG51bGwgPT09IHBlbmRpbmdcbiAgICAgID8gKHVwZGF0ZS5uZXh0ID0gdXBkYXRlKVxuICAgICAgOiAoKHVwZGF0ZS5uZXh0ID0gcGVuZGluZy5uZXh0KSwgKHBlbmRpbmcubmV4dCA9IHVwZGF0ZSkpO1xuICAgIHVwZGF0ZVF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG4gICAgdXBkYXRlID0gZ2V0Um9vdEZvclVwZGF0ZWRGaWJlcihmaWJlcik7XG4gICAgbWFya1VwZGF0ZUxhbmVGcm9tRmliZXJUb1Jvb3QoZmliZXIsIG51bGwsIGxhbmUpO1xuICAgIHJldHVybiB1cGRhdGU7XG4gIH1cbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCB1cGRhdGVRdWV1ZSwgdXBkYXRlLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gZW50YW5nbGVUcmFuc2l0aW9ucyhyb290LCBmaWJlciwgbGFuZSkge1xuICBmaWJlciA9IGZpYmVyLnVwZGF0ZVF1ZXVlO1xuICBpZiAobnVsbCAhPT0gZmliZXIgJiYgKChmaWJlciA9IGZpYmVyLnNoYXJlZCksIDAgIT09IChsYW5lICYgNDE5NDA0OCkpKSB7XG4gICAgdmFyIHF1ZXVlTGFuZXMgPSBmaWJlci5sYW5lcztcbiAgICBxdWV1ZUxhbmVzICY9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAgIGxhbmUgfD0gcXVldWVMYW5lcztcbiAgICBmaWJlci5sYW5lcyA9IGxhbmU7XG4gICAgbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgbGFuZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVucXVldWVDYXB0dXJlZFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgY2FwdHVyZWRVcGRhdGUpIHtcbiAgdmFyIHF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUsXG4gICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcbiAgaWYgKFxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSwgcXVldWUgPT09IGN1cnJlbnQpXG4gICkge1xuICAgIHZhciBuZXdGaXJzdCA9IG51bGwsXG4gICAgICBuZXdMYXN0ID0gbnVsbDtcbiAgICBxdWV1ZSA9IHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZTtcbiAgICBpZiAobnVsbCAhPT0gcXVldWUpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIGNsb25lID0ge1xuICAgICAgICAgIGxhbmU6IHF1ZXVlLmxhbmUsXG4gICAgICAgICAgdGFnOiBxdWV1ZS50YWcsXG4gICAgICAgICAgcGF5bG9hZDogcXVldWUucGF5bG9hZCxcbiAgICAgICAgICBjYWxsYmFjazogbnVsbCxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIG51bGwgPT09IG5ld0xhc3RcbiAgICAgICAgICA/IChuZXdGaXJzdCA9IG5ld0xhc3QgPSBjbG9uZSlcbiAgICAgICAgICA6IChuZXdMYXN0ID0gbmV3TGFzdC5uZXh0ID0gY2xvbmUpO1xuICAgICAgICBxdWV1ZSA9IHF1ZXVlLm5leHQ7XG4gICAgICB9IHdoaWxlIChudWxsICE9PSBxdWV1ZSk7XG4gICAgICBudWxsID09PSBuZXdMYXN0XG4gICAgICAgID8gKG5ld0ZpcnN0ID0gbmV3TGFzdCA9IGNhcHR1cmVkVXBkYXRlKVxuICAgICAgICA6IChuZXdMYXN0ID0gbmV3TGFzdC5uZXh0ID0gY2FwdHVyZWRVcGRhdGUpO1xuICAgIH0gZWxzZSBuZXdGaXJzdCA9IG5ld0xhc3QgPSBjYXB0dXJlZFVwZGF0ZTtcbiAgICBxdWV1ZSA9IHtcbiAgICAgIGJhc2VTdGF0ZTogY3VycmVudC5iYXNlU3RhdGUsXG4gICAgICBmaXJzdEJhc2VVcGRhdGU6IG5ld0ZpcnN0LFxuICAgICAgbGFzdEJhc2VVcGRhdGU6IG5ld0xhc3QsXG4gICAgICBzaGFyZWQ6IGN1cnJlbnQuc2hhcmVkLFxuICAgICAgY2FsbGJhY2tzOiBjdXJyZW50LmNhbGxiYWNrc1xuICAgIH07XG4gICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBxdWV1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgd29ya0luUHJvZ3Jlc3MgPSBxdWV1ZS5sYXN0QmFzZVVwZGF0ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NcbiAgICA/IChxdWV1ZS5maXJzdEJhc2VVcGRhdGUgPSBjYXB0dXJlZFVwZGF0ZSlcbiAgICA6ICh3b3JrSW5Qcm9ncmVzcy5uZXh0ID0gY2FwdHVyZWRVcGRhdGUpO1xuICBxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGNhcHR1cmVkVXBkYXRlO1xufVxudmFyIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24gPSAhMTtcbmZ1bmN0aW9uIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKSB7XG4gIGlmIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKSB7XG4gICAgdmFyIGVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlO1xuICAgIGlmIChudWxsICE9PSBlbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSkgdGhyb3cgZW50YW5nbGVkQWN0aW9uVGhlbmFibGU7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb2Nlc3NVcGRhdGVRdWV1ZShcbiAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAsXG4gIHByb3BzLFxuICBpbnN0YW5jZSRqc2NvbXAkMCxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITE7XG4gIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzJGpzY29tcCQwLnVwZGF0ZVF1ZXVlO1xuICBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuICB2YXIgZmlyc3RCYXNlVXBkYXRlID0gcXVldWUuZmlyc3RCYXNlVXBkYXRlLFxuICAgIGxhc3RCYXNlVXBkYXRlID0gcXVldWUubGFzdEJhc2VVcGRhdGUsXG4gICAgcGVuZGluZ1F1ZXVlID0gcXVldWUuc2hhcmVkLnBlbmRpbmc7XG4gIGlmIChudWxsICE9PSBwZW5kaW5nUXVldWUpIHtcbiAgICBxdWV1ZS5zaGFyZWQucGVuZGluZyA9IG51bGw7XG4gICAgdmFyIGxhc3RQZW5kaW5nVXBkYXRlID0gcGVuZGluZ1F1ZXVlLFxuICAgICAgZmlyc3RQZW5kaW5nVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUubmV4dDtcbiAgICBsYXN0UGVuZGluZ1VwZGF0ZS5uZXh0ID0gbnVsbDtcbiAgICBudWxsID09PSBsYXN0QmFzZVVwZGF0ZVxuICAgICAgPyAoZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlKVxuICAgICAgOiAobGFzdEJhc2VVcGRhdGUubmV4dCA9IGZpcnN0UGVuZGluZ1VwZGF0ZSk7XG4gICAgbGFzdEJhc2VVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZTtcbiAgICB2YXIgY3VycmVudCA9IHdvcmtJblByb2dyZXNzJGpzY29tcCQwLmFsdGVybmF0ZTtcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgIChwZW5kaW5nUXVldWUgPSBjdXJyZW50Lmxhc3RCYXNlVXBkYXRlKSxcbiAgICAgIHBlbmRpbmdRdWV1ZSAhPT0gbGFzdEJhc2VVcGRhdGUgJiZcbiAgICAgICAgKG51bGwgPT09IHBlbmRpbmdRdWV1ZVxuICAgICAgICAgID8gKGN1cnJlbnQuZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlKVxuICAgICAgICAgIDogKHBlbmRpbmdRdWV1ZS5uZXh0ID0gZmlyc3RQZW5kaW5nVXBkYXRlKSxcbiAgICAgICAgKGN1cnJlbnQubGFzdEJhc2VVcGRhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZSkpKTtcbiAgfVxuICBpZiAobnVsbCAhPT0gZmlyc3RCYXNlVXBkYXRlKSB7XG4gICAgdmFyIG5ld1N0YXRlID0gcXVldWUuYmFzZVN0YXRlO1xuICAgIGxhc3RCYXNlVXBkYXRlID0gMDtcbiAgICBjdXJyZW50ID0gZmlyc3RQZW5kaW5nVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUgPSBudWxsO1xuICAgIHBlbmRpbmdRdWV1ZSA9IGZpcnN0QmFzZVVwZGF0ZTtcbiAgICBkbyB7XG4gICAgICB2YXIgdXBkYXRlTGFuZSA9IHBlbmRpbmdRdWV1ZS5sYW5lICYgLTUzNjg3MDkxMyxcbiAgICAgICAgaXNIaWRkZW5VcGRhdGUgPSB1cGRhdGVMYW5lICE9PSBwZW5kaW5nUXVldWUubGFuZTtcbiAgICAgIGlmIChcbiAgICAgICAgaXNIaWRkZW5VcGRhdGVcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICAgICAgOiAocmVuZGVyTGFuZXMgJiB1cGRhdGVMYW5lKSA9PT0gdXBkYXRlTGFuZVxuICAgICAgKSB7XG4gICAgICAgIDAgIT09IHVwZGF0ZUxhbmUgJiZcbiAgICAgICAgICB1cGRhdGVMYW5lID09PSBjdXJyZW50RW50YW5nbGVkTGFuZSAmJlxuICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITApO1xuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50Lm5leHQgPVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsYW5lOiAwLFxuICAgICAgICAgICAgICB0YWc6IHBlbmRpbmdRdWV1ZS50YWcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHBlbmRpbmdRdWV1ZS5wYXlsb2FkLFxuICAgICAgICAgICAgICBjYWxsYmFjazogbnVsbCxcbiAgICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIGE6IHtcbiAgICAgICAgICB2YXIgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMCxcbiAgICAgICAgICAgIHVwZGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgICAgICAgICB1cGRhdGVMYW5lID0gcHJvcHM7XG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2UkanNjb21wJDA7XG4gICAgICAgICAgc3dpdGNoICh1cGRhdGUudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gdXBkYXRlLnBheWxvYWQ7XG4gICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIG5ld1N0YXRlID0gd29ya0luUHJvZ3Jlc3MuY2FsbChpbnN0YW5jZSwgbmV3U3RhdGUsIHVwZGF0ZUxhbmUpO1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAtNjU1MzcpIHwgMTI4O1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZS5wYXlsb2FkO1xuICAgICAgICAgICAgICB1cGRhdGVMYW5lID1cbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3b3JrSW5Qcm9ncmVzc1xuICAgICAgICAgICAgICAgICAgPyB3b3JrSW5Qcm9ncmVzcy5jYWxsKGluc3RhbmNlLCBuZXdTdGF0ZSwgdXBkYXRlTGFuZSlcbiAgICAgICAgICAgICAgICAgIDogd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSB1cGRhdGVMYW5lIHx8IHZvaWQgMCA9PT0gdXBkYXRlTGFuZSkgYnJlYWsgYTtcbiAgICAgICAgICAgICAgbmV3U3RhdGUgPSBhc3NpZ24oe30sIG5ld1N0YXRlLCB1cGRhdGVMYW5lKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgaGFzRm9yY2VVcGRhdGUgPSAhMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlTGFuZSA9IHBlbmRpbmdRdWV1ZS5jYWxsYmFjaztcbiAgICAgICAgbnVsbCAhPT0gdXBkYXRlTGFuZSAmJlxuICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MkanNjb21wJDAuZmxhZ3MgfD0gNjQpLFxuICAgICAgICAgIGlzSGlkZGVuVXBkYXRlICYmICh3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5mbGFncyB8PSA4MTkyKSxcbiAgICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSBxdWV1ZS5jYWxsYmFja3MpLFxuICAgICAgICAgIG51bGwgPT09IGlzSGlkZGVuVXBkYXRlXG4gICAgICAgICAgICA/IChxdWV1ZS5jYWxsYmFja3MgPSBbdXBkYXRlTGFuZV0pXG4gICAgICAgICAgICA6IGlzSGlkZGVuVXBkYXRlLnB1c2godXBkYXRlTGFuZSkpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIChpc0hpZGRlblVwZGF0ZSA9IHtcbiAgICAgICAgICBsYW5lOiB1cGRhdGVMYW5lLFxuICAgICAgICAgIHRhZzogcGVuZGluZ1F1ZXVlLnRhZyxcbiAgICAgICAgICBwYXlsb2FkOiBwZW5kaW5nUXVldWUucGF5bG9hZCxcbiAgICAgICAgICBjYWxsYmFjazogcGVuZGluZ1F1ZXVlLmNhbGxiYWNrLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfSksXG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgICAgPyAoKGZpcnN0UGVuZGluZ1VwZGF0ZSA9IGN1cnJlbnQgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgICAgIChsYXN0UGVuZGluZ1VwZGF0ZSA9IG5ld1N0YXRlKSlcbiAgICAgICAgICAgIDogKGN1cnJlbnQgPSBjdXJyZW50Lm5leHQgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgKGxhc3RCYXNlVXBkYXRlIHw9IHVwZGF0ZUxhbmUpO1xuICAgICAgcGVuZGluZ1F1ZXVlID0gcGVuZGluZ1F1ZXVlLm5leHQ7XG4gICAgICBpZiAobnVsbCA9PT0gcGVuZGluZ1F1ZXVlKVxuICAgICAgICBpZiAoKChwZW5kaW5nUXVldWUgPSBxdWV1ZS5zaGFyZWQucGVuZGluZyksIG51bGwgPT09IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSBwZW5kaW5nUXVldWUpLFxuICAgICAgICAgICAgKHBlbmRpbmdRdWV1ZSA9IGlzSGlkZGVuVXBkYXRlLm5leHQpLFxuICAgICAgICAgICAgKGlzSGlkZGVuVXBkYXRlLm5leHQgPSBudWxsKSxcbiAgICAgICAgICAgIChxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGlzSGlkZGVuVXBkYXRlKSxcbiAgICAgICAgICAgIChxdWV1ZS5zaGFyZWQucGVuZGluZyA9IG51bGwpO1xuICAgIH0gd2hpbGUgKDEpO1xuICAgIG51bGwgPT09IGN1cnJlbnQgJiYgKGxhc3RQZW5kaW5nVXBkYXRlID0gbmV3U3RhdGUpO1xuICAgIHF1ZXVlLmJhc2VTdGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlO1xuICAgIHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZSA9IGZpcnN0UGVuZGluZ1VwZGF0ZTtcbiAgICBxdWV1ZS5sYXN0QmFzZVVwZGF0ZSA9IGN1cnJlbnQ7XG4gICAgbnVsbCA9PT0gZmlyc3RCYXNlVXBkYXRlICYmIChxdWV1ZS5zaGFyZWQubGFuZXMgPSAwKTtcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gbGFzdEJhc2VVcGRhdGU7XG4gICAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAubGFuZXMgPSBsYXN0QmFzZVVwZGF0ZTtcbiAgICB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGU7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxDYWxsYmFjayhjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY2FsbGJhY2spXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxOTEsIGNhbGxiYWNrKSk7XG4gIGNhbGxiYWNrLmNhbGwoY29udGV4dCk7XG59XG5mdW5jdGlvbiBjb21taXRDYWxsYmFja3ModXBkYXRlUXVldWUsIGNvbnRleHQpIHtcbiAgdmFyIGNhbGxiYWNrcyA9IHVwZGF0ZVF1ZXVlLmNhbGxiYWNrcztcbiAgaWYgKG51bGwgIT09IGNhbGxiYWNrcylcbiAgICBmb3IgKFxuICAgICAgdXBkYXRlUXVldWUuY2FsbGJhY2tzID0gbnVsbCwgdXBkYXRlUXVldWUgPSAwO1xuICAgICAgdXBkYXRlUXVldWUgPCBjYWxsYmFja3MubGVuZ3RoO1xuICAgICAgdXBkYXRlUXVldWUrK1xuICAgIClcbiAgICAgIGNhbGxDYWxsYmFjayhjYWxsYmFja3NbdXBkYXRlUXVldWVdLCBjb250ZXh0KTtcbn1cbnZhciBjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICBwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IgPSBjcmVhdGVDdXJzb3IoMCk7XG5mdW5jdGlvbiBwdXNoSGlkZGVuQ29udGV4dChmaWJlciwgY29udGV4dCkge1xuICBmaWJlciA9IGVudGFuZ2xlZFJlbmRlckxhbmVzO1xuICBwdXNoKHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvciwgZmliZXIpO1xuICBwdXNoKGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IsIGNvbnRleHQpO1xuICBlbnRhbmdsZWRSZW5kZXJMYW5lcyA9IGZpYmVyIHwgY29udGV4dC5iYXNlTGFuZXM7XG59XG5mdW5jdGlvbiByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCkge1xuICBwdXNoKHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvciwgZW50YW5nbGVkUmVuZGVyTGFuZXMpO1xuICBwdXNoKGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IsIGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IuY3VycmVudCk7XG59XG5mdW5jdGlvbiBwb3BIaWRkZW5Db250ZXh0KCkge1xuICBlbnRhbmdsZWRSZW5kZXJMYW5lcyA9IHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvci5jdXJyZW50O1xuICBwb3AoY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvcik7XG4gIHBvcChwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IpO1xufVxudmFyIHJlbmRlckxhbmVzID0gMCxcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsLFxuICBjdXJyZW50SG9vayA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzSG9vayA9IG51bGwsXG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSAhMSxcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gITEsXG4gIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWID0gITEsXG4gIGxvY2FsSWRDb3VudGVyID0gMCxcbiAgdGhlbmFibGVJbmRleENvdW50ZXIkMSA9IDAsXG4gIHRoZW5hYmxlU3RhdGUkMSA9IG51bGwsXG4gIGdsb2JhbENsaWVudElkQ291bnRlciA9IDA7XG5mdW5jdGlvbiB0aHJvd0ludmFsaWRIb29rRXJyb3IoKSB7XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzIxKSk7XG59XG5mdW5jdGlvbiBhcmVIb29rSW5wdXRzRXF1YWwobmV4dERlcHMsIHByZXZEZXBzKSB7XG4gIGlmIChudWxsID09PSBwcmV2RGVwcykgcmV0dXJuICExO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZXZEZXBzLmxlbmd0aCAmJiBpIDwgbmV4dERlcHMubGVuZ3RoOyBpKyspXG4gICAgaWYgKCFvYmplY3RJcyhuZXh0RGVwc1tpXSwgcHJldkRlcHNbaV0pKSByZXR1cm4gITE7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIHJlbmRlcldpdGhIb29rcyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgcHJvcHMsXG4gIHNlY29uZEFyZyxcbiAgbmV4dFJlbmRlckxhbmVzXG4pIHtcbiAgcmVuZGVyTGFuZXMgPSBuZXh0UmVuZGVyTGFuZXM7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gd29ya0luUHJvZ3Jlc3M7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzLmxhbmVzID0gMDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9XG4gICAgbnVsbCA9PT0gY3VycmVudCB8fCBudWxsID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGVcbiAgICAgID8gSG9va3NEaXNwYXRjaGVyT25Nb3VudFxuICAgICAgOiBIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZTtcbiAgc2hvdWxkRG91YmxlSW52b2tlVXNlckZuc0luSG9va3NERVYgPSAhMTtcbiAgbmV4dFJlbmRlckxhbmVzID0gQ29tcG9uZW50KHByb3BzLCBzZWNvbmRBcmcpO1xuICBzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFViA9ICExO1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgJiZcbiAgICAobmV4dFJlbmRlckxhbmVzID0gcmVuZGVyV2l0aEhvb2tzQWdhaW4oXG4gICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgIENvbXBvbmVudCxcbiAgICAgIHByb3BzLFxuICAgICAgc2Vjb25kQXJnXG4gICAgKSk7XG4gIGZpbmlzaFJlbmRlcmluZ0hvb2tzKGN1cnJlbnQpO1xuICByZXR1cm4gbmV4dFJlbmRlckxhbmVzO1xufVxuZnVuY3Rpb24gZmluaXNoUmVuZGVyaW5nSG9va3MoY3VycmVudCkge1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gQ29udGV4dE9ubHlEaXNwYXRjaGVyO1xuICB2YXIgZGlkUmVuZGVyVG9vRmV3SG9va3MgPSBudWxsICE9PSBjdXJyZW50SG9vayAmJiBudWxsICE9PSBjdXJyZW50SG9vay5uZXh0O1xuICByZW5kZXJMYW5lcyA9IDA7XG4gIHdvcmtJblByb2dyZXNzSG9vayA9IGN1cnJlbnRIb29rID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsO1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gITE7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwO1xuICB0aGVuYWJsZVN0YXRlJDEgPSBudWxsO1xuICBpZiAoZGlkUmVuZGVyVG9vRmV3SG9va3MpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzAwKSk7XG4gIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICBkaWRSZWNlaXZlVXBkYXRlIHx8XG4gICAgKChjdXJyZW50ID0gY3VycmVudC5kZXBlbmRlbmNpZXMpLFxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50KSAmJlxuICAgICAgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCkpO1xufVxuZnVuY3Rpb24gcmVuZGVyV2l0aEhvb2tzQWdhaW4od29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcHJvcHMsIHNlY29uZEFyZykge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IHdvcmtJblByb2dyZXNzO1xuICB2YXIgbnVtYmVyT2ZSZVJlbmRlcnMgPSAwO1xuICBkbyB7XG4gICAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzICYmICh0aGVuYWJsZVN0YXRlJDEgPSBudWxsKTtcbiAgICB0aGVuYWJsZUluZGV4Q291bnRlciQxID0gMDtcbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSAhMTtcbiAgICBpZiAoMjUgPD0gbnVtYmVyT2ZSZVJlbmRlcnMpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzAxKSk7XG4gICAgbnVtYmVyT2ZSZVJlbmRlcnMgKz0gMTtcbiAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50SG9vayA9IG51bGw7XG4gICAgaWYgKG51bGwgIT0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlO1xuICAgICAgY2hpbGRyZW4ubGFzdEVmZmVjdCA9IG51bGw7XG4gICAgICBjaGlsZHJlbi5ldmVudHMgPSBudWxsO1xuICAgICAgY2hpbGRyZW4uc3RvcmVzID0gbnVsbDtcbiAgICAgIG51bGwgIT0gY2hpbGRyZW4ubWVtb0NhY2hlICYmIChjaGlsZHJlbi5tZW1vQ2FjaGUuaW5kZXggPSAwKTtcbiAgICB9XG4gICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXI7XG4gICAgY2hpbGRyZW4gPSBDb21wb25lbnQocHJvcHMsIHNlY29uZEFyZyk7XG4gIH0gd2hpbGUgKGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIFRyYW5zaXRpb25Bd2FyZUhvc3RDb21wb25lbnQoKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCxcbiAgICBtYXliZVRoZW5hYmxlID0gZGlzcGF0Y2hlci51c2VTdGF0ZSgpWzBdO1xuICBtYXliZVRoZW5hYmxlID1cbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZVRoZW5hYmxlLnRoZW5cbiAgICAgID8gdXNlVGhlbmFibGUobWF5YmVUaGVuYWJsZSlcbiAgICAgIDogbWF5YmVUaGVuYWJsZTtcbiAgZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXIudXNlU3RhdGUoKVswXTtcbiAgKG51bGwgIT09IGN1cnJlbnRIb29rID8gY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSA6IG51bGwpICE9PSBkaXNwYXRjaGVyICYmXG4gICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmZsYWdzIHw9IDEwMjQpO1xuICByZXR1cm4gbWF5YmVUaGVuYWJsZTtcbn1cbmZ1bmN0aW9uIGNoZWNrRGlkUmVuZGVySWRIb29rKCkge1xuICB2YXIgZGlkUmVuZGVySWRIb29rID0gMCAhPT0gbG9jYWxJZENvdW50ZXI7XG4gIGxvY2FsSWRDb3VudGVyID0gMDtcbiAgcmV0dXJuIGRpZFJlbmRlcklkSG9vaztcbn1cbmZ1bmN0aW9uIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbGFuZXMpIHtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMjA1MztcbiAgY3VycmVudC5sYW5lcyAmPSB+bGFuZXM7XG59XG5mdW5jdGlvbiByZXNldEhvb2tzT25VbndpbmQod29ya0luUHJvZ3Jlc3MpIHtcbiAgaWYgKGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUpIHtcbiAgICBmb3IgKFxuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3M7XG5cbiAgICApIHtcbiAgICAgIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzLnF1ZXVlO1xuICAgICAgbnVsbCAhPT0gcXVldWUgJiYgKHF1ZXVlLnBlbmRpbmcgPSBudWxsKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3MubmV4dDtcbiAgICB9XG4gICAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9ICExO1xuICB9XG4gIHJlbmRlckxhbmVzID0gMDtcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gY3VycmVudEhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGw7XG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyA9ICExO1xuICB0aGVuYWJsZUluZGV4Q291bnRlciQxID0gbG9jYWxJZENvdW50ZXIgPSAwO1xuICB0aGVuYWJsZVN0YXRlJDEgPSBudWxsO1xufVxuZnVuY3Rpb24gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKSB7XG4gIHZhciBob29rID0ge1xuICAgIG1lbW9pemVkU3RhdGU6IG51bGwsXG4gICAgYmFzZVN0YXRlOiBudWxsLFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgID8gKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLm1lbW9pemVkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBob29rKVxuICAgIDogKHdvcmtJblByb2dyZXNzSG9vayA9IHdvcmtJblByb2dyZXNzSG9vay5uZXh0ID0gaG9vayk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0hvb2s7XG59XG5mdW5jdGlvbiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKSB7XG4gIGlmIChudWxsID09PSBjdXJyZW50SG9vaykge1xuICAgIHZhciBuZXh0Q3VycmVudEhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5hbHRlcm5hdGU7XG4gICAgbmV4dEN1cnJlbnRIb29rID1cbiAgICAgIG51bGwgIT09IG5leHRDdXJyZW50SG9vayA/IG5leHRDdXJyZW50SG9vay5tZW1vaXplZFN0YXRlIDogbnVsbDtcbiAgfSBlbHNlIG5leHRDdXJyZW50SG9vayA9IGN1cnJlbnRIb29rLm5leHQ7XG4gIHZhciBuZXh0V29ya0luUHJvZ3Jlc3NIb29rID1cbiAgICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICAgID8gY3VycmVudGx5UmVuZGVyaW5nRmliZXIubWVtb2l6ZWRTdGF0ZVxuICAgICAgOiB3b3JrSW5Qcm9ncmVzc0hvb2submV4dDtcbiAgaWYgKG51bGwgIT09IG5leHRXb3JrSW5Qcm9ncmVzc0hvb2spXG4gICAgKHdvcmtJblByb2dyZXNzSG9vayA9IG5leHRXb3JrSW5Qcm9ncmVzc0hvb2spLFxuICAgICAgKGN1cnJlbnRIb29rID0gbmV4dEN1cnJlbnRIb29rKTtcbiAgZWxzZSB7XG4gICAgaWYgKG51bGwgPT09IG5leHRDdXJyZW50SG9vaykge1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmFsdGVybmF0ZSlcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjcpKTtcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzEwKSk7XG4gICAgfVxuICAgIGN1cnJlbnRIb29rID0gbmV4dEN1cnJlbnRIb29rO1xuICAgIG5leHRDdXJyZW50SG9vayA9IHtcbiAgICAgIG1lbW9pemVkU3RhdGU6IGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUsXG4gICAgICBiYXNlU3RhdGU6IGN1cnJlbnRIb29rLmJhc2VTdGF0ZSxcbiAgICAgIGJhc2VRdWV1ZTogY3VycmVudEhvb2suYmFzZVF1ZXVlLFxuICAgICAgcXVldWU6IGN1cnJlbnRIb29rLnF1ZXVlLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NIb29rXG4gICAgICA/IChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5tZW1vaXplZFN0YXRlID0gd29ya0luUHJvZ3Jlc3NIb29rID1cbiAgICAgICAgICBuZXh0Q3VycmVudEhvb2spXG4gICAgICA6ICh3b3JrSW5Qcm9ncmVzc0hvb2sgPSB3b3JrSW5Qcm9ncmVzc0hvb2submV4dCA9IG5leHRDdXJyZW50SG9vayk7XG4gIH1cbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzSG9vaztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKSB7XG4gIHJldHVybiB7IGxhc3RFZmZlY3Q6IG51bGwsIGV2ZW50czogbnVsbCwgc3RvcmVzOiBudWxsLCBtZW1vQ2FjaGU6IG51bGwgfTtcbn1cbmZ1bmN0aW9uIHVzZVRoZW5hYmxlKHRoZW5hYmxlKSB7XG4gIHZhciBpbmRleCA9IHRoZW5hYmxlSW5kZXhDb3VudGVyJDE7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgKz0gMTtcbiAgbnVsbCA9PT0gdGhlbmFibGVTdGF0ZSQxICYmICh0aGVuYWJsZVN0YXRlJDEgPSBbXSk7XG4gIHRoZW5hYmxlID0gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSQxLCB0aGVuYWJsZSwgaW5kZXgpO1xuICBpbmRleCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyO1xuICBudWxsID09PVxuICAgIChudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICAgID8gaW5kZXgubWVtb2l6ZWRTdGF0ZVxuICAgICAgOiB3b3JrSW5Qcm9ncmVzc0hvb2submV4dCkgJiZcbiAgICAoKGluZGV4ID0gaW5kZXguYWx0ZXJuYXRlKSxcbiAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9XG4gICAgICBudWxsID09PSBpbmRleCB8fCBudWxsID09PSBpbmRleC5tZW1vaXplZFN0YXRlXG4gICAgICAgID8gSG9va3NEaXNwYXRjaGVyT25Nb3VudFxuICAgICAgICA6IEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlKSk7XG4gIHJldHVybiB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIHVzZSh1c2FibGUpIHtcbiAgaWYgKG51bGwgIT09IHVzYWJsZSAmJiBcIm9iamVjdFwiID09PSB0eXBlb2YgdXNhYmxlKSB7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVzYWJsZS50aGVuKSByZXR1cm4gdXNlVGhlbmFibGUodXNhYmxlKTtcbiAgICBpZiAodXNhYmxlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUpIHJldHVybiByZWFkQ29udGV4dCh1c2FibGUpO1xuICB9XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDM4LCBTdHJpbmcodXNhYmxlKSkpO1xufVxuZnVuY3Rpb24gdXNlTWVtb0NhY2hlKHNpemUpIHtcbiAgdmFyIG1lbW9DYWNoZSA9IG51bGwsXG4gICAgdXBkYXRlUXVldWUgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlci51cGRhdGVRdWV1ZTtcbiAgbnVsbCAhPT0gdXBkYXRlUXVldWUgJiYgKG1lbW9DYWNoZSA9IHVwZGF0ZVF1ZXVlLm1lbW9DYWNoZSk7XG4gIGlmIChudWxsID09IG1lbW9DYWNoZSkge1xuICAgIHZhciBjdXJyZW50ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIuYWx0ZXJuYXRlO1xuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICgoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLFxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAoKGN1cnJlbnQgPSBjdXJyZW50Lm1lbW9DYWNoZSksXG4gICAgICAgIG51bGwgIT0gY3VycmVudCAmJlxuICAgICAgICAgIChtZW1vQ2FjaGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBjdXJyZW50LmRhdGEubWFwKGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgICAgICAgICByZXR1cm4gYXJyYXkuc2xpY2UoKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW5kZXg6IDBcbiAgICAgICAgICB9KSkpO1xuICB9XG4gIG51bGwgPT0gbWVtb0NhY2hlICYmIChtZW1vQ2FjaGUgPSB7IGRhdGE6IFtdLCBpbmRleDogMCB9KTtcbiAgbnVsbCA9PT0gdXBkYXRlUXVldWUgJiZcbiAgICAoKHVwZGF0ZVF1ZXVlID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIudXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZSkpO1xuICB1cGRhdGVRdWV1ZS5tZW1vQ2FjaGUgPSBtZW1vQ2FjaGU7XG4gIHVwZGF0ZVF1ZXVlID0gbWVtb0NhY2hlLmRhdGFbbWVtb0NhY2hlLmluZGV4XTtcbiAgaWYgKHZvaWQgMCA9PT0gdXBkYXRlUXVldWUpXG4gICAgZm9yIChcbiAgICAgIHVwZGF0ZVF1ZXVlID0gbWVtb0NhY2hlLmRhdGFbbWVtb0NhY2hlLmluZGV4XSA9IEFycmF5KHNpemUpLCBjdXJyZW50ID0gMDtcbiAgICAgIGN1cnJlbnQgPCBzaXplO1xuICAgICAgY3VycmVudCsrXG4gICAgKVxuICAgICAgdXBkYXRlUXVldWVbY3VycmVudF0gPSBSRUFDVF9NRU1PX0NBQ0hFX1NFTlRJTkVMO1xuICBtZW1vQ2FjaGUuaW5kZXgrKztcbiAgcmV0dXJuIHVwZGF0ZVF1ZXVlO1xufVxuZnVuY3Rpb24gYmFzaWNTdGF0ZVJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWN0aW9uID8gYWN0aW9uKHN0YXRlKSA6IGFjdGlvbjtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlZHVjZXIocmVkdWNlcikge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICByZXR1cm4gdXBkYXRlUmVkdWNlckltcGwoaG9vaywgY3VycmVudEhvb2ssIHJlZHVjZXIpO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVkdWNlckltcGwoaG9vaywgY3VycmVudCwgcmVkdWNlcikge1xuICB2YXIgcXVldWUgPSBob29rLnF1ZXVlO1xuICBpZiAobnVsbCA9PT0gcXVldWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzExKSk7XG4gIHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgYmFzZVF1ZXVlID0gaG9vay5iYXNlUXVldWUsXG4gICAgcGVuZGluZ1F1ZXVlID0gcXVldWUucGVuZGluZztcbiAgaWYgKG51bGwgIT09IHBlbmRpbmdRdWV1ZSkge1xuICAgIGlmIChudWxsICE9PSBiYXNlUXVldWUpIHtcbiAgICAgIHZhciBiYXNlRmlyc3QgPSBiYXNlUXVldWUubmV4dDtcbiAgICAgIGJhc2VRdWV1ZS5uZXh0ID0gcGVuZGluZ1F1ZXVlLm5leHQ7XG4gICAgICBwZW5kaW5nUXVldWUubmV4dCA9IGJhc2VGaXJzdDtcbiAgICB9XG4gICAgY3VycmVudC5iYXNlUXVldWUgPSBiYXNlUXVldWUgPSBwZW5kaW5nUXVldWU7XG4gICAgcXVldWUucGVuZGluZyA9IG51bGw7XG4gIH1cbiAgcGVuZGluZ1F1ZXVlID0gaG9vay5iYXNlU3RhdGU7XG4gIGlmIChudWxsID09PSBiYXNlUXVldWUpIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgZWxzZSB7XG4gICAgY3VycmVudCA9IGJhc2VRdWV1ZS5uZXh0O1xuICAgIHZhciBuZXdCYXNlUXVldWVGaXJzdCA9IChiYXNlRmlyc3QgPSBudWxsKSxcbiAgICAgIG5ld0Jhc2VRdWV1ZUxhc3QgPSBudWxsLFxuICAgICAgdXBkYXRlID0gY3VycmVudCxcbiAgICAgIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kMzIgPSAhMTtcbiAgICBkbyB7XG4gICAgICB2YXIgdXBkYXRlTGFuZSA9IHVwZGF0ZS5sYW5lICYgLTUzNjg3MDkxMztcbiAgICAgIGlmIChcbiAgICAgICAgdXBkYXRlTGFuZSAhPT0gdXBkYXRlLmxhbmVcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICAgICAgOiAocmVuZGVyTGFuZXMgJiB1cGRhdGVMYW5lKSA9PT0gdXBkYXRlTGFuZVxuICAgICAgKSB7XG4gICAgICAgIHZhciByZXZlcnRMYW5lID0gdXBkYXRlLnJldmVydExhbmU7XG4gICAgICAgIGlmICgwID09PSByZXZlcnRMYW5lKVxuICAgICAgICAgIG51bGwgIT09IG5ld0Jhc2VRdWV1ZUxhc3QgJiZcbiAgICAgICAgICAgIChuZXdCYXNlUXVldWVMYXN0ID0gbmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID1cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhbmU6IDAsXG4gICAgICAgICAgICAgICAgcmV2ZXJ0TGFuZTogMCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHVwZGF0ZS5hY3Rpb24sXG4gICAgICAgICAgICAgICAgaGFzRWFnZXJTdGF0ZTogdXBkYXRlLmhhc0VhZ2VyU3RhdGUsXG4gICAgICAgICAgICAgICAgZWFnZXJTdGF0ZTogdXBkYXRlLmVhZ2VyU3RhdGUsXG4gICAgICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHVwZGF0ZUxhbmUgPT09IGN1cnJlbnRFbnRhbmdsZWRMYW5lICYmXG4gICAgICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDMyID0gITApO1xuICAgICAgICBlbHNlIGlmICgocmVuZGVyTGFuZXMgJiByZXZlcnRMYW5lKSA9PT0gcmV2ZXJ0TGFuZSkge1xuICAgICAgICAgIHVwZGF0ZSA9IHVwZGF0ZS5uZXh0O1xuICAgICAgICAgIHJldmVydExhbmUgPT09IGN1cnJlbnRFbnRhbmdsZWRMYW5lICYmXG4gICAgICAgICAgICAoZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQzMiA9ICEwKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgKHVwZGF0ZUxhbmUgPSB7XG4gICAgICAgICAgICBsYW5lOiAwLFxuICAgICAgICAgICAgcmV2ZXJ0TGFuZTogdXBkYXRlLnJldmVydExhbmUsXG4gICAgICAgICAgICBhY3Rpb246IHVwZGF0ZS5hY3Rpb24sXG4gICAgICAgICAgICBoYXNFYWdlclN0YXRlOiB1cGRhdGUuaGFzRWFnZXJTdGF0ZSxcbiAgICAgICAgICAgIGVhZ2VyU3RhdGU6IHVwZGF0ZS5lYWdlclN0YXRlLFxuICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgICAgICAgICA/ICgobmV3QmFzZVF1ZXVlRmlyc3QgPSBuZXdCYXNlUXVldWVMYXN0ID0gdXBkYXRlTGFuZSksXG4gICAgICAgICAgICAgICAgKGJhc2VGaXJzdCA9IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgICAgIDogKG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5sYW5lcyB8PSByZXZlcnRMYW5lKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gcmV2ZXJ0TGFuZSk7XG4gICAgICAgIHVwZGF0ZUxhbmUgPSB1cGRhdGUuYWN0aW9uO1xuICAgICAgICBzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFViAmJlxuICAgICAgICAgIHJlZHVjZXIocGVuZGluZ1F1ZXVlLCB1cGRhdGVMYW5lKTtcbiAgICAgICAgcGVuZGluZ1F1ZXVlID0gdXBkYXRlLmhhc0VhZ2VyU3RhdGVcbiAgICAgICAgICA/IHVwZGF0ZS5lYWdlclN0YXRlXG4gICAgICAgICAgOiByZWR1Y2VyKHBlbmRpbmdRdWV1ZSwgdXBkYXRlTGFuZSk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgKHJldmVydExhbmUgPSB7XG4gICAgICAgICAgbGFuZTogdXBkYXRlTGFuZSxcbiAgICAgICAgICByZXZlcnRMYW5lOiB1cGRhdGUucmV2ZXJ0TGFuZSxcbiAgICAgICAgICBhY3Rpb246IHVwZGF0ZS5hY3Rpb24sXG4gICAgICAgICAgaGFzRWFnZXJTdGF0ZTogdXBkYXRlLmhhc0VhZ2VyU3RhdGUsXG4gICAgICAgICAgZWFnZXJTdGF0ZTogdXBkYXRlLmVhZ2VyU3RhdGUsXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9KSxcbiAgICAgICAgICBudWxsID09PSBuZXdCYXNlUXVldWVMYXN0XG4gICAgICAgICAgICA/ICgobmV3QmFzZVF1ZXVlRmlyc3QgPSBuZXdCYXNlUXVldWVMYXN0ID0gcmV2ZXJ0TGFuZSksXG4gICAgICAgICAgICAgIChiYXNlRmlyc3QgPSBwZW5kaW5nUXVldWUpKVxuICAgICAgICAgICAgOiAobmV3QmFzZVF1ZXVlTGFzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QubmV4dCA9IHJldmVydExhbmUpLFxuICAgICAgICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5sYW5lcyB8PSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IHVwZGF0ZUxhbmUpO1xuICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgfSB3aGlsZSAobnVsbCAhPT0gdXBkYXRlICYmIHVwZGF0ZSAhPT0gY3VycmVudCk7XG4gICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgPyAoYmFzZUZpcnN0ID0gcGVuZGluZ1F1ZXVlKVxuICAgICAgOiAobmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID0gbmV3QmFzZVF1ZXVlRmlyc3QpO1xuICAgIGlmIChcbiAgICAgICFvYmplY3RJcyhwZW5kaW5nUXVldWUsIGhvb2subWVtb2l6ZWRTdGF0ZSkgJiZcbiAgICAgICgoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSxcbiAgICAgIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kMzIgJiZcbiAgICAgICAgKChyZWR1Y2VyID0gY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlKSwgbnVsbCAhPT0gcmVkdWNlcikpXG4gICAgKVxuICAgICAgdGhyb3cgcmVkdWNlcjtcbiAgICBob29rLm1lbW9pemVkU3RhdGUgPSBwZW5kaW5nUXVldWU7XG4gICAgaG9vay5iYXNlU3RhdGUgPSBiYXNlRmlyc3Q7XG4gICAgaG9vay5iYXNlUXVldWUgPSBuZXdCYXNlUXVldWVMYXN0O1xuICAgIHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlID0gcGVuZGluZ1F1ZXVlO1xuICB9XG4gIG51bGwgPT09IGJhc2VRdWV1ZSAmJiAocXVldWUubGFuZXMgPSAwKTtcbiAgcmV0dXJuIFtob29rLm1lbW9pemVkU3RhdGUsIHF1ZXVlLmRpc3BhdGNoXTtcbn1cbmZ1bmN0aW9uIHJlcmVuZGVyUmVkdWNlcihyZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgcXVldWUgPSBob29rLnF1ZXVlO1xuICBpZiAobnVsbCA9PT0gcXVldWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzExKSk7XG4gIHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgZGlzcGF0Y2ggPSBxdWV1ZS5kaXNwYXRjaCxcbiAgICBsYXN0UmVuZGVyUGhhc2VVcGRhdGUgPSBxdWV1ZS5wZW5kaW5nLFxuICAgIG5ld1N0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gbGFzdFJlbmRlclBoYXNlVXBkYXRlKSB7XG4gICAgcXVldWUucGVuZGluZyA9IG51bGw7XG4gICAgdmFyIHVwZGF0ZSA9IChsYXN0UmVuZGVyUGhhc2VVcGRhdGUgPSBsYXN0UmVuZGVyUGhhc2VVcGRhdGUubmV4dCk7XG4gICAgZG8gKG5ld1N0YXRlID0gcmVkdWNlcihuZXdTdGF0ZSwgdXBkYXRlLmFjdGlvbikpLCAodXBkYXRlID0gdXBkYXRlLm5leHQpO1xuICAgIHdoaWxlICh1cGRhdGUgIT09IGxhc3RSZW5kZXJQaGFzZVVwZGF0ZSk7XG4gICAgb2JqZWN0SXMobmV3U3RhdGUsIGhvb2subWVtb2l6ZWRTdGF0ZSkgfHwgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCk7XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGU7XG4gICAgbnVsbCA9PT0gaG9vay5iYXNlUXVldWUgJiYgKGhvb2suYmFzZVN0YXRlID0gbmV3U3RhdGUpO1xuICAgIHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlID0gbmV3U3RhdGU7XG4gIH1cbiAgcmV0dXJuIFtuZXdTdGF0ZSwgZGlzcGF0Y2hdO1xufVxuZnVuY3Rpb24gdXBkYXRlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgdmFyIGZpYmVyID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIsXG4gICAgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLFxuICAgIGlzSHlkcmF0aW5nJGpzY29tcCQwID0gaXNIeWRyYXRpbmc7XG4gIGlmIChpc0h5ZHJhdGluZyRqc2NvbXAkMCkge1xuICAgIGlmICh2b2lkIDAgPT09IGdldFNlcnZlclNuYXBzaG90KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQwNykpO1xuICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U2VydmVyU25hcHNob3QoKTtcbiAgfSBlbHNlIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U25hcHNob3QoKTtcbiAgdmFyIHNuYXBzaG90Q2hhbmdlZCA9ICFvYmplY3RJcyhcbiAgICAoY3VycmVudEhvb2sgfHwgaG9vaykubWVtb2l6ZWRTdGF0ZSxcbiAgICBnZXRTZXJ2ZXJTbmFwc2hvdFxuICApO1xuICBzbmFwc2hvdENoYW5nZWQgJiZcbiAgICAoKGhvb2subWVtb2l6ZWRTdGF0ZSA9IGdldFNlcnZlclNuYXBzaG90KSwgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCkpO1xuICBob29rID0gaG9vay5xdWV1ZTtcbiAgdmFyIGNyZWF0ZSA9IHN1YnNjcmliZVRvU3RvcmUuYmluZChudWxsLCBmaWJlciwgaG9vaywgc3Vic2NyaWJlKTtcbiAgdXBkYXRlRWZmZWN0SW1wbCgyMDQ4LCA4LCBjcmVhdGUsIFtzdWJzY3JpYmVdKTtcbiAgaWYgKFxuICAgIGhvb2suZ2V0U25hcHNob3QgIT09IGdldFNuYXBzaG90IHx8XG4gICAgc25hcHNob3RDaGFuZ2VkIHx8XG4gICAgKG51bGwgIT09IHdvcmtJblByb2dyZXNzSG9vayAmJiB3b3JrSW5Qcm9ncmVzc0hvb2subWVtb2l6ZWRTdGF0ZS50YWcgJiAxKVxuICApIHtcbiAgICBmaWJlci5mbGFncyB8PSAyMDQ4O1xuICAgIHB1c2hTaW1wbGVFZmZlY3QoXG4gICAgICA5LFxuICAgICAgY3JlYXRlRWZmZWN0SW5zdGFuY2UoKSxcbiAgICAgIHVwZGF0ZVN0b3JlSW5zdGFuY2UuYmluZChcbiAgICAgICAgbnVsbCxcbiAgICAgICAgZmliZXIsXG4gICAgICAgIGhvb2ssXG4gICAgICAgIGdldFNlcnZlclNuYXBzaG90LFxuICAgICAgICBnZXRTbmFwc2hvdFxuICAgICAgKSxcbiAgICAgIG51bGxcbiAgICApO1xuICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQ5KSk7XG4gICAgaXNIeWRyYXRpbmckanNjb21wJDAgfHxcbiAgICAgIDAgIT09IChyZW5kZXJMYW5lcyAmIDEyNCkgfHxcbiAgICAgIHB1c2hTdG9yZUNvbnNpc3RlbmN5Q2hlY2soZmliZXIsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCk7XG4gIH1cbiAgcmV0dXJuIGdldFNlcnZlclNuYXBzaG90O1xufVxuZnVuY3Rpb24gcHVzaFN0b3JlQ29uc2lzdGVuY3lDaGVjayhmaWJlciwgZ2V0U25hcHNob3QsIHJlbmRlcmVkU25hcHNob3QpIHtcbiAgZmliZXIuZmxhZ3MgfD0gMTYzODQ7XG4gIGZpYmVyID0geyBnZXRTbmFwc2hvdDogZ2V0U25hcHNob3QsIHZhbHVlOiByZW5kZXJlZFNuYXBzaG90IH07XG4gIGdldFNuYXBzaG90ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIudXBkYXRlUXVldWU7XG4gIG51bGwgPT09IGdldFNuYXBzaG90XG4gICAgPyAoKGdldFNuYXBzaG90ID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlci51cGRhdGVRdWV1ZSA9IGdldFNuYXBzaG90KSxcbiAgICAgIChnZXRTbmFwc2hvdC5zdG9yZXMgPSBbZmliZXJdKSlcbiAgICA6ICgocmVuZGVyZWRTbmFwc2hvdCA9IGdldFNuYXBzaG90LnN0b3JlcyksXG4gICAgICBudWxsID09PSByZW5kZXJlZFNuYXBzaG90XG4gICAgICAgID8gKGdldFNuYXBzaG90LnN0b3JlcyA9IFtmaWJlcl0pXG4gICAgICAgIDogcmVuZGVyZWRTbmFwc2hvdC5wdXNoKGZpYmVyKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVTdG9yZUluc3RhbmNlKGZpYmVyLCBpbnN0LCBuZXh0U25hcHNob3QsIGdldFNuYXBzaG90KSB7XG4gIGluc3QudmFsdWUgPSBuZXh0U25hcHNob3Q7XG4gIGluc3QuZ2V0U25hcHNob3QgPSBnZXRTbmFwc2hvdDtcbiAgY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSAmJiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gc3Vic2NyaWJlVG9TdG9yZShmaWJlciwgaW5zdCwgc3Vic2NyaWJlKSB7XG4gIHJldHVybiBzdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xuICAgIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkgJiYgZm9yY2VTdG9yZVJlcmVuZGVyKGZpYmVyKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpIHtcbiAgdmFyIGxhdGVzdEdldFNuYXBzaG90ID0gaW5zdC5nZXRTbmFwc2hvdDtcbiAgaW5zdCA9IGluc3QudmFsdWU7XG4gIHRyeSB7XG4gICAgdmFyIG5leHRWYWx1ZSA9IGxhdGVzdEdldFNuYXBzaG90KCk7XG4gICAgcmV0dXJuICFvYmplY3RJcyhpbnN0LCBuZXh0VmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAhMDtcbiAgfVxufVxuZnVuY3Rpb24gZm9yY2VTdG9yZVJlcmVuZGVyKGZpYmVyKSB7XG4gIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCAyKTtcbiAgbnVsbCAhPT0gcm9vdCAmJiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIDIpO1xufVxuZnVuY3Rpb24gbW91bnRTdGF0ZUltcGwoaW5pdGlhbFN0YXRlKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluaXRpYWxTdGF0ZSkge1xuICAgIHZhciBpbml0aWFsU3RhdGVJbml0aWFsaXplciA9IGluaXRpYWxTdGF0ZTtcbiAgICBpbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGVJbml0aWFsaXplcigpO1xuICAgIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaW5pdGlhbFN0YXRlSW5pdGlhbGl6ZXIoKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIGhvb2sucXVldWUgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBsYW5lczogMCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlXG4gIH07XG4gIHJldHVybiBob29rO1xufVxuZnVuY3Rpb24gdXBkYXRlT3B0aW1pc3RpY0ltcGwoaG9vaywgY3VycmVudCwgcGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgcmV0dXJuIHVwZGF0ZVJlZHVjZXJJbXBsKFxuICAgIGhvb2ssXG4gICAgY3VycmVudEhvb2ssXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVkdWNlciA/IHJlZHVjZXIgOiBiYXNpY1N0YXRlUmVkdWNlclxuICApO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hBY3Rpb25TdGF0ZShcbiAgZmliZXIsXG4gIGFjdGlvblF1ZXVlLFxuICBzZXRQZW5kaW5nU3RhdGUsXG4gIHNldFN0YXRlLFxuICBwYXlsb2FkXG4pIHtcbiAgaWYgKGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ4NSkpO1xuICBmaWJlciA9IGFjdGlvblF1ZXVlLmFjdGlvbjtcbiAgaWYgKG51bGwgIT09IGZpYmVyKSB7XG4gICAgdmFyIGFjdGlvbk5vZGUgPSB7XG4gICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgYWN0aW9uOiBmaWJlcixcbiAgICAgIG5leHQ6IG51bGwsXG4gICAgICBpc1RyYW5zaXRpb246ICEwLFxuICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIixcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgcmVhc29uOiBudWxsLFxuICAgICAgbGlzdGVuZXJzOiBbXSxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBhY3Rpb25Ob2RlLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG51bGwgIT09IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlRcbiAgICAgID8gc2V0UGVuZGluZ1N0YXRlKCEwKVxuICAgICAgOiAoYWN0aW9uTm9kZS5pc1RyYW5zaXRpb24gPSAhMSk7XG4gICAgc2V0U3RhdGUoYWN0aW9uTm9kZSk7XG4gICAgc2V0UGVuZGluZ1N0YXRlID0gYWN0aW9uUXVldWUucGVuZGluZztcbiAgICBudWxsID09PSBzZXRQZW5kaW5nU3RhdGVcbiAgICAgID8gKChhY3Rpb25Ob2RlLm5leHQgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nID0gYWN0aW9uTm9kZSksXG4gICAgICAgIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlKSlcbiAgICAgIDogKChhY3Rpb25Ob2RlLm5leHQgPSBzZXRQZW5kaW5nU3RhdGUubmV4dCksXG4gICAgICAgIChhY3Rpb25RdWV1ZS5wZW5kaW5nID0gc2V0UGVuZGluZ1N0YXRlLm5leHQgPSBhY3Rpb25Ob2RlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBub2RlKSB7XG4gIHZhciBhY3Rpb24gPSBub2RlLmFjdGlvbixcbiAgICBwYXlsb2FkID0gbm9kZS5wYXlsb2FkLFxuICAgIHByZXZTdGF0ZSA9IGFjdGlvblF1ZXVlLnN0YXRlO1xuICBpZiAobm9kZS5pc1RyYW5zaXRpb24pIHtcbiAgICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgICAgY3VycmVudFRyYW5zaXRpb24gPSB7fTtcbiAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gICAgdHJ5IHtcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGFjdGlvbihwcmV2U3RhdGUsIHBheWxvYWQpLFxuICAgICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlM7XG4gICAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaChjdXJyZW50VHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpO1xuICAgICAgaGFuZGxlQWN0aW9uUmV0dXJuVmFsdWUoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgbm9kZSwgZXJyb3IpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb247XG4gICAgfVxuICB9IGVsc2VcbiAgICB0cnkge1xuICAgICAgKHByZXZUcmFuc2l0aW9uID0gYWN0aW9uKHByZXZTdGF0ZSwgcGF5bG9hZCkpLFxuICAgICAgICBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcHJldlRyYW5zaXRpb24pO1xuICAgIH0gY2F0Y2ggKGVycm9yJDM4KSB7XG4gICAgICBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvciQzOCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFuZGxlQWN0aW9uUmV0dXJuVmFsdWUoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKSB7XG4gIG51bGwgIT09IHJldHVyblZhbHVlICYmXG4gIFwib2JqZWN0XCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZSAmJlxuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuXG4gICAgPyByZXR1cm5WYWx1ZS50aGVuKFxuICAgICAgICBmdW5jdGlvbiAobmV4dFN0YXRlKSB7XG4gICAgICAgICAgb25BY3Rpb25TdWNjZXNzKGFjdGlvblF1ZXVlLCBub2RlLCBuZXh0U3RhdGUpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgbm9kZSwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgOiBvbkFjdGlvblN1Y2Nlc3MoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKTtcbn1cbmZ1bmN0aW9uIG9uQWN0aW9uU3VjY2VzcyhhY3Rpb25RdWV1ZSwgYWN0aW9uTm9kZSwgbmV4dFN0YXRlKSB7XG4gIGFjdGlvbk5vZGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgYWN0aW9uTm9kZS52YWx1ZSA9IG5leHRTdGF0ZTtcbiAgbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpO1xuICBhY3Rpb25RdWV1ZS5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgYWN0aW9uTm9kZSA9IGFjdGlvblF1ZXVlLnBlbmRpbmc7XG4gIG51bGwgIT09IGFjdGlvbk5vZGUgJiZcbiAgICAoKG5leHRTdGF0ZSA9IGFjdGlvbk5vZGUubmV4dCksXG4gICAgbmV4dFN0YXRlID09PSBhY3Rpb25Ob2RlXG4gICAgICA/IChhY3Rpb25RdWV1ZS5wZW5kaW5nID0gbnVsbClcbiAgICAgIDogKChuZXh0U3RhdGUgPSBuZXh0U3RhdGUubmV4dCksXG4gICAgICAgIChhY3Rpb25Ob2RlLm5leHQgPSBuZXh0U3RhdGUpLFxuICAgICAgICBydW5BY3Rpb25TdGF0ZUFjdGlvbihhY3Rpb25RdWV1ZSwgbmV4dFN0YXRlKSkpO1xufVxuZnVuY3Rpb24gb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgYWN0aW9uTm9kZSwgZXJyb3IpIHtcbiAgdmFyIGxhc3QgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nO1xuICBhY3Rpb25RdWV1ZS5wZW5kaW5nID0gbnVsbDtcbiAgaWYgKG51bGwgIT09IGxhc3QpIHtcbiAgICBsYXN0ID0gbGFzdC5uZXh0O1xuICAgIGRvXG4gICAgICAoYWN0aW9uTm9kZS5zdGF0dXMgPSBcInJlamVjdGVkXCIpLFxuICAgICAgICAoYWN0aW9uTm9kZS5yZWFzb24gPSBlcnJvciksXG4gICAgICAgIG5vdGlmeUFjdGlvbkxpc3RlbmVycyhhY3Rpb25Ob2RlKSxcbiAgICAgICAgKGFjdGlvbk5vZGUgPSBhY3Rpb25Ob2RlLm5leHQpO1xuICAgIHdoaWxlIChhY3Rpb25Ob2RlICE9PSBsYXN0KTtcbiAgfVxuICBhY3Rpb25RdWV1ZS5hY3Rpb24gPSBudWxsO1xufVxuZnVuY3Rpb24gbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpIHtcbiAgYWN0aW9uTm9kZSA9IGFjdGlvbk5vZGUubGlzdGVuZXJzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdGlvbk5vZGUubGVuZ3RoOyBpKyspICgwLCBhY3Rpb25Ob2RlW2ldKSgpO1xufVxuZnVuY3Rpb24gYWN0aW9uU3RhdGVSZWR1Y2VyKG9sZFN0YXRlLCBuZXdTdGF0ZSkge1xuICByZXR1cm4gbmV3U3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudEFjdGlvblN0YXRlKGFjdGlvbiwgaW5pdGlhbFN0YXRlUHJvcCkge1xuICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICB2YXIgc3NyRm9ybVN0YXRlID0gd29ya0luUHJvZ3Jlc3NSb290LmZvcm1TdGF0ZTtcbiAgICBpZiAobnVsbCAhPT0gc3NyRm9ybVN0YXRlKSB7XG4gICAgICBhOiB7XG4gICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcjtcbiAgICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgICAgaWYgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGI6IHtcbiAgICAgICAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2U7XG4gICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgdmFyIGluUm9vdE9yU2luZ2xldG9uID0gcm9vdE9yU2luZ2xldG9uQ29udGV4dDtcbiAgICAgICAgICAgICAgICA4ICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAubm9kZVR5cGU7XG5cbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpblJvb3RPclNpbmdsZXRvbikge1xuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwKSB7XG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaW5Sb290T3JTaW5nbGV0b24gPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAuZGF0YTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID1cbiAgICAgICAgICAgICAgICBcIkYhXCIgPT09IGluUm9vdE9yU2luZ2xldG9uIHx8IFwiRlwiID09PSBpblJvb3RPclNpbmdsZXRvblxuICAgICAgICAgICAgICAgICAgPyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDBcbiAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDApIHtcbiAgICAgICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5uZXh0U2libGluZ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICAgICAgICAgIFwiRiFcIiA9PT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLmRhdGE7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93T25IeWRyYXRpb25NaXNtYXRjaChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICExO1xuICAgICAgfVxuICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYmIChpbml0aWFsU3RhdGVQcm9wID0gc3NyRm9ybVN0YXRlWzBdKTtcbiAgICB9XG4gIH1cbiAgc3NyRm9ybVN0YXRlID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgc3NyRm9ybVN0YXRlLm1lbW9pemVkU3RhdGUgPSBzc3JGb3JtU3RhdGUuYmFzZVN0YXRlID0gaW5pdGlhbFN0YXRlUHJvcDtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0ge1xuICAgIHBlbmRpbmc6IG51bGwsXG4gICAgbGFuZXM6IDAsXG4gICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogYWN0aW9uU3RhdGVSZWR1Y2VyLFxuICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsU3RhdGVQcm9wXG4gIH07XG4gIHNzckZvcm1TdGF0ZS5xdWV1ZSA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgc3NyRm9ybVN0YXRlID0gZGlzcGF0Y2hTZXRTdGF0ZS5iaW5kKFxuICAgIG51bGwsXG4gICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIsXG4gICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICk7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5kaXNwYXRjaCA9IHNzckZvcm1TdGF0ZTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbW91bnRTdGF0ZUltcGwoITEpO1xuICBpblJvb3RPclNpbmdsZXRvbiA9IGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICAhMSxcbiAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQucXVldWVcbiAgKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0ge1xuICAgIHN0YXRlOiBpbml0aWFsU3RhdGVQcm9wLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGFjdGlvbjogYWN0aW9uLFxuICAgIHBlbmRpbmc6IG51bGxcbiAgfTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnF1ZXVlID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwO1xuICBzc3JGb3JtU3RhdGUgPSBkaXNwYXRjaEFjdGlvblN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAsXG4gICAgaW5Sb290T3JTaW5nbGV0b24sXG4gICAgc3NyRm9ybVN0YXRlXG4gICk7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5kaXNwYXRjaCA9IHNzckZvcm1TdGF0ZTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0Lm1lbW9pemVkU3RhdGUgPSBhY3Rpb247XG4gIHJldHVybiBbaW5pdGlhbFN0YXRlUHJvcCwgc3NyRm9ybVN0YXRlLCAhMV07XG59XG5mdW5jdGlvbiB1cGRhdGVBY3Rpb25TdGF0ZShhY3Rpb24pIHtcbiAgdmFyIHN0YXRlSG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICByZXR1cm4gdXBkYXRlQWN0aW9uU3RhdGVJbXBsKHN0YXRlSG9vaywgY3VycmVudEhvb2ssIGFjdGlvbik7XG59XG5mdW5jdGlvbiB1cGRhdGVBY3Rpb25TdGF0ZUltcGwoc3RhdGVIb29rLCBjdXJyZW50U3RhdGVIb29rLCBhY3Rpb24pIHtcbiAgY3VycmVudFN0YXRlSG9vayA9IHVwZGF0ZVJlZHVjZXJJbXBsKFxuICAgIHN0YXRlSG9vayxcbiAgICBjdXJyZW50U3RhdGVIb29rLFxuICAgIGFjdGlvblN0YXRlUmVkdWNlclxuICApWzBdO1xuICBzdGF0ZUhvb2sgPSB1cGRhdGVSZWR1Y2VyKGJhc2ljU3RhdGVSZWR1Y2VyKVswXTtcbiAgaWYgKFxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBjdXJyZW50U3RhdGVIb29rICYmXG4gICAgbnVsbCAhPT0gY3VycmVudFN0YXRlSG9vayAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGN1cnJlbnRTdGF0ZUhvb2sudGhlblxuICApXG4gICAgdHJ5IHtcbiAgICAgIHZhciBzdGF0ZSA9IHVzZVRoZW5hYmxlKGN1cnJlbnRTdGF0ZUhvb2spO1xuICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgIGlmICh4ID09PSBTdXNwZW5zZUV4Y2VwdGlvbikgdGhyb3cgU3VzcGVuc2VBY3Rpb25FeGNlcHRpb247XG4gICAgICB0aHJvdyB4O1xuICAgIH1cbiAgZWxzZSBzdGF0ZSA9IGN1cnJlbnRTdGF0ZUhvb2s7XG4gIGN1cnJlbnRTdGF0ZUhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIGFjdGlvblF1ZXVlID0gY3VycmVudFN0YXRlSG9vay5xdWV1ZSxcbiAgICBkaXNwYXRjaCA9IGFjdGlvblF1ZXVlLmRpc3BhdGNoO1xuICBhY3Rpb24gIT09IGN1cnJlbnRTdGF0ZUhvb2subWVtb2l6ZWRTdGF0ZSAmJlxuICAgICgoY3VycmVudGx5UmVuZGVyaW5nRmliZXIuZmxhZ3MgfD0gMjA0OCksXG4gICAgcHVzaFNpbXBsZUVmZmVjdChcbiAgICAgIDksXG4gICAgICBjcmVhdGVFZmZlY3RJbnN0YW5jZSgpLFxuICAgICAgYWN0aW9uU3RhdGVBY3Rpb25FZmZlY3QuYmluZChudWxsLCBhY3Rpb25RdWV1ZSwgYWN0aW9uKSxcbiAgICAgIG51bGxcbiAgICApKTtcbiAgcmV0dXJuIFtzdGF0ZSwgZGlzcGF0Y2gsIHN0YXRlSG9va107XG59XG5mdW5jdGlvbiBhY3Rpb25TdGF0ZUFjdGlvbkVmZmVjdChhY3Rpb25RdWV1ZSwgYWN0aW9uKSB7XG4gIGFjdGlvblF1ZXVlLmFjdGlvbiA9IGFjdGlvbjtcbn1cbmZ1bmN0aW9uIHJlcmVuZGVyQWN0aW9uU3RhdGUoYWN0aW9uKSB7XG4gIHZhciBzdGF0ZUhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKSxcbiAgICBjdXJyZW50U3RhdGVIb29rID0gY3VycmVudEhvb2s7XG4gIGlmIChudWxsICE9PSBjdXJyZW50U3RhdGVIb29rKVxuICAgIHJldHVybiB1cGRhdGVBY3Rpb25TdGF0ZUltcGwoc3RhdGVIb29rLCBjdXJyZW50U3RhdGVIb29rLCBhY3Rpb24pO1xuICB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgc3RhdGVIb29rID0gc3RhdGVIb29rLm1lbW9pemVkU3RhdGU7XG4gIGN1cnJlbnRTdGF0ZUhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIGRpc3BhdGNoID0gY3VycmVudFN0YXRlSG9vay5xdWV1ZS5kaXNwYXRjaDtcbiAgY3VycmVudFN0YXRlSG9vay5tZW1vaXplZFN0YXRlID0gYWN0aW9uO1xuICByZXR1cm4gW3N0YXRlSG9vaywgZGlzcGF0Y2gsICExXTtcbn1cbmZ1bmN0aW9uIHB1c2hTaW1wbGVFZmZlY3QodGFnLCBpbnN0LCBjcmVhdGUsIGNyZWF0ZURlcHMpIHtcbiAgdGFnID0geyB0YWc6IHRhZywgY3JlYXRlOiBjcmVhdGUsIGRlcHM6IGNyZWF0ZURlcHMsIGluc3Q6IGluc3QsIG5leHQ6IG51bGwgfTtcbiAgaW5zdCA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLnVwZGF0ZVF1ZXVlO1xuICBudWxsID09PSBpbnN0ICYmXG4gICAgKChpbnN0ID0gY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSgpKSxcbiAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIudXBkYXRlUXVldWUgPSBpbnN0KSk7XG4gIGNyZWF0ZSA9IGluc3QubGFzdEVmZmVjdDtcbiAgbnVsbCA9PT0gY3JlYXRlXG4gICAgPyAoaW5zdC5sYXN0RWZmZWN0ID0gdGFnLm5leHQgPSB0YWcpXG4gICAgOiAoKGNyZWF0ZURlcHMgPSBjcmVhdGUubmV4dCksXG4gICAgICAoY3JlYXRlLm5leHQgPSB0YWcpLFxuICAgICAgKHRhZy5uZXh0ID0gY3JlYXRlRGVwcyksXG4gICAgICAoaW5zdC5sYXN0RWZmZWN0ID0gdGFnKSk7XG4gIHJldHVybiB0YWc7XG59XG5mdW5jdGlvbiBjcmVhdGVFZmZlY3RJbnN0YW5jZSgpIHtcbiAgcmV0dXJuIHsgZGVzdHJveTogdm9pZCAwLCByZXNvdXJjZTogdm9pZCAwIH07XG59XG5mdW5jdGlvbiB1cGRhdGVSZWYoKSB7XG4gIHJldHVybiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gbW91bnRFZmZlY3RJbXBsKGZpYmVyRmxhZ3MsIGhvb2tGbGFncywgY3JlYXRlLCBjcmVhdGVEZXBzKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgY3JlYXRlRGVwcyA9IHZvaWQgMCA9PT0gY3JlYXRlRGVwcyA/IG51bGwgOiBjcmVhdGVEZXBzO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5mbGFncyB8PSBmaWJlckZsYWdzO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoU2ltcGxlRWZmZWN0KFxuICAgIDEgfCBob29rRmxhZ3MsXG4gICAgY3JlYXRlRWZmZWN0SW5zdGFuY2UoKSxcbiAgICBjcmVhdGUsXG4gICAgY3JlYXRlRGVwc1xuICApO1xufVxuZnVuY3Rpb24gdXBkYXRlRWZmZWN0SW1wbChmaWJlckZsYWdzLCBob29rRmxhZ3MsIGNyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBkZXBzID0gdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHM7XG4gIHZhciBpbnN0ID0gaG9vay5tZW1vaXplZFN0YXRlLmluc3Q7XG4gIG51bGwgIT09IGN1cnJlbnRIb29rICYmXG4gIG51bGwgIT09IGRlcHMgJiZcbiAgYXJlSG9va0lucHV0c0VxdWFsKGRlcHMsIGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUuZGVwcylcbiAgICA/IChob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoU2ltcGxlRWZmZWN0KGhvb2tGbGFncywgaW5zdCwgY3JlYXRlLCBkZXBzKSlcbiAgICA6ICgoY3VycmVudGx5UmVuZGVyaW5nRmliZXIuZmxhZ3MgfD0gZmliZXJGbGFncyksXG4gICAgICAoaG9vay5tZW1vaXplZFN0YXRlID0gcHVzaFNpbXBsZUVmZmVjdChcbiAgICAgICAgMSB8IGhvb2tGbGFncyxcbiAgICAgICAgaW5zdCxcbiAgICAgICAgY3JlYXRlLFxuICAgICAgICBkZXBzXG4gICAgICApKSk7XG59XG5mdW5jdGlvbiBtb3VudEVmZmVjdChjcmVhdGUsIGNyZWF0ZURlcHMpIHtcbiAgbW91bnRFZmZlY3RJbXBsKDgzOTA2NTYsIDgsIGNyZWF0ZSwgY3JlYXRlRGVwcyk7XG59XG5mdW5jdGlvbiB1cGRhdGVFZmZlY3QoY3JlYXRlLCBjcmVhdGVEZXBzKSB7XG4gIHVwZGF0ZUVmZmVjdEltcGwoMjA0OCwgOCwgY3JlYXRlLCBjcmVhdGVEZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIHVwZGF0ZUVmZmVjdEltcGwoNCwgMiwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIHVwZGF0ZUVmZmVjdEltcGwoNCwgNCwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIGltcGVyYXRpdmVIYW5kbGVFZmZlY3QoY3JlYXRlLCByZWYpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZikge1xuICAgIGNyZWF0ZSA9IGNyZWF0ZSgpO1xuICAgIHZhciByZWZDbGVhbnVwID0gcmVmKGNyZWF0ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZkNsZWFudXAgPyByZWZDbGVhbnVwKCkgOiByZWYobnVsbCk7XG4gICAgfTtcbiAgfVxuICBpZiAobnVsbCAhPT0gcmVmICYmIHZvaWQgMCAhPT0gcmVmKVxuICAgIHJldHVybiAoXG4gICAgICAoY3JlYXRlID0gY3JlYXRlKCkpLFxuICAgICAgKHJlZi5jdXJyZW50ID0gY3JlYXRlKSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICk7XG59XG5mdW5jdGlvbiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gIGRlcHMgPSBudWxsICE9PSBkZXBzICYmIHZvaWQgMCAhPT0gZGVwcyA/IGRlcHMuY29uY2F0KFtyZWZdKSA6IG51bGw7XG4gIHVwZGF0ZUVmZmVjdEltcGwoNCwgNCwgaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdC5iaW5kKG51bGwsIGNyZWF0ZSwgcmVmKSwgZGVwcyk7XG59XG5mdW5jdGlvbiBtb3VudERlYnVnVmFsdWUoKSB7fVxuZnVuY3Rpb24gdXBkYXRlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICB2YXIgcHJldlN0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZGVwcyAmJiBhcmVIb29rSW5wdXRzRXF1YWwoZGVwcywgcHJldlN0YXRlWzFdKSlcbiAgICByZXR1cm4gcHJldlN0YXRlWzBdO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBbY2FsbGJhY2ssIGRlcHNdO1xuICByZXR1cm4gY2FsbGJhY2s7XG59XG5mdW5jdGlvbiB1cGRhdGVNZW1vKG5leHRDcmVhdGUsIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICB2YXIgcHJldlN0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZGVwcyAmJiBhcmVIb29rSW5wdXRzRXF1YWwoZGVwcywgcHJldlN0YXRlWzFdKSlcbiAgICByZXR1cm4gcHJldlN0YXRlWzBdO1xuICBwcmV2U3RhdGUgPSBuZXh0Q3JlYXRlKCk7XG4gIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICB0cnkge1xuICAgICAgbmV4dENyZWF0ZSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMSk7XG4gICAgfVxuICB9XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IFtwcmV2U3RhdGUsIGRlcHNdO1xuICByZXR1cm4gcHJldlN0YXRlO1xufVxuZnVuY3Rpb24gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gIGlmICh2b2lkIDAgPT09IGluaXRpYWxWYWx1ZSB8fCAwICE9PSAocmVuZGVyTGFuZXMgJiAxMDczNzQxODI0KSlcbiAgICByZXR1cm4gKGhvb2subWVtb2l6ZWRTdGF0ZSA9IHZhbHVlKTtcbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaW5pdGlhbFZhbHVlO1xuICBob29rID0gcmVxdWVzdERlZmVycmVkTGFuZSgpO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlci5sYW5lcyB8PSBob29rO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gaG9vaztcbiAgcmV0dXJuIGluaXRpYWxWYWx1ZTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZURlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHByZXZWYWx1ZSwgdmFsdWUsIGluaXRpYWxWYWx1ZSkge1xuICBpZiAob2JqZWN0SXModmFsdWUsIHByZXZWYWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IuY3VycmVudClcbiAgICByZXR1cm4gKFxuICAgICAgKGhvb2sgPSBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpKSxcbiAgICAgIG9iamVjdElzKGhvb2ssIHByZXZWYWx1ZSkgfHwgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCksXG4gICAgICBob29rXG4gICAgKTtcbiAgaWYgKDAgPT09IChyZW5kZXJMYW5lcyAmIDQyKSlcbiAgICByZXR1cm4gKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCksIChob29rLm1lbW9pemVkU3RhdGUgPSB2YWx1ZSk7XG4gIGhvb2sgPSByZXF1ZXN0RGVmZXJyZWRMYW5lKCk7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmxhbmVzIHw9IGhvb2s7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSBob29rO1xuICByZXR1cm4gcHJldlZhbHVlO1xufVxuZnVuY3Rpb24gc3RhcnRUcmFuc2l0aW9uKGZpYmVyLCBxdWV1ZSwgcGVuZGluZ1N0YXRlLCBmaW5pc2hlZFN0YXRlLCBjYWxsYmFjaykge1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPVxuICAgIDAgIT09IHByZXZpb3VzUHJpb3JpdHkgJiYgOCA+IHByZXZpb3VzUHJpb3JpdHkgPyBwcmV2aW91c1ByaW9yaXR5IDogODtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCxcbiAgICBjdXJyZW50VHJhbnNpdGlvbiA9IHt9O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gIGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlKGZpYmVyLCAhMSwgcXVldWUsIHBlbmRpbmdTdGF0ZSk7XG4gIHRyeSB7XG4gICAgdmFyIHJldHVyblZhbHVlID0gY2FsbGJhY2soKSxcbiAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcbiAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2goY3VycmVudFRyYW5zaXRpb24sIHJldHVyblZhbHVlKTtcbiAgICBpZiAoXG4gICAgICBudWxsICE9PSByZXR1cm5WYWx1ZSAmJlxuICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuXG4gICAgKSB7XG4gICAgICB2YXIgdGhlbmFibGVGb3JGaW5pc2hlZFN0YXRlID0gY2hhaW5UaGVuYWJsZVZhbHVlKFxuICAgICAgICByZXR1cm5WYWx1ZSxcbiAgICAgICAgZmluaXNoZWRTdGF0ZVxuICAgICAgKTtcbiAgICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgICAgZmliZXIsXG4gICAgICAgIHF1ZXVlLFxuICAgICAgICB0aGVuYWJsZUZvckZpbmlzaGVkU3RhdGUsXG4gICAgICAgIHJlcXVlc3RVcGRhdGVMYW5lKGZpYmVyKVxuICAgICAgKTtcbiAgICB9IGVsc2VcbiAgICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgICAgZmliZXIsXG4gICAgICAgIHF1ZXVlLFxuICAgICAgICBmaW5pc2hlZFN0YXRlLFxuICAgICAgICByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcilcbiAgICAgICk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKFxuICAgICAgZmliZXIsXG4gICAgICBxdWV1ZSxcbiAgICAgIHsgdGhlbjogZnVuY3Rpb24gKCkge30sIHN0YXR1czogXCJyZWplY3RlZFwiLCByZWFzb246IGVycm9yIH0sXG4gICAgICByZXF1ZXN0VXBkYXRlTGFuZSgpXG4gICAgKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIG5vb3AkMigpIHt9XG5mdW5jdGlvbiBzdGFydEhvc3RUcmFuc2l0aW9uKGZvcm1GaWJlciwgcGVuZGluZ1N0YXRlLCBhY3Rpb24sIGZvcm1EYXRhKSB7XG4gIGlmICg1ICE9PSBmb3JtRmliZXIudGFnKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NikpO1xuICB2YXIgcXVldWUgPSBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpLnF1ZXVlO1xuICBzdGFydFRyYW5zaXRpb24oXG4gICAgZm9ybUZpYmVyLFxuICAgIHF1ZXVlLFxuICAgIHBlbmRpbmdTdGF0ZSxcbiAgICBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICAgIG51bGwgPT09IGFjdGlvblxuICAgICAgPyBub29wJDJcbiAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJlcXVlc3RGb3JtUmVzZXQkMShmb3JtRmliZXIpO1xuICAgICAgICAgIHJldHVybiBhY3Rpb24oZm9ybURhdGEpO1xuICAgICAgICB9XG4gICk7XG59XG5mdW5jdGlvbiBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpIHtcbiAgdmFyIGV4aXN0aW5nU3RhdGVIb29rID0gZm9ybUZpYmVyLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBleGlzdGluZ1N0YXRlSG9vaykgcmV0dXJuIGV4aXN0aW5nU3RhdGVIb29rO1xuICBleGlzdGluZ1N0YXRlSG9vayA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICAgIGJhc2VTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgICBiYXNlUXVldWU6IG51bGwsXG4gICAgcXVldWU6IHtcbiAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICBsYW5lczogMCxcbiAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogYmFzaWNTdGF0ZVJlZHVjZXIsXG4gICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdFxuICAgIH0sXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICB2YXIgaW5pdGlhbFJlc2V0U3RhdGUgPSB7fTtcbiAgZXhpc3RpbmdTdGF0ZUhvb2submV4dCA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZSxcbiAgICBiYXNlU3RhdGU6IGluaXRpYWxSZXNldFN0YXRlLFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZToge1xuICAgICAgcGVuZGluZzogbnVsbCxcbiAgICAgIGxhbmVzOiAwLFxuICAgICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICAgIGxhc3RSZW5kZXJlZFN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZVxuICAgIH0sXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBmb3JtRmliZXIubWVtb2l6ZWRTdGF0ZSA9IGV4aXN0aW5nU3RhdGVIb29rO1xuICBmb3JtRmliZXIgPSBmb3JtRmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBmb3JtRmliZXIgJiYgKGZvcm1GaWJlci5tZW1vaXplZFN0YXRlID0gZXhpc3RpbmdTdGF0ZUhvb2spO1xuICByZXR1cm4gZXhpc3RpbmdTdGF0ZUhvb2s7XG59XG5mdW5jdGlvbiByZXF1ZXN0Rm9ybVJlc2V0JDEoZm9ybUZpYmVyKSB7XG4gIHZhciByZXNldFN0YXRlUXVldWUgPSBlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bChmb3JtRmliZXIpLm5leHQucXVldWU7XG4gIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmb3JtRmliZXIsIHJlc2V0U3RhdGVRdWV1ZSwge30sIHJlcXVlc3RVcGRhdGVMYW5lKCkpO1xufVxuZnVuY3Rpb24gdXNlSG9zdFRyYW5zaXRpb25TdGF0dXMoKSB7XG4gIHJldHVybiByZWFkQ29udGV4dChIb3N0VHJhbnNpdGlvbkNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXBkYXRlSWQoKSB7XG4gIHJldHVybiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVmcmVzaCgpIHtcbiAgcmV0dXJuIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG59XG5mdW5jdGlvbiByZWZyZXNoQ2FjaGUoZmliZXIpIHtcbiAgZm9yICh2YXIgcHJvdmlkZXIgPSBmaWJlci5yZXR1cm47IG51bGwgIT09IHByb3ZpZGVyOyApIHtcbiAgICBzd2l0Y2ggKHByb3ZpZGVyLnRhZykge1xuICAgICAgY2FzZSAyNDpcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICAgICAgICBmaWJlciA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICAgICAgdmFyIHJvb3QkNDEgPSBlbnF1ZXVlVXBkYXRlKHByb3ZpZGVyLCBmaWJlciwgbGFuZSk7XG4gICAgICAgIG51bGwgIT09IHJvb3QkNDEgJiZcbiAgICAgICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QkNDEsIHByb3ZpZGVyLCBsYW5lKSxcbiAgICAgICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHJvb3QkNDEsIHByb3ZpZGVyLCBsYW5lKSk7XG4gICAgICAgIHByb3ZpZGVyID0geyBjYWNoZTogY3JlYXRlQ2FjaGUoKSB9O1xuICAgICAgICBmaWJlci5wYXlsb2FkID0gcHJvdmlkZXI7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvdmlkZXIgPSBwcm92aWRlci5yZXR1cm47XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoUmVkdWNlckFjdGlvbihmaWJlciwgcXVldWUsIGFjdGlvbikge1xuICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gIGFjdGlvbiA9IHtcbiAgICBsYW5lOiBsYW5lLFxuICAgIHJldmVydExhbmU6IDAsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpXG4gICAgPyBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIGFjdGlvbilcbiAgICA6ICgoYWN0aW9uID0gZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlKGZpYmVyLCBxdWV1ZSwgYWN0aW9uLCBsYW5lKSksXG4gICAgICBudWxsICE9PSBhY3Rpb24gJiZcbiAgICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihhY3Rpb24sIGZpYmVyLCBsYW5lKSxcbiAgICAgICAgZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlKGFjdGlvbiwgcXVldWUsIGxhbmUpKSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFNldFN0YXRlKGZpYmVyLCBxdWV1ZSwgYWN0aW9uKSB7XG4gIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsKGZpYmVyLCBxdWV1ZSwgYWN0aW9uLCBsYW5lKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmaWJlciwgcXVldWUsIGFjdGlvbiwgbGFuZSkge1xuICB2YXIgdXBkYXRlID0ge1xuICAgIGxhbmU6IGxhbmUsXG4gICAgcmV2ZXJ0TGFuZTogMCxcbiAgICBhY3Rpb246IGFjdGlvbixcbiAgICBoYXNFYWdlclN0YXRlOiAhMSxcbiAgICBlYWdlclN0YXRlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgaWYgKGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpKSBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIHVwZGF0ZSk7XG4gIGVsc2Uge1xuICAgIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gICAgaWYgKFxuICAgICAgMCA9PT0gZmliZXIubGFuZXMgJiZcbiAgICAgIChudWxsID09PSBhbHRlcm5hdGUgfHwgMCA9PT0gYWx0ZXJuYXRlLmxhbmVzKSAmJlxuICAgICAgKChhbHRlcm5hdGUgPSBxdWV1ZS5sYXN0UmVuZGVyZWRSZWR1Y2VyKSwgbnVsbCAhPT0gYWx0ZXJuYXRlKVxuICAgIClcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSBxdWV1ZS5sYXN0UmVuZGVyZWRTdGF0ZSxcbiAgICAgICAgICBlYWdlclN0YXRlID0gYWx0ZXJuYXRlKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICAgICAgdXBkYXRlLmhhc0VhZ2VyU3RhdGUgPSAhMDtcbiAgICAgICAgdXBkYXRlLmVhZ2VyU3RhdGUgPSBlYWdlclN0YXRlO1xuICAgICAgICBpZiAob2JqZWN0SXMoZWFnZXJTdGF0ZSwgY3VycmVudFN0YXRlKSlcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCAwKSxcbiAgICAgICAgICAgIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJiBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgIH1cbiAgICBhY3Rpb24gPSBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICAgIGlmIChudWxsICE9PSBhY3Rpb24pXG4gICAgICByZXR1cm4gKFxuICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIoYWN0aW9uLCBmaWJlciwgbGFuZSksXG4gICAgICAgIGVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZShhY3Rpb24sIHF1ZXVlLCBsYW5lKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hPcHRpbWlzdGljU2V0U3RhdGUoZmliZXIsIHRocm93SWZEdXJpbmdSZW5kZXIsIHF1ZXVlLCBhY3Rpb24pIHtcbiAgYWN0aW9uID0ge1xuICAgIGxhbmU6IDIsXG4gICAgcmV2ZXJ0TGFuZTogcmVxdWVzdFRyYW5zaXRpb25MYW5lKCksXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlmIChpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSkge1xuICAgIGlmICh0aHJvd0lmRHVyaW5nUmVuZGVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3OSkpO1xuICB9IGVsc2VcbiAgICAodGhyb3dJZkR1cmluZ1JlbmRlciA9IGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShcbiAgICAgIGZpYmVyLFxuICAgICAgcXVldWUsXG4gICAgICBhY3Rpb24sXG4gICAgICAyXG4gICAgKSksXG4gICAgICBudWxsICE9PSB0aHJvd0lmRHVyaW5nUmVuZGVyICYmXG4gICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcih0aHJvd0lmRHVyaW5nUmVuZGVyLCBmaWJlciwgMik7XG59XG5mdW5jdGlvbiBpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSB7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIHJldHVybiAoXG4gICAgZmliZXIgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyIHx8XG4gICAgKG51bGwgIT09IGFsdGVybmF0ZSAmJiBhbHRlcm5hdGUgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyKVxuICApO1xufVxuZnVuY3Rpb24gZW5xdWV1ZVJlbmRlclBoYXNlVXBkYXRlKHF1ZXVlLCB1cGRhdGUpIHtcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9XG4gICAgITA7XG4gIHZhciBwZW5kaW5nID0gcXVldWUucGVuZGluZztcbiAgbnVsbCA9PT0gcGVuZGluZ1xuICAgID8gKHVwZGF0ZS5uZXh0ID0gdXBkYXRlKVxuICAgIDogKCh1cGRhdGUubmV4dCA9IHBlbmRpbmcubmV4dCksIChwZW5kaW5nLm5leHQgPSB1cGRhdGUpKTtcbiAgcXVldWUucGVuZGluZyA9IHVwZGF0ZTtcbn1cbmZ1bmN0aW9uIGVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZShyb290LCBxdWV1ZSwgbGFuZSkge1xuICBpZiAoMCAhPT0gKGxhbmUgJiA0MTk0MDQ4KSkge1xuICAgIHZhciBxdWV1ZUxhbmVzID0gcXVldWUubGFuZXM7XG4gICAgcXVldWVMYW5lcyAmPSByb290LnBlbmRpbmdMYW5lcztcbiAgICBsYW5lIHw9IHF1ZXVlTGFuZXM7XG4gICAgcXVldWUubGFuZXMgPSBsYW5lO1xuICAgIG1hcmtSb290RW50YW5nbGVkKHJvb3QsIGxhbmUpO1xuICB9XG59XG52YXIgQ29udGV4dE9ubHlEaXNwYXRjaGVyID0ge1xuICAgIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgICB1c2U6IHVzZSxcbiAgICB1c2VDYWxsYmFjazogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZUNvbnRleHQ6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VFZmZlY3Q6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlTGF5b3V0RWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlTWVtbzogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZVJlZHVjZXI6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VSZWY6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VTdGF0ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZURlYnVnVmFsdWU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VEZWZlcnJlZFZhbHVlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlVHJhbnNpdGlvbjogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlSWQ6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgICB1c2VIb3N0VHJhbnNpdGlvblN0YXR1czogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZUZvcm1TdGF0ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZUFjdGlvblN0YXRlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gICAgdXNlT3B0aW1pc3RpYzogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZU1lbW9DYWNoZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICAgIHVzZUNhY2hlUmVmcmVzaDogdGhyb3dJbnZhbGlkSG9va0Vycm9yXG4gIH0sXG4gIEhvb2tzRGlzcGF0Y2hlck9uTW91bnQgPSB7XG4gICAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICAgIHVzZTogdXNlLFxuICAgIHVzZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlcHMpIHtcbiAgICAgIG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZSA9IFtcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzXG4gICAgICBdO1xuICAgICAgcmV0dXJuIGNhbGxiYWNrO1xuICAgIH0sXG4gICAgdXNlQ29udGV4dDogcmVhZENvbnRleHQsXG4gICAgdXNlRWZmZWN0OiBtb3VudEVmZmVjdCxcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlOiBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGRlcHMgPSBudWxsICE9PSBkZXBzICYmIHZvaWQgMCAhPT0gZGVwcyA/IGRlcHMuY29uY2F0KFtyZWZdKSA6IG51bGw7XG4gICAgICBtb3VudEVmZmVjdEltcGwoXG4gICAgICAgIDQxOTQzMDgsXG4gICAgICAgIDQsXG4gICAgICAgIGltcGVyYXRpdmVIYW5kbGVFZmZlY3QuYmluZChudWxsLCBjcmVhdGUsIHJlZiksXG4gICAgICAgIGRlcHNcbiAgICAgICk7XG4gICAgfSxcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIHJldHVybiBtb3VudEVmZmVjdEltcGwoNDE5NDMwOCwgNCwgY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUluc2VydGlvbkVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgbW91bnRFZmZlY3RJbXBsKDQsIDIsIGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VNZW1vOiBmdW5jdGlvbiAobmV4dENyZWF0ZSwgZGVwcykge1xuICAgICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICAgICAgdmFyIG5leHRWYWx1ZSA9IG5leHRDcmVhdGUoKTtcbiAgICAgIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbmV4dENyZWF0ZSgpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaG9vay5tZW1vaXplZFN0YXRlID0gW25leHRWYWx1ZSwgZGVwc107XG4gICAgICByZXR1cm4gbmV4dFZhbHVlO1xuICAgIH0sXG4gICAgdXNlUmVkdWNlcjogZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIGlmICh2b2lkIDAgIT09IGluaXQpIHtcbiAgICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IGluaXQoaW5pdGlhbEFyZyk7XG4gICAgICAgIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaW5pdChpbml0aWFsQXJnKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGluaXRpYWxTdGF0ZSA9IGluaXRpYWxBcmc7XG4gICAgICBob29rLm1lbW9pemVkU3RhdGUgPSBob29rLmJhc2VTdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICAgIHJlZHVjZXIgPSB7XG4gICAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICAgIGxhbmVzOiAwLFxuICAgICAgICBkaXNwYXRjaDogbnVsbCxcbiAgICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogcmVkdWNlcixcbiAgICAgICAgbGFzdFJlbmRlcmVkU3RhdGU6IGluaXRpYWxTdGF0ZVxuICAgICAgfTtcbiAgICAgIGhvb2sucXVldWUgPSByZWR1Y2VyO1xuICAgICAgcmVkdWNlciA9IHJlZHVjZXIuZGlzcGF0Y2ggPSBkaXNwYXRjaFJlZHVjZXJBY3Rpb24uYmluZChcbiAgICAgICAgbnVsbCxcbiAgICAgICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIsXG4gICAgICAgIHJlZHVjZXJcbiAgICAgICk7XG4gICAgICByZXR1cm4gW2hvb2subWVtb2l6ZWRTdGF0ZSwgcmVkdWNlcl07XG4gICAgfSxcbiAgICB1c2VSZWY6IGZ1bmN0aW9uIChpbml0aWFsVmFsdWUpIHtcbiAgICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIGluaXRpYWxWYWx1ZSA9IHsgY3VycmVudDogaW5pdGlhbFZhbHVlIH07XG4gICAgICByZXR1cm4gKGhvb2subWVtb2l6ZWRTdGF0ZSA9IGluaXRpYWxWYWx1ZSk7XG4gICAgfSxcbiAgICB1c2VTdGF0ZTogZnVuY3Rpb24gKGluaXRpYWxTdGF0ZSkge1xuICAgICAgaW5pdGlhbFN0YXRlID0gbW91bnRTdGF0ZUltcGwoaW5pdGlhbFN0YXRlKTtcbiAgICAgIHZhciBxdWV1ZSA9IGluaXRpYWxTdGF0ZS5xdWV1ZSxcbiAgICAgICAgZGlzcGF0Y2ggPSBkaXNwYXRjaFNldFN0YXRlLmJpbmQobnVsbCwgY3VycmVudGx5UmVuZGVyaW5nRmliZXIsIHF1ZXVlKTtcbiAgICAgIHF1ZXVlLmRpc3BhdGNoID0gZGlzcGF0Y2g7XG4gICAgICByZXR1cm4gW2luaXRpYWxTdGF0ZS5tZW1vaXplZFN0YXRlLCBkaXNwYXRjaF07XG4gICAgfSxcbiAgICB1c2VEZWJ1Z1ZhbHVlOiBtb3VudERlYnVnVmFsdWUsXG4gICAgdXNlRGVmZXJyZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIHJldHVybiBtb3VudERlZmVycmVkVmFsdWVJbXBsKGhvb2ssIHZhbHVlLCBpbml0aWFsVmFsdWUpO1xuICAgIH0sXG4gICAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlSG9vayA9IG1vdW50U3RhdGVJbXBsKCExKTtcbiAgICAgIHN0YXRlSG9vayA9IHN0YXJ0VHJhbnNpdGlvbi5iaW5kKFxuICAgICAgICBudWxsLFxuICAgICAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICAgICAgc3RhdGVIb29rLnF1ZXVlLFxuICAgICAgICAhMCxcbiAgICAgICAgITFcbiAgICAgICk7XG4gICAgICBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGUgPSBzdGF0ZUhvb2s7XG4gICAgICByZXR1cm4gWyExLCBzdGF0ZUhvb2tdO1xuICAgIH0sXG4gICAgdXNlU3luY0V4dGVybmFsU3RvcmU6IGZ1bmN0aW9uIChzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICAgICAgdmFyIGZpYmVyID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIsXG4gICAgICAgIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIGlmICh2b2lkIDAgPT09IGdldFNlcnZlclNuYXBzaG90KVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDA3KSk7XG4gICAgICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U2VydmVyU25hcHNob3QoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U25hcHNob3QoKTtcbiAgICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdClcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0OSkpO1xuICAgICAgICAwICE9PSAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiAxMjQpIHx8XG4gICAgICAgICAgcHVzaFN0b3JlQ29uc2lzdGVuY3lDaGVjayhmaWJlciwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KTtcbiAgICAgIH1cbiAgICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IGdldFNlcnZlclNuYXBzaG90O1xuICAgICAgdmFyIGluc3QgPSB7IHZhbHVlOiBnZXRTZXJ2ZXJTbmFwc2hvdCwgZ2V0U25hcHNob3Q6IGdldFNuYXBzaG90IH07XG4gICAgICBob29rLnF1ZXVlID0gaW5zdDtcbiAgICAgIG1vdW50RWZmZWN0KHN1YnNjcmliZVRvU3RvcmUuYmluZChudWxsLCBmaWJlciwgaW5zdCwgc3Vic2NyaWJlKSwgW1xuICAgICAgICBzdWJzY3JpYmVcbiAgICAgIF0pO1xuICAgICAgZmliZXIuZmxhZ3MgfD0gMjA0ODtcbiAgICAgIHB1c2hTaW1wbGVFZmZlY3QoXG4gICAgICAgIDksXG4gICAgICAgIGNyZWF0ZUVmZmVjdEluc3RhbmNlKCksXG4gICAgICAgIHVwZGF0ZVN0b3JlSW5zdGFuY2UuYmluZChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGZpYmVyLFxuICAgICAgICAgIGluc3QsXG4gICAgICAgICAgZ2V0U2VydmVyU25hcHNob3QsXG4gICAgICAgICAgZ2V0U25hcHNob3RcbiAgICAgICAgKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBnZXRTZXJ2ZXJTbmFwc2hvdDtcbiAgICB9LFxuICAgIHVzZUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgICAgIGlkZW50aWZpZXJQcmVmaXggPSB3b3JrSW5Qcm9ncmVzc1Jvb3QuaWRlbnRpZmllclByZWZpeDtcbiAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gdHJlZUNvbnRleHRPdmVyZmxvdztcbiAgICAgICAgdmFyIGlkV2l0aExlYWRpbmdCaXQgPSB0cmVlQ29udGV4dElkO1xuICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICAgIChcbiAgICAgICAgICAgIGlkV2l0aExlYWRpbmdCaXQgJiB+KDEgPDwgKDMyIC0gY2x6MzIoaWRXaXRoTGVhZGluZ0JpdCkgLSAxKSlcbiAgICAgICAgICApLnRvU3RyaW5nKDMyKSArIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICAgICAgaWRlbnRpZmllclByZWZpeCA9XG4gICAgICAgICAgXCJcXHUwMGFiXCIgKyBpZGVudGlmaWVyUHJlZml4ICsgXCJSXCIgKyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGxvY2FsSWRDb3VudGVyKys7XG4gICAgICAgIDAgPCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiZcbiAgICAgICAgICAoaWRlbnRpZmllclByZWZpeCArPSBcIkhcIiArIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC50b1N0cmluZygzMikpO1xuICAgICAgICBpZGVudGlmaWVyUHJlZml4ICs9IFwiXFx1MDBiYlwiO1xuICAgICAgfSBlbHNlXG4gICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBnbG9iYWxDbGllbnRJZENvdW50ZXIrKyksXG4gICAgICAgICAgKGlkZW50aWZpZXJQcmVmaXggPVxuICAgICAgICAgICAgXCJcXHUwMGFiXCIgK1xuICAgICAgICAgICAgaWRlbnRpZmllclByZWZpeCArXG4gICAgICAgICAgICBcInJcIiArXG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQudG9TdHJpbmcoMzIpICtcbiAgICAgICAgICAgIFwiXFx1MDBiYlwiKTtcbiAgICAgIHJldHVybiAoaG9vay5tZW1vaXplZFN0YXRlID0gaWRlbnRpZmllclByZWZpeCk7XG4gICAgfSxcbiAgICB1c2VIb3N0VHJhbnNpdGlvblN0YXR1czogdXNlSG9zdFRyYW5zaXRpb25TdGF0dXMsXG4gICAgdXNlRm9ybVN0YXRlOiBtb3VudEFjdGlvblN0YXRlLFxuICAgIHVzZUFjdGlvblN0YXRlOiBtb3VudEFjdGlvblN0YXRlLFxuICAgIHVzZU9wdGltaXN0aWM6IGZ1bmN0aW9uIChwYXNzdGhyb3VnaCkge1xuICAgICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgICAgIHZhciBxdWV1ZSA9IHtcbiAgICAgICAgcGVuZGluZzogbnVsbCxcbiAgICAgICAgbGFuZXM6IDAsXG4gICAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBudWxsLFxuICAgICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogbnVsbFxuICAgICAgfTtcbiAgICAgIGhvb2sucXVldWUgPSBxdWV1ZTtcbiAgICAgIGhvb2sgPSBkaXNwYXRjaE9wdGltaXN0aWNTZXRTdGF0ZS5iaW5kKFxuICAgICAgICBudWxsLFxuICAgICAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlcixcbiAgICAgICAgITAsXG4gICAgICAgIHF1ZXVlXG4gICAgICApO1xuICAgICAgcXVldWUuZGlzcGF0Y2ggPSBob29rO1xuICAgICAgcmV0dXJuIFtwYXNzdGhyb3VnaCwgaG9va107XG4gICAgfSxcbiAgICB1c2VNZW1vQ2FjaGU6IHVzZU1lbW9DYWNoZSxcbiAgICB1c2VDYWNoZVJlZnJlc2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAobW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlID0gcmVmcmVzaENhY2hlLmJpbmQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyXG4gICAgICApKTtcbiAgICB9XG4gIH0sXG4gIEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlID0ge1xuICAgIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgICB1c2U6IHVzZSxcbiAgICB1c2VDYWxsYmFjazogdXBkYXRlQ2FsbGJhY2ssXG4gICAgdXNlQ29udGV4dDogcmVhZENvbnRleHQsXG4gICAgdXNlRWZmZWN0OiB1cGRhdGVFZmZlY3QsXG4gICAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdXBkYXRlSW1wZXJhdGl2ZUhhbmRsZSxcbiAgICB1c2VJbnNlcnRpb25FZmZlY3Q6IHVwZGF0ZUluc2VydGlvbkVmZmVjdCxcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IHVwZGF0ZUxheW91dEVmZmVjdCxcbiAgICB1c2VNZW1vOiB1cGRhdGVNZW1vLFxuICAgIHVzZVJlZHVjZXI6IHVwZGF0ZVJlZHVjZXIsXG4gICAgdXNlUmVmOiB1cGRhdGVSZWYsXG4gICAgdXNlU3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB1cGRhdGVSZWR1Y2VyKGJhc2ljU3RhdGVSZWR1Y2VyKTtcbiAgICB9LFxuICAgIHVzZURlYnVnVmFsdWU6IG1vdW50RGVidWdWYWx1ZSxcbiAgICB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGluaXRpYWxWYWx1ZSkge1xuICAgICAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIHJldHVybiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChcbiAgICAgICAgaG9vayxcbiAgICAgICAgY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGluaXRpYWxWYWx1ZVxuICAgICAgKTtcbiAgICB9LFxuICAgIHVzZVRyYW5zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBib29sZWFuT3JUaGVuYWJsZSA9IHVwZGF0ZVJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpWzBdLFxuICAgICAgICBzdGFydCA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGU7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGJvb2xlYW5PclRoZW5hYmxlXG4gICAgICAgICAgPyBib29sZWFuT3JUaGVuYWJsZVxuICAgICAgICAgIDogdXNlVGhlbmFibGUoYm9vbGVhbk9yVGhlbmFibGUpLFxuICAgICAgICBzdGFydFxuICAgICAgXTtcbiAgICB9LFxuICAgIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZSxcbiAgICB1c2VJZDogdXBkYXRlSWQsXG4gICAgdXNlSG9zdFRyYW5zaXRpb25TdGF0dXM6IHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzLFxuICAgIHVzZUZvcm1TdGF0ZTogdXBkYXRlQWN0aW9uU3RhdGUsXG4gICAgdXNlQWN0aW9uU3RhdGU6IHVwZGF0ZUFjdGlvblN0YXRlLFxuICAgIHVzZU9wdGltaXN0aWM6IGZ1bmN0aW9uIChwYXNzdGhyb3VnaCwgcmVkdWNlcikge1xuICAgICAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIHJldHVybiB1cGRhdGVPcHRpbWlzdGljSW1wbChob29rLCBjdXJyZW50SG9vaywgcGFzc3Rocm91Z2gsIHJlZHVjZXIpO1xuICAgIH0sXG4gICAgdXNlTWVtb0NhY2hlOiB1c2VNZW1vQ2FjaGUsXG4gICAgdXNlQ2FjaGVSZWZyZXNoOiB1cGRhdGVSZWZyZXNoXG4gIH0sXG4gIEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIgPSB7XG4gICAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICAgIHVzZTogdXNlLFxuICAgIHVzZUNhbGxiYWNrOiB1cGRhdGVDYWxsYmFjayxcbiAgICB1c2VDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgICB1c2VFZmZlY3Q6IHVwZGF0ZUVmZmVjdCxcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlOiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlLFxuICAgIHVzZUluc2VydGlvbkVmZmVjdDogdXBkYXRlSW5zZXJ0aW9uRWZmZWN0LFxuICAgIHVzZUxheW91dEVmZmVjdDogdXBkYXRlTGF5b3V0RWZmZWN0LFxuICAgIHVzZU1lbW86IHVwZGF0ZU1lbW8sXG4gICAgdXNlUmVkdWNlcjogcmVyZW5kZXJSZWR1Y2VyLFxuICAgIHVzZVJlZjogdXBkYXRlUmVmLFxuICAgIHVzZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVyZW5kZXJSZWR1Y2VyKGJhc2ljU3RhdGVSZWR1Y2VyKTtcbiAgICB9LFxuICAgIHVzZURlYnVnVmFsdWU6IG1vdW50RGVidWdWYWx1ZSxcbiAgICB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGluaXRpYWxWYWx1ZSkge1xuICAgICAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICAgIHJldHVybiBudWxsID09PSBjdXJyZW50SG9va1xuICAgICAgICA/IG1vdW50RGVmZXJyZWRWYWx1ZUltcGwoaG9vaywgdmFsdWUsIGluaXRpYWxWYWx1ZSlcbiAgICAgICAgOiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChcbiAgICAgICAgICAgIGhvb2ssXG4gICAgICAgICAgICBjdXJyZW50SG9vay5tZW1vaXplZFN0YXRlLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBpbml0aWFsVmFsdWVcbiAgICAgICAgICApO1xuICAgIH0sXG4gICAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJvb2xlYW5PclRoZW5hYmxlID0gcmVyZW5kZXJSZWR1Y2VyKGJhc2ljU3RhdGVSZWR1Y2VyKVswXSxcbiAgICAgICAgc3RhcnQgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiBib29sZWFuT3JUaGVuYWJsZVxuICAgICAgICAgID8gYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgICA6IHVzZVRoZW5hYmxlKGJvb2xlYW5PclRoZW5hYmxlKSxcbiAgICAgICAgc3RhcnRcbiAgICAgIF07XG4gICAgfSxcbiAgICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogdXBkYXRlU3luY0V4dGVybmFsU3RvcmUsXG4gICAgdXNlSWQ6IHVwZGF0ZUlkLFxuICAgIHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzOiB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cyxcbiAgICB1c2VGb3JtU3RhdGU6IHJlcmVuZGVyQWN0aW9uU3RhdGUsXG4gICAgdXNlQWN0aW9uU3RhdGU6IHJlcmVuZGVyQWN0aW9uU3RhdGUsXG4gICAgdXNlT3B0aW1pc3RpYzogZnVuY3Rpb24gKHBhc3N0aHJvdWdoLCByZWR1Y2VyKSB7XG4gICAgICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnRIb29rKVxuICAgICAgICByZXR1cm4gdXBkYXRlT3B0aW1pc3RpY0ltcGwoaG9vaywgY3VycmVudEhvb2ssIHBhc3N0aHJvdWdoLCByZWR1Y2VyKTtcbiAgICAgIGhvb2suYmFzZVN0YXRlID0gcGFzc3Rocm91Z2g7XG4gICAgICByZXR1cm4gW3Bhc3N0aHJvdWdoLCBob29rLnF1ZXVlLmRpc3BhdGNoXTtcbiAgICB9LFxuICAgIHVzZU1lbW9DYWNoZTogdXNlTWVtb0NhY2hlLFxuICAgIHVzZUNhY2hlUmVmcmVzaDogdXBkYXRlUmVmcmVzaFxuICB9LFxuICB0aGVuYWJsZVN0YXRlID0gbnVsbCxcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgPSAwO1xuZnVuY3Rpb24gdW53cmFwVGhlbmFibGUodGhlbmFibGUpIHtcbiAgdmFyIGluZGV4ID0gdGhlbmFibGVJbmRleENvdW50ZXI7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyICs9IDE7XG4gIG51bGwgPT09IHRoZW5hYmxlU3RhdGUgJiYgKHRoZW5hYmxlU3RhdGUgPSBbXSk7XG4gIHJldHVybiB0cmFja1VzZWRUaGVuYWJsZSh0aGVuYWJsZVN0YXRlLCB0aGVuYWJsZSwgaW5kZXgpO1xufVxuZnVuY3Rpb24gY29lcmNlUmVmKHdvcmtJblByb2dyZXNzLCBlbGVtZW50KSB7XG4gIGVsZW1lbnQgPSBlbGVtZW50LnByb3BzLnJlZjtcbiAgd29ya0luUHJvZ3Jlc3MucmVmID0gdm9pZCAwICE9PSBlbGVtZW50ID8gZWxlbWVudCA6IG51bGw7XG59XG5mdW5jdGlvbiB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKSB7XG4gIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfTEVHQUNZX0VMRU1FTlRfVFlQRSlcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyNSkpO1xuICByZXR1cm5GaWJlciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdDaGlsZCk7XG4gIHRocm93IEVycm9yKFxuICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoXG4gICAgICAzMSxcbiAgICAgIFwiW29iamVjdCBPYmplY3RdXCIgPT09IHJldHVybkZpYmVyXG4gICAgICAgID8gXCJvYmplY3Qgd2l0aCBrZXlzIHtcIiArIE9iamVjdC5rZXlzKG5ld0NoaWxkKS5qb2luKFwiLCBcIikgKyBcIn1cIlxuICAgICAgICA6IHJldHVybkZpYmVyXG4gICAgKVxuICApO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUxhenkobGF6eVR5cGUpIHtcbiAgdmFyIGluaXQgPSBsYXp5VHlwZS5faW5pdDtcbiAgcmV0dXJuIGluaXQobGF6eVR5cGUuX3BheWxvYWQpO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2hpbGRSZWNvbmNpbGVyKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgZnVuY3Rpb24gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkVG9EZWxldGUpIHtcbiAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgdmFyIGRlbGV0aW9ucyA9IHJldHVybkZpYmVyLmRlbGV0aW9ucztcbiAgICAgIG51bGwgPT09IGRlbGV0aW9uc1xuICAgICAgICA/ICgocmV0dXJuRmliZXIuZGVsZXRpb25zID0gW2NoaWxkVG9EZWxldGVdKSwgKHJldHVybkZpYmVyLmZsYWdzIHw9IDE2KSlcbiAgICAgICAgOiBkZWxldGlvbnMucHVzaChjaGlsZFRvRGVsZXRlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NpZGVFZmZlY3RzKSByZXR1cm4gbnVsbDtcbiAgICBmb3IgKDsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7IClcbiAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCksXG4gICAgICAgIChjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmcpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIG1hcFJlbWFpbmluZ0NoaWxkcmVuKGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgZm9yICh2YXIgZXhpc3RpbmdDaGlsZHJlbiA9IG5ldyBNYXAoKTsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7IClcbiAgICAgIG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkLmtleVxuICAgICAgICA/IGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGN1cnJlbnRGaXJzdENoaWxkLmtleSwgY3VycmVudEZpcnN0Q2hpbGQpXG4gICAgICAgIDogZXhpc3RpbmdDaGlsZHJlbi5zZXQoY3VycmVudEZpcnN0Q2hpbGQuaW5kZXgsIGN1cnJlbnRGaXJzdENoaWxkKSxcbiAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZyk7XG4gICAgcmV0dXJuIGV4aXN0aW5nQ2hpbGRyZW47XG4gIH1cbiAgZnVuY3Rpb24gdXNlRmliZXIoZmliZXIsIHBlbmRpbmdQcm9wcykge1xuICAgIGZpYmVyID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoZmliZXIsIHBlbmRpbmdQcm9wcyk7XG4gICAgZmliZXIuaW5kZXggPSAwO1xuICAgIGZpYmVyLnNpYmxpbmcgPSBudWxsO1xuICAgIHJldHVybiBmaWJlcjtcbiAgfVxuICBmdW5jdGlvbiBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgbmV3RmliZXIuaW5kZXggPSBuZXdJbmRleDtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpXG4gICAgICByZXR1cm4gKG5ld0ZpYmVyLmZsYWdzIHw9IDEwNDg1NzYpLCBsYXN0UGxhY2VkSW5kZXg7XG4gICAgbmV3SW5kZXggPSBuZXdGaWJlci5hbHRlcm5hdGU7XG4gICAgaWYgKG51bGwgIT09IG5ld0luZGV4KVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKG5ld0luZGV4ID0gbmV3SW5kZXguaW5kZXgpLFxuICAgICAgICBuZXdJbmRleCA8IGxhc3RQbGFjZWRJbmRleFxuICAgICAgICAgID8gKChuZXdGaWJlci5mbGFncyB8PSA2NzEwODg2NiksIGxhc3RQbGFjZWRJbmRleClcbiAgICAgICAgICA6IG5ld0luZGV4XG4gICAgICApO1xuICAgIG5ld0ZpYmVyLmZsYWdzIHw9IDY3MTA4ODY2O1xuICAgIHJldHVybiBsYXN0UGxhY2VkSW5kZXg7XG4gIH1cbiAgZnVuY3Rpb24gcGxhY2VTaW5nbGVDaGlsZChuZXdGaWJlcikge1xuICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgIG51bGwgPT09IG5ld0ZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgKG5ld0ZpYmVyLmZsYWdzIHw9IDY3MTA4ODY2KTtcbiAgICByZXR1cm4gbmV3RmliZXI7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIGN1cnJlbnQsIHRleHRDb250ZW50LCBsYW5lcykge1xuICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IDYgIT09IGN1cnJlbnQudGFnKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21UZXh0KHRleHRDb250ZW50LCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcykpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIHRleHRDb250ZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGVsZW1lbnQsIGxhbmVzKSB7XG4gICAgdmFyIGVsZW1lbnRUeXBlID0gZWxlbWVudC50eXBlO1xuICAgIGlmIChlbGVtZW50VHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSlcbiAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGxhbmVzLFxuICAgICAgICBlbGVtZW50LmtleVxuICAgICAgKTtcbiAgICBpZiAoXG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoY3VycmVudC5lbGVtZW50VHlwZSA9PT0gZWxlbWVudFR5cGUgfHxcbiAgICAgICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBlbGVtZW50VHlwZSAmJlxuICAgICAgICAgIG51bGwgIT09IGVsZW1lbnRUeXBlICYmXG4gICAgICAgICAgZWxlbWVudFR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSAmJlxuICAgICAgICAgIHJlc29sdmVMYXp5KGVsZW1lbnRUeXBlKSA9PT0gY3VycmVudC50eXBlKSlcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIGVsZW1lbnQucHJvcHMpKSxcbiAgICAgICAgY29lcmNlUmVmKGN1cnJlbnQsIGVsZW1lbnQpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgICAgIGVsZW1lbnQudHlwZSxcbiAgICAgIGVsZW1lbnQua2V5LFxuICAgICAgZWxlbWVudC5wcm9wcyxcbiAgICAgIG51bGwsXG4gICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgbGFuZXNcbiAgICApO1xuICAgIGNvZXJjZVJlZihjdXJyZW50LCBlbGVtZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgY3VycmVudCwgcG9ydGFsLCBsYW5lcykge1xuICAgIGlmIChcbiAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgIDQgIT09IGN1cnJlbnQudGFnIHx8XG4gICAgICBjdXJyZW50LnN0YXRlTm9kZS5jb250YWluZXJJbmZvICE9PSBwb3J0YWwuY29udGFpbmVySW5mbyB8fFxuICAgICAgY3VycmVudC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gIT09IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKHBvcnRhbCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgKGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBjdXJyZW50XG4gICAgICApO1xuICAgIGN1cnJlbnQgPSB1c2VGaWJlcihjdXJyZW50LCBwb3J0YWwuY2hpbGRyZW4gfHwgW10pO1xuICAgIGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGN1cnJlbnQsIGZyYWdtZW50LCBsYW5lcywga2V5KSB7XG4gICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgNyAhPT0gY3VycmVudC50YWcpXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgIGZyYWdtZW50LFxuICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgbGFuZXMsXG4gICAgICAgICAga2V5XG4gICAgICAgICkpLFxuICAgICAgICAoY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgIGN1cnJlbnRcbiAgICAgICk7XG4gICAgY3VycmVudCA9IHVzZUZpYmVyKGN1cnJlbnQsIGZyYWdtZW50KTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpIHtcbiAgICBpZiAoXG4gICAgICAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAobmV3Q2hpbGQgPSBjcmVhdGVGaWJlckZyb21UZXh0KFxuICAgICAgICAgIFwiXCIgKyBuZXdDaGlsZCxcbiAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICkpLFxuICAgICAgICAobmV3Q2hpbGQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBuZXdDaGlsZFxuICAgICAgKTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIG51bGwgIT09IG5ld0NoaWxkKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAobGFuZXMgPSBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gICAgICAgICAgICAgIG5ld0NoaWxkLnR5cGUsXG4gICAgICAgICAgICAgIG5ld0NoaWxkLmtleSxcbiAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIGNvZXJjZVJlZihsYW5lcywgbmV3Q2hpbGQpLFxuICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKG5ld0NoaWxkLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIG5ld0NoaWxkXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgdmFyIGluaXQgPSBuZXdDaGlsZC5faW5pdDtcbiAgICAgICAgICBuZXdDaGlsZCA9IGluaXQobmV3Q2hpbGQuX3BheWxvYWQpO1xuICAgICAgICAgIHJldHVybiBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGQsIGxhbmVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICApKSxcbiAgICAgICAgICAobmV3Q2hpbGQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgIG5ld0NoaWxkXG4gICAgICAgICk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksIGxhbmVzKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGQoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihyZXR1cm5GaWJlciwgbmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcykge1xuICAgIHZhciBrZXkgPSBudWxsICE9PSBvbGRGaWJlciA/IG9sZEZpYmVyLmtleSA6IG51bGw7XG4gICAgaWYgKFxuICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBcIlwiICE9PSBuZXdDaGlsZCkgfHxcbiAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBuZXdDaGlsZCB8fFxuICAgICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIG5ld0NoaWxkXG4gICAgKVxuICAgICAgcmV0dXJuIG51bGwgIT09IGtleVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgb2xkRmliZXIsIFwiXCIgKyBuZXdDaGlsZCwgbGFuZXMpO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIG5ld0NoaWxkLmtleSA9PT0ga2V5XG4gICAgICAgICAgICA/IHVwZGF0ZUVsZW1lbnQocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIG5ld0NoaWxkLmtleSA9PT0ga2V5XG4gICAgICAgICAgICA/IHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcylcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChrZXkgPSBuZXdDaGlsZC5faW5pdCksXG4gICAgICAgICAgICAobmV3Q2hpbGQgPSBrZXkobmV3Q2hpbGQuX3BheWxvYWQpKSxcbiAgICAgICAgICAgIHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiBudWxsICE9PSBrZXlcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzLCBudWxsKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gdXBkYXRlU2xvdChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gdXBkYXRlU2xvdChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVGcm9tTWFwKFxuICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgcmV0dXJuRmliZXIsXG4gICAgbmV3SWR4LFxuICAgIG5ld0NoaWxkLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGlmIChcbiAgICAgIChcInN0cmluZ1wiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgXCJcIiAhPT0gbmV3Q2hpbGQpIHx8XG4gICAgICBcIm51bWJlclwiID09PSB0eXBlb2YgbmV3Q2hpbGQgfHxcbiAgICAgIFwiYmlnaW50XCIgPT09IHR5cGVvZiBuZXdDaGlsZFxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChleGlzdGluZ0NoaWxkcmVuID0gZXhpc3RpbmdDaGlsZHJlbi5nZXQobmV3SWR4KSB8fCBudWxsKSxcbiAgICAgICAgdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIFwiXCIgKyBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICApO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChleGlzdGluZ0NoaWxkcmVuID1cbiAgICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5nZXQoXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ID8gbmV3SWR4IDogbmV3Q2hpbGQua2V5XG4gICAgICAgICAgICAgICkgfHwgbnVsbCksXG4gICAgICAgICAgICB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGV4aXN0aW5nQ2hpbGRyZW4gPVxuICAgICAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLmdldChcbiAgICAgICAgICAgICAgICBudWxsID09PSBuZXdDaGlsZC5rZXkgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXlcbiAgICAgICAgICAgICAgKSB8fCBudWxsKSxcbiAgICAgICAgICAgIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbiwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHZhciBpbml0ID0gbmV3Q2hpbGQuX2luaXQ7XG4gICAgICAgICAgbmV3Q2hpbGQgPSBpbml0KG5ld0NoaWxkLl9wYXlsb2FkKTtcbiAgICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4sXG4gICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSB8fCBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoZXhpc3RpbmdDaGlsZHJlbiA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbCksXG4gICAgICAgICAgdXBkYXRlRnJhZ21lbnQocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIG5ld0NoaWxkLCBsYW5lcywgbnVsbClcbiAgICAgICAgKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuZXdDaGlsZC50aGVuKVxuICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG5ld0lkeCxcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkFycmF5KFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkcmVuLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGZvciAoXG4gICAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGwsXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBudWxsLFxuICAgICAgICBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdJZHggPSAoY3VycmVudEZpcnN0Q2hpbGQgPSAwKSxcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gbnVsbDtcbiAgICAgIG51bGwgIT09IG9sZEZpYmVyICYmIG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDtcbiAgICAgIG5ld0lkeCsrXG4gICAgKSB7XG4gICAgICBvbGRGaWJlci5pbmRleCA+IG5ld0lkeFxuICAgICAgICA/ICgobmV4dE9sZEZpYmVyID0gb2xkRmliZXIpLCAob2xkRmliZXIgPSBudWxsKSlcbiAgICAgICAgOiAobmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZyk7XG4gICAgICB2YXIgbmV3RmliZXIgPSB1cGRhdGVTbG90KFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgb2xkRmliZXIsXG4gICAgICAgIG5ld0NoaWxkcmVuW25ld0lkeF0sXG4gICAgICAgIGxhbmVzXG4gICAgICApO1xuICAgICAgaWYgKG51bGwgPT09IG5ld0ZpYmVyKSB7XG4gICAgICAgIG51bGwgPT09IG9sZEZpYmVyICYmIChvbGRGaWJlciA9IG5leHRPbGRGaWJlcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgICBvbGRGaWJlciAmJlxuICAgICAgICBudWxsID09PSBuZXdGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChuZXdGaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0lkeCk7XG4gICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXdGaWJlcilcbiAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gbmV3RmliZXIpO1xuICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgfVxuICAgIGlmIChuZXdJZHggPT09IG5ld0NoaWxkcmVuLmxlbmd0aClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlciksXG4gICAgICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KSxcbiAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZFxuICAgICAgKTtcbiAgICBpZiAobnVsbCA9PT0gb2xkRmliZXIpIHtcbiAgICAgIGZvciAoOyBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7IG5ld0lkeCsrKVxuICAgICAgICAob2xkRmliZXIgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGRyZW5bbmV3SWR4XSwgbGFuZXMpKSxcbiAgICAgICAgICBudWxsICE9PSBvbGRGaWJlciAmJlxuICAgICAgICAgICAgKChjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQoXG4gICAgICAgICAgICAgIG9sZEZpYmVyLFxuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgbmV3SWR4XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG9sZEZpYmVyKVxuICAgICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBvbGRGaWJlciksXG4gICAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IG9sZEZpYmVyKSk7XG4gICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIG9sZEZpYmVyID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ob2xkRmliZXIpO1xuICAgICAgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgbmV3SWR4KytcbiAgICApXG4gICAgICAobmV4dE9sZEZpYmVyID0gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgb2xkRmliZXIsXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBuZXdJZHgsXG4gICAgICAgIG5ld0NoaWxkcmVuW25ld0lkeF0sXG4gICAgICAgIGxhbmVzXG4gICAgICApKSxcbiAgICAgICAgbnVsbCAhPT0gbmV4dE9sZEZpYmVyICYmXG4gICAgICAgICAgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgICAgIG51bGwgIT09IG5leHRPbGRGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgIG9sZEZpYmVyLmRlbGV0ZShcbiAgICAgICAgICAgICAgbnVsbCA9PT0gbmV4dE9sZEZpYmVyLmtleSA/IG5ld0lkeCA6IG5leHRPbGRGaWJlci5rZXlcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChcbiAgICAgICAgICAgIG5leHRPbGRGaWJlcixcbiAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgbmV3SWR4XG4gICAgICAgICAgKSksXG4gICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5leHRPbGRGaWJlcilcbiAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5leHRPbGRGaWJlciksXG4gICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBuZXh0T2xkRmliZXIpKTtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBvbGRGaWJlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkcmVuLFxuICAgIGxhbmVzXG4gICkge1xuICAgIGlmIChudWxsID09IG5ld0NoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1MSkpO1xuICAgIGZvciAoXG4gICAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGwsXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBudWxsLFxuICAgICAgICBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICBuZXdJZHggPSAoY3VycmVudEZpcnN0Q2hpbGQgPSAwKSxcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gbnVsbCxcbiAgICAgICAgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKTtcbiAgICAgIG51bGwgIT09IG9sZEZpYmVyICYmICFzdGVwLmRvbmU7XG4gICAgICBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKVxuICAgICkge1xuICAgICAgb2xkRmliZXIuaW5kZXggPiBuZXdJZHhcbiAgICAgICAgPyAoKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyKSwgKG9sZEZpYmVyID0gbnVsbCkpXG4gICAgICAgIDogKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyLnNpYmxpbmcpO1xuICAgICAgdmFyIG5ld0ZpYmVyID0gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIHN0ZXAudmFsdWUsIGxhbmVzKTtcbiAgICAgIGlmIChudWxsID09PSBuZXdGaWJlcikge1xuICAgICAgICBudWxsID09PSBvbGRGaWJlciAmJiAob2xkRmliZXIgPSBuZXh0T2xkRmliZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgb2xkRmliZXIgJiZcbiAgICAgICAgbnVsbCA9PT0gbmV3RmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG4gICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQobmV3RmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpO1xuICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICA/IChyZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXIpXG4gICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyKTtcbiAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgIH1cbiAgICBpZiAoc3RlcC5kb25lKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKSxcbiAgICAgICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpLFxuICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkXG4gICAgICApO1xuICAgIGlmIChudWxsID09PSBvbGRGaWJlcikge1xuICAgICAgZm9yICg7ICFzdGVwLmRvbmU7IG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpKVxuICAgICAgICAoc3RlcCA9IGNyZWF0ZUNoaWxkKHJldHVybkZpYmVyLCBzdGVwLnZhbHVlLCBsYW5lcykpLFxuICAgICAgICAgIG51bGwgIT09IHN0ZXAgJiZcbiAgICAgICAgICAgICgoY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKHN0ZXAsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpKSxcbiAgICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IHN0ZXApXG4gICAgICAgICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IHN0ZXApLFxuICAgICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBzdGVwKSk7XG4gICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIG9sZEZpYmVyID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ob2xkRmliZXIpO1xuICAgICAgIXN0ZXAuZG9uZTtcbiAgICAgIG5ld0lkeCsrLCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpXG4gICAgKVxuICAgICAgKHN0ZXAgPSB1cGRhdGVGcm9tTWFwKG9sZEZpYmVyLCByZXR1cm5GaWJlciwgbmV3SWR4LCBzdGVwLnZhbHVlLCBsYW5lcykpLFxuICAgICAgICBudWxsICE9PSBzdGVwICYmXG4gICAgICAgICAgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgICAgIG51bGwgIT09IHN0ZXAuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgICBvbGRGaWJlci5kZWxldGUobnVsbCA9PT0gc3RlcC5rZXkgPyBuZXdJZHggOiBzdGVwLmtleSksXG4gICAgICAgICAgKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChzdGVwLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3SWR4KSksXG4gICAgICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IHN0ZXApXG4gICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBzdGVwKSxcbiAgICAgICAgICAocHJldmlvdXNOZXdGaWJlciA9IHN0ZXApKTtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBvbGRGaWJlci5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KTtcbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgcmV0dXJuRmliZXIsXG4gICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgbmV3Q2hpbGQsXG4gICAgbGFuZXNcbiAgKSB7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmXG4gICAgICBudWxsICE9PSBuZXdDaGlsZCAmJlxuICAgICAgbmV3Q2hpbGQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSAmJlxuICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ICYmXG4gICAgICAobmV3Q2hpbGQgPSBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgPSBuZXdDaGlsZC5rZXk7IG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkOyApIHtcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRGaXJzdENoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAga2V5ID0gbmV3Q2hpbGQudHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoNyA9PT0gY3VycmVudEZpcnN0Q2hpbGQudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKFxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMgPSB1c2VGaWJlcihcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQuZWxlbWVudFR5cGUgPT09IGtleSB8fFxuICAgICAgICAgICAgICAgICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBrZXkgJiZcbiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPT0ga2V5ICYmXG4gICAgICAgICAgICAgICAgICAgIGtleS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFICYmXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVMYXp5KGtleSkgPT09IGN1cnJlbnRGaXJzdENoaWxkLnR5cGUpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZC5wcm9wcyk7XG4gICAgICAgICAgICAgICAgICBjb2VyY2VSZWYobGFuZXMsIG5ld0NoaWxkKTtcbiAgICAgICAgICAgICAgICAgIGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIgPSBsYW5lcztcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gZWxzZSBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdDaGlsZC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFXG4gICAgICAgICAgICAgID8gKChsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICAgICAgICBuZXdDaGlsZC5rZXlcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAobGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQudHlwZSxcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmtleSxcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLnByb3BzLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAgIGNvZXJjZVJlZihsYW5lcywgbmV3Q2hpbGQpLFxuICAgICAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAgICAgKHJldHVybkZpYmVyID0gbGFuZXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQocmV0dXJuRmliZXIpO1xuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgIGZvciAoa2V5ID0gbmV3Q2hpbGQua2V5OyBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZDsgKSB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50Rmlyc3RDaGlsZC5rZXkgPT09IGtleSlcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICA0ID09PSBjdXJyZW50Rmlyc3RDaGlsZC50YWcgJiZcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvID09PVxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5jb250YWluZXJJbmZvICYmXG4gICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gPT09XG4gICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLmltcGxlbWVudGF0aW9uXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmdcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkID0gY3VycmVudEZpcnN0Q2hpbGQuc2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhbmVzID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKG5ld0NoaWxkLCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcyk7XG4gICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKTtcbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChrZXkgPSBuZXdDaGlsZC5faW5pdCksXG4gICAgICAgICAgICAobmV3Q2hpbGQgPSBrZXkobmV3Q2hpbGQuX3BheWxvYWQpKSxcbiAgICAgICAgICAgIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlJbXBsKG5ld0NoaWxkKSlcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSkge1xuICAgICAgICBrZXkgPSBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKTtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGtleSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNTApKTtcbiAgICAgICAgbmV3Q2hpbGQgPSBrZXkuY2FsbChuZXdDaGlsZCk7XG4gICAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICB1bndyYXBUaGVuYWJsZShuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIGlmIChuZXdDaGlsZC4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFKVxuICAgICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIHJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24ocmV0dXJuRmliZXIsIG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICAgID8gKChuZXdDaGlsZCA9IFwiXCIgKyBuZXdDaGlsZCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkICYmIDYgPT09IGN1cnJlbnRGaXJzdENoaWxkLnRhZ1xuICAgICAgICAgID8gKGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nKSxcbiAgICAgICAgICAgIChsYW5lcyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCkpLFxuICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSlcbiAgICAgICAgICA6IChkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpLFxuICAgICAgICAgICAgKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVGV4dChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAocmV0dXJuRmliZXIgPSBsYW5lcykpLFxuICAgICAgICBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKSlcbiAgICAgIDogZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIGxhbmVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gMDtcbiAgICAgIHZhciBmaXJzdENoaWxkRmliZXIgPSByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgIGxhbmVzXG4gICAgICApO1xuICAgICAgdGhlbmFibGVTdGF0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gZmlyc3RDaGlsZEZpYmVyO1xuICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgIGlmICh4ID09PSBTdXNwZW5zZUV4Y2VwdGlvbiB8fCB4ID09PSBTdXNwZW5zZUFjdGlvbkV4Y2VwdGlvbikgdGhyb3cgeDtcbiAgICAgIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDI5LCB4LCBudWxsLCByZXR1cm5GaWJlci5tb2RlKTtcbiAgICAgIGZpYmVyLmxhbmVzID0gbGFuZXM7XG4gICAgICBmaWJlci5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBmaWJlcjtcbiAgICB9IGZpbmFsbHkge1xuICAgIH1cbiAgfTtcbn1cbnZhciByZWNvbmNpbGVDaGlsZEZpYmVycyA9IGNyZWF0ZUNoaWxkUmVjb25jaWxlcighMCksXG4gIG1vdW50Q2hpbGRGaWJlcnMgPSBjcmVhdGVDaGlsZFJlY29uY2lsZXIoITEpLFxuICBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgc2hlbGxCb3VuZGFyeSA9IG51bGw7XG5mdW5jdGlvbiBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIoaGFuZGxlcikge1xuICB2YXIgY3VycmVudCA9IGhhbmRsZXIuYWx0ZXJuYXRlO1xuICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDEpO1xuICBwdXNoKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLCBoYW5kbGVyKTtcbiAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeSAmJlxuICAgIChudWxsID09PSBjdXJyZW50IHx8IG51bGwgIT09IGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IuY3VycmVudFxuICAgICAgPyAoc2hlbGxCb3VuZGFyeSA9IGhhbmRsZXIpXG4gICAgICA6IG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJiAoc2hlbGxCb3VuZGFyeSA9IGhhbmRsZXIpKTtcbn1cbmZ1bmN0aW9uIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIoZmliZXIpIHtcbiAgaWYgKDIyID09PSBmaWJlci50YWcpIHtcbiAgICBpZiAoXG4gICAgICAocHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgcHVzaChzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciwgZmliZXIpLFxuICAgICAgbnVsbCA9PT0gc2hlbGxCb3VuZGFyeSlcbiAgICApIHtcbiAgICAgIHZhciBjdXJyZW50ID0gZmliZXIuYWx0ZXJuYXRlO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgKHNoZWxsQm91bmRhcnkgPSBmaWJlcik7XG4gICAgfVxuICB9IGVsc2UgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjaygpIHtcbiAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICBwdXNoKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLCBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50KTtcbn1cbmZ1bmN0aW9uIHBvcFN1c3BlbnNlSGFuZGxlcihmaWJlcikge1xuICBwb3Aoc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IpO1xuICBzaGVsbEJvdW5kYXJ5ID09PSBmaWJlciAmJiAoc2hlbGxCb3VuZGFyeSA9IG51bGwpO1xuICBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvcik7XG59XG52YXIgc3VzcGVuc2VTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcigwKTtcbmZ1bmN0aW9uIGZpbmRGaXJzdFN1c3BlbmRlZChyb3cpIHtcbiAgZm9yICh2YXIgbm9kZSA9IHJvdzsgbnVsbCAhPT0gbm9kZTsgKSB7XG4gICAgaWYgKDEzID09PSBub2RlLnRhZykge1xuICAgICAgdmFyIHN0YXRlID0gbm9kZS5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSBzdGF0ZSAmJlxuICAgICAgICAoKHN0YXRlID0gc3RhdGUuZGVoeWRyYXRlZCksXG4gICAgICAgIG51bGwgPT09IHN0YXRlIHx8XG4gICAgICAgICAgXCIkP1wiID09PSBzdGF0ZS5kYXRhIHx8XG4gICAgICAgICAgaXNTdXNwZW5zZUluc3RhbmNlRmFsbGJhY2soc3RhdGUpKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKDE5ID09PSBub2RlLnRhZyAmJiB2b2lkIDAgIT09IG5vZGUubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcikge1xuICAgICAgaWYgKDAgIT09IChub2RlLmZsYWdzICYgMTI4KSkgcmV0dXJuIG5vZGU7XG4gICAgfSBlbHNlIGlmIChudWxsICE9PSBub2RlLmNoaWxkKSB7XG4gICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAobm9kZSA9PT0gcm93KSBicmVhaztcbiAgICBmb3IgKDsgbnVsbCA9PT0gbm9kZS5zaWJsaW5nOyApIHtcbiAgICAgIGlmIChudWxsID09PSBub2RlLnJldHVybiB8fCBub2RlLnJldHVybiA9PT0gcm93KSByZXR1cm4gbnVsbDtcbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGN0b3IsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxcbiAgbmV4dFByb3BzXG4pIHtcbiAgY3RvciA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIGN0b3IpO1xuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPVxuICAgIG51bGwgPT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fCB2b2lkIDAgPT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1xuICAgICAgPyBjdG9yXG4gICAgICA6IGFzc2lnbih7fSwgY3RvciwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKTtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgMCA9PT0gd29ya0luUHJvZ3Jlc3MubGFuZXMgJiZcbiAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUuYmFzZVN0YXRlID0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKTtcbn1cbnZhciBjbGFzc0NvbXBvbmVudFVwZGF0ZXIgPSB7XG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKGluc3QsIHBheWxvYWQsIGNhbGxiYWNrKSB7XG4gICAgaW5zdCA9IGluc3QuX3JlYWN0SW50ZXJuYWxzO1xuICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKSxcbiAgICAgIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICB1cGRhdGUucGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgdm9pZCAwICE9PSBjYWxsYmFjayAmJiBudWxsICE9PSBjYWxsYmFjayAmJiAodXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICAgIHBheWxvYWQgPSBlbnF1ZXVlVXBkYXRlKGluc3QsIHVwZGF0ZSwgbGFuZSk7XG4gICAgbnVsbCAhPT0gcGF5bG9hZCAmJlxuICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihwYXlsb2FkLCBpbnN0LCBsYW5lKSxcbiAgICAgIGVudGFuZ2xlVHJhbnNpdGlvbnMocGF5bG9hZCwgaW5zdCwgbGFuZSkpO1xuICB9LFxuICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAoaW5zdCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICBpbnN0ID0gaW5zdC5fcmVhY3RJbnRlcm5hbHM7XG4gICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpLFxuICAgICAgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICAgIHVwZGF0ZS50YWcgPSAxO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB2b2lkIDAgIT09IGNhbGxiYWNrICYmIG51bGwgIT09IGNhbGxiYWNrICYmICh1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjayk7XG4gICAgcGF5bG9hZCA9IGVucXVldWVVcGRhdGUoaW5zdCwgdXBkYXRlLCBsYW5lKTtcbiAgICBudWxsICE9PSBwYXlsb2FkICYmXG4gICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHBheWxvYWQsIGluc3QsIGxhbmUpLFxuICAgICAgZW50YW5nbGVUcmFuc2l0aW9ucyhwYXlsb2FkLCBpbnN0LCBsYW5lKSk7XG4gIH0sXG4gIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKGluc3QsIGNhbGxiYWNrKSB7XG4gICAgaW5zdCA9IGluc3QuX3JlYWN0SW50ZXJuYWxzO1xuICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKSxcbiAgICAgIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgICB1cGRhdGUudGFnID0gMjtcbiAgICB2b2lkIDAgIT09IGNhbGxiYWNrICYmIG51bGwgIT09IGNhbGxiYWNrICYmICh1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjayk7XG4gICAgY2FsbGJhY2sgPSBlbnF1ZXVlVXBkYXRlKGluc3QsIHVwZGF0ZSwgbGFuZSk7XG4gICAgbnVsbCAhPT0gY2FsbGJhY2sgJiZcbiAgICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIoY2FsbGJhY2ssIGluc3QsIGxhbmUpLFxuICAgICAgZW50YW5nbGVUcmFuc2l0aW9ucyhjYWxsYmFjaywgaW5zdCwgbGFuZSkpO1xuICB9XG59O1xuZnVuY3Rpb24gY2hlY2tTaG91bGRDb21wb25lbnRVcGRhdGUoXG4gIHdvcmtJblByb2dyZXNzLFxuICBjdG9yLFxuICBvbGRQcm9wcyxcbiAgbmV3UHJvcHMsXG4gIG9sZFN0YXRlLFxuICBuZXdTdGF0ZSxcbiAgbmV4dENvbnRleHRcbikge1xuICB3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdvcmtJblByb2dyZXNzLnNob3VsZENvbXBvbmVudFVwZGF0ZVxuICAgID8gd29ya0luUHJvZ3Jlc3Muc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5ld1Byb3BzLCBuZXdTdGF0ZSwgbmV4dENvbnRleHQpXG4gICAgOiBjdG9yLnByb3RvdHlwZSAmJiBjdG9yLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudFxuICAgICAgPyAhc2hhbGxvd0VxdWFsKG9sZFByb3BzLCBuZXdQcm9wcykgfHwgIXNoYWxsb3dFcXVhbChvbGRTdGF0ZSwgbmV3U3RhdGUpXG4gICAgICA6ICEwO1xufVxuZnVuY3Rpb24gY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoXG4gIHdvcmtJblByb2dyZXNzLFxuICBpbnN0YW5jZSxcbiAgbmV3UHJvcHMsXG4gIG5leHRDb250ZXh0XG4pIHtcbiAgd29ya0luUHJvZ3Jlc3MgPSBpbnN0YW5jZS5zdGF0ZTtcbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAmJlxuICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiZcbiAgICBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgbmV4dENvbnRleHQpO1xuICBpbnN0YW5jZS5zdGF0ZSAhPT0gd29ya0luUHJvZ3Jlc3MgJiZcbiAgICBjbGFzc0NvbXBvbmVudFVwZGF0ZXIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShpbnN0YW5jZSwgaW5zdGFuY2Uuc3RhdGUsIG51bGwpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMoQ29tcG9uZW50LCBiYXNlUHJvcHMpIHtcbiAgdmFyIG5ld1Byb3BzID0gYmFzZVByb3BzO1xuICBpZiAoXCJyZWZcIiBpbiBiYXNlUHJvcHMpIHtcbiAgICBuZXdQcm9wcyA9IHt9O1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIGJhc2VQcm9wcylcbiAgICAgIFwicmVmXCIgIT09IHByb3BOYW1lICYmIChuZXdQcm9wc1twcm9wTmFtZV0gPSBiYXNlUHJvcHNbcHJvcE5hbWVdKTtcbiAgfVxuICBpZiAoKENvbXBvbmVudCA9IENvbXBvbmVudC5kZWZhdWx0UHJvcHMpKSB7XG4gICAgbmV3UHJvcHMgPT09IGJhc2VQcm9wcyAmJiAobmV3UHJvcHMgPSBhc3NpZ24oe30sIG5ld1Byb3BzKSk7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUkNzMgaW4gQ29tcG9uZW50KVxuICAgICAgdm9pZCAwID09PSBuZXdQcm9wc1twcm9wTmFtZSQ3M10gJiZcbiAgICAgICAgKG5ld1Byb3BzW3Byb3BOYW1lJDczXSA9IENvbXBvbmVudFtwcm9wTmFtZSQ3M10pO1xuICB9XG4gIHJldHVybiBuZXdQcm9wcztcbn1cbnZhciByZXBvcnRHbG9iYWxFcnJvciA9XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlcG9ydEVycm9yXG4gICAgPyByZXBvcnRFcnJvclxuICAgIDogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygd2luZG93ICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd2luZG93LkVycm9yRXZlbnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IHdpbmRvdy5FcnJvckV2ZW50KFwiZXJyb3JcIiwge1xuICAgICAgICAgICAgYnViYmxlczogITAsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiAhMCxcbiAgICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBlcnJvciAmJlxuICAgICAgICAgICAgICBudWxsICE9PSBlcnJvciAmJlxuICAgICAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgZXJyb3IubWVzc2FnZVxuICAgICAgICAgICAgICAgID8gU3RyaW5nKGVycm9yLm1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgOiBTdHJpbmcoZXJyb3IpLFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKCF3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCkpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgcHJvY2VzcyAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByb2Nlc3MuZW1pdFxuICAgICAgICApIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoXCJ1bmNhdWdodEV4Y2VwdGlvblwiLCBlcnJvcik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfTtcbmZ1bmN0aW9uIGRlZmF1bHRPblVuY2F1Z2h0RXJyb3IoZXJyb3IpIHtcbiAgcmVwb3J0R2xvYmFsRXJyb3IoZXJyb3IpO1xufVxuZnVuY3Rpb24gZGVmYXVsdE9uQ2F1Z2h0RXJyb3IoZXJyb3IpIHtcbiAgY29uc29sZS5lcnJvcihlcnJvcik7XG59XG5mdW5jdGlvbiBkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yKGVycm9yKSB7XG4gIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbn1cbmZ1bmN0aW9uIGxvZ1VuY2F1Z2h0RXJyb3Iocm9vdCwgZXJyb3JJbmZvKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9uVW5jYXVnaHRFcnJvciA9IHJvb3Qub25VbmNhdWdodEVycm9yO1xuICAgIG9uVW5jYXVnaHRFcnJvcihlcnJvckluZm8udmFsdWUsIHsgY29tcG9uZW50U3RhY2s6IGVycm9ySW5mby5zdGFjayB9KTtcbiAgfSBjYXRjaCAoZSQ3NCkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgZSQ3NDtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gbG9nQ2F1Z2h0RXJyb3Iocm9vdCwgYm91bmRhcnksIGVycm9ySW5mbykge1xuICB0cnkge1xuICAgIHZhciBvbkNhdWdodEVycm9yID0gcm9vdC5vbkNhdWdodEVycm9yO1xuICAgIG9uQ2F1Z2h0RXJyb3IoZXJyb3JJbmZvLnZhbHVlLCB7XG4gICAgICBjb21wb25lbnRTdGFjazogZXJyb3JJbmZvLnN0YWNrLFxuICAgICAgZXJyb3JCb3VuZGFyeTogMSA9PT0gYm91bmRhcnkudGFnID8gYm91bmRhcnkuc3RhdGVOb2RlIDogbnVsbFxuICAgIH0pO1xuICB9IGNhdGNoIChlJDc1KSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlJDc1O1xuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVSb290RXJyb3JVcGRhdGUocm9vdCwgZXJyb3JJbmZvLCBsYW5lKSB7XG4gIGxhbmUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gIGxhbmUudGFnID0gMztcbiAgbGFuZS5wYXlsb2FkID0geyBlbGVtZW50OiBudWxsIH07XG4gIGxhbmUuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgbG9nVW5jYXVnaHRFcnJvcihyb290LCBlcnJvckluZm8pO1xuICB9O1xuICByZXR1cm4gbGFuZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUobGFuZSkge1xuICBsYW5lID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICBsYW5lLnRhZyA9IDM7XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gaW5pdGlhbGl6ZUNsYXNzRXJyb3JVcGRhdGUodXBkYXRlLCByb290LCBmaWJlciwgZXJyb3JJbmZvKSB7XG4gIHZhciBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgPSBmaWJlci50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcikge1xuICAgIHZhciBlcnJvciA9IGVycm9ySW5mby52YWx1ZTtcbiAgICB1cGRhdGUucGF5bG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpO1xuICAgIH07XG4gICAgdXBkYXRlLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgbG9nQ2F1Z2h0RXJyb3Iocm9vdCwgZmliZXIsIGVycm9ySW5mbyk7XG4gICAgfTtcbiAgfVxuICB2YXIgaW5zdCA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgbnVsbCAhPT0gaW5zdCAmJlxuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3QuY29tcG9uZW50RGlkQ2F0Y2ggJiZcbiAgICAodXBkYXRlLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgbG9nQ2F1Z2h0RXJyb3Iocm9vdCwgZmliZXIsIGVycm9ySW5mbyk7XG4gICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgJiZcbiAgICAgICAgKG51bGwgPT09IGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkXG4gICAgICAgICAgPyAobGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgPSBuZXcgU2V0KFt0aGlzXSkpXG4gICAgICAgICAgOiBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZC5hZGQodGhpcykpO1xuICAgICAgdmFyIHN0YWNrID0gZXJyb3JJbmZvLnN0YWNrO1xuICAgICAgdGhpcy5jb21wb25lbnREaWRDYXRjaChlcnJvckluZm8udmFsdWUsIHtcbiAgICAgICAgY29tcG9uZW50U3RhY2s6IG51bGwgIT09IHN0YWNrID8gc3RhY2sgOiBcIlwiXG4gICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRocm93RXhjZXB0aW9uKFxuICByb290LFxuICByZXR1cm5GaWJlcixcbiAgc291cmNlRmliZXIsXG4gIHZhbHVlLFxuICByb290UmVuZGVyTGFuZXNcbikge1xuICBzb3VyY2VGaWJlci5mbGFncyB8PSAzMjc2ODtcbiAgaWYgKFxuICAgIG51bGwgIT09IHZhbHVlICYmXG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHZhbHVlICYmXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUudGhlblxuICApIHtcbiAgICByZXR1cm5GaWJlciA9IHNvdXJjZUZpYmVyLmFsdGVybmF0ZTtcbiAgICBudWxsICE9PSByZXR1cm5GaWJlciAmJlxuICAgICAgcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBzb3VyY2VGaWJlcixcbiAgICAgICAgcm9vdFJlbmRlckxhbmVzLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBzb3VyY2VGaWJlciA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgaWYgKG51bGwgIT09IHNvdXJjZUZpYmVyKSB7XG4gICAgICBzd2l0Y2ggKHNvdXJjZUZpYmVyLnRhZykge1xuICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBudWxsID09PSBzaGVsbEJvdW5kYXJ5XG4gICAgICAgICAgICAgID8gcmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSgpXG4gICAgICAgICAgICAgIDogbnVsbCA9PT0gc291cmNlRmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgICAgICAgMCA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMyksXG4gICAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgJj0gLTI1NyksXG4gICAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmxhbmVzID0gcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgIHZhbHVlID09PSBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGVcbiAgICAgICAgICAgICAgPyAoc291cmNlRmliZXIuZmxhZ3MgfD0gMTYzODQpXG4gICAgICAgICAgICAgIDogKChyZXR1cm5GaWJlciA9IHNvdXJjZUZpYmVyLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgICAgICAgICBudWxsID09PSByZXR1cm5GaWJlclxuICAgICAgICAgICAgICAgICAgPyAoc291cmNlRmliZXIudXBkYXRlUXVldWUgPSBuZXcgU2V0KFt2YWx1ZV0pKVxuICAgICAgICAgICAgICAgICAgOiByZXR1cm5GaWJlci5hZGQodmFsdWUpLFxuICAgICAgICAgICAgICAgIGF0dGFjaFBpbmdMaXN0ZW5lcihyb290LCB2YWx1ZSwgcm9vdFJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgMjI6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgICB2YWx1ZSA9PT0gbm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlXG4gICAgICAgICAgICAgID8gKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDE2Mzg0KVxuICAgICAgICAgICAgICA6ICgocmV0dXJuRmliZXIgPSBzb3VyY2VGaWJlci51cGRhdGVRdWV1ZSksXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gcmV0dXJuRmliZXJcbiAgICAgICAgICAgICAgICAgID8gKChyZXR1cm5GaWJlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uczogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJJbnN0YW5jZXM6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgcmV0cnlRdWV1ZTogbmV3IFNldChbdmFsdWVdKVxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgKHNvdXJjZUZpYmVyLnVwZGF0ZVF1ZXVlID0gcmV0dXJuRmliZXIpKVxuICAgICAgICAgICAgICAgICAgOiAoKHNvdXJjZUZpYmVyID0gcmV0dXJuRmliZXIucmV0cnlRdWV1ZSksXG4gICAgICAgICAgICAgICAgICAgIG51bGwgPT09IHNvdXJjZUZpYmVyXG4gICAgICAgICAgICAgICAgICAgICAgPyAocmV0dXJuRmliZXIucmV0cnlRdWV1ZSA9IG5ldyBTZXQoW3ZhbHVlXSkpXG4gICAgICAgICAgICAgICAgICAgICAgOiBzb3VyY2VGaWJlci5hZGQodmFsdWUpKSxcbiAgICAgICAgICAgICAgICBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgdmFsdWUsIHJvb3RSZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgITFcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MzUsIHNvdXJjZUZpYmVyLnRhZykpO1xuICAgIH1cbiAgICBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgdmFsdWUsIHJvb3RSZW5kZXJMYW5lcyk7XG4gICAgcmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSgpO1xuICAgIHJldHVybiAhMTtcbiAgfVxuICBpZiAoaXNIeWRyYXRpbmcpXG4gICAgcmV0dXJuIChcbiAgICAgIChyZXR1cm5GaWJlciA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgbnVsbCAhPT0gcmV0dXJuRmliZXJcbiAgICAgICAgPyAoMCA9PT0gKHJldHVybkZpYmVyLmZsYWdzICYgNjU1MzYpICYmIChyZXR1cm5GaWJlci5mbGFncyB8PSAyNTYpLFxuICAgICAgICAgIChyZXR1cm5GaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgKHJldHVybkZpYmVyLmxhbmVzID0gcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICB2YWx1ZSAhPT0gSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24gJiZcbiAgICAgICAgICAgICgocm9vdCA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDIyKSwgeyBjYXVzZTogdmFsdWUgfSkpLFxuICAgICAgICAgICAgcXVldWVIeWRyYXRpb25FcnJvcihjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihyb290LCBzb3VyY2VGaWJlcikpKSlcbiAgICAgICAgOiAodmFsdWUgIT09IEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uICYmXG4gICAgICAgICAgICAoKHJldHVybkZpYmVyID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MjMpLCB7XG4gICAgICAgICAgICAgIGNhdXNlOiB2YWx1ZVxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgcXVldWVIeWRyYXRpb25FcnJvcihcbiAgICAgICAgICAgICAgY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIocmV0dXJuRmliZXIsIHNvdXJjZUZpYmVyKVxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgKHJvb3QgPSByb290LmN1cnJlbnQuYWx0ZXJuYXRlKSxcbiAgICAgICAgICAocm9vdC5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgKHJvb3RSZW5kZXJMYW5lcyAmPSAtcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAocm9vdC5sYW5lcyB8PSByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICh2YWx1ZSA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHZhbHVlLCBzb3VyY2VGaWJlcikpLFxuICAgICAgICAgIChyb290UmVuZGVyTGFuZXMgPSBjcmVhdGVSb290RXJyb3JVcGRhdGUoXG4gICAgICAgICAgICByb290LnN0YXRlTm9kZSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgcm9vdFJlbmRlckxhbmVzXG4gICAgICAgICAgKSksXG4gICAgICAgICAgZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHJvb3QsIHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgNCAhPT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAyKSksXG4gICAgICAhMVxuICAgICk7XG4gIHZhciB3cmFwcGVyRXJyb3IgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyMCksIHsgY2F1c2U6IHZhbHVlIH0pO1xuICB3cmFwcGVyRXJyb3IgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih3cmFwcGVyRXJyb3IsIHNvdXJjZUZpYmVyKTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9yc1xuICAgID8gKHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPSBbd3JhcHBlckVycm9yXSlcbiAgICA6IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMucHVzaCh3cmFwcGVyRXJyb3IpO1xuICA0ICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmICh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMik7XG4gIGlmIChudWxsID09PSByZXR1cm5GaWJlcikgcmV0dXJuICEwO1xuICB2YWx1ZSA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHZhbHVlLCBzb3VyY2VGaWJlcik7XG4gIHNvdXJjZUZpYmVyID0gcmV0dXJuRmliZXI7XG4gIGRvIHtcbiAgICBzd2l0Y2ggKHNvdXJjZUZpYmVyLnRhZykge1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgKHJvb3QgPSByb290UmVuZGVyTGFuZXMgJiAtcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAoc291cmNlRmliZXIubGFuZXMgfD0gcm9vdCksXG4gICAgICAgICAgKHJvb3QgPSBjcmVhdGVSb290RXJyb3JVcGRhdGUoc291cmNlRmliZXIuc3RhdGVOb2RlLCB2YWx1ZSwgcm9vdCkpLFxuICAgICAgICAgIGVucXVldWVDYXB0dXJlZFVwZGF0ZShzb3VyY2VGaWJlciwgcm9vdCksXG4gICAgICAgICAgITFcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgocmV0dXJuRmliZXIgPSBzb3VyY2VGaWJlci50eXBlKSxcbiAgICAgICAgICAod3JhcHBlckVycm9yID0gc291cmNlRmliZXIuc3RhdGVOb2RlKSxcbiAgICAgICAgICAwID09PSAoc291cmNlRmliZXIuZmxhZ3MgJiAxMjgpICYmXG4gICAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmV0dXJuRmliZXIuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIHx8XG4gICAgICAgICAgICAgIChudWxsICE9PSB3cmFwcGVyRXJyb3IgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3cmFwcGVyRXJyb3IuY29tcG9uZW50RGlkQ2F0Y2ggJiZcbiAgICAgICAgICAgICAgICAobnVsbCA9PT0gbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgfHxcbiAgICAgICAgICAgICAgICAgICFsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZC5oYXMod3JhcHBlckVycm9yKSkpKSlcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoc291cmNlRmliZXIuZmxhZ3MgfD0gNjU1MzYpLFxuICAgICAgICAgICAgKHJvb3RSZW5kZXJMYW5lcyAmPSAtcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5sYW5lcyB8PSByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgKHJvb3RSZW5kZXJMYW5lcyA9IGNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUocm9vdFJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICBpbml0aWFsaXplQ2xhc3NFcnJvclVwZGF0ZShcbiAgICAgICAgICAgICAgcm9vdFJlbmRlckxhbmVzLFxuICAgICAgICAgICAgICByb290LFxuICAgICAgICAgICAgICBzb3VyY2VGaWJlcixcbiAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUoc291cmNlRmliZXIsIHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgfVxuICAgIHNvdXJjZUZpYmVyID0gc291cmNlRmliZXIucmV0dXJuO1xuICB9IHdoaWxlIChudWxsICE9PSBzb3VyY2VGaWJlcik7XG4gIHJldHVybiAhMTtcbn1cbnZhciBTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2MSkpLFxuICBkaWRSZWNlaXZlVXBkYXRlID0gITE7XG5mdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcykge1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9XG4gICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgPyBtb3VudENoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBudWxsLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKVxuICAgICAgOiByZWNvbmNpbGVDaGlsZEZpYmVycyhcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBjdXJyZW50LmNoaWxkLFxuICAgICAgICAgIG5leHRDaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApO1xufVxuZnVuY3Rpb24gdXBkYXRlRm9yd2FyZFJlZihcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIENvbXBvbmVudCA9IENvbXBvbmVudC5yZW5kZXI7XG4gIHZhciByZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7XG4gIGlmIChcInJlZlwiIGluIG5leHRQcm9wcykge1xuICAgIHZhciBwcm9wc1dpdGhvdXRSZWYgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV4dFByb3BzKVxuICAgICAgXCJyZWZcIiAhPT0ga2V5ICYmIChwcm9wc1dpdGhvdXRSZWZba2V5XSA9IG5leHRQcm9wc1trZXldKTtcbiAgfSBlbHNlIHByb3BzV2l0aG91dFJlZiA9IG5leHRQcm9wcztcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICBuZXh0UHJvcHMgPSByZW5kZXJXaXRoSG9va3MoXG4gICAgY3VycmVudCxcbiAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICBDb21wb25lbnQsXG4gICAgcHJvcHNXaXRob3V0UmVmLFxuICAgIHJlZixcbiAgICByZW5kZXJMYW5lc1xuICApO1xuICBrZXkgPSBjaGVja0RpZFJlbmRlcklkSG9vaygpO1xuICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiAhZGlkUmVjZWl2ZVVwZGF0ZSlcbiAgICByZXR1cm4gKFxuICAgICAgYmFpbG91dEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyksXG4gICAgICBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcylcbiAgICApO1xuICBpc0h5ZHJhdGluZyAmJiBrZXkgJiYgcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMsIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gdXBkYXRlTWVtb0NvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgdmFyIHR5cGUgPSBDb21wb25lbnQudHlwZTtcbiAgICBpZiAoXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB0eXBlICYmXG4gICAgICAhc2hvdWxkQ29uc3RydWN0KHR5cGUpICYmXG4gICAgICB2b2lkIDAgPT09IHR5cGUuZGVmYXVsdFByb3BzICYmXG4gICAgICBudWxsID09PSBDb21wb25lbnQuY29tcGFyZVxuICAgIClcbiAgICAgIHJldHVybiAoXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy50YWcgPSAxNSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy50eXBlID0gdHlwZSksXG4gICAgICAgIHVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApXG4gICAgICApO1xuICAgIGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gICAgICBDb21wb25lbnQudHlwZSxcbiAgICAgIG51bGwsXG4gICAgICBuZXh0UHJvcHMsXG4gICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgIHdvcmtJblByb2dyZXNzLm1vZGUsXG4gICAgICByZW5kZXJMYW5lc1xuICAgICk7XG4gICAgY3VycmVudC5yZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7XG4gICAgY3VycmVudC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICByZXR1cm4gKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudCk7XG4gIH1cbiAgdHlwZSA9IGN1cnJlbnQuY2hpbGQ7XG4gIGlmICghY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQoY3VycmVudCwgcmVuZGVyTGFuZXMpKSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IHR5cGUubWVtb2l6ZWRQcm9wcztcbiAgICBDb21wb25lbnQgPSBDb21wb25lbnQuY29tcGFyZTtcbiAgICBDb21wb25lbnQgPSBudWxsICE9PSBDb21wb25lbnQgPyBDb21wb25lbnQgOiBzaGFsbG93RXF1YWw7XG4gICAgaWYgKENvbXBvbmVudChwcmV2UHJvcHMsIG5leHRQcm9wcykgJiYgY3VycmVudC5yZWYgPT09IHdvcmtJblByb2dyZXNzLnJlZilcbiAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gIH1cbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTtcbiAgY3VycmVudCA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKHR5cGUsIG5leHRQcm9wcyk7XG4gIGN1cnJlbnQucmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICBjdXJyZW50LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICByZXR1cm4gKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudCk7XG59XG5mdW5jdGlvbiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQpIHtcbiAgICB2YXIgcHJldlByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICAgIGlmIChcbiAgICAgIHNoYWxsb3dFcXVhbChwcmV2UHJvcHMsIG5leHRQcm9wcykgJiZcbiAgICAgIGN1cnJlbnQucmVmID09PSB3b3JrSW5Qcm9ncmVzcy5yZWZcbiAgICApXG4gICAgICBpZiAoXG4gICAgICAgICgoZGlkUmVjZWl2ZVVwZGF0ZSA9ICExKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyA9IG5leHRQcm9wcyA9IHByZXZQcm9wcyksXG4gICAgICAgIGNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSlcbiAgICAgIClcbiAgICAgICAgMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMzEwNzIpICYmIChkaWRSZWNlaXZlVXBkYXRlID0gITApO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXMpLFxuICAgICAgICAgIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKVxuICAgICAgICApO1xuICB9XG4gIHJldHVybiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgICBjdXJyZW50LFxuICAgIHdvcmtJblByb2dyZXNzLFxuICAgIENvbXBvbmVudCxcbiAgICBuZXh0UHJvcHMsXG4gICAgcmVuZGVyTGFuZXNcbiAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICBuZXh0Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW4sXG4gICAgcHJldlN0YXRlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gIGlmIChcImhpZGRlblwiID09PSBuZXh0UHJvcHMubW9kZSkge1xuICAgIGlmICgwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpKSB7XG4gICAgICBuZXh0UHJvcHMgPVxuICAgICAgICBudWxsICE9PSBwcmV2U3RhdGUgPyBwcmV2U3RhdGUuYmFzZUxhbmVzIHwgcmVuZGVyTGFuZXMgOiByZW5kZXJMYW5lcztcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgICAgIG5leHRDaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZDtcbiAgICAgICAgZm9yIChwcmV2U3RhdGUgPSAwOyBudWxsICE9PSBuZXh0Q2hpbGRyZW47IClcbiAgICAgICAgICAocHJldlN0YXRlID1cbiAgICAgICAgICAgIHByZXZTdGF0ZSB8IG5leHRDaGlsZHJlbi5sYW5lcyB8IG5leHRDaGlsZHJlbi5jaGlsZExhbmVzKSxcbiAgICAgICAgICAgIChuZXh0Q2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW4uc2libGluZyk7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSBwcmV2U3RhdGUgJiB+bmV4dFByb3BzO1xuICAgICAgfSBlbHNlICh3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gMCksICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGwpO1xuICAgICAgcmV0dXJuIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKDAgIT09IChyZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikpXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHsgYmFzZUxhbmVzOiAwLCBjYWNoZVBvb2w6IG51bGwgfSksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBwdXNoVHJhbnNpdGlvbihcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgbnVsbCAhPT0gcHJldlN0YXRlID8gcHJldlN0YXRlLmNhY2hlUG9vbCA6IG51bGxcbiAgICAgICAgICApLFxuICAgICAgICBudWxsICE9PSBwcmV2U3RhdGVcbiAgICAgICAgICA/IHB1c2hIaWRkZW5Db250ZXh0KHdvcmtJblByb2dyZXNzLCBwcmV2U3RhdGUpXG4gICAgICAgICAgOiByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCksXG4gICAgICAgIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiAoXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSA1MzY4NzA5MTIpLFxuICAgICAgICBkZWZlckhpZGRlbk9mZnNjcmVlbkNvbXBvbmVudChcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIG51bGwgIT09IHByZXZTdGF0ZSA/IHByZXZTdGF0ZS5iYXNlTGFuZXMgfCByZW5kZXJMYW5lcyA6IHJlbmRlckxhbmVzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgIClcbiAgICAgICk7XG4gIH0gZWxzZVxuICAgIG51bGwgIT09IHByZXZTdGF0ZVxuICAgICAgPyAocHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIHByZXZTdGF0ZS5jYWNoZVBvb2wpLFxuICAgICAgICBwdXNoSGlkZGVuQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcHJldlN0YXRlKSxcbiAgICAgICAgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSlcbiAgICAgIDogKG51bGwgIT09IGN1cnJlbnQgJiYgcHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIG51bGwpLFxuICAgICAgICByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCksXG4gICAgICAgIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcykpO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dEJhc2VMYW5lcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gcGVla0NhY2hlRnJvbVBvb2woKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICBudWxsID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgID8gbnVsbFxuICAgICAgOiB7IHBhcmVudDogQ2FjaGVDb250ZXh0Ll9jdXJyZW50VmFsdWUsIHBvb2w6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCB9O1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0ge1xuICAgIGJhc2VMYW5lczogbmV4dEJhc2VMYW5lcyxcbiAgICBjYWNoZVBvb2w6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICB9O1xuICBudWxsICE9PSBjdXJyZW50ICYmIHB1c2hUcmFuc2l0aW9uKHdvcmtJblByb2dyZXNzLCBudWxsKTtcbiAgcmV1c2VIaWRkZW5Db250ZXh0T25TdGFjaygpO1xuICBwdXNoT2Zmc2NyZWVuU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcywgITApO1xuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgdmFyIHJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgaWYgKG51bGwgPT09IHJlZilcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICBudWxsICE9PSBjdXJyZW50LnJlZiAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQxOTQ4MTYpO1xuICBlbHNlIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcmVmICYmIFwib2JqZWN0XCIgIT09IHR5cGVvZiByZWYpXG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI4NCkpO1xuICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IGN1cnJlbnQucmVmICE9PSByZWYpXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0ODE2O1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgQ29tcG9uZW50ID0gcmVuZGVyV2l0aEhvb2tzKFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICB2b2lkIDAsXG4gICAgcmVuZGVyTGFuZXNcbiAgKTtcbiAgbmV4dFByb3BzID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgIWRpZFJlY2VpdmVVcGRhdGUpXG4gICAgcmV0dXJuIChcbiAgICAgIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpLFxuICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgKTtcbiAgaXNIeWRyYXRpbmcgJiYgbmV4dFByb3BzICYmIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIHJlcGxheUZ1bmN0aW9uQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dFByb3BzLFxuICBDb21wb25lbnQsXG4gIHNlY29uZEFyZyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgbmV4dFByb3BzID0gcmVuZGVyV2l0aEhvb2tzQWdhaW4oXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICBzZWNvbmRBcmdcbiAgKTtcbiAgZmluaXNoUmVuZGVyaW5nSG9va3MoY3VycmVudCk7XG4gIENvbXBvbmVudCA9IGNoZWNrRGlkUmVuZGVySWRIb29rKCk7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmICFkaWRSZWNlaXZlVXBkYXRlKVxuICAgIHJldHVybiAoXG4gICAgICBiYWlsb3V0SG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSxcbiAgICAgIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKVxuICAgICk7XG4gIGlzSHlkcmF0aW5nICYmIENvbXBvbmVudCAmJiBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiB1cGRhdGVDbGFzc0NvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gZW1wdHlDb250ZXh0T2JqZWN0LFxuICAgICAgY29udGV4dFR5cGUgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlICYmXG4gICAgICBudWxsICE9PSBjb250ZXh0VHlwZSAmJlxuICAgICAgKGNvbnRleHQgPSByZWFkQ29udGV4dChjb250ZXh0VHlwZSkpO1xuICAgIGNvbnRleHQgPSBuZXcgQ29tcG9uZW50KG5leHRQcm9wcywgY29udGV4dCk7XG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9XG4gICAgICBudWxsICE9PSBjb250ZXh0LnN0YXRlICYmIHZvaWQgMCAhPT0gY29udGV4dC5zdGF0ZSA/IGNvbnRleHQuc3RhdGUgOiBudWxsO1xuICAgIGNvbnRleHQudXBkYXRlciA9IGNsYXNzQ29tcG9uZW50VXBkYXRlcjtcbiAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjb250ZXh0O1xuICAgIGNvbnRleHQuX3JlYWN0SW50ZXJuYWxzID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBjb250ZXh0LnByb3BzID0gbmV4dFByb3BzO1xuICAgIGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHQucmVmcyA9IHt9O1xuICAgIGluaXRpYWxpemVVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgY29udGV4dFR5cGUgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgY29udGV4dC5jb250ZXh0ID1cbiAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBjb250ZXh0VHlwZSAmJiBudWxsICE9PSBjb250ZXh0VHlwZVxuICAgICAgICA/IHJlYWRDb250ZXh0KGNvbnRleHRUeXBlKVxuICAgICAgICA6IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBjb250ZXh0LnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dFR5cGUgJiZcbiAgICAgIChhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgY29udGV4dFR5cGUsXG4gICAgICAgIG5leHRQcm9wc1xuICAgICAgKSxcbiAgICAgIChjb250ZXh0LnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSkpO1xuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQpIHx8XG4gICAgICAoKGNvbnRleHRUeXBlID0gY29udGV4dC5zdGF0ZSksXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgY29udGV4dFR5cGUgIT09IGNvbnRleHQuc3RhdGUgJiZcbiAgICAgICAgY2xhc3NDb21wb25lbnRVcGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUoY29udGV4dCwgY29udGV4dC5zdGF0ZSwgbnVsbCksXG4gICAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgY29udGV4dCwgcmVuZGVyTGFuZXMpLFxuICAgICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpLFxuICAgICAgKGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSk7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQxOTQzMDgpO1xuICAgIG5leHRQcm9wcyA9ICEwO1xuICB9IGVsc2UgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIHZhciB1bnJlc29sdmVkT2xkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzLFxuICAgICAgb2xkUHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhDb21wb25lbnQsIHVucmVzb2x2ZWRPbGRQcm9wcyk7XG4gICAgY29udGV4dC5wcm9wcyA9IG9sZFByb3BzO1xuICAgIHZhciBvbGRDb250ZXh0ID0gY29udGV4dC5jb250ZXh0LFxuICAgICAgY29udGV4dFR5cGUkanNjb21wJDAgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgY29udGV4dFR5cGUgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlJGpzY29tcCQwICYmXG4gICAgICBudWxsICE9PSBjb250ZXh0VHlwZSRqc2NvbXAkMCAmJlxuICAgICAgKGNvbnRleHRUeXBlID0gcmVhZENvbnRleHQoY29udGV4dFR5cGUkanNjb21wJDApKTtcbiAgICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9XG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7XG4gICAgdW5yZXNvbHZlZE9sZFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzICE9PSB1bnJlc29sdmVkT2xkUHJvcHM7XG4gICAgY29udGV4dFR5cGUkanNjb21wJDAgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykgfHxcbiAgICAgICgodW5yZXNvbHZlZE9sZFByb3BzIHx8IG9sZENvbnRleHQgIT09IGNvbnRleHRUeXBlKSAmJlxuICAgICAgICBjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICBjb250ZXh0VHlwZVxuICAgICAgICApKTtcbiAgICBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuICAgIHZhciBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5zdGF0ZSA9IG9sZFN0YXRlO1xuICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyk7XG4gICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpO1xuICAgIG9sZENvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIHVucmVzb2x2ZWRPbGRQcm9wcyB8fCBvbGRTdGF0ZSAhPT0gb2xkQ29udGV4dCB8fCBoYXNGb3JjZVVwZGF0ZVxuICAgICAgPyAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICYmXG4gICAgICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHNcbiAgICAgICAgICApLFxuICAgICAgICAgIChvbGRDb250ZXh0ID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSkpLFxuICAgICAgICAob2xkUHJvcHMgPVxuICAgICAgICAgIGhhc0ZvcmNlVXBkYXRlIHx8XG4gICAgICAgICAgY2hlY2tTaG91bGRDb21wb25lbnRVcGRhdGUoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIG9sZFByb3BzLFxuICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgb2xkU3RhdGUsXG4gICAgICAgICAgICBvbGRDb250ZXh0LFxuICAgICAgICAgICAgY29udGV4dFR5cGVcbiAgICAgICAgICApKVxuICAgICAgICAgID8gKGNvbnRleHRUeXBlJGpzY29tcCQwIHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCkgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQoKSxcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCkpXG4gICAgICAgICAgOiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG9sZENvbnRleHQpKSxcbiAgICAgICAgKGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHMpLFxuICAgICAgICAoY29udGV4dC5zdGF0ZSA9IG9sZENvbnRleHQpLFxuICAgICAgICAoY29udGV4dC5jb250ZXh0ID0gY29udGV4dFR5cGUpLFxuICAgICAgICAobmV4dFByb3BzID0gb2xkUHJvcHMpKVxuICAgICAgOiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSxcbiAgICAgICAgKG5leHRQcm9wcyA9ICExKSk7XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICBjb250ZXh0VHlwZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gICAgY29udGV4dFR5cGUkanNjb21wJDAgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhDb21wb25lbnQsIGNvbnRleHRUeXBlKTtcbiAgICBjb250ZXh0LnByb3BzID0gY29udGV4dFR5cGUkanNjb21wJDA7XG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIG9sZFN0YXRlID0gY29udGV4dC5jb250ZXh0O1xuICAgIG9sZENvbnRleHQgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgb2xkUHJvcHMgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9sZENvbnRleHQgJiZcbiAgICAgIG51bGwgIT09IG9sZENvbnRleHQgJiZcbiAgICAgIChvbGRQcm9wcyA9IHJlYWRDb250ZXh0KG9sZENvbnRleHQpKTtcbiAgICB1bnJlc29sdmVkT2xkUHJvcHMgPSBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICAgIChvbGRDb250ZXh0ID1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVucmVzb2x2ZWRPbGRQcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSkgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykgfHxcbiAgICAgICgoY29udGV4dFR5cGUgIT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fCBvbGRTdGF0ZSAhPT0gb2xkUHJvcHMpICYmXG4gICAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIG9sZFByb3BzXG4gICAgICAgICkpO1xuICAgIGhhc0ZvcmNlVXBkYXRlID0gITE7XG4gICAgb2xkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHQuc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgY29udGV4dCwgcmVuZGVyTGFuZXMpO1xuICAgIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKTtcbiAgICB2YXIgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHRUeXBlICE9PSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICBvbGRTdGF0ZSAhPT0gbmV3U3RhdGUgfHxcbiAgICBoYXNGb3JjZVVwZGF0ZSB8fFxuICAgIChudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICBudWxsICE9PSBjdXJyZW50LmRlcGVuZGVuY2llcyAmJlxuICAgICAgY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnQuZGVwZW5kZW5jaWVzKSlcbiAgICAgID8gKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVucmVzb2x2ZWRPbGRQcm9wcyAmJlxuICAgICAgICAgIChhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgdW5yZXNvbHZlZE9sZFByb3BzLFxuICAgICAgICAgICAgbmV4dFByb3BzXG4gICAgICAgICAgKSxcbiAgICAgICAgICAobmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSksXG4gICAgICAgIChjb250ZXh0VHlwZSRqc2NvbXAkMCA9XG4gICAgICAgICAgaGFzRm9yY2VVcGRhdGUgfHxcbiAgICAgICAgICBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgY29udGV4dFR5cGUkanNjb21wJDAsXG4gICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICBvbGRTdGF0ZSxcbiAgICAgICAgICAgIG5ld1N0YXRlLFxuICAgICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgICApIHx8XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQuZGVwZW5kZW5jaWVzICYmXG4gICAgICAgICAgICBjaGVja0lmQ29udGV4dENoYW5nZWQoY3VycmVudC5kZXBlbmRlbmNpZXMpKSlcbiAgICAgICAgICA/IChvbGRDb250ZXh0IHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlKSB8fFxuICAgICAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV3U3RhdGUsIG9sZFByb3BzKSxcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSAmJlxuICAgICAgICAgICAgICAgIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICBuZXdTdGF0ZSxcbiAgICAgICAgICAgICAgICAgIG9sZFByb3BzXG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNCksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSlcbiAgICAgICAgICA6IChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSB8fFxuICAgICAgICAgICAgICAoY29udGV4dFR5cGUgPT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAmJlxuICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgfHxcbiAgICAgICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTAyNCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlKSksXG4gICAgICAgIChjb250ZXh0LnByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgKGNvbnRleHQuc3RhdGUgPSBuZXdTdGF0ZSksXG4gICAgICAgIChjb250ZXh0LmNvbnRleHQgPSBvbGRQcm9wcyksXG4gICAgICAgIChuZXh0UHJvcHMgPSBjb250ZXh0VHlwZSRqc2NvbXAkMCkpXG4gICAgICA6IChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSB8fFxuICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSxcbiAgICAgICAgKG5leHRQcm9wcyA9ICExKSk7XG4gIH1cbiAgY29udGV4dCA9IG5leHRQcm9wcztcbiAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gIG5leHRQcm9wcyA9IDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCk7XG4gIGNvbnRleHQgfHwgbmV4dFByb3BzXG4gICAgPyAoKGNvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpLFxuICAgICAgKENvbXBvbmVudCA9XG4gICAgICAgIG5leHRQcm9wcyAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yXG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiBjb250ZXh0LnJlbmRlcigpKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxKSxcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgbmV4dFByb3BzXG4gICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBjdXJyZW50LmNoaWxkLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKSksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICkpKVxuICAgICAgICA6IHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlbmRlckxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gY29udGV4dC5zdGF0ZSksXG4gICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSlcbiAgICA6IChjdXJyZW50ID0gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApKTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5mdW5jdGlvbiBtb3VudEhvc3RSb290V2l0aG91dEh5ZHJhdGluZyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIG5leHRDaGlsZHJlbixcbiAgcmVuZGVyTGFuZXNcbikge1xuICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDI1NjtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG52YXIgU1VTUEVOREVEX01BUktFUiA9IHtcbiAgZGVoeWRyYXRlZDogbnVsbCxcbiAgdHJlZUNvbnRleHQ6IG51bGwsXG4gIHJldHJ5TGFuZTogMCxcbiAgaHlkcmF0aW9uRXJyb3JzOiBudWxsXG59O1xuZnVuY3Rpb24gbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSB7XG4gIHJldHVybiB7IGJhc2VMYW5lczogcmVuZGVyTGFuZXMsIGNhY2hlUG9vbDogZ2V0U3VzcGVuZGVkQ2FjaGUoKSB9O1xufVxuZnVuY3Rpb24gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gIGN1cnJlbnQsXG4gIHByaW1hcnlUcmVlRGlkRGVmZXIsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgY3VycmVudCA9IG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50LmNoaWxkTGFuZXMgJiB+cmVuZGVyTGFuZXMgOiAwO1xuICBwcmltYXJ5VHJlZURpZERlZmVyICYmIChjdXJyZW50IHw9IHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lKTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5mdW5jdGlvbiB1cGRhdGVTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICBzaG93RmFsbGJhY2sgPSAhMSxcbiAgICBkaWRTdXNwZW5kID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSxcbiAgICBKU0NvbXBpbGVyX3RlbXA7XG4gIChKU0NvbXBpbGVyX3RlbXAgPSBkaWRTdXNwZW5kKSB8fFxuICAgIChKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBudWxsID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyAhMVxuICAgICAgICA6IDAgIT09IChzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQgJiAyKSk7XG4gIEpTQ29tcGlsZXJfdGVtcCAmJiAoKHNob3dGYWxsYmFjayA9ICEwKSwgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xMjkpKTtcbiAgSlNDb21waWxlcl90ZW1wID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMzIpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMzM7XG4gIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICBzaG93RmFsbGJhY2tcbiAgICAgICAgPyBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpXG4gICAgICAgIDogcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICB2YXIgbmV4dEluc3RhbmNlID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSxcbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDA7XG4gICAgICAgIGlmICgoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gbmV4dEluc3RhbmNlKSkge1xuICAgICAgICAgIGM6IHtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IG5leHRJbnN0YW5jZTtcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgIG5leHRJbnN0YW5jZSA9IHJvb3RPclNpbmdsZXRvbkNvbnRleHQ7XG4gICAgICAgICAgICAgIDggIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5ub2RlVHlwZTtcblxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmICghbmV4dEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhayBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5uZXh0U2libGluZ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhayBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIG51bGwgIT09IG5leHRJbnN0YW5jZVxuICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgZGVoeWRyYXRlZDogbmV4dEluc3RhbmNlLFxuICAgICAgICAgICAgICAgIHRyZWVDb250ZXh0OlxuICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gdHJlZUNvbnRleHRQcm92aWRlclxuICAgICAgICAgICAgICAgICAgICA/IHsgaWQ6IHRyZWVDb250ZXh0SWQsIG92ZXJmbG93OiB0cmVlQ29udGV4dE92ZXJmbG93IH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgICAgIHJldHJ5TGFuZTogNTM2ODcwOTEyLFxuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkVycm9yczogbnVsbFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKFxuICAgICAgICAgICAgICAgIDE4LFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnN0YXRlTm9kZSA9IG5leHRJbnN0YW5jZSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDApLFxuICAgICAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gbnVsbCksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSAhMCkpXG4gICAgICAgICAgICA6IChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSAhMSk7XG4gICAgICAgIH1cbiAgICAgICAgSlNDb21waWxlcl90ZW1wJGpzY29tcCQwIHx8IHRocm93T25IeWRyYXRpb25NaXNtYXRjaCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICB9XG4gICAgICBuZXh0SW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsICE9PSBuZXh0SW5zdGFuY2UgJiZcbiAgICAgICAgKChuZXh0SW5zdGFuY2UgPSBuZXh0SW5zdGFuY2UuZGVoeWRyYXRlZCksIG51bGwgIT09IG5leHRJbnN0YW5jZSlcbiAgICAgIClcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBpc1N1c3BlbnNlSW5zdGFuY2VGYWxsYmFjayhuZXh0SW5zdGFuY2UpXG4gICAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDMyKVxuICAgICAgICAgICAgOiAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSA1MzY4NzA5MTIpLFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKTtcbiAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuICAgIG5leHRJbnN0YW5jZSA9IG5leHRQcm9wcy5jaGlsZHJlbjtcbiAgICBuZXh0UHJvcHMgPSBuZXh0UHJvcHMuZmFsbGJhY2s7XG4gICAgaWYgKHNob3dGYWxsYmFjaylcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChzaG93RmFsbGJhY2sgPSB3b3JrSW5Qcm9ncmVzcy5tb2RlKSxcbiAgICAgICAgKG5leHRJbnN0YW5jZSA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihcbiAgICAgICAgICB7IG1vZGU6IFwiaGlkZGVuXCIsIGNoaWxkcmVuOiBuZXh0SW5zdGFuY2UgfSxcbiAgICAgICAgICBzaG93RmFsbGJhY2tcbiAgICAgICAgKSksXG4gICAgICAgIChuZXh0UHJvcHMgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgc2hvd0ZhbGxiYWNrLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgIG51bGxcbiAgICAgICAgKSksXG4gICAgICAgIChuZXh0SW5zdGFuY2UucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAobmV4dFByb3BzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKG5leHRJbnN0YW5jZS5zaWJsaW5nID0gbmV4dFByb3BzKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV4dEluc3RhbmNlKSxcbiAgICAgICAgKHNob3dGYWxsYmFjayA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgICAgKHNob3dGYWxsYmFjay5tZW1vaXplZFN0YXRlID0gbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSksXG4gICAgICAgIChzaG93RmFsbGJhY2suY2hpbGRMYW5lcyA9IGdldFJlbWFpbmluZ1dvcmtJblByaW1hcnlUcmVlKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICkpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IFNVU1BFTkRFRF9NQVJLRVIpLFxuICAgICAgICBuZXh0UHJvcHNcbiAgICAgICk7XG4gICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICByZXR1cm4gbW91bnRTdXNwZW5zZVByaW1hcnlDaGlsZHJlbih3b3JrSW5Qcm9ncmVzcywgbmV4dEluc3RhbmNlKTtcbiAgfVxuICBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gIGlmIChcbiAgICBudWxsICE9PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgJiZcbiAgICAoKG5leHRJbnN0YW5jZSA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5kZWh5ZHJhdGVkKSxcbiAgICBudWxsICE9PSBuZXh0SW5zdGFuY2UpXG4gICkge1xuICAgIGlmIChkaWRTdXNwZW5kKVxuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAyNTZcbiAgICAgICAgPyAocHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTI1NyksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gcmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICkpKVxuICAgICAgICA6IG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGVcbiAgICAgICAgICA/IChyZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IG51bGwpKVxuICAgICAgICAgIDogKHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAoc2hvd0ZhbGxiYWNrID0gbmV4dFByb3BzLmZhbGxiYWNrKSxcbiAgICAgICAgICAgIChuZXh0SW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5tb2RlKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMgPSBtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIoXG4gICAgICAgICAgICAgIHsgbW9kZTogXCJ2aXNpYmxlXCIsIGNoaWxkcmVuOiBuZXh0UHJvcHMuY2hpbGRyZW4gfSxcbiAgICAgICAgICAgICAgbmV4dEluc3RhbmNlXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChzaG93RmFsbGJhY2sgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICAgICAgc2hvd0ZhbGxiYWNrLFxuICAgICAgICAgICAgICBuZXh0SW5zdGFuY2UsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChzaG93RmFsbGJhY2suZmxhZ3MgfD0gMiksXG4gICAgICAgICAgICAobmV4dFByb3BzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIChzaG93RmFsbGJhY2sucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKG5leHRQcm9wcy5zaWJsaW5nID0gc2hvd0ZhbGxiYWNrKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICByZWNvbmNpbGVDaGlsZEZpYmVycyhcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIGN1cnJlbnQuY2hpbGQsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgKG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMubWVtb2l6ZWRTdGF0ZSA9XG4gICAgICAgICAgICAgIG1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZShyZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgKG5leHRQcm9wcy5jaGlsZExhbmVzID0gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBTVVNQRU5ERURfTUFSS0VSKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHNob3dGYWxsYmFjaykpO1xuICAgIGVsc2UgaWYgKFxuICAgICAgKHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICBpc1N1c3BlbnNlSW5zdGFuY2VGYWxsYmFjayhuZXh0SW5zdGFuY2UpKVxuICAgICkge1xuICAgICAgSlNDb21waWxlcl90ZW1wID1cbiAgICAgICAgbmV4dEluc3RhbmNlLm5leHRTaWJsaW5nICYmIG5leHRJbnN0YW5jZS5uZXh0U2libGluZy5kYXRhc2V0O1xuICAgICAgaWYgKEpTQ29tcGlsZXJfdGVtcCkgdmFyIGRpZ2VzdCA9IEpTQ29tcGlsZXJfdGVtcC5kZ3N0O1xuICAgICAgSlNDb21waWxlcl90ZW1wID0gZGlnZXN0O1xuICAgICAgbmV4dFByb3BzID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MTkpKTtcbiAgICAgIG5leHRQcm9wcy5zdGFjayA9IFwiXCI7XG4gICAgICBuZXh0UHJvcHMuZGlnZXN0ID0gSlNDb21waWxlcl90ZW1wO1xuICAgICAgcXVldWVIeWRyYXRpb25FcnJvcih7IHZhbHVlOiBuZXh0UHJvcHMsIHNvdXJjZTogbnVsbCwgc3RhY2s6IG51bGwgfSk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHJldHJ5U3VzcGVuc2VDb21wb25lbnRXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIChkaWRSZWNlaXZlVXBkYXRlIHx8XG4gICAgICAgIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcywgITEpLFxuICAgICAgKEpTQ29tcGlsZXJfdGVtcCA9IDAgIT09IChyZW5kZXJMYW5lcyAmIGN1cnJlbnQuY2hpbGRMYW5lcykpLFxuICAgICAgZGlkUmVjZWl2ZVVwZGF0ZSB8fCBKU0NvbXBpbGVyX3RlbXApXG4gICAgKSB7XG4gICAgICBKU0NvbXBpbGVyX3RlbXAgPSB3b3JrSW5Qcm9ncmVzc1Jvb3Q7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAoKG5leHRQcm9wcyA9IHJlbmRlckxhbmVzICYgLXJlbmRlckxhbmVzKSxcbiAgICAgICAgKG5leHRQcm9wcyA9XG4gICAgICAgICAgMCAhPT0gKG5leHRQcm9wcyAmIDQyKVxuICAgICAgICAgICAgPyAxXG4gICAgICAgICAgICA6IGdldEJ1bXBlZExhbmVGb3JIeWRyYXRpb25CeUxhbmUobmV4dFByb3BzKSksXG4gICAgICAgIChuZXh0UHJvcHMgPVxuICAgICAgICAgIDAgIT09IChuZXh0UHJvcHMgJiAoSlNDb21waWxlcl90ZW1wLnN1c3BlbmRlZExhbmVzIHwgcmVuZGVyTGFuZXMpKVxuICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICA6IG5leHRQcm9wcyksXG4gICAgICAgIDAgIT09IG5leHRQcm9wcyAmJiBuZXh0UHJvcHMgIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5yZXRyeUxhbmUpXG4gICAgICApXG4gICAgICAgIHRocm93IChcbiAgICAgICAgICAoKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5yZXRyeUxhbmUgPSBuZXh0UHJvcHMpLFxuICAgICAgICAgIGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShjdXJyZW50LCBuZXh0UHJvcHMpLFxuICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihKU0NvbXBpbGVyX3RlbXAsIGN1cnJlbnQsIG5leHRQcm9wcyksXG4gICAgICAgICAgU2VsZWN0aXZlSHlkcmF0aW9uRXhjZXB0aW9uKVxuICAgICAgICApO1xuICAgICAgXCIkP1wiID09PSBuZXh0SW5zdGFuY2UuZGF0YSB8fCByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKCk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IHJldHJ5U3VzcGVuc2VDb21wb25lbnRXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgfSBlbHNlXG4gICAgICBcIiQ/XCIgPT09IG5leHRJbnN0YW5jZS5kYXRhXG4gICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxOTIpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IG51bGwpKVxuICAgICAgICA6ICgoY3VycmVudCA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC50cmVlQ29udGV4dCksXG4gICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgIG5leHRJbnN0YW5jZS5uZXh0U2libGluZ1xuICAgICAgICAgICkpLFxuICAgICAgICAgIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAoaXNIeWRyYXRpbmcgPSAhMCksXG4gICAgICAgICAgKGh5ZHJhdGlvbkVycm9ycyA9IG51bGwpLFxuICAgICAgICAgIChyb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEpLFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgICgoaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dElkKSxcbiAgICAgICAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0T3ZlcmZsb3cpLFxuICAgICAgICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRQcm92aWRlciksXG4gICAgICAgICAgICAodHJlZUNvbnRleHRJZCA9IGN1cnJlbnQuaWQpLFxuICAgICAgICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBjdXJyZW50Lm92ZXJmbG93KSxcbiAgICAgICAgICAgICh0cmVlQ29udGV4dFByb3ZpZGVyID0gd29ya0luUHJvZ3Jlc3MpKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICApKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDA5NikpO1xuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgfVxuICBpZiAoc2hvd0ZhbGxiYWNrKVxuICAgIHJldHVybiAoXG4gICAgICByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgKHNob3dGYWxsYmFjayA9IG5leHRQcm9wcy5mYWxsYmFjayksXG4gICAgICAobmV4dEluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3MubW9kZSksXG4gICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gY3VycmVudC5jaGlsZCksXG4gICAgICAoZGlnZXN0ID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnNpYmxpbmcpLFxuICAgICAgKG5leHRQcm9wcyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCwge1xuICAgICAgICBtb2RlOiBcImhpZGRlblwiLFxuICAgICAgICBjaGlsZHJlbjogbmV4dFByb3BzLmNoaWxkcmVuXG4gICAgICB9KSksXG4gICAgICAobmV4dFByb3BzLnN1YnRyZWVGbGFncyA9XG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5zdWJ0cmVlRmxhZ3MgJiA2NTAxMTcxMiksXG4gICAgICBudWxsICE9PSBkaWdlc3RcbiAgICAgICAgPyAoc2hvd0ZhbGxiYWNrID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoZGlnZXN0LCBzaG93RmFsbGJhY2spKVxuICAgICAgICA6ICgoc2hvd0ZhbGxiYWNrID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICBzaG93RmFsbGJhY2ssXG4gICAgICAgICAgICBuZXh0SW5zdGFuY2UsXG4gICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICApKSxcbiAgICAgICAgICAoc2hvd0ZhbGxiYWNrLmZsYWdzIHw9IDIpKSxcbiAgICAgIChzaG93RmFsbGJhY2sucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgKG5leHRQcm9wcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAobmV4dFByb3BzLnNpYmxpbmcgPSBzaG93RmFsbGJhY2spLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV4dFByb3BzKSxcbiAgICAgIChuZXh0UHJvcHMgPSBzaG93RmFsbGJhY2spLFxuICAgICAgKHNob3dGYWxsYmFjayA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgIChuZXh0SW5zdGFuY2UgPSBjdXJyZW50LmNoaWxkLm1lbW9pemVkU3RhdGUpLFxuICAgICAgbnVsbCA9PT0gbmV4dEluc3RhbmNlXG4gICAgICAgID8gKG5leHRJbnN0YW5jZSA9IG1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZShyZW5kZXJMYW5lcykpXG4gICAgICAgIDogKChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBuZXh0SW5zdGFuY2UuY2FjaGVQb29sKSxcbiAgICAgICAgICBudWxsICE9PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDBcbiAgICAgICAgICAgID8gKChkaWdlc3QgPSBDYWNoZUNvbnRleHQuX2N1cnJlbnRWYWx1ZSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPVxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5wYXJlbnQgIT09IGRpZ2VzdFxuICAgICAgICAgICAgICAgICAgPyB7IHBhcmVudDogZGlnZXN0LCBwb29sOiBkaWdlc3QgfVxuICAgICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDApKVxuICAgICAgICAgICAgOiAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gZ2V0U3VzcGVuZGVkQ2FjaGUoKSksXG4gICAgICAgICAgKG5leHRJbnN0YW5jZSA9IHtcbiAgICAgICAgICAgIGJhc2VMYW5lczogbmV4dEluc3RhbmNlLmJhc2VMYW5lcyB8IHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgY2FjaGVQb29sOiBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDBcbiAgICAgICAgICB9KSksXG4gICAgICAoc2hvd0ZhbGxiYWNrLm1lbW9pemVkU3RhdGUgPSBuZXh0SW5zdGFuY2UpLFxuICAgICAgKHNob3dGYWxsYmFjay5jaGlsZExhbmVzID0gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBTVVNQRU5ERURfTUFSS0VSKSxcbiAgICAgIG5leHRQcm9wc1xuICAgICk7XG4gIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gIHJlbmRlckxhbmVzID0gY3VycmVudC5jaGlsZDtcbiAgY3VycmVudCA9IHJlbmRlckxhbmVzLnNpYmxpbmc7XG4gIHJlbmRlckxhbmVzID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MocmVuZGVyTGFuZXMsIHtcbiAgICBtb2RlOiBcInZpc2libGVcIixcbiAgICBjaGlsZHJlbjogbmV4dFByb3BzLmNoaWxkcmVuXG4gIH0pO1xuICByZW5kZXJMYW5lcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcmVuZGVyTGFuZXMuc2libGluZyA9IG51bGw7XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAoKEpTQ29tcGlsZXJfdGVtcCA9IHdvcmtJblByb2dyZXNzLmRlbGV0aW9ucyksXG4gICAgbnVsbCA9PT0gSlNDb21waWxlcl90ZW1wXG4gICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gW2N1cnJlbnRdKSwgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE2KSlcbiAgICAgIDogSlNDb21waWxlcl90ZW1wLnB1c2goY3VycmVudCkpO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgcmV0dXJuIHJlbmRlckxhbmVzO1xufVxuZnVuY3Rpb24gbW91bnRTdXNwZW5zZVByaW1hcnlDaGlsZHJlbih3b3JrSW5Qcm9ncmVzcywgcHJpbWFyeUNoaWxkcmVuKSB7XG4gIHByaW1hcnlDaGlsZHJlbiA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihcbiAgICB7IG1vZGU6IFwidmlzaWJsZVwiLCBjaGlsZHJlbjogcHJpbWFyeUNoaWxkcmVuIH0sXG4gICAgd29ya0luUHJvZ3Jlc3MubW9kZVxuICApO1xuICBwcmltYXJ5Q2hpbGRyZW4ucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIHJldHVybiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBwcmltYXJ5Q2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKG9mZnNjcmVlblByb3BzLCBtb2RlKSB7XG4gIG9mZnNjcmVlblByb3BzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMjIsIG9mZnNjcmVlblByb3BzLCBudWxsLCBtb2RlKTtcbiAgb2Zmc2NyZWVuUHJvcHMubGFuZXMgPSAwO1xuICBvZmZzY3JlZW5Qcm9wcy5zdGF0ZU5vZGUgPSB7XG4gICAgX3Zpc2liaWxpdHk6IDEsXG4gICAgX3BlbmRpbmdNYXJrZXJzOiBudWxsLFxuICAgIF9yZXRyeUNhY2hlOiBudWxsLFxuICAgIF90cmFuc2l0aW9uczogbnVsbFxuICB9O1xuICByZXR1cm4gb2Zmc2NyZWVuUHJvcHM7XG59XG5mdW5jdGlvbiByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQuY2hpbGQsIG51bGwsIHJlbmRlckxhbmVzKTtcbiAgY3VycmVudCA9IG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4oXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuXG4gICk7XG4gIGN1cnJlbnQuZmxhZ3MgfD0gMjtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHJldHVybiBjdXJyZW50O1xufVxuZnVuY3Rpb24gc2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyKGZpYmVyLCByZW5kZXJMYW5lcywgcHJvcGFnYXRpb25Sb290KSB7XG4gIGZpYmVyLmxhbmVzIHw9IHJlbmRlckxhbmVzO1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBhbHRlcm5hdGUgJiYgKGFsdGVybmF0ZS5sYW5lcyB8PSByZW5kZXJMYW5lcyk7XG4gIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgoZmliZXIucmV0dXJuLCByZW5kZXJMYW5lcywgcHJvcGFnYXRpb25Sb290KTtcbn1cbmZ1bmN0aW9uIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGlzQmFja3dhcmRzLFxuICB0YWlsLFxuICBsYXN0Q29udGVudFJvdyxcbiAgdGFpbE1vZGVcbikge1xuICB2YXIgcmVuZGVyU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICBudWxsID09PSByZW5kZXJTdGF0ZVxuICAgID8gKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgIGlzQmFja3dhcmRzOiBpc0JhY2t3YXJkcyxcbiAgICAgICAgcmVuZGVyaW5nOiBudWxsLFxuICAgICAgICByZW5kZXJpbmdTdGFydFRpbWU6IDAsXG4gICAgICAgIGxhc3Q6IGxhc3RDb250ZW50Um93LFxuICAgICAgICB0YWlsOiB0YWlsLFxuICAgICAgICB0YWlsTW9kZTogdGFpbE1vZGVcbiAgICAgIH0pXG4gICAgOiAoKHJlbmRlclN0YXRlLmlzQmFja3dhcmRzID0gaXNCYWNrd2FyZHMpLFxuICAgICAgKHJlbmRlclN0YXRlLnJlbmRlcmluZyA9IG51bGwpLFxuICAgICAgKHJlbmRlclN0YXRlLnJlbmRlcmluZ1N0YXJ0VGltZSA9IDApLFxuICAgICAgKHJlbmRlclN0YXRlLmxhc3QgPSBsYXN0Q29udGVudFJvdyksXG4gICAgICAocmVuZGVyU3RhdGUudGFpbCA9IHRhaWwpLFxuICAgICAgKHJlbmRlclN0YXRlLnRhaWxNb2RlID0gdGFpbE1vZGUpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICByZXZlYWxPcmRlciA9IG5leHRQcm9wcy5yZXZlYWxPcmRlcixcbiAgICB0YWlsTW9kZSA9IG5leHRQcm9wcy50YWlsO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLmNoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIG5leHRQcm9wcyA9IHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgaWYgKDAgIT09IChuZXh0UHJvcHMgJiAyKSlcbiAgICAobmV4dFByb3BzID0gKG5leHRQcm9wcyAmIDEpIHwgMiksICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpO1xuICBlbHNlIHtcbiAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiAwICE9PSAoY3VycmVudC5mbGFncyAmIDEyOCkpXG4gICAgICBhOiBmb3IgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDsgbnVsbCAhPT0gY3VycmVudDsgKSB7XG4gICAgICAgIGlmICgxMyA9PT0gY3VycmVudC50YWcpXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgICBzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIoY3VycmVudCwgcmVuZGVyTGFuZXMsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgZWxzZSBpZiAoMTkgPT09IGN1cnJlbnQudGFnKVxuICAgICAgICAgIHNjaGVkdWxlU3VzcGVuc2VXb3JrT25GaWJlcihjdXJyZW50LCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBlbHNlIGlmIChudWxsICE9PSBjdXJyZW50LmNoaWxkKSB7XG4gICAgICAgICAgY3VycmVudC5jaGlsZC5yZXR1cm4gPSBjdXJyZW50O1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmNoaWxkO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID09PSB3b3JrSW5Qcm9ncmVzcykgYnJlYWsgYTtcbiAgICAgICAgZm9yICg7IG51bGwgPT09IGN1cnJlbnQuc2libGluZzsgKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQucmV0dXJuIHx8IGN1cnJlbnQucmV0dXJuID09PSB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQuc2libGluZy5yZXR1cm4gPSBjdXJyZW50LnJldHVybjtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuc2libGluZztcbiAgICAgIH1cbiAgICBuZXh0UHJvcHMgJj0gMTtcbiAgfVxuICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIG5leHRQcm9wcyk7XG4gIHN3aXRjaCAocmV2ZWFsT3JkZXIpIHtcbiAgICBjYXNlIFwiZm9yd2FyZHNcIjpcbiAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICBmb3IgKHJldmVhbE9yZGVyID0gbnVsbDsgbnVsbCAhPT0gcmVuZGVyTGFuZXM7IClcbiAgICAgICAgKGN1cnJlbnQgPSByZW5kZXJMYW5lcy5hbHRlcm5hdGUpLFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgIG51bGwgPT09IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KSAmJlxuICAgICAgICAgICAgKHJldmVhbE9yZGVyID0gcmVuZGVyTGFuZXMpLFxuICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgcmVuZGVyTGFuZXMgPSByZXZlYWxPcmRlcjtcbiAgICAgIG51bGwgPT09IHJlbmRlckxhbmVzXG4gICAgICAgID8gKChyZXZlYWxPcmRlciA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSwgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbCkpXG4gICAgICAgIDogKChyZXZlYWxPcmRlciA9IHJlbmRlckxhbmVzLnNpYmxpbmcpLCAocmVuZGVyTGFuZXMuc2libGluZyA9IG51bGwpKTtcbiAgICAgIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICExLFxuICAgICAgICByZXZlYWxPcmRlcixcbiAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgIHRhaWxNb2RlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJhY2t3YXJkc1wiOlxuICAgICAgcmVuZGVyTGFuZXMgPSBudWxsO1xuICAgICAgcmV2ZWFsT3JkZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgIGZvciAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBudWxsOyBudWxsICE9PSByZXZlYWxPcmRlcjsgKSB7XG4gICAgICAgIGN1cnJlbnQgPSByZXZlYWxPcmRlci5hbHRlcm5hdGU7XG4gICAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgPT09IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KSkge1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmV2ZWFsT3JkZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IHJldmVhbE9yZGVyLnNpYmxpbmc7XG4gICAgICAgIHJldmVhbE9yZGVyLnNpYmxpbmcgPSByZW5kZXJMYW5lcztcbiAgICAgICAgcmVuZGVyTGFuZXMgPSByZXZlYWxPcmRlcjtcbiAgICAgICAgcmV2ZWFsT3JkZXIgPSBjdXJyZW50O1xuICAgICAgfVxuICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgITAsXG4gICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICBudWxsLFxuICAgICAgICB0YWlsTW9kZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0b2dldGhlclwiOlxuICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKHdvcmtJblByb2dyZXNzLCAhMSwgbnVsbCwgbnVsbCwgdm9pZCAwKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBudWxsICE9PSBjdXJyZW50ICYmICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPSBjdXJyZW50LmRlcGVuZGVuY2llcyk7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSB3b3JrSW5Qcm9ncmVzcy5sYW5lcztcbiAgaWYgKDAgPT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKVxuICAgIGlmIChudWxsICE9PSBjdXJyZW50KSB7XG4gICAgICBpZiAoXG4gICAgICAgIChwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICExXG4gICAgICAgICksXG4gICAgICAgIDAgPT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2UgcmV0dXJuIG51bGw7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmIHdvcmtJblByb2dyZXNzLmNoaWxkICE9PSBjdXJyZW50LmNoaWxkKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUzKSk7XG4gIGlmIChudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCkge1xuICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICByZW5kZXJMYW5lcyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnQsIGN1cnJlbnQucGVuZGluZ1Byb3BzKTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzO1xuICAgIGZvciAocmVuZGVyTGFuZXMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7IG51bGwgIT09IGN1cnJlbnQuc2libGluZzsgKVxuICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmcpLFxuICAgICAgICAocmVuZGVyTGFuZXMgPSByZW5kZXJMYW5lcy5zaWJsaW5nID1cbiAgICAgICAgICBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBjdXJyZW50LnBlbmRpbmdQcm9wcykpLFxuICAgICAgICAocmVuZGVyTGFuZXMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpO1xuICAgIHJlbmRlckxhbmVzLnNpYmxpbmcgPSBudWxsO1xuICB9XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIGNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSB7XG4gIGlmICgwICE9PSAoY3VycmVudC5sYW5lcyAmIHJlbmRlckxhbmVzKSkgcmV0dXJuICEwO1xuICBjdXJyZW50ID0gY3VycmVudC5kZXBlbmRlbmNpZXM7XG4gIHJldHVybiBudWxsICE9PSBjdXJyZW50ICYmIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50KSA/ICEwIDogITE7XG59XG5mdW5jdGlvbiBhdHRlbXB0RWFybHlCYWlsb3V0SWZOb1NjaGVkdWxlZFVwZGF0ZShcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDM6XG4gICAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHB1c2hIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIHB1c2hQcm92aWRlcihcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMudmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChudWxsICE9PSBzdGF0ZSkge1xuICAgICAgICBpZiAobnVsbCAhPT0gc3RhdGUuZGVoeWRyYXRlZClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICk7XG4gICAgICAgIGlmICgwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZC5jaGlsZExhbmVzKSlcbiAgICAgICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgY3VycmVudCA9IGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQuc2libGluZyA6IG51bGw7XG4gICAgICB9XG4gICAgICBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHZhciBkaWRTdXNwZW5kQmVmb3JlID0gMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpO1xuICAgICAgc3RhdGUgPSAwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzKTtcbiAgICAgIHN0YXRlIHx8XG4gICAgICAgIChwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICExXG4gICAgICAgICksXG4gICAgICAgIChzdGF0ZSA9IDAgIT09IChyZW5kZXJMYW5lcyAmIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKSk7XG4gICAgICBpZiAoZGlkU3VzcGVuZEJlZm9yZSkge1xuICAgICAgICBpZiAoc3RhdGUpXG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4O1xuICAgICAgfVxuICAgICAgZGlkU3VzcGVuZEJlZm9yZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBudWxsICE9PSBkaWRTdXNwZW5kQmVmb3JlICYmXG4gICAgICAgICgoZGlkU3VzcGVuZEJlZm9yZS5yZW5kZXJpbmcgPSBudWxsKSxcbiAgICAgICAgKGRpZFN1c3BlbmRCZWZvcmUudGFpbCA9IG51bGwpLFxuICAgICAgICAoZGlkU3VzcGVuZEJlZm9yZS5sYXN0RWZmZWN0ID0gbnVsbCkpO1xuICAgICAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpO1xuICAgICAgaWYgKHN0YXRlKSBicmVhaztcbiAgICAgIGVsc2UgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyMjpcbiAgICBjYXNlIDIzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gMCksXG4gICAgICAgIHVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgICApO1xuICAgIGNhc2UgMjQ6XG4gICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlKTtcbiAgfVxuICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xufVxuZnVuY3Rpb24gYmVnaW5Xb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBpZiAobnVsbCAhPT0gY3VycmVudClcbiAgICBpZiAoY3VycmVudC5tZW1vaXplZFByb3BzICE9PSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpXG4gICAgICBkaWRSZWNlaXZlVXBkYXRlID0gITA7XG4gICAgZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgICFjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykgJiZcbiAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KVxuICAgICAgKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChkaWRSZWNlaXZlVXBkYXRlID0gITEpLFxuICAgICAgICAgIGF0dGVtcHRFYXJseUJhaWxvdXRJZk5vU2NoZWR1bGVkVXBkYXRlKFxuICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICBkaWRSZWNlaXZlVXBkYXRlID0gMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMzEwNzIpID8gITAgOiAhMTtcbiAgICB9XG4gIGVsc2VcbiAgICAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICExKSxcbiAgICAgIGlzSHlkcmF0aW5nICYmXG4gICAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEwNDg1NzYpICYmXG4gICAgICAgIHB1c2hUcmVlSWQod29ya0luUHJvZ3Jlc3MsIHRyZWVGb3JrQ291bnQsIHdvcmtJblByb2dyZXNzLmluZGV4KTtcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSAwO1xuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgMTY6XG4gICAgICBhOiB7XG4gICAgICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUsXG4gICAgICAgICAgaW5pdCA9IGxhenlDb21wb25lbnQuX2luaXQ7XG4gICAgICAgIGxhenlDb21wb25lbnQgPSBpbml0KGxhenlDb21wb25lbnQuX3BheWxvYWQpO1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gbGF6eUNvbXBvbmVudDtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxhenlDb21wb25lbnQpXG4gICAgICAgICAgc2hvdWxkQ29uc3RydWN0KGxhenlDb21wb25lbnQpXG4gICAgICAgICAgICA/ICgoY3VycmVudCA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKGxhenlDb21wb25lbnQsIGN1cnJlbnQpKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnRhZyA9IDEpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSB1cGRhdGVDbGFzc0NvbXBvbmVudChcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApKSlcbiAgICAgICAgICAgIDogKCh3b3JrSW5Qcm9ncmVzcy50YWcgPSAwKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKSkpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAodm9pZCAwICE9PSBsYXp5Q29tcG9uZW50ICYmIG51bGwgIT09IGxhenlDb21wb25lbnQpXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgoaW5pdCA9IGxhenlDb21wb25lbnQuJCR0eXBlb2YpLCBpbml0ID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IDExO1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZUZvcndhcmRSZWYoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5pdCA9PT0gUkVBQ1RfTUVNT19UWVBFKSB7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IDE0O1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZU1lbW9Db21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9XG4gICAgICAgICAgICBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUobGF6eUNvbXBvbmVudCkgfHwgbGF6eUNvbXBvbmVudDtcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwNiwgd29ya0luUHJvZ3Jlc3MsIFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlKSxcbiAgICAgICAgKGluaXQgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wc1xuICAgICAgICApKSxcbiAgICAgICAgdXBkYXRlQ2xhc3NDb21wb25lbnQoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgIGluaXQsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICBjYXNlIDM6XG4gICAgICBhOiB7XG4gICAgICAgIHB1c2hIb3N0Q29udGFpbmVyKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICk7XG4gICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM4NykpO1xuICAgICAgICBsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICB2YXIgcHJldlN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgaW5pdCA9IHByZXZTdGF0ZS5lbGVtZW50O1xuICAgICAgICBjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCBsYXp5Q29tcG9uZW50LCBudWxsLCByZW5kZXJMYW5lcyk7XG4gICAgICAgIHZhciBuZXh0U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICBsYXp5Q29tcG9uZW50ID0gbmV4dFN0YXRlLmNhY2hlO1xuICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgbGF6eUNvbXBvbmVudCk7XG4gICAgICAgIGxhenlDb21wb25lbnQgIT09IHByZXZTdGF0ZS5jYWNoZSAmJlxuICAgICAgICAgIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2VzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBbQ2FjaGVDb250ZXh0XSxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgITBcbiAgICAgICAgICApO1xuICAgICAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCk7XG4gICAgICAgIGxhenlDb21wb25lbnQgPSBuZXh0U3RhdGUuZWxlbWVudDtcbiAgICAgICAgaWYgKHByZXZTdGF0ZS5pc0RlaHlkcmF0ZWQpXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKChwcmV2U3RhdGUgPSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQ6IGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIGlzRGVoeWRyYXRlZDogITEsXG4gICAgICAgICAgICAgIGNhY2hlOiBuZXh0U3RhdGUuY2FjaGVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZSA9IHByZXZTdGF0ZSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHByZXZTdGF0ZSksXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NilcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gbW91bnRIb3N0Um9vdFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfSBlbHNlIGlmIChsYXp5Q29tcG9uZW50ICE9PSBpbml0KSB7XG4gICAgICAgICAgICBpbml0ID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoXG4gICAgICAgICAgICAgIEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDI0KSksXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcXVldWVIeWRyYXRpb25FcnJvcihpbml0KTtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gbW91bnRIb3N0Um9vdFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgIHN3aXRjaCAoY3VycmVudC5ub2RlVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuYm9keTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgICAgICAgIFwiSFRNTFwiID09PSBjdXJyZW50Lm5vZGVOYW1lXG4gICAgICAgICAgICAgICAgICAgID8gY3VycmVudC5vd25lckRvY3VtZW50LmJvZHlcbiAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGN1cnJlbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgICAgaXNIeWRyYXRpbmcgPSAhMDtcbiAgICAgICAgICAgIGh5ZHJhdGlvbkVycm9ycyA9IG51bGw7XG4gICAgICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITA7XG4gICAgICAgICAgICByZW5kZXJMYW5lcyA9IG1vdW50Q2hpbGRGaWJlcnMoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvciAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZW5kZXJMYW5lczsgcmVuZGVyTGFuZXM7IClcbiAgICAgICAgICAgICAgKHJlbmRlckxhbmVzLmZsYWdzID0gKHJlbmRlckxhbmVzLmZsYWdzICYgLTMpIHwgNDA5NiksXG4gICAgICAgICAgICAgICAgKHJlbmRlckxhbmVzID0gcmVuZGVyTGFuZXMuc2libGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICAgICAgaWYgKGxhenlDb21wb25lbnQgPT09IGluaXQpIHtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzID0gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50XG4gICAgICAgICAgPyAocmVuZGVyTGFuZXMgPSBnZXRSZXNvdXJjZShcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICApKVxuICAgICAgICAgICAgPyAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHJlbmRlckxhbmVzKVxuICAgICAgICAgICAgOiBpc0h5ZHJhdGluZyB8fFxuICAgICAgICAgICAgICAoKHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MudHlwZSksXG4gICAgICAgICAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzKSxcbiAgICAgICAgICAgICAgKGxhenlDb21wb25lbnQgPSBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIoXG4gICAgICAgICAgICAgICAgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudFxuICAgICAgICAgICAgICApLmNyZWF0ZUVsZW1lbnQocmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICAgKGxhenlDb21wb25lbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgIChsYXp5Q29tcG9uZW50W2ludGVybmFsUHJvcHNLZXldID0gY3VycmVudCksXG4gICAgICAgICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGxhenlDb21wb25lbnQsIHJlbmRlckxhbmVzLCBjdXJyZW50KSxcbiAgICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShsYXp5Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGxhenlDb21wb25lbnQpKVxuICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBnZXRSZXNvdXJjZShcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICAgIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgICAgKSksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHB1c2hIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBpc0h5ZHJhdGluZyAmJlxuICAgICAgICAgICgobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9XG4gICAgICAgICAgICByZXNvbHZlU2luZ2xldG9uSW5zdGFuY2UoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgICAgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudFxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgIChyb290T3JTaW5nbGV0b25Db250ZXh0ID0gITApLFxuICAgICAgICAgIChpbml0ID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSksXG4gICAgICAgICAgaXNTaW5nbGV0b25TY29wZSh3b3JrSW5Qcm9ncmVzcy50eXBlKVxuICAgICAgICAgICAgPyAoKHByZXZpb3VzSHlkcmF0YWJsZU9uRW50ZXJpbmdTY29wZWRTaW5nbGV0b24gPSBpbml0KSxcbiAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LmZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgKSkpXG4gICAgICAgICAgICA6IChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gaW5pdCkpLFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudCAmJiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwNCksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgNTpcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50ICYmIGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIGlmICgoaW5pdCA9IGxhenlDb21wb25lbnQgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlKSlcbiAgICAgICAgICAobGF6eUNvbXBvbmVudCA9IGNhbkh5ZHJhdGVJbnN0YW5jZShcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dFxuICAgICAgICAgICkpLFxuICAgICAgICAgICAgbnVsbCAhPT0gbGF6eUNvbXBvbmVudFxuICAgICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gbGF6eUNvbXBvbmVudCksXG4gICAgICAgICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LmZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAocm9vdE9yU2luZ2xldG9uQ29udGV4dCA9ICExKSxcbiAgICAgICAgICAgICAgICAoaW5pdCA9ICEwKSlcbiAgICAgICAgICAgICAgOiAoaW5pdCA9ICExKTtcbiAgICAgICAgaW5pdCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGluaXQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgcHJldlN0YXRlID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgbmV4dFN0YXRlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IG51bGw7XG4gICAgICBsYXp5Q29tcG9uZW50ID0gcHJldlN0YXRlLmNoaWxkcmVuO1xuICAgICAgc2hvdWxkU2V0VGV4dENvbnRlbnQoaW5pdCwgcHJldlN0YXRlKVxuICAgICAgICA/IChsYXp5Q29tcG9uZW50ID0gbnVsbClcbiAgICAgICAgOiBudWxsICE9PSBuZXh0U3RhdGUgJiZcbiAgICAgICAgICBzaG91bGRTZXRUZXh0Q29udGVudChpbml0LCBuZXh0U3RhdGUpICYmXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDMyKTtcbiAgICAgIG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgKChpbml0ID0gcmVuZGVyV2l0aEhvb2tzKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgVHJhbnNpdGlvbkF3YXJlSG9zdENvbXBvbmVudCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSksXG4gICAgICAgIChIb3N0VHJhbnNpdGlvbkNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IGluaXQpKTtcbiAgICAgIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIGxhenlDb21wb25lbnQsIHJlbmRlckxhbmVzKTtcbiAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICBjYXNlIDY6XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudCAmJiBpc0h5ZHJhdGluZykge1xuICAgICAgICBpZiAoKGN1cnJlbnQgPSByZW5kZXJMYW5lcyA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2UpKVxuICAgICAgICAgIChyZW5kZXJMYW5lcyA9IGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UoXG4gICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHRcbiAgICAgICAgICApKSxcbiAgICAgICAgICAgIG51bGwgIT09IHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSByZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gbnVsbCksXG4gICAgICAgICAgICAgICAgKGN1cnJlbnQgPSAhMCkpXG4gICAgICAgICAgICAgIDogKGN1cnJlbnQgPSAhMSk7XG4gICAgICAgIGN1cnJlbnQgfHwgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwdXNoSG9zdENvbnRhaW5lcihcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICApLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgOiByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDExOlxuICAgICAgcmV0dXJuIHVwZGF0ZUZvcndhcmRSZWYoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIGNhc2UgNzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgODpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpLFxuICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnR5cGUsIGxhenlDb21wb25lbnQudmFsdWUpLFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGxhenlDb21wb25lbnQuY2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA5OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGluaXQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlLl9jb250ZXh0KSxcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pLFxuICAgICAgICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChpbml0ID0gcmVhZENvbnRleHQoaW5pdCkpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IGxhenlDb21wb25lbnQoaW5pdCkpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMSksXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBsYXp5Q29tcG9uZW50LCByZW5kZXJMYW5lcyksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTQ6XG4gICAgICByZXR1cm4gdXBkYXRlTWVtb0NvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSAxNTpcbiAgICAgIHJldHVybiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICBjYXNlIDE5OlxuICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgIGNhc2UgMzE6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLm1vZGUpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHtcbiAgICAgICAgICBtb2RlOiBsYXp5Q29tcG9uZW50Lm1vZGUsXG4gICAgICAgICAgY2hpbGRyZW46IGxhenlDb21wb25lbnQuY2hpbGRyZW5cbiAgICAgICAgfSksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/ICgocmVuZGVyTGFuZXMgPSBtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIoXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChyZW5kZXJMYW5lcy5yZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWYpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgKHJlbmRlckxhbmVzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHJlbmRlckxhbmVzKSlcbiAgICAgICAgICA6ICgocmVuZGVyTGFuZXMgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LmNoaWxkLCBsYXp5Q29tcG9uZW50KSksXG4gICAgICAgICAgICAocmVuZGVyTGFuZXMucmVmID0gd29ya0luUHJvZ3Jlc3MucmVmKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgIChyZW5kZXJMYW5lcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSByZW5kZXJMYW5lcykpLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1xuICAgICAgKTtcbiAgICBjYXNlIDIyOlxuICAgICAgcmV0dXJuIHVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gcmVhZENvbnRleHQoQ2FjaGVDb250ZXh0KSksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/ICgoaW5pdCA9IHBlZWtDYWNoZUZyb21Qb29sKCkpLFxuICAgICAgICAgICAgbnVsbCA9PT0gaW5pdCAmJlxuICAgICAgICAgICAgICAoKGluaXQgPSB3b3JrSW5Qcm9ncmVzc1Jvb3QpLFxuICAgICAgICAgICAgICAocHJldlN0YXRlID0gY3JlYXRlQ2FjaGUoKSksXG4gICAgICAgICAgICAgIChpbml0LnBvb2xlZENhY2hlID0gcHJldlN0YXRlKSxcbiAgICAgICAgICAgICAgcHJldlN0YXRlLnJlZkNvdW50KyssXG4gICAgICAgICAgICAgIG51bGwgIT09IHByZXZTdGF0ZSAmJiAoaW5pdC5wb29sZWRDYWNoZUxhbmVzIHw9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgKGluaXQgPSBwcmV2U3RhdGUpKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0ge1xuICAgICAgICAgICAgICBwYXJlbnQ6IGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIGNhY2hlOiBpbml0XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGluaXRpYWxpemVVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgaW5pdCkpXG4gICAgICAgICAgOiAoMCAhPT0gKGN1cnJlbnQubGFuZXMgJiByZW5kZXJMYW5lcykgJiZcbiAgICAgICAgICAgICAgKGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG51bGwsIG51bGwsIHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpKSxcbiAgICAgICAgICAgIChpbml0ID0gY3VycmVudC5tZW1vaXplZFN0YXRlKSxcbiAgICAgICAgICAgIChwcmV2U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSxcbiAgICAgICAgICAgIGluaXQucGFyZW50ICE9PSBsYXp5Q29tcG9uZW50XG4gICAgICAgICAgICAgID8gKChpbml0ID0geyBwYXJlbnQ6IGxhenlDb21wb25lbnQsIGNhY2hlOiBsYXp5Q29tcG9uZW50IH0pLFxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gaW5pdCksXG4gICAgICAgICAgICAgICAgMCA9PT0gd29ya0luUHJvZ3Jlc3MubGFuZXMgJiZcbiAgICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID1cbiAgICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUuYmFzZVN0YXRlID1cbiAgICAgICAgICAgICAgICAgICAgICBpbml0KSxcbiAgICAgICAgICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgbGF6eUNvbXBvbmVudCkpXG4gICAgICAgICAgICAgIDogKChsYXp5Q29tcG9uZW50ID0gcHJldlN0YXRlLmNhY2hlKSxcbiAgICAgICAgICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgbGF6eUNvbXBvbmVudCksXG4gICAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCAhPT0gaW5pdC5jYWNoZSAmJlxuICAgICAgICAgICAgICAgICAgcHJvcGFnYXRlQ29udGV4dENoYW5nZXMoXG4gICAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgICAgICBbQ2FjaGVDb250ZXh0XSxcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICAgICApKSksXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMjk6XG4gICAgICB0aHJvdyB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIH1cbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNTYsIHdvcmtJblByb2dyZXNzLnRhZykpO1xufVxuZnVuY3Rpb24gbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcykge1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0O1xufVxuZnVuY3Rpb24gcHJlbG9hZFJlc291cmNlQW5kU3VzcGVuZElmTmVlZGVkKHdvcmtJblByb2dyZXNzLCByZXNvdXJjZSkge1xuICBpZiAoXCJzdHlsZXNoZWV0XCIgIT09IHJlc291cmNlLnR5cGUgfHwgMCAhPT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KSlcbiAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMTY3NzcyMTc7XG4gIGVsc2UgaWYgKCgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTY3NzcyMTYpLCAhcHJlbG9hZFJlc291cmNlKHJlc291cmNlKSkpIHtcbiAgICByZXNvdXJjZSA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgaWYgKFxuICAgICAgbnVsbCAhPT0gcmVzb3VyY2UgJiZcbiAgICAgICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA0MTk0MDQ4KSA9PT1cbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzXG4gICAgICAgID8gbnVsbCAhPT0gc2hlbGxCb3VuZGFyeVxuICAgICAgICA6ICgod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA2MjkxNDU2MCkgIT09XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSkgfHxcbiAgICAgICAgICByZXNvdXJjZSAhPT0gc2hlbGxCb3VuZGFyeSlcbiAgICApXG4gICAgICB0aHJvdyAoXG4gICAgICAgICgoc3VzcGVuZGVkVGhlbmFibGUgPSBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGUpLFxuICAgICAgICBTdXNwZW5zZXlDb21taXRFeGNlcHRpb24pXG4gICAgICApO1xuICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTI7XG4gIH1cbn1cbmZ1bmN0aW9uIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIHJldHJ5UXVldWUpIHtcbiAgbnVsbCAhPT0gcmV0cnlRdWV1ZSAmJiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNCk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTYzODQgJiZcbiAgICAoKHJldHJ5UXVldWUgPVxuICAgICAgMjIgIT09IHdvcmtJblByb2dyZXNzLnRhZyA/IGNsYWltTmV4dFJldHJ5TGFuZSgpIDogNTM2ODcwOTEyKSxcbiAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgfD0gcmV0cnlRdWV1ZSksXG4gICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyB8PSByZXRyeVF1ZXVlKSk7XG59XG5mdW5jdGlvbiBjdXRPZmZUYWlsSWZOZWVkZWQocmVuZGVyU3RhdGUsIGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjaykge1xuICBpZiAoIWlzSHlkcmF0aW5nKVxuICAgIHN3aXRjaCAocmVuZGVyU3RhdGUudGFpbE1vZGUpIHtcbiAgICAgIGNhc2UgXCJoaWRkZW5cIjpcbiAgICAgICAgaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrID0gcmVuZGVyU3RhdGUudGFpbDtcbiAgICAgICAgZm9yICh2YXIgbGFzdFRhaWxOb2RlID0gbnVsbDsgbnVsbCAhPT0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrOyApXG4gICAgICAgICAgbnVsbCAhPT0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrLmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgKGxhc3RUYWlsTm9kZSA9IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayksXG4gICAgICAgICAgICAoaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrID0gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrLnNpYmxpbmcpO1xuICAgICAgICBudWxsID09PSBsYXN0VGFpbE5vZGVcbiAgICAgICAgICA/IChyZW5kZXJTdGF0ZS50YWlsID0gbnVsbClcbiAgICAgICAgICA6IChsYXN0VGFpbE5vZGUuc2libGluZyA9IG51bGwpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjb2xsYXBzZWRcIjpcbiAgICAgICAgbGFzdFRhaWxOb2RlID0gcmVuZGVyU3RhdGUudGFpbDtcbiAgICAgICAgZm9yICh2YXIgbGFzdFRhaWxOb2RlJDExMyA9IG51bGw7IG51bGwgIT09IGxhc3RUYWlsTm9kZTsgKVxuICAgICAgICAgIG51bGwgIT09IGxhc3RUYWlsTm9kZS5hbHRlcm5hdGUgJiYgKGxhc3RUYWlsTm9kZSQxMTMgPSBsYXN0VGFpbE5vZGUpLFxuICAgICAgICAgICAgKGxhc3RUYWlsTm9kZSA9IGxhc3RUYWlsTm9kZS5zaWJsaW5nKTtcbiAgICAgICAgbnVsbCA9PT0gbGFzdFRhaWxOb2RlJDExM1xuICAgICAgICAgID8gaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrIHx8IG51bGwgPT09IHJlbmRlclN0YXRlLnRhaWxcbiAgICAgICAgICAgID8gKHJlbmRlclN0YXRlLnRhaWwgPSBudWxsKVxuICAgICAgICAgICAgOiAocmVuZGVyU3RhdGUudGFpbC5zaWJsaW5nID0gbnVsbClcbiAgICAgICAgICA6IChsYXN0VGFpbE5vZGUkMTEzLnNpYmxpbmcgPSBudWxsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBidWJibGVQcm9wZXJ0aWVzKGNvbXBsZXRlZFdvcmspIHtcbiAgdmFyIGRpZEJhaWxvdXQgPVxuICAgICAgbnVsbCAhPT0gY29tcGxldGVkV29yay5hbHRlcm5hdGUgJiZcbiAgICAgIGNvbXBsZXRlZFdvcmsuYWx0ZXJuYXRlLmNoaWxkID09PSBjb21wbGV0ZWRXb3JrLmNoaWxkLFxuICAgIG5ld0NoaWxkTGFuZXMgPSAwLFxuICAgIHN1YnRyZWVGbGFncyA9IDA7XG4gIGlmIChkaWRCYWlsb3V0KVxuICAgIGZvciAodmFyIGNoaWxkJDExNCA9IGNvbXBsZXRlZFdvcmsuY2hpbGQ7IG51bGwgIT09IGNoaWxkJDExNDsgKVxuICAgICAgKG5ld0NoaWxkTGFuZXMgfD0gY2hpbGQkMTE0LmxhbmVzIHwgY2hpbGQkMTE0LmNoaWxkTGFuZXMpLFxuICAgICAgICAoc3VidHJlZUZsYWdzIHw9IGNoaWxkJDExNC5zdWJ0cmVlRmxhZ3MgJiA2NTAxMTcxMiksXG4gICAgICAgIChzdWJ0cmVlRmxhZ3MgfD0gY2hpbGQkMTE0LmZsYWdzICYgNjUwMTE3MTIpLFxuICAgICAgICAoY2hpbGQkMTE0LnJldHVybiA9IGNvbXBsZXRlZFdvcmspLFxuICAgICAgICAoY2hpbGQkMTE0ID0gY2hpbGQkMTE0LnNpYmxpbmcpO1xuICBlbHNlXG4gICAgZm9yIChjaGlsZCQxMTQgPSBjb21wbGV0ZWRXb3JrLmNoaWxkOyBudWxsICE9PSBjaGlsZCQxMTQ7IClcbiAgICAgIChuZXdDaGlsZExhbmVzIHw9IGNoaWxkJDExNC5sYW5lcyB8IGNoaWxkJDExNC5jaGlsZExhbmVzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMTQuc3VidHJlZUZsYWdzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMTQuZmxhZ3MpLFxuICAgICAgICAoY2hpbGQkMTE0LnJldHVybiA9IGNvbXBsZXRlZFdvcmspLFxuICAgICAgICAoY2hpbGQkMTE0ID0gY2hpbGQkMTE0LnNpYmxpbmcpO1xuICBjb21wbGV0ZWRXb3JrLnN1YnRyZWVGbGFncyB8PSBzdWJ0cmVlRmxhZ3M7XG4gIGNvbXBsZXRlZFdvcmsuY2hpbGRMYW5lcyA9IG5ld0NoaWxkTGFuZXM7XG4gIHJldHVybiBkaWRCYWlsb3V0O1xufVxuZnVuY3Rpb24gY29tcGxldGVXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHBvcFRyZWVDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDMxOlxuICAgIGNhc2UgMTY6XG4gICAgY2FzZSAxNTpcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDc6XG4gICAgY2FzZSA4OlxuICAgIGNhc2UgMTI6XG4gICAgY2FzZSA5OlxuICAgIGNhc2UgMTQ6XG4gICAgICByZXR1cm4gYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGw7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgIGNhc2UgMzpcbiAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgbmV3UHJvcHMgPSBudWxsO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiAobmV3UHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGUpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZS5jYWNoZSAhPT0gbmV3UHJvcHMgJiZcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwNDgpO1xuICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KTtcbiAgICAgIHBvcEhvc3RDb250YWluZXIoKTtcbiAgICAgIHJlbmRlckxhbmVzLnBlbmRpbmdDb250ZXh0ICYmXG4gICAgICAgICgocmVuZGVyTGFuZXMuY29udGV4dCA9IHJlbmRlckxhbmVzLnBlbmRpbmdDb250ZXh0KSxcbiAgICAgICAgKHJlbmRlckxhbmVzLnBlbmRpbmdDb250ZXh0ID0gbnVsbCkpO1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQgfHwgbnVsbCA9PT0gY3VycmVudC5jaGlsZClcbiAgICAgICAgcG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgPyBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgIDogbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgICAgKGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQgJiZcbiAgICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMjU2KSkgfHxcbiAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTAyNCksXG4gICAgICAgICAgICB1cGdyYWRlSHlkcmF0aW9uRXJyb3JzVG9SZWNvdmVyYWJsZSgpKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50XG4gICAgICAgICAgPyAobWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICBudWxsICE9PSByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICA/IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBwcmVsb2FkUmVzb3VyY2VBbmRTdXNwZW5kSWZOZWVkZWQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpKVxuICAgICAgICAgIDogcmVuZGVyTGFuZXNcbiAgICAgICAgICAgID8gcmVuZGVyTGFuZXMgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgICAgICA/IChtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBwcmVsb2FkUmVzb3VyY2VBbmRTdXNwZW5kSWZOZWVkZWQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpXG4gICAgICAgICAgICA6IChjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjc6XG4gICAgICBwb3BIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZW5kZXJMYW5lcyA9IHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICB2YXIgdHlwZSA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSlcbiAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzICE9PSBuZXdQcm9wcyAmJiBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoIW5ld1Byb3BzKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSlcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTY2KSk7XG4gICAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xuICAgICAgICBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA/IHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQpXG4gICAgICAgICAgOiAoKGN1cnJlbnQgPSByZXNvbHZlU2luZ2xldG9uSW5zdGFuY2UodHlwZSwgbmV3UHJvcHMsIHJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudCksXG4gICAgICAgICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSk7XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgNTpcbiAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICghbmV3UHJvcHMpIHtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIGlmIChwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcykpXG4gICAgICAgICAgcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHR5cGUgPSBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIoXG4gICAgICAgICAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc3dpdGNoIChyZW5kZXJMYW5lcykge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJtYXRoXCI6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50LmlubmVySFRNTCA9IFwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCI7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5yZW1vdmVDaGlsZChjdXJyZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9XG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdQcm9wcy5pc1xuICAgICAgICAgICAgICAgICAgICAgID8gdHlwZS5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIHsgaXM6IG5ld1Byb3BzLmlzIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gICAgICAgICAgICAgICAgICBuZXdQcm9wcy5tdWx0aXBsZVxuICAgICAgICAgICAgICAgICAgICA/IChjdXJyZW50Lm11bHRpcGxlID0gITApXG4gICAgICAgICAgICAgICAgICAgIDogbmV3UHJvcHMuc2l6ZSAmJiAoY3VycmVudC5zaXplID0gbmV3UHJvcHMuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9XG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdQcm9wcy5pc1xuICAgICAgICAgICAgICAgICAgICAgID8gdHlwZS5jcmVhdGVFbGVtZW50KHJlbmRlckxhbmVzLCB7IGlzOiBuZXdQcm9wcy5pcyB9KVxuICAgICAgICAgICAgICAgICAgICAgIDogdHlwZS5jcmVhdGVFbGVtZW50KHJlbmRlckxhbmVzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50W2ludGVybmFsSW5zdGFuY2VLZXldID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgY3VycmVudFtpbnRlcm5hbFByb3BzS2V5XSA9IG5ld1Byb3BzO1xuICAgICAgICAgIGE6IGZvciAodHlwZSA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSB0eXBlOyApIHtcbiAgICAgICAgICAgIGlmICg1ID09PSB0eXBlLnRhZyB8fCA2ID09PSB0eXBlLnRhZylcbiAgICAgICAgICAgICAgY3VycmVudC5hcHBlbmRDaGlsZCh0eXBlLnN0YXRlTm9kZSk7XG4gICAgICAgICAgICBlbHNlIGlmICg0ICE9PSB0eXBlLnRhZyAmJiAyNyAhPT0gdHlwZS50YWcgJiYgbnVsbCAhPT0gdHlwZS5jaGlsZCkge1xuICAgICAgICAgICAgICB0eXBlLmNoaWxkLnJldHVybiA9IHR5cGU7XG4gICAgICAgICAgICAgIHR5cGUgPSB0eXBlLmNoaWxkO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlID09PSB3b3JrSW5Qcm9ncmVzcykgYnJlYWsgYTtcbiAgICAgICAgICAgIGZvciAoOyBudWxsID09PSB0eXBlLnNpYmxpbmc7ICkge1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gdHlwZS5yZXR1cm4gfHwgdHlwZS5yZXR1cm4gPT09IHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIHR5cGUgPSB0eXBlLnJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR5cGUuc2libGluZy5yZXR1cm4gPSB0eXBlLnJldHVybjtcbiAgICAgICAgICAgIHR5cGUgPSB0eXBlLnNpYmxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgYTogc3dpdGNoIChcbiAgICAgICAgICAgIChzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50LCByZW5kZXJMYW5lcywgbmV3UHJvcHMpLCByZW5kZXJMYW5lcylcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNhc2UgXCJidXR0b25cIjpcbiAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSAhIW5ld1Byb3BzLmF1dG9Gb2N1cztcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgXCJpbWdcIjpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICEwO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICExO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNztcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgNjpcbiAgICAgIGlmIChjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChcInN0cmluZ1wiICE9PSB0eXBlb2YgbmV3UHJvcHMgJiYgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTY2KSk7XG4gICAgICAgIGN1cnJlbnQgPSByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50O1xuICAgICAgICBpZiAocG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpKSB7XG4gICAgICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgICAgICByZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgbmV3UHJvcHMgPSBudWxsO1xuICAgICAgICAgIHR5cGUgPSBoeWRyYXRpb25QYXJlbnRGaWJlcjtcbiAgICAgICAgICBpZiAobnVsbCAhPT0gdHlwZSlcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZS50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIG5ld1Byb3BzID0gdHlwZS5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgIGN1cnJlbnQubm9kZVZhbHVlID09PSByZW5kZXJMYW5lcyB8fFxuICAgICAgICAgICAgKG51bGwgIT09IG5ld1Byb3BzICYmICEwID09PSBuZXdQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcpIHx8XG4gICAgICAgICAgICBjaGVja0ZvclVubWF0Y2hlZFRleHQoY3VycmVudC5ub2RlVmFsdWUsIHJlbmRlckxhbmVzKVxuICAgICAgICAgICAgICA/ICEwXG4gICAgICAgICAgICAgIDogITE7XG4gICAgICAgICAgY3VycmVudCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAoY3VycmVudCA9XG4gICAgICAgICAgICBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIoY3VycmVudCkuY3JlYXRlVGV4dE5vZGUoXG4gICAgICAgICAgICAgIG5ld1Byb3BzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChjdXJyZW50W2ludGVybmFsSW5zdGFuY2VLZXldID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnQpO1xuICAgICAgfVxuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDEzOlxuICAgICAgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgIChudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZClcbiAgICAgICkge1xuICAgICAgICB0eXBlID0gcG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBpZiAobnVsbCAhPT0gbmV3UHJvcHMgJiYgbnVsbCAhPT0gbmV3UHJvcHMuZGVoeWRyYXRlZCkge1xuICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzE4KSk7XG4gICAgICAgICAgICB0eXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgIHR5cGUgPSBudWxsICE9PSB0eXBlID8gdHlwZS5kZWh5ZHJhdGVkIDogbnVsbDtcbiAgICAgICAgICAgIGlmICghdHlwZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTcpKTtcbiAgICAgICAgICAgIHR5cGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSxcbiAgICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSAmJlxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB0eXBlID0gITE7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgICh0eXBlID0gdXBncmFkZUh5ZHJhdGlvbkVycm9yc1RvUmVjb3ZlcmFibGUoKSksXG4gICAgICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgICAgICAoY3VycmVudC5tZW1vaXplZFN0YXRlLmh5ZHJhdGlvbkVycm9ycyA9IHR5cGUpLFxuICAgICAgICAgICAgKHR5cGUgPSAhMCk7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NilcbiAgICAgICAgICAgIHJldHVybiBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLCB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgaWYgKDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCkpXG4gICAgICAgIHJldHVybiAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSByZW5kZXJMYW5lcyksIHdvcmtJblByb2dyZXNzO1xuICAgICAgcmVuZGVyTGFuZXMgPSBudWxsICE9PSBuZXdQcm9wcztcbiAgICAgIGN1cnJlbnQgPSBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChyZW5kZXJMYW5lcykge1xuICAgICAgICBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICB0eXBlID0gbnVsbDtcbiAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAgICAgICAodHlwZSA9IG5ld1Byb3BzLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgICAgICAgdmFyIGNhY2hlJDEyNyA9IG51bGw7XG4gICAgICAgIG51bGwgIT09IG5ld1Byb3BzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChjYWNoZSQxMjcgPSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgICAgICAgY2FjaGUkMTI3ICE9PSB0eXBlICYmIChuZXdQcm9wcy5mbGFncyB8PSAyMDQ4KTtcbiAgICAgIH1cbiAgICAgIHJlbmRlckxhbmVzICE9PSBjdXJyZW50ICYmXG4gICAgICAgIHJlbmRlckxhbmVzICYmXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZC5mbGFncyB8PSA4MTkyKTtcbiAgICAgIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcigpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgICAgbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFxuICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MudHlwZSksIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMTk6XG4gICAgICBwb3Aoc3VzcGVuc2VTdGFja0N1cnNvcik7XG4gICAgICB0eXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChudWxsID09PSB0eXBlKSByZXR1cm4gYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGw7XG4gICAgICBuZXdQcm9wcyA9IDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCk7XG4gICAgICBjYWNoZSQxMjcgPSB0eXBlLnJlbmRlcmluZztcbiAgICAgIGlmIChudWxsID09PSBjYWNoZSQxMjcpXG4gICAgICAgIGlmIChuZXdQcm9wcykgY3V0T2ZmVGFpbElmTmVlZGVkKHR5cGUsICExKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgMCAhPT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyB8fFxuICAgICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiYgMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGZvciAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSBjdXJyZW50OyApIHtcbiAgICAgICAgICAgICAgY2FjaGUkMTI3ID0gZmluZEZpcnN0U3VzcGVuZGVkKGN1cnJlbnQpO1xuICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gY2FjaGUkMTI3KSB7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4O1xuICAgICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSk7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGNhY2hlJDEyNy51cGRhdGVRdWV1ZTtcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMDtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gcmVuZGVyTGFuZXM7XG4gICAgICAgICAgICAgICAgZm9yIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSByZW5kZXJMYW5lczsgKVxuICAgICAgICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzcyhyZW5kZXJMYW5lcywgY3VycmVudCksXG4gICAgICAgICAgICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgICAgICAgICAgIHB1c2goXG4gICAgICAgICAgICAgICAgICBzdXNwZW5zZVN0YWNrQ3Vyc29yLFxuICAgICAgICAgICAgICAgICAgKHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCAmIDEpIHwgMlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgbnVsbCAhPT0gdHlwZS50YWlsICYmXG4gICAgICAgICAgICBub3coKSA+IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgJiZcbiAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgIChuZXdQcm9wcyA9ICEwKSxcbiAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSA0MTk0MzA0KSk7XG4gICAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoIW5ld1Byb3BzKVxuICAgICAgICAgIGlmICgoKGN1cnJlbnQgPSBmaW5kRmlyc3RTdXNwZW5kZWQoY2FjaGUkMTI3KSksIG51bGwgIT09IGN1cnJlbnQpKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgICAgKG5ld1Byb3BzID0gITApLFxuICAgICAgICAgICAgICAoY3VycmVudCA9IGN1cnJlbnQudXBkYXRlUXVldWUpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50KSxcbiAgICAgICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCksXG4gICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMCksXG4gICAgICAgICAgICAgIG51bGwgPT09IHR5cGUudGFpbCAmJlxuICAgICAgICAgICAgICAgIFwiaGlkZGVuXCIgPT09IHR5cGUudGFpbE1vZGUgJiZcbiAgICAgICAgICAgICAgICAhY2FjaGUkMTI3LmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgICAgICFpc0h5ZHJhdGluZylcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgMiAqIG5vdygpIC0gdHlwZS5yZW5kZXJpbmdTdGFydFRpbWUgPlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lICYmXG4gICAgICAgICAgICAgIDUzNjg3MDkxMiAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgICAobmV3UHJvcHMgPSAhMCksXG4gICAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDQxOTQzMDQpKTtcbiAgICAgICAgdHlwZS5pc0JhY2t3YXJkc1xuICAgICAgICAgID8gKChjYWNoZSQxMjcuc2libGluZyA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGNhY2hlJDEyNykpXG4gICAgICAgICAgOiAoKGN1cnJlbnQgPSB0eXBlLmxhc3QpLFxuICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgICAgICA/IChjdXJyZW50LnNpYmxpbmcgPSBjYWNoZSQxMjcpXG4gICAgICAgICAgICAgIDogKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY2FjaGUkMTI3KSxcbiAgICAgICAgICAgICh0eXBlLmxhc3QgPSBjYWNoZSQxMjcpKTtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsICE9PSB0eXBlLnRhaWwpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdHlwZS50YWlsKSxcbiAgICAgICAgICAodHlwZS5yZW5kZXJpbmcgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHR5cGUudGFpbCA9IHdvcmtJblByb2dyZXNzLnNpYmxpbmcpLFxuICAgICAgICAgICh0eXBlLnJlbmRlcmluZ1N0YXJ0VGltZSA9IG5vdygpKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc2libGluZyA9IG51bGwpLFxuICAgICAgICAgIChjdXJyZW50ID0gc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KSxcbiAgICAgICAgICBwdXNoKHN1c3BlbnNlU3RhY2tDdXJzb3IsIG5ld1Byb3BzID8gKGN1cnJlbnQgJiAxKSB8IDIgOiBjdXJyZW50ICYgMSksXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyMjpcbiAgICBjYXNlIDIzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgcG9wSGlkZGVuQ29udGV4dCgpLFxuICAgICAgICAobmV3UHJvcHMgPSBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgID8gKG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgIT09IG5ld1Byb3BzICYmXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gODE5MilcbiAgICAgICAgICA6IG5ld1Byb3BzICYmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA4MTkyKSxcbiAgICAgICAgbmV3UHJvcHNcbiAgICAgICAgICA/IDAgIT09IChyZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikgJiZcbiAgICAgICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCkgJiZcbiAgICAgICAgICAgIChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyAmIDYgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTIpKVxuICAgICAgICAgIDogYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICBzY2hlZHVsZVJldHJ5RWZmZWN0KHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcy5yZXRyeVF1ZXVlKSxcbiAgICAgICAgKHJlbmRlckxhbmVzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgICAgICAgKHJlbmRlckxhbmVzID0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKSxcbiAgICAgICAgKG5ld1Byb3BzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpLFxuICAgICAgICBuZXdQcm9wcyAhPT0gcmVuZGVyTGFuZXMgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwNDgpLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmIHBvcChyZXN1bWVkQ2FjaGUpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocmVuZGVyTGFuZXMgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiAocmVuZGVyTGFuZXMgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlICE9PSByZW5kZXJMYW5lcyAmJlxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDQ4KSxcbiAgICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KSxcbiAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNTpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMzA6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1Niwgd29ya0luUHJvZ3Jlc3MudGFnKSk7XG59XG5mdW5jdGlvbiB1bndpbmRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gIHBvcFRyZWVDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzKSxcbiAgICAgICAgY3VycmVudCAmIDY1NTM2XG4gICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmZsYWdzID0gKGN1cnJlbnQgJiAtNjU1MzcpIHwgMTI4KSwgd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgOiBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCksXG4gICAgICAgIHBvcEhvc3RDb250YWluZXIoKSxcbiAgICAgICAgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5mbGFncyksXG4gICAgICAgIDAgIT09IChjdXJyZW50ICYgNjU1MzYpICYmIDAgPT09IChjdXJyZW50ICYgMTI4KVxuICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI2OlxuICAgIGNhc2UgMjc6XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICBjYXNlIDEzOlxuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5kZWh5ZHJhdGVkKSB7XG4gICAgICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGUpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDApKTtcbiAgICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzO1xuICAgICAgcmV0dXJuIGN1cnJlbnQgJiA2NTUzNlxuICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgOiBudWxsO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXR1cm4gcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpLCBudWxsO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBwb3BIb3N0Q29udGFpbmVyKCksIG51bGw7XG4gICAgY2FzZSAxMDpcbiAgICAgIHJldHVybiBwb3BQcm92aWRlcih3b3JrSW5Qcm9ncmVzcy50eXBlKSwgbnVsbDtcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBwb3BIaWRkZW5Db250ZXh0KCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgcG9wKHJlc3VtZWRDYWNoZSksXG4gICAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3MpLFxuICAgICAgICBjdXJyZW50ICYgNjU1MzZcbiAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA6IG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJldHVybiBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpLCBudWxsO1xuICAgIGNhc2UgMjU6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIHVud2luZEludGVycnVwdGVkV29yayhjdXJyZW50LCBpbnRlcnJ1cHRlZFdvcmspIHtcbiAgcG9wVHJlZUNvbnRleHQoaW50ZXJydXB0ZWRXb3JrKTtcbiAgc3dpdGNoIChpbnRlcnJ1cHRlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAzOlxuICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KTtcbiAgICAgIHBvcEhvc3RDb250YWluZXIoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjY6XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICBwb3BIb3N0Q29udGV4dChpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgcG9wSG9zdENvbnRhaW5lcigpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHBvcChzdXNwZW5zZVN0YWNrQ3Vyc29yKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTA6XG4gICAgICBwb3BQcm92aWRlcihpbnRlcnJ1cHRlZFdvcmsudHlwZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIoaW50ZXJydXB0ZWRXb3JrKTtcbiAgICAgIHBvcEhpZGRlbkNvbnRleHQoKTtcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgcG9wKHJlc3VtZWRDYWNoZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI0OlxuICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0SG9va0VmZmVjdExpc3RNb3VudChmbGFncywgZmluaXNoZWRXb3JrKSB7XG4gIHRyeSB7XG4gICAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlLFxuICAgICAgbGFzdEVmZmVjdCA9IG51bGwgIT09IHVwZGF0ZVF1ZXVlID8gdXBkYXRlUXVldWUubGFzdEVmZmVjdCA6IG51bGw7XG4gICAgaWYgKG51bGwgIT09IGxhc3RFZmZlY3QpIHtcbiAgICAgIHZhciBmaXJzdEVmZmVjdCA9IGxhc3RFZmZlY3QubmV4dDtcbiAgICAgIHVwZGF0ZVF1ZXVlID0gZmlyc3RFZmZlY3Q7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICgodXBkYXRlUXVldWUudGFnICYgZmxhZ3MpID09PSBmbGFncykge1xuICAgICAgICAgIGxhc3RFZmZlY3QgPSB2b2lkIDA7XG4gICAgICAgICAgdmFyIGNyZWF0ZSA9IHVwZGF0ZVF1ZXVlLmNyZWF0ZSxcbiAgICAgICAgICAgIGluc3QgPSB1cGRhdGVRdWV1ZS5pbnN0O1xuICAgICAgICAgIGxhc3RFZmZlY3QgPSBjcmVhdGUoKTtcbiAgICAgICAgICBpbnN0LmRlc3Ryb3kgPSBsYXN0RWZmZWN0O1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZVF1ZXVlID0gdXBkYXRlUXVldWUubmV4dDtcbiAgICAgIH0gd2hpbGUgKHVwZGF0ZVF1ZXVlICE9PSBmaXJzdEVmZmVjdCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoXG4gIGZsYWdzLFxuICBmaW5pc2hlZFdvcmssXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IkanNjb21wJDBcbikge1xuICB0cnkge1xuICAgIHZhciB1cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSxcbiAgICAgIGxhc3RFZmZlY3QgPSBudWxsICE9PSB1cGRhdGVRdWV1ZSA/IHVwZGF0ZVF1ZXVlLmxhc3RFZmZlY3QgOiBudWxsO1xuICAgIGlmIChudWxsICE9PSBsYXN0RWZmZWN0KSB7XG4gICAgICB2YXIgZmlyc3RFZmZlY3QgPSBsYXN0RWZmZWN0Lm5leHQ7XG4gICAgICB1cGRhdGVRdWV1ZSA9IGZpcnN0RWZmZWN0O1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoKHVwZGF0ZVF1ZXVlLnRhZyAmIGZsYWdzKSA9PT0gZmxhZ3MpIHtcbiAgICAgICAgICB2YXIgaW5zdCA9IHVwZGF0ZVF1ZXVlLmluc3QsXG4gICAgICAgICAgICBkZXN0cm95ID0gaW5zdC5kZXN0cm95O1xuICAgICAgICAgIGlmICh2b2lkIDAgIT09IGRlc3Ryb3kpIHtcbiAgICAgICAgICAgIGluc3QuZGVzdHJveSA9IHZvaWQgMDtcbiAgICAgICAgICAgIGxhc3RFZmZlY3QgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgICAgICB2YXIgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciA9IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IkanNjb21wJDAsXG4gICAgICAgICAgICAgIGRlc3Ryb3lfID0gZGVzdHJveTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGRlc3Ryb3lfKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihcbiAgICAgICAgICAgICAgICBsYXN0RWZmZWN0LFxuICAgICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZS5uZXh0O1xuICAgICAgfSB3aGlsZSAodXBkYXRlUXVldWUgIT09IGZpcnN0RWZmZWN0KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdENsYXNzQ2FsbGJhY2tzKGZpbmlzaGVkV29yaykge1xuICB2YXIgdXBkYXRlUXVldWUgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWU7XG4gIGlmIChudWxsICE9PSB1cGRhdGVRdWV1ZSkge1xuICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIGNvbW1pdENhbGxiYWNrcyh1cGRhdGVRdWV1ZSwgaW5zdGFuY2UpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudChcbiAgY3VycmVudCxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgaW5zdGFuY2Vcbikge1xuICBpbnN0YW5jZS5wcm9wcyA9IHJlc29sdmVDbGFzc0NvbXBvbmVudFByb3BzKFxuICAgIGN1cnJlbnQudHlwZSxcbiAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHNcbiAgKTtcbiAgaW5zdGFuY2Uuc3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gIHRyeSB7XG4gICAgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVubW91bnQoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIHNhZmVseUF0dGFjaFJlZihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKSB7XG4gIHRyeSB7XG4gICAgdmFyIHJlZiA9IGN1cnJlbnQucmVmO1xuICAgIGlmIChudWxsICE9PSByZWYpIHtcbiAgICAgIHN3aXRjaCAoY3VycmVudC50YWcpIHtcbiAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHZhciBpbnN0YW5jZVRvVXNlID0gY3VycmVudC5zdGF0ZU5vZGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzA6XG4gICAgICAgICAgaW5zdGFuY2VUb1VzZSA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGluc3RhbmNlVG9Vc2UgPSBjdXJyZW50LnN0YXRlTm9kZTtcbiAgICAgIH1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZlxuICAgICAgICA/IChjdXJyZW50LnJlZkNsZWFudXAgPSByZWYoaW5zdGFuY2VUb1VzZSkpXG4gICAgICAgIDogKHJlZi5jdXJyZW50ID0gaW5zdGFuY2VUb1VzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpIHtcbiAgdmFyIHJlZiA9IGN1cnJlbnQucmVmLFxuICAgIHJlZkNsZWFudXAgPSBjdXJyZW50LnJlZkNsZWFudXA7XG4gIGlmIChudWxsICE9PSByZWYpXG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZkNsZWFudXApXG4gICAgICB0cnkge1xuICAgICAgICByZWZDbGVhbnVwKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvcik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAoY3VycmVudC5yZWZDbGVhbnVwID0gbnVsbCksXG4gICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LmFsdGVybmF0ZSksXG4gICAgICAgICAgbnVsbCAhPSBjdXJyZW50ICYmIChjdXJyZW50LnJlZkNsZWFudXAgPSBudWxsKTtcbiAgICAgIH1cbiAgICBlbHNlIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZWYpXG4gICAgICB0cnkge1xuICAgICAgICByZWYobnVsbCk7XG4gICAgICB9IGNhdGNoIChlcnJvciQxNDMpIHtcbiAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IkMTQzKTtcbiAgICAgIH1cbiAgICBlbHNlIHJlZi5jdXJyZW50ID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbW1pdEhvc3RNb3VudChmaW5pc2hlZFdvcmspIHtcbiAgdmFyIHR5cGUgPSBmaW5pc2hlZFdvcmsudHlwZSxcbiAgICBwcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLFxuICAgIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgdHJ5IHtcbiAgICBhOiBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJidXR0b25cIjpcbiAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgIHByb3BzLmF1dG9Gb2N1cyAmJiBpbnN0YW5jZS5mb2N1cygpO1xuICAgICAgICBicmVhayBhO1xuICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgICBwcm9wcy5zcmNcbiAgICAgICAgICA/IChpbnN0YW5jZS5zcmMgPSBwcm9wcy5zcmMpXG4gICAgICAgICAgOiBwcm9wcy5zcmNTZXQgJiYgKGluc3RhbmNlLnNyY3NldCA9IHByb3BzLnNyY1NldCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRIb3N0VXBkYXRlKGZpbmlzaGVkV29yaywgbmV3UHJvcHMsIG9sZFByb3BzKSB7XG4gIHRyeSB7XG4gICAgdmFyIGRvbUVsZW1lbnQgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgIHVwZGF0ZVByb3BlcnRpZXMoZG9tRWxlbWVudCwgZmluaXNoZWRXb3JrLnR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcyk7XG4gICAgZG9tRWxlbWVudFtpbnRlcm5hbFByb3BzS2V5XSA9IG5ld1Byb3BzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBpc0hvc3RQYXJlbnQoZmliZXIpIHtcbiAgcmV0dXJuIChcbiAgICA1ID09PSBmaWJlci50YWcgfHxcbiAgICAzID09PSBmaWJlci50YWcgfHxcbiAgICAyNiA9PT0gZmliZXIudGFnIHx8XG4gICAgKDI3ID09PSBmaWJlci50YWcgJiYgaXNTaW5nbGV0b25TY29wZShmaWJlci50eXBlKSkgfHxcbiAgICA0ID09PSBmaWJlci50YWdcbiAgKTtcbn1cbmZ1bmN0aW9uIGdldEhvc3RTaWJsaW5nKGZpYmVyKSB7XG4gIGE6IGZvciAoOzspIHtcbiAgICBmb3IgKDsgbnVsbCA9PT0gZmliZXIuc2libGluZzsgKSB7XG4gICAgICBpZiAobnVsbCA9PT0gZmliZXIucmV0dXJuIHx8IGlzSG9zdFBhcmVudChmaWJlci5yZXR1cm4pKSByZXR1cm4gbnVsbDtcbiAgICAgIGZpYmVyID0gZmliZXIucmV0dXJuO1xuICAgIH1cbiAgICBmaWJlci5zaWJsaW5nLnJldHVybiA9IGZpYmVyLnJldHVybjtcbiAgICBmb3IgKFxuICAgICAgZmliZXIgPSBmaWJlci5zaWJsaW5nO1xuICAgICAgNSAhPT0gZmliZXIudGFnICYmIDYgIT09IGZpYmVyLnRhZyAmJiAxOCAhPT0gZmliZXIudGFnO1xuXG4gICAgKSB7XG4gICAgICBpZiAoMjcgPT09IGZpYmVyLnRhZyAmJiBpc1NpbmdsZXRvblNjb3BlKGZpYmVyLnR5cGUpKSBjb250aW51ZSBhO1xuICAgICAgaWYgKGZpYmVyLmZsYWdzICYgMikgY29udGludWUgYTtcbiAgICAgIGlmIChudWxsID09PSBmaWJlci5jaGlsZCB8fCA0ID09PSBmaWJlci50YWcpIGNvbnRpbnVlIGE7XG4gICAgICBlbHNlIChmaWJlci5jaGlsZC5yZXR1cm4gPSBmaWJlciksIChmaWJlciA9IGZpYmVyLmNoaWxkKTtcbiAgICB9XG4gICAgaWYgKCEoZmliZXIuZmxhZ3MgJiAyKSkgcmV0dXJuIGZpYmVyLnN0YXRlTm9kZTtcbiAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgNiA9PT0gdGFnKVxuICAgIChub2RlID0gbm9kZS5zdGF0ZU5vZGUpLFxuICAgICAgYmVmb3JlXG4gICAgICAgID8gKDkgPT09IHBhcmVudC5ub2RlVHlwZVxuICAgICAgICAgICAgPyBwYXJlbnQuYm9keVxuICAgICAgICAgICAgOiBcIkhUTUxcIiA9PT0gcGFyZW50Lm5vZGVOYW1lXG4gICAgICAgICAgICAgID8gcGFyZW50Lm93bmVyRG9jdW1lbnQuYm9keVxuICAgICAgICAgICAgICA6IHBhcmVudFxuICAgICAgICAgICkuaW5zZXJ0QmVmb3JlKG5vZGUsIGJlZm9yZSlcbiAgICAgICAgOiAoKGJlZm9yZSA9XG4gICAgICAgICAgICA5ID09PSBwYXJlbnQubm9kZVR5cGVcbiAgICAgICAgICAgICAgPyBwYXJlbnQuYm9keVxuICAgICAgICAgICAgICA6IFwiSFRNTFwiID09PSBwYXJlbnQubm9kZU5hbWVcbiAgICAgICAgICAgICAgICA/IHBhcmVudC5vd25lckRvY3VtZW50LmJvZHlcbiAgICAgICAgICAgICAgICA6IHBhcmVudCksXG4gICAgICAgICAgYmVmb3JlLmFwcGVuZENoaWxkKG5vZGUpLFxuICAgICAgICAgIChwYXJlbnQgPSBwYXJlbnQuX3JlYWN0Um9vdENvbnRhaW5lciksXG4gICAgICAgICAgKG51bGwgIT09IHBhcmVudCAmJiB2b2lkIDAgIT09IHBhcmVudCkgfHxcbiAgICAgICAgICAgIG51bGwgIT09IGJlZm9yZS5vbmNsaWNrIHx8XG4gICAgICAgICAgICAoYmVmb3JlLm9uY2xpY2sgPSBub29wJDEpKTtcbiAgZWxzZSBpZiAoXG4gICAgNCAhPT0gdGFnICYmXG4gICAgKDI3ID09PSB0YWcgJiZcbiAgICAgIGlzU2luZ2xldG9uU2NvcGUobm9kZS50eXBlKSAmJlxuICAgICAgKChwYXJlbnQgPSBub2RlLnN0YXRlTm9kZSksIChiZWZvcmUgPSBudWxsKSksXG4gICAgKG5vZGUgPSBub2RlLmNoaWxkKSxcbiAgICBudWxsICE9PSBub2RlKVxuICApXG4gICAgZm9yIChcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIobm9kZSwgYmVmb3JlLCBwYXJlbnQpLFxuICAgICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgICAgbnVsbCAhPT0gbm9kZTtcblxuICAgIClcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIobm9kZSwgYmVmb3JlLCBwYXJlbnQpLFxuICAgICAgICAobm9kZSA9IG5vZGUuc2libGluZyk7XG59XG5mdW5jdGlvbiBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUobm9kZSwgYmVmb3JlLCBwYXJlbnQpIHtcbiAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICBpZiAoNSA9PT0gdGFnIHx8IDYgPT09IHRhZylcbiAgICAobm9kZSA9IG5vZGUuc3RhdGVOb2RlKSxcbiAgICAgIGJlZm9yZSA/IHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgYmVmb3JlKSA6IHBhcmVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgZWxzZSBpZiAoXG4gICAgNCAhPT0gdGFnICYmXG4gICAgKDI3ID09PSB0YWcgJiYgaXNTaW5nbGV0b25TY29wZShub2RlLnR5cGUpICYmIChwYXJlbnQgPSBub2RlLnN0YXRlTm9kZSksXG4gICAgKG5vZGUgPSBub2RlLmNoaWxkKSxcbiAgICBudWxsICE9PSBub2RlKVxuICApXG4gICAgZm9yIChcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCksIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgICBudWxsICE9PSBub2RlO1xuXG4gICAgKVxuICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlKG5vZGUsIGJlZm9yZSwgcGFyZW50KSwgKG5vZGUgPSBub2RlLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0SG9zdFNpbmdsZXRvbkFjcXVpc2l0aW9uKGZpbmlzaGVkV29yaykge1xuICB2YXIgc2luZ2xldG9uID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSxcbiAgICBwcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICB0cnkge1xuICAgIGZvciAoXG4gICAgICB2YXIgdHlwZSA9IGZpbmlzaGVkV29yay50eXBlLCBhdHRyaWJ1dGVzID0gc2luZ2xldG9uLmF0dHJpYnV0ZXM7XG4gICAgICBhdHRyaWJ1dGVzLmxlbmd0aDtcblxuICAgIClcbiAgICAgIHNpbmdsZXRvbi5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZXNbMF0pO1xuICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKHNpbmdsZXRvbiwgdHlwZSwgcHJvcHMpO1xuICAgIHNpbmdsZXRvbltpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICBzaW5nbGV0b25baW50ZXJuYWxQcm9wc0tleV0gPSBwcm9wcztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgfVxufVxudmFyIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9ICExLFxuICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gITEsXG4gIG5lZWRzRm9ybVJlc2V0ID0gITEsXG4gIFBvc3NpYmx5V2Vha1NldCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFdlYWtTZXQgPyBXZWFrU2V0IDogU2V0LFxuICBuZXh0RWZmZWN0ID0gbnVsbDtcbmZ1bmN0aW9uIGNvbW1pdEJlZm9yZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaXJzdENoaWxkKSB7XG4gIHJvb3QgPSByb290LmNvbnRhaW5lckluZm87XG4gIGV2ZW50c0VuYWJsZWQgPSBfZW5hYmxlZDtcbiAgcm9vdCA9IGdldEFjdGl2ZUVsZW1lbnREZWVwKHJvb3QpO1xuICBpZiAoaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKHJvb3QpKSB7XG4gICAgaWYgKFwic2VsZWN0aW9uU3RhcnRcIiBpbiByb290KVxuICAgICAgdmFyIEpTQ29tcGlsZXJfdGVtcCA9IHtcbiAgICAgICAgc3RhcnQ6IHJvb3Quc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgIGVuZDogcm9vdC5zZWxlY3Rpb25FbmRcbiAgICAgIH07XG4gICAgZWxzZVxuICAgICAgYToge1xuICAgICAgICBKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICAgICgoSlNDb21waWxlcl90ZW1wID0gcm9vdC5vd25lckRvY3VtZW50KSAmJlxuICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLmRlZmF1bHRWaWV3KSB8fFxuICAgICAgICAgIHdpbmRvdztcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9XG4gICAgICAgICAgSlNDb21waWxlcl90ZW1wLmdldFNlbGVjdGlvbiAmJiBKU0NvbXBpbGVyX3RlbXAuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIGlmIChzZWxlY3Rpb24gJiYgMCAhPT0gc2VsZWN0aW9uLnJhbmdlQ291bnQpIHtcbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcbiAgICAgICAgICB2YXIgYW5jaG9yT2Zmc2V0ID0gc2VsZWN0aW9uLmFuY2hvck9mZnNldCxcbiAgICAgICAgICAgIGZvY3VzTm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGU7XG4gICAgICAgICAgc2VsZWN0aW9uID0gc2VsZWN0aW9uLmZvY3VzT2Zmc2V0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAubm9kZVR5cGUsIGZvY3VzTm9kZS5ub2RlVHlwZTtcbiAgICAgICAgICB9IGNhdGNoIChlJDIwKSB7XG4gICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAgPSBudWxsO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGxlbmd0aCA9IDAsXG4gICAgICAgICAgICBzdGFydCA9IC0xLFxuICAgICAgICAgICAgZW5kID0gLTEsXG4gICAgICAgICAgICBpbmRleFdpdGhpbkFuY2hvciA9IDAsXG4gICAgICAgICAgICBpbmRleFdpdGhpbkZvY3VzID0gMCxcbiAgICAgICAgICAgIG5vZGUgPSByb290LFxuICAgICAgICAgICAgcGFyZW50Tm9kZSA9IG51bGw7XG4gICAgICAgICAgYjogZm9yICg7Oykge1xuICAgICAgICAgICAgZm9yICh2YXIgbmV4dDsgOyApIHtcbiAgICAgICAgICAgICAgbm9kZSAhPT0gSlNDb21waWxlcl90ZW1wIHx8XG4gICAgICAgICAgICAgICAgKDAgIT09IGFuY2hvck9mZnNldCAmJiAzICE9PSBub2RlLm5vZGVUeXBlKSB8fFxuICAgICAgICAgICAgICAgIChzdGFydCA9IGxlbmd0aCArIGFuY2hvck9mZnNldCk7XG4gICAgICAgICAgICAgIG5vZGUgIT09IGZvY3VzTm9kZSB8fFxuICAgICAgICAgICAgICAgICgwICE9PSBzZWxlY3Rpb24gJiYgMyAhPT0gbm9kZS5ub2RlVHlwZSkgfHxcbiAgICAgICAgICAgICAgICAoZW5kID0gbGVuZ3RoICsgc2VsZWN0aW9uKTtcbiAgICAgICAgICAgICAgMyA9PT0gbm9kZS5ub2RlVHlwZSAmJiAobGVuZ3RoICs9IG5vZGUubm9kZVZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSAobmV4dCA9IG5vZGUuZmlyc3RDaGlsZCkpIGJyZWFrO1xuICAgICAgICAgICAgICBwYXJlbnROb2RlID0gbm9kZTtcbiAgICAgICAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgIGlmIChub2RlID09PSByb290KSBicmVhayBiO1xuICAgICAgICAgICAgICBwYXJlbnROb2RlID09PSBKU0NvbXBpbGVyX3RlbXAgJiZcbiAgICAgICAgICAgICAgICArK2luZGV4V2l0aGluQW5jaG9yID09PSBhbmNob3JPZmZzZXQgJiZcbiAgICAgICAgICAgICAgICAoc3RhcnQgPSBsZW5ndGgpO1xuICAgICAgICAgICAgICBwYXJlbnROb2RlID09PSBmb2N1c05vZGUgJiZcbiAgICAgICAgICAgICAgICArK2luZGV4V2l0aGluRm9jdXMgPT09IHNlbGVjdGlvbiAmJlxuICAgICAgICAgICAgICAgIChlbmQgPSBsZW5ndGgpO1xuICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gKG5leHQgPSBub2RlLm5leHRTaWJsaW5nKSkgYnJlYWs7XG4gICAgICAgICAgICAgIG5vZGUgPSBwYXJlbnROb2RlO1xuICAgICAgICAgICAgICBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICAgICAgICAtMSA9PT0gc3RhcnQgfHwgLTEgPT09IGVuZCA/IG51bGwgOiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICAgICAgfSBlbHNlIEpTQ29tcGlsZXJfdGVtcCA9IG51bGw7XG4gICAgICB9XG4gICAgSlNDb21waWxlcl90ZW1wID0gSlNDb21waWxlcl90ZW1wIHx8IHsgc3RhcnQ6IDAsIGVuZDogMCB9O1xuICB9IGVsc2UgSlNDb21waWxlcl90ZW1wID0gbnVsbDtcbiAgc2VsZWN0aW9uSW5mb3JtYXRpb24gPSB7IGZvY3VzZWRFbGVtOiByb290LCBzZWxlY3Rpb25SYW5nZTogSlNDb21waWxlcl90ZW1wIH07XG4gIF9lbmFibGVkID0gITE7XG4gIGZvciAobmV4dEVmZmVjdCA9IGZpcnN0Q2hpbGQ7IG51bGwgIT09IG5leHRFZmZlY3Q7IClcbiAgICBpZiAoXG4gICAgICAoKGZpcnN0Q2hpbGQgPSBuZXh0RWZmZWN0KSxcbiAgICAgIChyb290ID0gZmlyc3RDaGlsZC5jaGlsZCksXG4gICAgICAwICE9PSAoZmlyc3RDaGlsZC5zdWJ0cmVlRmxhZ3MgJiAxMDI0KSAmJiBudWxsICE9PSByb290KVxuICAgIClcbiAgICAgIChyb290LnJldHVybiA9IGZpcnN0Q2hpbGQpLCAobmV4dEVmZmVjdCA9IHJvb3QpO1xuICAgIGVsc2VcbiAgICAgIGZvciAoOyBudWxsICE9PSBuZXh0RWZmZWN0OyApIHtcbiAgICAgICAgZmlyc3RDaGlsZCA9IG5leHRFZmZlY3Q7XG4gICAgICAgIGZvY3VzTm9kZSA9IGZpcnN0Q2hpbGQuYWx0ZXJuYXRlO1xuICAgICAgICByb290ID0gZmlyc3RDaGlsZC5mbGFncztcbiAgICAgICAgc3dpdGNoIChmaXJzdENoaWxkLnRhZykge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGlmICgwICE9PSAocm9vdCAmIDEwMjQpICYmIG51bGwgIT09IGZvY3VzTm9kZSkge1xuICAgICAgICAgICAgICByb290ID0gdm9pZCAwO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAgPSBmaXJzdENoaWxkO1xuICAgICAgICAgICAgICBhbmNob3JPZmZzZXQgPSBmb2N1c05vZGUubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgZm9jdXNOb2RlID0gZm9jdXNOb2RlLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICAgIHNlbGVjdGlvbiA9IEpTQ29tcGlsZXJfdGVtcC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc29sdmVkUHJldlByb3BzID0gcmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMoXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAudHlwZSxcbiAgICAgICAgICAgICAgICAgIGFuY2hvck9mZnNldCxcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5lbGVtZW50VHlwZSA9PT0gSlNDb21waWxlcl90ZW1wLnR5cGVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJvb3QgPSBzZWxlY3Rpb24uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoXG4gICAgICAgICAgICAgICAgICByZXNvbHZlZFByZXZQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGZvY3VzTm9kZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlID0gcm9vdDtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCxcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5yZXR1cm4sXG4gICAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGlmICgwICE9PSAocm9vdCAmIDEwMjQpKVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKChyb290ID0gZmlyc3RDaGlsZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksXG4gICAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCA9IHJvb3Qubm9kZVR5cGUpLFxuICAgICAgICAgICAgICAgIDkgPT09IEpTQ29tcGlsZXJfdGVtcClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGNsZWFyQ29udGFpbmVyU3BhcmluZ2x5KHJvb3QpO1xuICAgICAgICAgICAgICBlbHNlIGlmICgxID09PSBKU0NvbXBpbGVyX3RlbXApXG4gICAgICAgICAgICAgICAgc3dpdGNoIChyb290Lm5vZGVOYW1lKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiSEVBRFwiOlxuICAgICAgICAgICAgICAgICAgY2FzZSBcIkhUTUxcIjpcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJCT0RZXCI6XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyQ29udGFpbmVyU3BhcmluZ2x5KHJvb3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJvb3QudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBjYXNlIDI2OlxuICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmICgwICE9PSAocm9vdCAmIDEwMjQpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MykpO1xuICAgICAgICB9XG4gICAgICAgIHJvb3QgPSBmaXJzdENoaWxkLnNpYmxpbmc7XG4gICAgICAgIGlmIChudWxsICE9PSByb290KSB7XG4gICAgICAgICAgcm9vdC5yZXR1cm4gPSBmaXJzdENoaWxkLnJldHVybjtcbiAgICAgICAgICBuZXh0RWZmZWN0ID0gcm9vdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBuZXh0RWZmZWN0ID0gZmlyc3RDaGlsZC5yZXR1cm47XG4gICAgICB9XG59XG5mdW5jdGlvbiBjb21taXRMYXlvdXRFZmZlY3RPbkZpYmVyKGZpbmlzaGVkUm9vdCwgY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIHZhciBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJiBjb21taXRIb29rRWZmZWN0TGlzdE1vdW50KDUsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA0KVxuICAgICAgICBpZiAoKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSwgbnVsbCA9PT0gY3VycmVudCkpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRNb3VudCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2UHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay50eXBlLFxuICAgICAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkVXBkYXRlKFxuICAgICAgICAgICAgICBwcmV2UHJvcHMsXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvciQxNDIpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5yZXR1cm4sXG4gICAgICAgICAgICAgIGVycm9yJDE0MlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGZsYWdzICYgNjQgJiYgY29tbWl0Q2xhc3NDYWxsYmFja3MoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgaWYgKFxuICAgICAgICBmbGFncyAmIDY0ICYmXG4gICAgICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSwgbnVsbCAhPT0gZmluaXNoZWRSb290KVxuICAgICAgKSB7XG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBpZiAobnVsbCAhPT0gZmluaXNoZWRXb3JrLmNoaWxkKVxuICAgICAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLmNoaWxkLnRhZykge1xuICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yay5jaGlsZC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBjdXJyZW50ID0gZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29tbWl0Q2FsbGJhY2tzKGZpbmlzaGVkUm9vdCwgY3VycmVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjc6XG4gICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICBjb21taXRIb3N0U2luZ2xldG9uQWNxdWlzaXRpb24oZmluaXNoZWRXb3JrKTtcbiAgICBjYXNlIDI2OlxuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIG51bGwgPT09IGN1cnJlbnQgJiYgZmxhZ3MgJiA0ICYmIGNvbW1pdEhvc3RNb3VudChmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiYgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJiBjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDY0ICYmXG4gICAgICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUpLFxuICAgICAgICBudWxsICE9PSBmaW5pc2hlZFJvb3QgJiZcbiAgICAgICAgICAoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdC5kZWh5ZHJhdGVkKSxcbiAgICAgICAgICBudWxsICE9PSBmaW5pc2hlZFJvb3QgJiZcbiAgICAgICAgICAgICgoZmluaXNoZWRXb3JrID0gcmV0cnlEZWh5ZHJhdGVkU3VzcGVuc2VCb3VuZGFyeS5iaW5kKFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgcmVnaXN0ZXJTdXNwZW5zZUluc3RhbmNlUmV0cnkoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspKSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMjpcbiAgICAgIGZsYWdzID0gbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgfHwgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuO1xuICAgICAgaWYgKCFmbGFncykge1xuICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgICAgcHJldlByb3BzID0gb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuO1xuICAgICAgICB2YXIgcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gPSBmbGFncztcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBjdXJyZW50KSAmJiAhcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW5cbiAgICAgICAgICA/IHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDg3NzIpXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IHByZXZQcm9wcztcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzMDpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRldGFjaEZpYmVyQWZ0ZXJFZmZlY3RzKGZpYmVyKSB7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG4gIG51bGwgIT09IGFsdGVybmF0ZSAmJlxuICAgICgoZmliZXIuYWx0ZXJuYXRlID0gbnVsbCksIGRldGFjaEZpYmVyQWZ0ZXJFZmZlY3RzKGFsdGVybmF0ZSkpO1xuICBmaWJlci5jaGlsZCA9IG51bGw7XG4gIGZpYmVyLmRlbGV0aW9ucyA9IG51bGw7XG4gIGZpYmVyLnNpYmxpbmcgPSBudWxsO1xuICA1ID09PSBmaWJlci50YWcgJiZcbiAgICAoKGFsdGVybmF0ZSA9IGZpYmVyLnN0YXRlTm9kZSksXG4gICAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIGRldGFjaERlbGV0ZWRJbnN0YW5jZShhbHRlcm5hdGUpKTtcbiAgZmliZXIuc3RhdGVOb2RlID0gbnVsbDtcbiAgZmliZXIucmV0dXJuID0gbnVsbDtcbiAgZmliZXIuZGVwZW5kZW5jaWVzID0gbnVsbDtcbiAgZmliZXIubWVtb2l6ZWRQcm9wcyA9IG51bGw7XG4gIGZpYmVyLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICBmaWJlci5wZW5kaW5nUHJvcHMgPSBudWxsO1xuICBmaWJlci5zdGF0ZU5vZGUgPSBudWxsO1xuICBmaWJlci51cGRhdGVRdWV1ZSA9IG51bGw7XG59XG52YXIgaG9zdFBhcmVudCA9IG51bGwsXG4gIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgZmluaXNoZWRSb290LFxuICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICBwYXJlbnRcbikge1xuICBmb3IgKHBhcmVudCA9IHBhcmVudC5jaGlsZDsgbnVsbCAhPT0gcGFyZW50OyApXG4gICAgY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFJvb3QsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIHBhcmVudCksXG4gICAgICAocGFyZW50ID0gcGFyZW50LnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlcihcbiAgZmluaXNoZWRSb290LFxuICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICBkZWxldGVkRmliZXJcbikge1xuICBpZiAoaW5qZWN0ZWRIb29rICYmIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluamVjdGVkSG9vay5vbkNvbW1pdEZpYmVyVW5tb3VudClcbiAgICB0cnkge1xuICAgICAgaW5qZWN0ZWRIb29rLm9uQ29tbWl0RmliZXJVbm1vdW50KHJlbmRlcmVySUQsIGRlbGV0ZWRGaWJlcik7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuICBzd2l0Y2ggKGRlbGV0ZWRGaWJlci50YWcpIHtcbiAgICBjYXNlIDI2OlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgZGVsZXRlZEZpYmVyLm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyBkZWxldGVkRmliZXIubWVtb2l6ZWRTdGF0ZS5jb3VudC0tXG4gICAgICAgIDogZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSAmJlxuICAgICAgICAgICgoZGVsZXRlZEZpYmVyID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgICAgZGVsZXRlZEZpYmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGVsZXRlZEZpYmVyKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI3OlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgIHZhciBwcmV2SG9zdFBhcmVudCA9IGhvc3RQYXJlbnQsXG4gICAgICAgIHByZXZIb3N0UGFyZW50SXNDb250YWluZXIgPSBob3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBpc1NpbmdsZXRvblNjb3BlKGRlbGV0ZWRGaWJlci50eXBlKSAmJlxuICAgICAgICAoKGhvc3RQYXJlbnQgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlKSwgKGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExKSk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIHJlbGVhc2VTaW5nbGV0b25JbnN0YW5jZShkZWxldGVkRmliZXIuc3RhdGVOb2RlKTtcbiAgICAgIGhvc3RQYXJlbnQgPSBwcmV2SG9zdFBhcmVudDtcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IHByZXZIb3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgIGNhc2UgNjpcbiAgICAgIHByZXZIb3N0UGFyZW50ID0gaG9zdFBhcmVudDtcbiAgICAgIHByZXZIb3N0UGFyZW50SXNDb250YWluZXIgPSBob3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBob3N0UGFyZW50ID0gbnVsbDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGlmIChudWxsICE9PSBob3N0UGFyZW50KVxuICAgICAgICBpZiAoaG9zdFBhcmVudElzQ29udGFpbmVyKVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAoOSA9PT0gaG9zdFBhcmVudC5ub2RlVHlwZVxuICAgICAgICAgICAgICA/IGhvc3RQYXJlbnQuYm9keVxuICAgICAgICAgICAgICA6IFwiSFRNTFwiID09PSBob3N0UGFyZW50Lm5vZGVOYW1lXG4gICAgICAgICAgICAgICAgPyBob3N0UGFyZW50Lm93bmVyRG9jdW1lbnQuYm9keVxuICAgICAgICAgICAgICAgIDogaG9zdFBhcmVudFxuICAgICAgICAgICAgKS5yZW1vdmVDaGlsZChkZWxldGVkRmliZXIuc3RhdGVOb2RlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGRlbGV0ZWRGaWJlcixcbiAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGhvc3RQYXJlbnQucmVtb3ZlQ2hpbGQoZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICBkZWxldGVkRmliZXIsXG4gICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTg6XG4gICAgICBudWxsICE9PSBob3N0UGFyZW50ICYmXG4gICAgICAgIChob3N0UGFyZW50SXNDb250YWluZXJcbiAgICAgICAgICA/ICgoZmluaXNoZWRSb290ID0gaG9zdFBhcmVudCksXG4gICAgICAgICAgICBjbGVhclN1c3BlbnNlQm91bmRhcnkoXG4gICAgICAgICAgICAgIDkgPT09IGZpbmlzaGVkUm9vdC5ub2RlVHlwZVxuICAgICAgICAgICAgICAgID8gZmluaXNoZWRSb290LmJvZHlcbiAgICAgICAgICAgICAgICA6IFwiSFRNTFwiID09PSBmaW5pc2hlZFJvb3Qubm9kZU5hbWVcbiAgICAgICAgICAgICAgICAgID8gZmluaXNoZWRSb290Lm93bmVyRG9jdW1lbnQuYm9keVxuICAgICAgICAgICAgICAgICAgOiBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgIGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICByZXRyeUlmQmxvY2tlZE9uKGZpbmlzaGVkUm9vdCkpXG4gICAgICAgICAgOiBjbGVhclN1c3BlbnNlQm91bmRhcnkoaG9zdFBhcmVudCwgZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgcHJldkhvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgICAgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnQgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTQ6XG4gICAgY2FzZSAxNTpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDIsIGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg0LCBkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIChzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKSxcbiAgICAgICAgKHByZXZIb3N0UGFyZW50ID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSksXG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZIb3N0UGFyZW50LmNvbXBvbmVudFdpbGxVbm1vdW50ICYmXG4gICAgICAgICAgc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICAgICAgICAgICAgZGVsZXRlZEZpYmVyLFxuICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgIHByZXZIb3N0UGFyZW50XG4gICAgICAgICAgKSk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID1cbiAgICAgICAgKHByZXZIb3N0UGFyZW50ID0gb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbikgfHxcbiAgICAgICAgbnVsbCAhPT0gZGVsZXRlZEZpYmVyLm1lbW9pemVkU3RhdGU7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBwcmV2SG9zdFBhcmVudDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0U3VzcGVuc2VIeWRyYXRpb25DYWxsYmFja3MoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspIHtcbiAgaWYgKFxuICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlKSxcbiAgICBudWxsICE9PSBmaW5pc2hlZFJvb3QgJiZcbiAgICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRSb290Lm1lbW9pemVkU3RhdGUpLFxuICAgICAgbnVsbCAhPT0gZmluaXNoZWRSb290ICYmXG4gICAgICAgICgoZmluaXNoZWRSb290ID0gZmluaXNoZWRSb290LmRlaHlkcmF0ZWQpLCBudWxsICE9PSBmaW5pc2hlZFJvb3QpKSlcbiAgKVxuICAgIHRyeSB7XG4gICAgICByZXRyeUlmQmxvY2tlZE9uKGZpbmlzaGVkUm9vdCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFJldHJ5Q2FjaGUoZmluaXNoZWRXb3JrKSB7XG4gIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgIGNhc2UgMTM6XG4gICAgY2FzZSAxOTpcbiAgICAgIHZhciByZXRyeUNhY2hlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgIG51bGwgPT09IHJldHJ5Q2FjaGUgJiZcbiAgICAgICAgKHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlID0gbmV3IFBvc3NpYmx5V2Vha1NldCgpKTtcbiAgICAgIHJldHVybiByZXRyeUNhY2hlO1xuICAgIGNhc2UgMjI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSksXG4gICAgICAgIChyZXRyeUNhY2hlID0gZmluaXNoZWRXb3JrLl9yZXRyeUNhY2hlKSxcbiAgICAgICAgbnVsbCA9PT0gcmV0cnlDYWNoZSAmJlxuICAgICAgICAgIChyZXRyeUNhY2hlID0gZmluaXNoZWRXb3JrLl9yZXRyeUNhY2hlID0gbmV3IFBvc3NpYmx5V2Vha1NldCgpKSxcbiAgICAgICAgcmV0cnlDYWNoZVxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MzUsIGZpbmlzaGVkV29yay50YWcpKTtcbiAgfVxufVxuZnVuY3Rpb24gYXR0YWNoU3VzcGVuc2VSZXRyeUxpc3RlbmVycyhmaW5pc2hlZFdvcmssIHdha2VhYmxlcykge1xuICB2YXIgcmV0cnlDYWNoZSA9IGdldFJldHJ5Q2FjaGUoZmluaXNoZWRXb3JrKTtcbiAgd2FrZWFibGVzLmZvckVhY2goZnVuY3Rpb24gKHdha2VhYmxlKSB7XG4gICAgdmFyIHJldHJ5ID0gcmVzb2x2ZVJldHJ5V2FrZWFibGUuYmluZChudWxsLCBmaW5pc2hlZFdvcmssIHdha2VhYmxlKTtcbiAgICByZXRyeUNhY2hlLmhhcyh3YWtlYWJsZSkgfHxcbiAgICAgIChyZXRyeUNhY2hlLmFkZCh3YWtlYWJsZSksIHdha2VhYmxlLnRoZW4ocmV0cnksIHJldHJ5KSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290JGpzY29tcCQwLCBwYXJlbnRGaWJlcikge1xuICB2YXIgZGVsZXRpb25zID0gcGFyZW50RmliZXIuZGVsZXRpb25zO1xuICBpZiAobnVsbCAhPT0gZGVsZXRpb25zKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVsZXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGRUb0RlbGV0ZSA9IGRlbGV0aW9uc1tpXSxcbiAgICAgICAgcm9vdCA9IHJvb3QkanNjb21wJDAsXG4gICAgICAgIHJldHVybkZpYmVyID0gcGFyZW50RmliZXIsXG4gICAgICAgIHBhcmVudCA9IHJldHVybkZpYmVyO1xuICAgICAgYTogZm9yICg7IG51bGwgIT09IHBhcmVudDsgKSB7XG4gICAgICAgIHN3aXRjaCAocGFyZW50LnRhZykge1xuICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICBpZiAoaXNTaW5nbGV0b25TY29wZShwYXJlbnQudHlwZSkpIHtcbiAgICAgICAgICAgICAgaG9zdFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgaG9zdFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGhvc3RQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsID09PSBob3N0UGFyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MCkpO1xuICAgICAgY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlcihyb290LCByZXR1cm5GaWJlciwgY2hpbGRUb0RlbGV0ZSk7XG4gICAgICBob3N0UGFyZW50ID0gbnVsbDtcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuICAgICAgcm9vdCA9IGNoaWxkVG9EZWxldGUuYWx0ZXJuYXRlO1xuICAgICAgbnVsbCAhPT0gcm9vdCAmJiAocm9vdC5yZXR1cm4gPSBudWxsKTtcbiAgICAgIGNoaWxkVG9EZWxldGUucmV0dXJuID0gbnVsbDtcbiAgICB9XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMzg3OClcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKHBhcmVudEZpYmVyLCByb290JGpzY29tcCQwKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG52YXIgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBudWxsO1xuZnVuY3Rpb24gY29tbWl0TXV0YXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFdvcmssIHJvb3QpIHtcbiAgdmFyIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLFxuICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE0OlxuICAgIGNhc2UgMTU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDMsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiksXG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoMywgZmluaXNoZWRXb3JrKSxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDUsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybikpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDUxMiAmJlxuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgY3VycmVudC5yZXR1cm4pKTtcbiAgICAgIGZsYWdzICYgNjQgJiZcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuICYmXG4gICAgICAgICgoZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrICYmXG4gICAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay5jYWxsYmFja3MpLFxuICAgICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgICAoKGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyksXG4gICAgICAgICAgICAoZmluaXNoZWRXb3JrLnNoYXJlZC5oaWRkZW5DYWxsYmFja3MgPVxuICAgICAgICAgICAgICBudWxsID09PSBjdXJyZW50ID8gZmxhZ3MgOiBjdXJyZW50LmNvbmNhdChmbGFncykpKSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNjpcbiAgICAgIHZhciBob2lzdGFibGVSb290ID0gY3VycmVudEhvaXN0YWJsZVJvb3Q7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgaWYgKGZsYWdzICYgNCkge1xuICAgICAgICB2YXIgY3VycmVudFJlc291cmNlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGU7XG4gICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KVxuICAgICAgICAgIGlmIChudWxsID09PSBmbGFncylcbiAgICAgICAgICAgIGlmIChudWxsID09PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSB7XG4gICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICBmbGFncyA9IGZpbmlzaGVkV29yay50eXBlO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgICBob2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3Q7XG4gICAgICAgICAgICAgICAgYjogc3dpdGNoIChmbGFncykge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSA9XG4gICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRpdGxlXCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgIWN1cnJlbnRSZXNvdXJjZSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gfHxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2VbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UubmFtZXNwYWNlVVJJIHx8XG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmhhc0F0dHJpYnV0ZShcIml0ZW1wcm9wXCIpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAoY3VycmVudFJlc291cmNlID0gaG9pc3RhYmxlUm9vdC5jcmVhdGVFbGVtZW50KGZsYWdzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmhlYWQuaW5zZXJ0QmVmb3JlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcImhlYWQgPiB0aXRsZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoY3VycmVudFJlc291cmNlLCBmbGFncywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShjdXJyZW50UmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBmbGFncyA9IGN1cnJlbnRSZXNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXliZU5vZGVzID0gZ2V0SHlkcmF0YWJsZUhvaXN0YWJsZUNhY2hlKFxuICAgICAgICAgICAgICAgICAgICAgIFwibGlua1wiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiaHJlZlwiLFxuICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3RcbiAgICAgICAgICAgICAgICAgICAgKS5nZXQoZmxhZ3MgKyAoY3VycmVudC5ocmVmIHx8IFwiXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heWJlTm9kZXMpXG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXliZU5vZGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IG1heWJlTm9kZXNbaV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmhyZWYgfHwgXCJcIiA9PT0gY3VycmVudC5ocmVmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogY3VycmVudC5ocmVmKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnJlbCA/IG51bGwgOiBjdXJyZW50LnJlbCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwidGl0bGVcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnRpdGxlID8gbnVsbCA6IGN1cnJlbnQudGl0bGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5jcm9zc09yaWdpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50LmNyb3NzT3JpZ2luKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXliZU5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlID0gaG9pc3RhYmxlUm9vdC5jcmVhdGVFbGVtZW50KGZsYWdzKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoY3VycmVudFJlc291cmNlLCBmbGFncywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QuaGVhZC5hcHBlbmRDaGlsZChjdXJyZW50UmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAobWF5YmVOb2RlcyA9IGdldEh5ZHJhdGFibGVIb2lzdGFibGVDYWNoZShcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWV0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290XG4gICAgICAgICAgICAgICAgICAgICAgKS5nZXQoZmxhZ3MgKyAoY3VycmVudC5jb250ZW50IHx8IFwiXCIpKSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXliZU5vZGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IG1heWJlTm9kZXNbaV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIlwiICsgY3VycmVudC5jb250ZW50KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5uYW1lID8gbnVsbCA6IGN1cnJlbnQubmFtZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQucHJvcGVydHkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcImh0dHAtZXF1aXZcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50Lmh0dHBFcXVpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50Lmh0dHBFcXVpdikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY2hhcnNldFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuY2hhclNldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50LmNoYXJTZXQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlTm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5oZWFkLmFwcGVuZENoaWxkKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjgsIGZsYWdzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgZmxhZ3MgPSBjdXJyZW50UmVzb3VyY2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IGZsYWdzO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIG1vdW50SG9pc3RhYmxlKFxuICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay5zdGF0ZU5vZGUgPSBhY3F1aXJlUmVzb3VyY2UoXG4gICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSAhPT0gZmxhZ3NcbiAgICAgICAgICAgID8gKG51bGwgPT09IGN1cnJlbnRSZXNvdXJjZVxuICAgICAgICAgICAgICAgID8gbnVsbCAhPT0gY3VycmVudC5zdGF0ZU5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICgoY3VycmVudCA9IGN1cnJlbnQuc3RhdGVOb2RlKSxcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50KSlcbiAgICAgICAgICAgICAgICA6IGN1cnJlbnRSZXNvdXJjZS5jb3VudC0tLFxuICAgICAgICAgICAgICBudWxsID09PSBmbGFnc1xuICAgICAgICAgICAgICAgID8gbW91bnRIb2lzdGFibGUoXG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay50eXBlLFxuICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBhY3F1aXJlUmVzb3VyY2UoXG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgIDogbnVsbCA9PT0gZmxhZ3MgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgICBjb21taXRIb3N0VXBkYXRlKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHNcbiAgICAgICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjc6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgY29tbWl0SG9zdFVwZGF0ZShcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzXG4gICAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgaWYgKGZpbmlzaGVkV29yay5mbGFncyAmIDMyKSB7XG4gICAgICAgIGhvaXN0YWJsZVJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHNldFRleHRDb250ZW50KGhvaXN0YWJsZVJvb3QsIFwiXCIpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgbnVsbCAhPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlICYmXG4gICAgICAgICgoaG9pc3RhYmxlUm9vdCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzKSxcbiAgICAgICAgY29tbWl0SG9zdFVwZGF0ZShcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaG9pc3RhYmxlUm9vdCxcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50ID8gY3VycmVudC5tZW1vaXplZFByb3BzIDogaG9pc3RhYmxlUm9vdFxuICAgICAgICApKTtcbiAgICAgIGZsYWdzICYgMTAyNCAmJiAobmVlZHNGb3JtUmVzZXQgPSAhMCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDY6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGlmIChmbGFncyAmIDQpIHtcbiAgICAgICAgaWYgKG51bGwgPT09IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjIpKTtcbiAgICAgICAgZmxhZ3MgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgY3VycmVudCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY3VycmVudC5ub2RlVmFsdWUgPSBmbGFncztcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdGFnQ2FjaGVzID0gbnVsbDtcbiAgICAgIGhvaXN0YWJsZVJvb3QgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZ2V0SG9pc3RhYmxlUm9vdChyb290LmNvbnRhaW5lckluZm8pO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290O1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA0ICYmIG51bGwgIT09IGN1cnJlbnQgJiYgY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXRyeUlmQmxvY2tlZE9uKHJvb3QuY29udGFpbmVySW5mbyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIG5lZWRzRm9ybVJlc2V0ICYmXG4gICAgICAgICgobmVlZHNGb3JtUmVzZXQgPSAhMSksIHJlY3Vyc2l2ZWx5UmVzZXRGb3JtcyhmaW5pc2hlZFdvcmspKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIGZsYWdzID0gY3VycmVudEhvaXN0YWJsZVJvb3Q7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IGdldEhvaXN0YWJsZVJvb3QoXG4gICAgICAgIGZpbmlzaGVkV29yay5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgKTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBmbGFncztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTI6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTM6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZpbmlzaGVkV29yay5jaGlsZC5mbGFncyAmIDgxOTIgJiZcbiAgICAgICAgKG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlKSAhPT1cbiAgICAgICAgICAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpICYmXG4gICAgICAgIChnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lID0gbm93KCkpO1xuICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgICgoZmxhZ3MgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUpLFxuICAgICAgICBudWxsICE9PSBmbGFncyAmJlxuICAgICAgICAgICgoZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlID0gbnVsbCksXG4gICAgICAgICAgYXR0YWNoU3VzcGVuc2VSZXRyeUxpc3RlbmVycyhmaW5pc2hlZFdvcmssIGZsYWdzKSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMjpcbiAgICAgIGhvaXN0YWJsZVJvb3QgPSBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIHZhciB3YXNIaWRkZW4gPSBudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgcHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbixcbiAgICAgICAgcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gcHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiB8fCBob2lzdGFibGVSb290O1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8IHdhc0hpZGRlbjtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW47XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGlmIChmbGFncyAmIDgxOTIpXG4gICAgICAgIGE6IGZvciAoXG4gICAgICAgICAgcm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUsXG4gICAgICAgICAgICByb290Ll92aXNpYmlsaXR5ID0gaG9pc3RhYmxlUm9vdFxuICAgICAgICAgICAgICA/IHJvb3QuX3Zpc2liaWxpdHkgJiAtMlxuICAgICAgICAgICAgICA6IHJvb3QuX3Zpc2liaWxpdHkgfCAxLFxuICAgICAgICAgICAgaG9pc3RhYmxlUm9vdCAmJlxuICAgICAgICAgICAgICAobnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgICAgICAgIHdhc0hpZGRlbiB8fFxuICAgICAgICAgICAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiB8fFxuICAgICAgICAgICAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspKSxcbiAgICAgICAgICAgIGN1cnJlbnQgPSBudWxsLFxuICAgICAgICAgICAgcm9vdCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICA7XG5cbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKDUgPT09IHJvb3QudGFnIHx8IDI2ID09PSByb290LnRhZykge1xuICAgICAgICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgd2FzSGlkZGVuID0gY3VycmVudCA9IHJvb3Q7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCgoY3VycmVudFJlc291cmNlID0gd2FzSGlkZGVuLnN0YXRlTm9kZSksIGhvaXN0YWJsZVJvb3QpKVxuICAgICAgICAgICAgICAgICAgKG1heWJlTm9kZXMgPSBjdXJyZW50UmVzb3VyY2Uuc3R5bGUpLFxuICAgICAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtYXliZU5vZGVzLnNldFByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICAgPyBtYXliZU5vZGVzLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLCBcIm5vbmVcIiwgXCJpbXBvcnRhbnRcIilcbiAgICAgICAgICAgICAgICAgICAgICA6IChtYXliZU5vZGVzLmRpc3BsYXkgPSBcIm5vbmVcIik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpID0gd2FzSGlkZGVuLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICAgIHZhciBzdHlsZVByb3AgPSB3YXNIaWRkZW4ubWVtb2l6ZWRQcm9wcy5zdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheSA9XG4gICAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBzdHlsZVByb3AgJiZcbiAgICAgICAgICAgICAgICAgICAgICBudWxsICE9PSBzdHlsZVByb3AgJiZcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZVByb3AuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHN0eWxlUHJvcC5kaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICBpLnN0eWxlLmRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICBudWxsID09IGRpc3BsYXkgfHwgXCJib29sZWFuXCIgPT09IHR5cGVvZiBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgOiAoXCJcIiArIGRpc3BsYXkpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3Iod2FzSGlkZGVuLCB3YXNIaWRkZW4ucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKDYgPT09IHJvb3QudGFnKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgICB3YXNIaWRkZW4gPSByb290O1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHdhc0hpZGRlbi5zdGF0ZU5vZGUubm9kZVZhbHVlID0gaG9pc3RhYmxlUm9vdFxuICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICA6IHdhc0hpZGRlbi5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKHdhc0hpZGRlbiwgd2FzSGlkZGVuLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICgoMjIgIT09IHJvb3QudGFnICYmIDIzICE9PSByb290LnRhZykgfHxcbiAgICAgICAgICAgICAgbnVsbCA9PT0gcm9vdC5tZW1vaXplZFN0YXRlIHx8XG4gICAgICAgICAgICAgIHJvb3QgPT09IGZpbmlzaGVkV29yaykgJiZcbiAgICAgICAgICAgIG51bGwgIT09IHJvb3QuY2hpbGRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJvb3QuY2hpbGQucmV0dXJuID0gcm9vdDtcbiAgICAgICAgICAgIHJvb3QgPSByb290LmNoaWxkO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyb290ID09PSBmaW5pc2hlZFdvcmspIGJyZWFrIGE7XG4gICAgICAgICAgZm9yICg7IG51bGwgPT09IHJvb3Quc2libGluZzsgKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gcm9vdC5yZXR1cm4gfHwgcm9vdC5yZXR1cm4gPT09IGZpbmlzaGVkV29yaykgYnJlYWsgYTtcbiAgICAgICAgICAgIGN1cnJlbnQgPT09IHJvb3QgJiYgKGN1cnJlbnQgPSBudWxsKTtcbiAgICAgICAgICAgIHJvb3QgPSByb290LnJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9PT0gcm9vdCAmJiAoY3VycmVudCA9IG51bGwpO1xuICAgICAgICAgIHJvb3Quc2libGluZy5yZXR1cm4gPSByb290LnJldHVybjtcbiAgICAgICAgICByb290ID0gcm9vdC5zaWJsaW5nO1xuICAgICAgICB9XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgKChjdXJyZW50ID0gZmxhZ3MucmV0cnlRdWV1ZSksXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgKChmbGFncy5yZXRyeVF1ZXVlID0gbnVsbCksXG4gICAgICAgICAgICBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgY3VycmVudCkpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgKChmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUgPSBudWxsKSxcbiAgICAgICAgICBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgZmxhZ3MpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDMwOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMTpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayksXG4gICAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKSB7XG4gIHZhciBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgaWYgKGZsYWdzICYgMikge1xuICAgIHRyeSB7XG4gICAgICBmb3IgKFxuICAgICAgICB2YXIgaG9zdFBhcmVudEZpYmVyLCBwYXJlbnRGaWJlciA9IGZpbmlzaGVkV29yay5yZXR1cm47XG4gICAgICAgIG51bGwgIT09IHBhcmVudEZpYmVyO1xuXG4gICAgICApIHtcbiAgICAgICAgaWYgKGlzSG9zdFBhcmVudChwYXJlbnRGaWJlcikpIHtcbiAgICAgICAgICBob3N0UGFyZW50RmliZXIgPSBwYXJlbnRGaWJlcjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsID09IGhvc3RQYXJlbnRGaWJlcikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjApKTtcbiAgICAgIHN3aXRjaCAoaG9zdFBhcmVudEZpYmVyLnRhZykge1xuICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgIHZhciBwYXJlbnQgPSBob3N0UGFyZW50RmliZXIuc3RhdGVOb2RlLFxuICAgICAgICAgICAgYmVmb3JlID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUoZmluaXNoZWRXb3JrLCBiZWZvcmUsIHBhcmVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICB2YXIgcGFyZW50JDE0NCA9IGhvc3RQYXJlbnRGaWJlci5zdGF0ZU5vZGU7XG4gICAgICAgICAgaG9zdFBhcmVudEZpYmVyLmZsYWdzICYgMzIgJiZcbiAgICAgICAgICAgIChzZXRUZXh0Q29udGVudChwYXJlbnQkMTQ0LCBcIlwiKSwgKGhvc3RQYXJlbnRGaWJlci5mbGFncyAmPSAtMzMpKTtcbiAgICAgICAgICB2YXIgYmVmb3JlJDE0NSA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlKGZpbmlzaGVkV29yaywgYmVmb3JlJDE0NSwgcGFyZW50JDE0NCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHZhciBwYXJlbnQkMTQ2ID0gaG9zdFBhcmVudEZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLFxuICAgICAgICAgICAgYmVmb3JlJDE0NyA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihcbiAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgIGJlZm9yZSQxNDcsXG4gICAgICAgICAgICBwYXJlbnQkMTQ2XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MSkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICB9XG4gICAgZmluaXNoZWRXb3JrLmZsYWdzICY9IC0zO1xuICB9XG4gIGZsYWdzICYgNDA5NiAmJiAoZmluaXNoZWRXb3JrLmZsYWdzICY9IC00MDk3KTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5UmVzZXRGb3JtcyhwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNClcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICAgIHZhciBmaWJlciA9IHBhcmVudEZpYmVyO1xuICAgICAgcmVjdXJzaXZlbHlSZXNldEZvcm1zKGZpYmVyKTtcbiAgICAgIDUgPT09IGZpYmVyLnRhZyAmJiBmaWJlci5mbGFncyAmIDEwMjQgJiYgZmliZXIuc3RhdGVOb2RlLnJlc2V0KCk7XG4gICAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMocm9vdCwgcGFyZW50RmliZXIpIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDg3NzIpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlcihyb290LCBwYXJlbnRGaWJlci5hbHRlcm5hdGUsIHBhcmVudEZpYmVyKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhwYXJlbnRGaWJlcikge1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXI7XG4gICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNDpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg0LCBmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVbm1vdW50ICYmXG4gICAgICAgICAgc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnJldHVybixcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgKTtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI3OlxuICAgICAgICByZWxlYXNlU2luZ2xldG9uSW5zdGFuY2UoZmluaXNoZWRXb3JrLnN0YXRlTm9kZSk7XG4gICAgICBjYXNlIDI2OlxuICAgICAgY2FzZSA1OlxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBudWxsID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzMDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gIGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgcGFyZW50RmliZXIsXG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbikge1xuICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzID1cbiAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmIDAgIT09IChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiA4NzcyKTtcbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBwYXJlbnRGaWJlci5hbHRlcm5hdGUsXG4gICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gICAgICBmaW5pc2hlZFdvcmsgPSBwYXJlbnRGaWJlcixcbiAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoNCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZmluaXNoZWRSb290LmNvbXBvbmVudERpZE1vdW50KVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkTW91bnQoKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgY3VycmVudC5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gICAgICAgIGlmIChudWxsICE9PSBmaW5pc2hlZFJvb3QpIHtcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBjdXJyZW50LnN0YXRlTm9kZTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGhpZGRlbkNhbGxiYWNrcyA9IGZpbmlzaGVkUm9vdC5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGhpZGRlbkNhbGxiYWNrcylcbiAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3Quc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyA9IG51bGwsIGZpbmlzaGVkUm9vdCA9IDA7XG4gICAgICAgICAgICAgICAgZmluaXNoZWRSb290IDwgaGlkZGVuQ2FsbGJhY2tzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QrK1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY2FsbENhbGxiYWNrKGhpZGRlbkNhbGxiYWNrc1tmaW5pc2hlZFJvb3RdLCBpbnN0YW5jZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBmbGFncyAmIDY0ICYmXG4gICAgICAgICAgY29tbWl0Q2xhc3NDYWxsYmFja3MoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNzpcbiAgICAgICAgY29tbWl0SG9zdFNpbmdsZXRvbkFjcXVpc2l0aW9uKGZpbmlzaGVkV29yayk7XG4gICAgICBjYXNlIDI2OlxuICAgICAgY2FzZSA1OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCAmJlxuICAgICAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAgIGNvbW1pdEhvc3RNb3VudChmaW5pc2hlZFdvcmspO1xuICAgICAgICBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEyOlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTM6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgICBjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgbnVsbCA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVhcHBlYXJMYXlvdXRFZmZlY3RzKFxuICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICAgICk7XG4gICAgICAgIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzA6XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICB9XG4gICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKGN1cnJlbnQsIGZpbmlzaGVkV29yaykge1xuICB2YXIgcHJldmlvdXNDYWNoZSA9IG51bGw7XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgKHByZXZpb3VzQ2FjaGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpO1xuICBjdXJyZW50ID0gbnVsbDtcbiAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAoY3VycmVudCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgY3VycmVudCAhPT0gcHJldmlvdXNDYWNoZSAmJlxuICAgIChudWxsICE9IGN1cnJlbnQgJiYgY3VycmVudC5yZWZDb3VudCsrLFxuICAgIG51bGwgIT0gcHJldmlvdXNDYWNoZSAmJiByZWxlYXNlQ2FjaGUocHJldmlvdXNDYWNoZSkpO1xufVxuZnVuY3Rpb24gY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBudWxsICE9PSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlICYmXG4gICAgKGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGUpO1xuICBmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZS5jYWNoZTtcbiAgZmluaXNoZWRXb3JrICE9PSBjdXJyZW50ICYmXG4gICAgKGZpbmlzaGVkV29yay5yZWZDb3VudCsrLCBudWxsICE9IGN1cnJlbnQgJiYgcmVsZWFzZUNhY2hlKGN1cnJlbnQpKTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICByb290LFxuICBwYXJlbnRGaWJlcixcbiAgY29tbWl0dGVkTGFuZXMsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4pIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdFBhc3NpdmVNb3VudE9uRmliZXIoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHBhcmVudEZpYmVyLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0UGFzc2l2ZU1vdW50T25GaWJlcihcbiAgZmluaXNoZWRSb290LFxuICBmaW5pc2hlZFdvcmssXG4gIGNvbW1pdHRlZExhbmVzLFxuICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuKSB7XG4gIHZhciBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoOSwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICk7XG4gICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgKChmaW5pc2hlZFJvb3QgPSBudWxsKSxcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZSAmJlxuICAgICAgICAgIChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICAoZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUuY2FjaGUpLFxuICAgICAgICBmaW5pc2hlZFdvcmsgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgICAgIChmaW5pc2hlZFdvcmsucmVmQ291bnQrKyxcbiAgICAgICAgICBudWxsICE9IGZpbmlzaGVkUm9vdCAmJiByZWxlYXNlQ2FjaGUoZmluaXNoZWRSb290KSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIGlmIChmbGFncyAmIDIwNDgpIHtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICApO1xuICAgICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhciBfZmluaXNoZWRXb3JrJG1lbW9pemUyID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgICBpZCA9IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuaWQsXG4gICAgICAgICAgICBvblBvc3RDb21taXQgPSBfZmluaXNoZWRXb3JrJG1lbW9pemUyLm9uUG9zdENvbW1pdDtcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBvblBvc3RDb21taXQgJiZcbiAgICAgICAgICAgIG9uUG9zdENvbW1pdChcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgPyBcIm1vdW50XCIgOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QucGFzc2l2ZUVmZmVjdER1cmF0aW9uLFxuICAgICAgICAgICAgICAtMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlXG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTM6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjM6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgX2ZpbmlzaGVkV29yayRtZW1vaXplMiA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICBpZCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGU7XG4gICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuX3Zpc2liaWxpdHkgJiAyXG4gICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKVxuICAgICAgICA6IF9maW5pc2hlZFdvcmskbWVtb2l6ZTIuX3Zpc2liaWxpdHkgJiAyXG4gICAgICAgICAgPyByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIDogKChfZmluaXNoZWRXb3JrJG1lbW9pemUyLl92aXNpYmlsaXR5IHw9IDIpLFxuICAgICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgICAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgICAgICAgICAgKSk7XG4gICAgICBmbGFncyAmIDIwNDggJiYgY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyhpZCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgKTtcbiAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICBjb21taXRDYWNoZVBhc3NpdmVNb3VudEVmZmVjdChmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gIGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgcGFyZW50RmliZXIsXG4gIGNvbW1pdHRlZExhbmVzJGpzY29tcCQwLFxuICBjb21taXR0ZWRUcmFuc2l0aW9ucyRqc2NvbXAkMCxcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuKSB7XG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgPVxuICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiYgMCAhPT0gKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KTtcbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgdmFyIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgY29tbWl0dGVkTGFuZXMgPSBjb21taXR0ZWRMYW5lcyRqc2NvbXAkMCxcbiAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zID0gY29tbWl0dGVkVHJhbnNpdGlvbnMkanNjb21wJDAsXG4gICAgICBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTE6XG4gICAgICBjYXNlIDE1OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoOCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIzOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgPyBpbnN0YW5jZS5fdmlzaWJpbGl0eSAmIDJcbiAgICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICA6ICgoaW5zdGFuY2UuX3Zpc2liaWxpdHkgfD0gMiksXG4gICAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgICAgICkpO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlclxuKSB7XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMDI1NilcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICAgIHZhciBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gICAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgICBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgICBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIH1cbiAgICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgICB9XG59XG52YXIgc3VzcGVuc2V5Q29tbWl0RmxhZyA9IDgxOTI7XG5mdW5jdGlvbiByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQocGFyZW50RmliZXIpIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIHN1c3BlbnNleUNvbW1pdEZsYWcpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIocGFyZW50RmliZXIpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXRPbkZpYmVyKGZpYmVyKSB7XG4gIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBmaWJlci5mbGFncyAmIHN1c3BlbnNleUNvbW1pdEZsYWcgJiZcbiAgICAgICAgbnVsbCAhPT0gZmliZXIubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICBzdXNwZW5kUmVzb3VyY2UoXG4gICAgICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgZmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgICBmaWJlci5tZW1vaXplZFByb3BzXG4gICAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgIGNhc2UgNDpcbiAgICAgIHZhciBwcmV2aW91c0hvaXN0YWJsZVJvb3QgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZ2V0SG9pc3RhYmxlUm9vdChmaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7XG4gICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpO1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBwcmV2aW91c0hvaXN0YWJsZVJvb3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgbnVsbCA9PT0gZmliZXIubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAoKHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IGZpYmVyLmFsdGVybmF0ZSksXG4gICAgICAgIG51bGwgIT09IHByZXZpb3VzSG9pc3RhYmxlUm9vdCAmJlxuICAgICAgICBudWxsICE9PSBwcmV2aW91c0hvaXN0YWJsZVJvb3QubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgID8gKChwcmV2aW91c0hvaXN0YWJsZVJvb3QgPSBzdXNwZW5zZXlDb21taXRGbGFnKSxcbiAgICAgICAgICAgIChzdXNwZW5zZXlDb21taXRGbGFnID0gMTY3NzcyMTYpLFxuICAgICAgICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKSxcbiAgICAgICAgICAgIChzdXNwZW5zZXlDb21taXRGbGFnID0gcHJldmlvdXNIb2lzdGFibGVSb290KSlcbiAgICAgICAgICA6IHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcikpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRldGFjaEFsdGVybmF0ZVNpYmxpbmdzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBwcmV2aW91c0ZpYmVyID0gcGFyZW50RmliZXIuYWx0ZXJuYXRlO1xuICBpZiAoXG4gICAgbnVsbCAhPT0gcHJldmlvdXNGaWJlciAmJlxuICAgICgocGFyZW50RmliZXIgPSBwcmV2aW91c0ZpYmVyLmNoaWxkKSwgbnVsbCAhPT0gcGFyZW50RmliZXIpXG4gICkge1xuICAgIHByZXZpb3VzRmliZXIuY2hpbGQgPSBudWxsO1xuICAgIGRvXG4gICAgICAocHJldmlvdXNGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpLFxuICAgICAgICAocGFyZW50RmliZXIuc2libGluZyA9IG51bGwpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwcmV2aW91c0ZpYmVyKTtcbiAgICB3aGlsZSAobnVsbCAhPT0gcGFyZW50RmliZXIpO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBkZWxldGlvbnMgPSBwYXJlbnRGaWJlci5kZWxldGlvbnM7XG4gIGlmICgwICE9PSAocGFyZW50RmliZXIuZmxhZ3MgJiAxNikpIHtcbiAgICBpZiAobnVsbCAhPT0gZGVsZXRpb25zKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV07XG4gICAgICAgIG5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgICBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICAgICAgICAgIGNoaWxkVG9EZWxldGUsXG4gICAgICAgICAgcGFyZW50RmliZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICBkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyhwYXJlbnRGaWJlcik7XG4gIH1cbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlcihwYXJlbnRGaWJlciksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKGZpbmlzaGVkV29yaykge1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmluaXNoZWRXb3JrLmZsYWdzICYgMjA0OCAmJlxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoOSwgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTI6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgICBpbnN0YW5jZS5fdmlzaWJpbGl0eSAmIDIgJiZcbiAgICAgIChudWxsID09PSBmaW5pc2hlZFdvcmsucmV0dXJuIHx8IDEzICE9PSBmaW5pc2hlZFdvcmsucmV0dXJuLnRhZylcbiAgICAgICAgPyAoKGluc3RhbmNlLl92aXNpYmlsaXR5ICY9IC0zKSxcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGZpbmlzaGVkV29yaykpXG4gICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2Nvbm5lY3RQYXNzaXZlRWZmZWN0cyhwYXJlbnRGaWJlcikge1xuICB2YXIgZGVsZXRpb25zID0gcGFyZW50RmliZXIuZGVsZXRpb25zO1xuICBpZiAoMCAhPT0gKHBhcmVudEZpYmVyLmZsYWdzICYgMTYpKSB7XG4gICAgaWYgKG51bGwgIT09IGRlbGV0aW9ucylcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVsZXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZFRvRGVsZXRlID0gZGVsZXRpb25zW2ldO1xuICAgICAgICBuZXh0RWZmZWN0ID0gY2hpbGRUb0RlbGV0ZTtcbiAgICAgICAgY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzSW5zaWRlT2ZEZWxldGVkVHJlZV9iZWdpbihcbiAgICAgICAgICBjaGlsZFRvRGVsZXRlLFxuICAgICAgICAgIHBhcmVudEZpYmVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgZGV0YWNoQWx0ZXJuYXRlU2libGluZ3MocGFyZW50RmliZXIpO1xuICB9XG4gIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgIGRlbGV0aW9ucyA9IHBhcmVudEZpYmVyO1xuICAgIHN3aXRjaCAoZGVsZXRpb25zLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg4LCBkZWxldGlvbnMsIGRlbGV0aW9ucy5yZXR1cm4pO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGRlbGV0aW9ucyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgaSA9IGRlbGV0aW9ucy5zdGF0ZU5vZGU7XG4gICAgICAgIGkuX3Zpc2liaWxpdHkgJiAyICYmXG4gICAgICAgICAgKChpLl92aXNpYmlsaXR5ICY9IC0zKSxcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGRlbGV0aW9ucykpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKTtcbiAgICB9XG4gICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICBkZWxldGVkU3VidHJlZVJvb3QsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3Jcbikge1xuICBmb3IgKDsgbnVsbCAhPT0gbmV4dEVmZmVjdDsgKSB7XG4gICAgdmFyIGZpYmVyID0gbmV4dEVmZmVjdDtcbiAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg4LCBmaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMzpcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIGlmIChcbiAgICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2xcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGNhY2hlID0gZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbDtcbiAgICAgICAgICBudWxsICE9IGNhY2hlICYmIGNhY2hlLnJlZkNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI0OlxuICAgICAgICByZWxlYXNlQ2FjaGUoZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgfVxuICAgIGNhY2hlID0gZmliZXIuY2hpbGQ7XG4gICAgaWYgKG51bGwgIT09IGNhY2hlKSAoY2FjaGUucmV0dXJuID0gZmliZXIpLCAobmV4dEVmZmVjdCA9IGNhY2hlKTtcbiAgICBlbHNlXG4gICAgICBhOiBmb3IgKGZpYmVyID0gZGVsZXRlZFN1YnRyZWVSb290OyBudWxsICE9PSBuZXh0RWZmZWN0OyApIHtcbiAgICAgICAgY2FjaGUgPSBuZXh0RWZmZWN0O1xuICAgICAgICB2YXIgc2libGluZyA9IGNhY2hlLnNpYmxpbmcsXG4gICAgICAgICAgcmV0dXJuRmliZXIgPSBjYWNoZS5yZXR1cm47XG4gICAgICAgIGRldGFjaEZpYmVyQWZ0ZXJFZmZlY3RzKGNhY2hlKTtcbiAgICAgICAgaWYgKGNhY2hlID09PSBmaWJlcikge1xuICAgICAgICAgIG5leHRFZmZlY3QgPSBudWxsO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bGwgIT09IHNpYmxpbmcpIHtcbiAgICAgICAgICBzaWJsaW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgIG5leHRFZmZlY3QgPSBzaWJsaW5nO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEVmZmVjdCA9IHJldHVybkZpYmVyO1xuICAgICAgfVxuICB9XG59XG52YXIgRGVmYXVsdEFzeW5jRGlzcGF0Y2hlciA9IHtcbiAgICBnZXRDYWNoZUZvclR5cGU6IGZ1bmN0aW9uIChyZXNvdXJjZVR5cGUpIHtcbiAgICAgIHZhciBjYWNoZSA9IHJlYWRDb250ZXh0KENhY2hlQ29udGV4dCksXG4gICAgICAgIGNhY2hlRm9yVHlwZSA9IGNhY2hlLmRhdGEuZ2V0KHJlc291cmNlVHlwZSk7XG4gICAgICB2b2lkIDAgPT09IGNhY2hlRm9yVHlwZSAmJlxuICAgICAgICAoKGNhY2hlRm9yVHlwZSA9IHJlc291cmNlVHlwZSgpKSxcbiAgICAgICAgY2FjaGUuZGF0YS5zZXQocmVzb3VyY2VUeXBlLCBjYWNoZUZvclR5cGUpKTtcbiAgICAgIHJldHVybiBjYWNoZUZvclR5cGU7XG4gICAgfVxuICB9LFxuICBQb3NzaWJseVdlYWtNYXAgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBXZWFrTWFwID8gV2Vha01hcCA6IE1hcCxcbiAgZXhlY3V0aW9uQ29udGV4dCA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDAsXG4gIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgPSAhMSxcbiAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSAhMSxcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkQXR0YWNoUGluZ0xpc3RlbmVyID0gITEsXG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9IDAsXG4gIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUgPSAhMSxcbiAgZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBJbmZpbml0eSxcbiAgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwsXG4gIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbnVsbCxcbiAgcGVuZGluZ0VmZmVjdHNTdGF0dXMgPSAwLFxuICBwZW5kaW5nRWZmZWN0c1Jvb3QgPSBudWxsLFxuICBwZW5kaW5nRmluaXNoZWRXb3JrID0gbnVsbCxcbiAgcGVuZGluZ0VmZmVjdHNMYW5lcyA9IDAsXG4gIHBlbmRpbmdFZmZlY3RzUmVtYWluaW5nTGFuZXMgPSAwLFxuICBwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zID0gbnVsbCxcbiAgcGVuZGluZ1JlY292ZXJhYmxlRXJyb3JzID0gbnVsbCxcbiAgbmVzdGVkVXBkYXRlQ291bnQgPSAwLFxuICByb290V2l0aE5lc3RlZFVwZGF0ZXMgPSBudWxsO1xuZnVuY3Rpb24gcmVxdWVzdFVwZGF0ZUxhbmUoKSB7XG4gIGlmICgwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpICYmIDAgIT09IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzKVxuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIC13b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcztcbiAgaWYgKG51bGwgIT09IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQpIHtcbiAgICB2YXIgYWN0aW9uU2NvcGVMYW5lID0gY3VycmVudEVudGFuZ2xlZExhbmU7XG4gICAgcmV0dXJuIDAgIT09IGFjdGlvblNjb3BlTGFuZSA/IGFjdGlvblNjb3BlTGFuZSA6IHJlcXVlc3RUcmFuc2l0aW9uTGFuZSgpO1xuICB9XG4gIHJldHVybiByZXNvbHZlVXBkYXRlUHJpb3JpdHkoKTtcbn1cbmZ1bmN0aW9uIHJlcXVlc3REZWZlcnJlZExhbmUoKSB7XG4gIDAgPT09IHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lICYmXG4gICAgKHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lID1cbiAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikgfHwgaXNIeWRyYXRpbmdcbiAgICAgICAgPyBjbGFpbU5leHRUcmFuc2l0aW9uTGFuZSgpXG4gICAgICAgIDogNTM2ODcwOTEyKTtcbiAgdmFyIHN1c3BlbnNlSGFuZGxlciA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gIG51bGwgIT09IHN1c3BlbnNlSGFuZGxlciAmJiAoc3VzcGVuc2VIYW5kbGVyLmZsYWdzIHw9IDMyKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCBsYW5lKSB7XG4gIGlmIChcbiAgICAocm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ICYmXG4gICAgICAoMiA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gfHxcbiAgICAgICAgOSA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pKSB8fFxuICAgIG51bGwgIT09IHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdFxuICApXG4gICAgcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgMCksXG4gICAgICBtYXJrUm9vdFN1c3BlbmRlZChcbiAgICAgICAgcm9vdCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMsXG4gICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAhMVxuICAgICAgKTtcbiAgbWFya1Jvb3RVcGRhdGVkJDEocm9vdCwgbGFuZSk7XG4gIGlmICgwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpIHx8IHJvb3QgIT09IHdvcmtJblByb2dyZXNzUm9vdClcbiAgICByb290ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgJiZcbiAgICAgICgwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpICYmXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyB8PSBsYW5lKSxcbiAgICAgIDQgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiZcbiAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgICAgcm9vdCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgICAhMVxuICAgICAgICApKSxcbiAgICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KTtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QkanNjb21wJDAsIGxhbmVzLCBmb3JjZVN5bmMpIHtcbiAgaWYgKDAgIT09IChleGVjdXRpb25Db250ZXh0ICYgNikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzI3KSk7XG4gIHZhciBzaG91bGRUaW1lU2xpY2UgPVxuICAgICAgKCFmb3JjZVN5bmMgJiZcbiAgICAgICAgMCA9PT0gKGxhbmVzICYgMTI0KSAmJlxuICAgICAgICAwID09PSAobGFuZXMgJiByb290JGpzY29tcCQwLmV4cGlyZWRMYW5lcykpIHx8XG4gICAgICBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKHJvb3QkanNjb21wJDAsIGxhbmVzKSxcbiAgICBleGl0U3RhdHVzID0gc2hvdWxkVGltZVNsaWNlXG4gICAgICA/IHJlbmRlclJvb3RDb25jdXJyZW50KHJvb3QkanNjb21wJDAsIGxhbmVzKVxuICAgICAgOiByZW5kZXJSb290U3luYyhyb290JGpzY29tcCQwLCBsYW5lcywgITApLFxuICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSBzaG91bGRUaW1lU2xpY2U7XG4gIGRvIHtcbiAgICBpZiAoMCA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgJiZcbiAgICAgICAgIXNob3VsZFRpbWVTbGljZSAmJlxuICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChyb290JGpzY29tcCQwLCBsYW5lcywgMCwgITEpO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcmNlU3luYyA9IHJvb3QkanNjb21wJDAuY3VycmVudC5hbHRlcm5hdGU7XG4gICAgICBpZiAoXG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgJiZcbiAgICAgICAgIWlzUmVuZGVyQ29uc2lzdGVudFdpdGhFeHRlcm5hbFN0b3Jlcyhmb3JjZVN5bmMpXG4gICAgICApIHtcbiAgICAgICAgZXhpdFN0YXR1cyA9IHJlbmRlclJvb3RTeW5jKHJvb3QkanNjb21wJDAsIGxhbmVzLCAhMSk7XG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSAhMTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoMiA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gbGFuZXM7XG4gICAgICAgIGlmIChyb290JGpzY29tcCQwLmVycm9yUmVjb3ZlcnlEaXNhYmxlZExhbmVzICYgcmVuZGVyV2FzQ29uY3VycmVudClcbiAgICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gMDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSByb290JGpzY29tcCQwLnBlbmRpbmdMYW5lcyAmIC01MzY4NzA5MTMpLFxuICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgIDAgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICAgICAgID8gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiA1MzY4NzA5MTJcbiAgICAgICAgICAgICAgICAgID8gNTM2ODcwOTEyXG4gICAgICAgICAgICAgICAgICA6IDApO1xuICAgICAgICBpZiAoMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB7XG4gICAgICAgICAgbGFuZXMgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICAgICAgYToge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSByb290JGpzY29tcCQwO1xuICAgICAgICAgICAgZXhpdFN0YXR1cyA9IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnM7XG4gICAgICAgICAgICB2YXIgd2FzUm9vdERlaHlkcmF0ZWQgPSByb290LmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQ7XG4gICAgICAgICAgICB3YXNSb290RGVoeWRyYXRlZCAmJlxuICAgICAgICAgICAgICAocHJlcGFyZUZyZXNoU3RhY2socm9vdCwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KS5mbGFncyB8PSAyNTYpO1xuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gcmVuZGVyUm9vdFN5bmMoXG4gICAgICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCxcbiAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoMiAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgJiZcbiAgICAgICAgICAgICAgICAhd2FzUm9vdERlaHlkcmF0ZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcm9vdC5lcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyB8PSByZW5kZXJXYXNDb25jdXJyZW50O1xuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzIHw9XG4gICAgICAgICAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50O1xuICAgICAgICAgICAgICAgIGV4aXRTdGF0dXMgPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9IHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzO1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IGV4aXRTdGF0dXM7XG4gICAgICAgICAgICAgIG51bGwgIT09IHJlbmRlcldhc0NvbmN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgICAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnNcbiAgICAgICAgICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gcmVuZGVyV2FzQ29uY3VycmVudClcbiAgICAgICAgICAgICAgICAgIDogd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMucHVzaC5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICAgICAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50XG4gICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhpdFN0YXR1cyA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9ICExO1xuICAgICAgICAgIGlmICgyICE9PSBleGl0U3RhdHVzKSBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKDEgPT09IGV4aXRTdGF0dXMpIHtcbiAgICAgICAgcHJlcGFyZUZyZXNoU3RhY2socm9vdCRqc2NvbXAkMCwgMCk7XG4gICAgICAgIG1hcmtSb290U3VzcGVuZGVkKHJvb3QkanNjb21wJDAsIGxhbmVzLCAwLCAhMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYToge1xuICAgICAgICBzaG91bGRUaW1lU2xpY2UgPSByb290JGpzY29tcCQwO1xuICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gZXhpdFN0YXR1cztcbiAgICAgICAgc3dpdGNoIChyZW5kZXJXYXNDb25jdXJyZW50KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQ1KSk7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgaWYgKChsYW5lcyAmIDQxOTQwNDgpICE9PSBsYW5lcykgYnJlYWs7XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgICAhd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IG51bGw7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzI5KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIChsYW5lcyAmIDYyOTE0NTYwKSA9PT0gbGFuZXMgJiZcbiAgICAgICAgICAoKGV4aXRTdGF0dXMgPSBnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lICsgMzAwIC0gbm93KCkpLFxuICAgICAgICAgIDEwIDwgZXhpdFN0YXR1cylcbiAgICAgICAgKSB7XG4gICAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgICAgICBzaG91bGRUaW1lU2xpY2UsXG4gICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgIXdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5nc1xuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKDAgIT09IGdldE5leHRMYW5lcyhzaG91bGRUaW1lU2xpY2UsIDAsICEwKSkgYnJlYWsgYTtcbiAgICAgICAgICBzaG91bGRUaW1lU2xpY2UudGltZW91dEhhbmRsZSA9IHNjaGVkdWxlVGltZW91dChcbiAgICAgICAgICAgIGNvbW1pdFJvb3RXaGVuUmVhZHkuYmluZChcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgc2hvdWxkVGltZVNsaWNlLFxuICAgICAgICAgICAgICBmb3JjZVN5bmMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlLFxuICAgICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyxcbiAgICAgICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCxcbiAgICAgICAgICAgICAgMixcbiAgICAgICAgICAgICAgLTAsXG4gICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBleGl0U3RhdHVzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhayBhO1xuICAgICAgICB9XG4gICAgICAgIGNvbW1pdFJvb3RXaGVuUmVhZHkoXG4gICAgICAgICAgc2hvdWxkVGltZVNsaWNlLFxuICAgICAgICAgIGZvcmNlU3luYyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUsXG4gICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyxcbiAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50LFxuICAgICAgICAgIDAsXG4gICAgICAgICAgLTAsXG4gICAgICAgICAgMFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBicmVhaztcbiAgfSB3aGlsZSAoMSk7XG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290JGpzY29tcCQwKTtcbn1cbmZ1bmN0aW9uIGNvbW1pdFJvb3RXaGVuUmVhZHkoXG4gIHJvb3QsXG4gIGZpbmlzaGVkV29yayxcbiAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gIHRyYW5zaXRpb25zLFxuICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gIGxhbmVzLFxuICBzcGF3bmVkTGFuZSxcbiAgdXBkYXRlZExhbmVzLFxuICBzdXNwZW5kZWRSZXRyeUxhbmVzLFxuICBkaWRTa2lwU3VzcGVuZGVkU2libGluZ3MsXG4gIGV4aXRTdGF0dXMsXG4gIHN1c3BlbmRlZENvbW1pdFJlYXNvbixcbiAgY29tcGxldGVkUmVuZGVyU3RhcnRUaW1lLFxuICBjb21wbGV0ZWRSZW5kZXJFbmRUaW1lXG4pIHtcbiAgcm9vdC50aW1lb3V0SGFuZGxlID0gLTE7XG4gIHN1c3BlbmRlZENvbW1pdFJlYXNvbiA9IGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3M7XG4gIGlmIChcbiAgICBzdXNwZW5kZWRDb21taXRSZWFzb24gJiA4MTkyIHx8XG4gICAgMTY3ODU0MDggPT09IChzdXNwZW5kZWRDb21taXRSZWFzb24gJiAxNjc4NTQwOClcbiAgKVxuICAgIGlmIChcbiAgICAgICgoc3VzcGVuZGVkU3RhdGUgPSB7IHN0eWxlc2hlZXRzOiBudWxsLCBjb3VudDogMCwgdW5zdXNwZW5kOiBub29wIH0pLFxuICAgICAgYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIoZmluaXNoZWRXb3JrKSxcbiAgICAgIChzdXNwZW5kZWRDb21taXRSZWFzb24gPSB3YWl0Rm9yQ29tbWl0VG9CZVJlYWR5KCkpLFxuICAgICAgbnVsbCAhPT0gc3VzcGVuZGVkQ29tbWl0UmVhc29uKVxuICAgICkge1xuICAgICAgcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0ID0gc3VzcGVuZGVkQ29tbWl0UmVhc29uKFxuICAgICAgICBjb21taXRSb290LmJpbmQoXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICByb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICByZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgICB0cmFuc2l0aW9ucyxcbiAgICAgICAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgICAgICAgc3Bhd25lZExhbmUsXG4gICAgICAgICAgdXBkYXRlZExhbmVzLFxuICAgICAgICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgICAgICAgZXhpdFN0YXR1cyxcbiAgICAgICAgICAxLFxuICAgICAgICAgIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgICAgICAgICBjb21wbGV0ZWRSZW5kZXJFbmRUaW1lXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICBtYXJrUm9vdFN1c3BlbmRlZChyb290LCBsYW5lcywgc3Bhd25lZExhbmUsICFkaWRTa2lwU3VzcGVuZGVkU2libGluZ3MpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgY29tbWl0Um9vdChcbiAgICByb290LFxuICAgIGZpbmlzaGVkV29yayxcbiAgICBsYW5lcyxcbiAgICByZWNvdmVyYWJsZUVycm9ycyxcbiAgICB0cmFuc2l0aW9ucyxcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgc3Bhd25lZExhbmUsXG4gICAgdXBkYXRlZExhbmVzLFxuICAgIHN1c3BlbmRlZFJldHJ5TGFuZXNcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzUmVuZGVyQ29uc2lzdGVudFdpdGhFeHRlcm5hbFN0b3JlcyhmaW5pc2hlZFdvcmspIHtcbiAgZm9yICh2YXIgbm9kZSA9IGZpbmlzaGVkV29yazsgOyApIHtcbiAgICB2YXIgdGFnID0gbm9kZS50YWc7XG4gICAgaWYgKFxuICAgICAgKDAgPT09IHRhZyB8fCAxMSA9PT0gdGFnIHx8IDE1ID09PSB0YWcpICYmXG4gICAgICBub2RlLmZsYWdzICYgMTYzODQgJiZcbiAgICAgICgodGFnID0gbm9kZS51cGRhdGVRdWV1ZSksXG4gICAgICBudWxsICE9PSB0YWcgJiYgKCh0YWcgPSB0YWcuc3RvcmVzKSwgbnVsbCAhPT0gdGFnKSlcbiAgICApXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhZy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hlY2sgPSB0YWdbaV0sXG4gICAgICAgICAgZ2V0U25hcHNob3QgPSBjaGVjay5nZXRTbmFwc2hvdDtcbiAgICAgICAgY2hlY2sgPSBjaGVjay52YWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIW9iamVjdElzKGdldFNuYXBzaG90KCksIGNoZWNrKSkgcmV0dXJuICExO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIHRhZyA9IG5vZGUuY2hpbGQ7XG4gICAgaWYgKG5vZGUuc3VidHJlZUZsYWdzICYgMTYzODQgJiYgbnVsbCAhPT0gdGFnKVxuICAgICAgKHRhZy5yZXR1cm4gPSBub2RlKSwgKG5vZGUgPSB0YWcpO1xuICAgIGVsc2Uge1xuICAgICAgaWYgKG5vZGUgPT09IGZpbmlzaGVkV29yaykgYnJlYWs7XG4gICAgICBmb3IgKDsgbnVsbCA9PT0gbm9kZS5zaWJsaW5nOyApIHtcbiAgICAgICAgaWYgKG51bGwgPT09IG5vZGUucmV0dXJuIHx8IG5vZGUucmV0dXJuID09PSBmaW5pc2hlZFdvcmspIHJldHVybiAhMDtcbiAgICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgICAgfVxuICAgICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RTdXNwZW5kZWQoXG4gIHJvb3QsXG4gIHN1c3BlbmRlZExhbmVzLFxuICBzcGF3bmVkTGFuZSxcbiAgZGlkQXR0ZW1wdEVudGlyZVRyZWVcbikge1xuICBzdXNwZW5kZWRMYW5lcyAmPSB+d29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXM7XG4gIHN1c3BlbmRlZExhbmVzICY9IH53b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcztcbiAgcm9vdC5zdXNwZW5kZWRMYW5lcyB8PSBzdXNwZW5kZWRMYW5lcztcbiAgcm9vdC5waW5nZWRMYW5lcyAmPSB+c3VzcGVuZGVkTGFuZXM7XG4gIGRpZEF0dGVtcHRFbnRpcmVUcmVlICYmIChyb290Lndhcm1MYW5lcyB8PSBzdXNwZW5kZWRMYW5lcyk7XG4gIGRpZEF0dGVtcHRFbnRpcmVUcmVlID0gcm9vdC5leHBpcmF0aW9uVGltZXM7XG4gIGZvciAodmFyIGxhbmVzID0gc3VzcGVuZGVkTGFuZXM7IDAgPCBsYW5lczsgKSB7XG4gICAgdmFyIGluZGV4JDQgPSAzMSAtIGNsejMyKGxhbmVzKSxcbiAgICAgIGxhbmUgPSAxIDw8IGluZGV4JDQ7XG4gICAgZGlkQXR0ZW1wdEVudGlyZVRyZWVbaW5kZXgkNF0gPSAtMTtcbiAgICBsYW5lcyAmPSB+bGFuZTtcbiAgfVxuICAwICE9PSBzcGF3bmVkTGFuZSAmJlxuICAgIG1hcmtTcGF3bmVkRGVmZXJyZWRMYW5lKHJvb3QsIHNwYXduZWRMYW5lLCBzdXNwZW5kZWRMYW5lcyk7XG59XG5mdW5jdGlvbiBmbHVzaFN5bmNXb3JrJDEoKSB7XG4gIHJldHVybiAwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpXG4gICAgPyAoZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoMCwgITEpLCAhMSlcbiAgICA6ICEwO1xufVxuZnVuY3Rpb24gcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCkge1xuICBpZiAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICBpZiAoMCA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pXG4gICAgICB2YXIgaW50ZXJydXB0ZWRXb3JrID0gd29ya0luUHJvZ3Jlc3MucmV0dXJuO1xuICAgIGVsc2VcbiAgICAgIChpbnRlcnJ1cHRlZFdvcmsgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbCksXG4gICAgICAgIHJlc2V0SG9va3NPblVud2luZChpbnRlcnJ1cHRlZFdvcmspLFxuICAgICAgICAodGhlbmFibGVTdGF0ZSA9IG51bGwpLFxuICAgICAgICAodGhlbmFibGVJbmRleENvdW50ZXIgPSAwKSxcbiAgICAgICAgKGludGVycnVwdGVkV29yayA9IHdvcmtJblByb2dyZXNzKTtcbiAgICBmb3IgKDsgbnVsbCAhPT0gaW50ZXJydXB0ZWRXb3JrOyApXG4gICAgICB1bndpbmRJbnRlcnJ1cHRlZFdvcmsoaW50ZXJydXB0ZWRXb3JrLmFsdGVybmF0ZSwgaW50ZXJydXB0ZWRXb3JrKSxcbiAgICAgICAgKGludGVycnVwdGVkV29yayA9IGludGVycnVwdGVkV29yay5yZXR1cm4pO1xuICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgbGFuZXMpIHtcbiAgdmFyIHRpbWVvdXRIYW5kbGUgPSByb290LnRpbWVvdXRIYW5kbGU7XG4gIC0xICE9PSB0aW1lb3V0SGFuZGxlICYmXG4gICAgKChyb290LnRpbWVvdXRIYW5kbGUgPSAtMSksIGNhbmNlbFRpbWVvdXQodGltZW91dEhhbmRsZSkpO1xuICB0aW1lb3V0SGFuZGxlID0gcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0O1xuICBudWxsICE9PSB0aW1lb3V0SGFuZGxlICYmXG4gICAgKChyb290LmNhbmNlbFBlbmRpbmdDb21taXQgPSBudWxsKSwgdGltZW91dEhhbmRsZSgpKTtcbiAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gIHdvcmtJblByb2dyZXNzUm9vdCA9IHJvb3Q7XG4gIHdvcmtJblByb2dyZXNzID0gdGltZW91dEhhbmRsZSA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKHJvb3QuY3VycmVudCwgbnVsbCk7XG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gbGFuZXM7XG4gIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyA9ICExO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyA9IGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCwgbGFuZXMpO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgPSAhMTtcbiAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzID1cbiAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzID1cbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPVxuICAgICAgMDtcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzID1cbiAgICBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlID0gITE7XG4gIDAgIT09IChsYW5lcyAmIDgpICYmIChsYW5lcyB8PSBsYW5lcyAmIDMyKTtcbiAgdmFyIGFsbEVudGFuZ2xlZExhbmVzID0gcm9vdC5lbnRhbmdsZWRMYW5lcztcbiAgaWYgKDAgIT09IGFsbEVudGFuZ2xlZExhbmVzKVxuICAgIGZvciAoXG4gICAgICByb290ID0gcm9vdC5lbnRhbmdsZW1lbnRzLCBhbGxFbnRhbmdsZWRMYW5lcyAmPSBsYW5lcztcbiAgICAgIDAgPCBhbGxFbnRhbmdsZWRMYW5lcztcblxuICAgICkge1xuICAgICAgdmFyIGluZGV4JDIgPSAzMSAtIGNsejMyKGFsbEVudGFuZ2xlZExhbmVzKSxcbiAgICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkMjtcbiAgICAgIGxhbmVzIHw9IHJvb3RbaW5kZXgkMl07XG4gICAgICBhbGxFbnRhbmdsZWRMYW5lcyAmPSB+bGFuZTtcbiAgICB9XG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gbGFuZXM7XG4gIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKTtcbiAgcmV0dXJuIHRpbWVvdXRIYW5kbGU7XG59XG5mdW5jdGlvbiBoYW5kbGVUaHJvdyhyb290LCB0aHJvd25WYWx1ZSkge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGw7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBDb250ZXh0T25seURpc3BhdGNoZXI7XG4gIHRocm93blZhbHVlID09PSBTdXNwZW5zZUV4Y2VwdGlvbiB8fCB0aHJvd25WYWx1ZSA9PT0gU3VzcGVuc2VBY3Rpb25FeGNlcHRpb25cbiAgICA/ICgodGhyb3duVmFsdWUgPSBnZXRTdXNwZW5kZWRUaGVuYWJsZSgpKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDMpKVxuICAgIDogdGhyb3duVmFsdWUgPT09IFN1c3BlbnNleUNvbW1pdEV4Y2VwdGlvblxuICAgICAgPyAoKHRocm93blZhbHVlID0gZ2V0U3VzcGVuZGVkVGhlbmFibGUoKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDQpKVxuICAgICAgOiAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPVxuICAgICAgICAgIHRocm93blZhbHVlID09PSBTZWxlY3RpdmVIeWRyYXRpb25FeGNlcHRpb25cbiAgICAgICAgICAgID8gOFxuICAgICAgICAgICAgOiBudWxsICE9PSB0aHJvd25WYWx1ZSAmJlxuICAgICAgICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB0aHJvd25WYWx1ZSAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHRocm93blZhbHVlLnRoZW5cbiAgICAgICAgICAgICAgPyA2XG4gICAgICAgICAgICAgIDogMSk7XG4gIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSB0aHJvd25WYWx1ZTtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3MgJiZcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAxKSxcbiAgICBsb2dVbmNhdWdodEVycm9yKFxuICAgICAgcm9vdCxcbiAgICAgIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHRocm93blZhbHVlLCByb290LmN1cnJlbnQpXG4gICAgKSk7XG59XG5mdW5jdGlvbiBwdXNoRGlzcGF0Y2hlcigpIHtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgcmV0dXJuIG51bGwgPT09IHByZXZEaXNwYXRjaGVyID8gQ29udGV4dE9ubHlEaXNwYXRjaGVyIDogcHJldkRpc3BhdGNoZXI7XG59XG5mdW5jdGlvbiBwdXNoQXN5bmNEaXNwYXRjaGVyKCkge1xuICB2YXIgcHJldkFzeW5jRGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLkE7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkEgPSBEZWZhdWx0QXN5bmNEaXNwYXRjaGVyO1xuICByZXR1cm4gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbn1cbmZ1bmN0aW9uIHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKSB7XG4gIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA0O1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgfHxcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNDE5NDA0OCkgIT09XG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgbnVsbCAhPT0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCkgfHxcbiAgICAod29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSAhMCk7XG4gICgwID09PSAod29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzICYgMTM0MjE3NzI3KSAmJlxuICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyAmIDEzNDIxNzcyNykpIHx8XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NSb290IHx8XG4gICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3QsXG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyxcbiAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgITFcbiAgICApO1xufVxuZnVuY3Rpb24gcmVuZGVyUm9vdFN5bmMocm9vdCwgbGFuZXMsIHNob3VsZFlpZWxkRm9yUHJlcmVuZGVyaW5nKSB7XG4gIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gIGV4ZWN1dGlvbkNvbnRleHQgfD0gMjtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gcHVzaERpc3BhdGNoZXIoKSxcbiAgICBwcmV2QXN5bmNEaXNwYXRjaGVyID0gcHVzaEFzeW5jRGlzcGF0Y2hlcigpO1xuICBpZiAod29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBsYW5lcylcbiAgICAod29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwpLCBwcmVwYXJlRnJlc2hTdGFjayhyb290LCBsYW5lcyk7XG4gIGxhbmVzID0gITE7XG4gIHZhciBleGl0U3RhdHVzID0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbiAgYTogZG9cbiAgICB0cnkge1xuICAgICAgaWYgKDAgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmIG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIHZhciB1bml0T2ZXb3JrID0gd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgdGhyb3duVmFsdWUgPSB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlO1xuICAgICAgICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSB7XG4gICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gICAgICAgICAgICBleGl0U3RhdHVzID0gNjtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgbnVsbCA9PT0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCAmJiAobGFuZXMgPSAhMCk7XG4gICAgICAgICAgICB2YXIgcmVhc29uID0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb247XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgdW5pdE9mV29yaywgdGhyb3duVmFsdWUsIHJlYXNvbik7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHNob3VsZFlpZWxkRm9yUHJlcmVuZGVyaW5nICYmXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgZXhpdFN0YXR1cyA9IDA7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgKHJlYXNvbiA9IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbCksXG4gICAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgdW5pdE9mV29yaywgdGhyb3duVmFsdWUsIHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdvcmtMb29wU3luYygpO1xuICAgICAgZXhpdFN0YXR1cyA9IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXM7XG4gICAgICBicmVhaztcbiAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSQxNjcpIHtcbiAgICAgIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlJDE2Nyk7XG4gICAgfVxuICB3aGlsZSAoMSk7XG4gIGxhbmVzICYmIHJvb3Quc2hlbGxTdXNwZW5kQ291bnRlcisrO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID0gcHJldkRpc3BhdGNoZXI7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkEgPSBwcmV2QXN5bmNEaXNwYXRjaGVyO1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzcyAmJlxuICAgICgod29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbCksXG4gICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gMCksXG4gICAgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpKTtcbiAgcmV0dXJuIGV4aXRTdGF0dXM7XG59XG5mdW5jdGlvbiB3b3JrTG9vcFN5bmMoKSB7XG4gIGZvciAoOyBudWxsICE9PSB3b3JrSW5Qcm9ncmVzczsgKSBwZXJmb3JtVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiByZW5kZXJSb290Q29uY3VycmVudChyb290LCBsYW5lcykge1xuICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICBleGVjdXRpb25Db250ZXh0IHw9IDI7XG4gIHZhciBwcmV2RGlzcGF0Y2hlciA9IHB1c2hEaXNwYXRjaGVyKCksXG4gICAgcHJldkFzeW5jRGlzcGF0Y2hlciA9IHB1c2hBc3luY0Rpc3BhdGNoZXIoKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBsYW5lc1xuICAgID8gKCh3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSA9IG5vdygpICsgNTAwKSxcbiAgICAgIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIGxhbmVzKSlcbiAgICA6ICh3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyA9IGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIGxhbmVzXG4gICAgICApKTtcbiAgYTogZG9cbiAgICB0cnkge1xuICAgICAgaWYgKDAgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmIG51bGwgIT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIGxhbmVzID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgIHZhciB0aHJvd25WYWx1ZSA9IHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWU7XG4gICAgICAgIGI6IHN3aXRjaCAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pIHtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCAxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBpZiAoaXNUaGVuYWJsZVJlc29sdmVkKHRocm93blZhbHVlKSkge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICByZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrKGxhbmVzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYW5lcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgKDIgIT09IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uICYmXG4gICAgICAgICAgICAgICAgOSAhPT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pIHx8XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8XG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gNyk7XG4gICAgICAgICAgICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aHJvd25WYWx1ZS50aGVuKGxhbmVzLCBsYW5lcyk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gNztcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSA1O1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICBpc1RoZW5hYmxlUmVzb2x2ZWQodGhyb3duVmFsdWUpXG4gICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDApLFxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbCksXG4gICAgICAgICAgICAgICAgcmVwbGF5U3VzcGVuZGVkVW5pdE9mV29yayhsYW5lcykpXG4gICAgICAgICAgICAgIDogKCh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDApLFxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbCksXG4gICAgICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCBsYW5lcywgdGhyb3duVmFsdWUsIDcpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHZhciByZXNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgICAgICAgICAgICBjYXNlIDI2OlxuICAgICAgICAgICAgICAgIHJlc291cmNlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgICAgIHZhciBob3N0RmliZXIgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2UgPyBwcmVsb2FkUmVzb3VyY2UocmVzb3VyY2UpIDogMSkge1xuICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB2YXIgc2libGluZyA9IGhvc3RGaWJlci5zaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHNpYmxpbmcpIHdvcmtJblByb2dyZXNzID0gc2libGluZztcbiAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXJuRmliZXIgPSBob3N0RmliZXIucmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBudWxsICE9PSByZXR1cm5GaWJlclxuICAgICAgICAgICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcyA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlVW5pdE9mV29yayhyZXR1cm5GaWJlcikpXG4gICAgICAgICAgICAgICAgICAgICAgOiAod29ya0luUHJvZ3Jlc3MgPSBudWxsKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aHJvd0FuZFVud2luZFdvcmtMb29wKHJvb3QsIGxhbmVzLCB0aHJvd25WYWx1ZSwgNSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCA2KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIHJlc2V0V29ya0luUHJvZ3Jlc3NTdGFjaygpO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDY7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2MikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3b3JrTG9vcENvbmN1cnJlbnRCeVNjaGVkdWxlcigpO1xuICAgICAgYnJlYWs7XG4gICAgfSBjYXRjaCAodGhyb3duVmFsdWUkMTY5KSB7XG4gICAgICBoYW5kbGVUaHJvdyhyb290LCB0aHJvd25WYWx1ZSQxNjkpO1xuICAgIH1cbiAgd2hpbGUgKDEpO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IHByZXZEaXNwYXRjaGVyO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5BID0gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbiAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICBpZiAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MpIHJldHVybiAwO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IDA7XG4gIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXM7XG59XG5mdW5jdGlvbiB3b3JrTG9vcENvbmN1cnJlbnRCeVNjaGVkdWxlcigpIHtcbiAgZm9yICg7IG51bGwgIT09IHdvcmtJblByb2dyZXNzICYmICFzaG91bGRZaWVsZCgpOyApXG4gICAgcGVyZm9ybVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpO1xufVxuZnVuY3Rpb24gcGVyZm9ybVVuaXRPZldvcmsodW5pdE9mV29yaykge1xuICB2YXIgbmV4dCA9IGJlZ2luV29yayh1bml0T2ZXb3JrLmFsdGVybmF0ZSwgdW5pdE9mV29yaywgZW50YW5nbGVkUmVuZGVyTGFuZXMpO1xuICB1bml0T2ZXb3JrLm1lbW9pemVkUHJvcHMgPSB1bml0T2ZXb3JrLnBlbmRpbmdQcm9wcztcbiAgbnVsbCA9PT0gbmV4dCA/IGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKSA6ICh3b3JrSW5Qcm9ncmVzcyA9IG5leHQpO1xufVxuZnVuY3Rpb24gcmVwbGF5U3VzcGVuZGVkVW5pdE9mV29yayh1bml0T2ZXb3JrKSB7XG4gIHZhciBuZXh0ID0gdW5pdE9mV29yaztcbiAgdmFyIGN1cnJlbnQgPSBuZXh0LmFsdGVybmF0ZTtcbiAgc3dpdGNoIChuZXh0LnRhZykge1xuICAgIGNhc2UgMTU6XG4gICAgY2FzZSAwOlxuICAgICAgbmV4dCA9IHJlcGxheUZ1bmN0aW9uQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICBuZXh0LFxuICAgICAgICBuZXh0LnBlbmRpbmdQcm9wcyxcbiAgICAgICAgbmV4dC50eXBlLFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMTpcbiAgICAgIG5leHQgPSByZXBsYXlGdW5jdGlvbkNvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgbmV4dCxcbiAgICAgICAgbmV4dC5wZW5kaW5nUHJvcHMsXG4gICAgICAgIG5leHQudHlwZS5yZW5kZXIsXG4gICAgICAgIG5leHQucmVmLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIHJlc2V0SG9va3NPblVud2luZChuZXh0KTtcbiAgICBkZWZhdWx0OlxuICAgICAgdW53aW5kSW50ZXJydXB0ZWRXb3JrKGN1cnJlbnQsIG5leHQpLFxuICAgICAgICAobmV4dCA9IHdvcmtJblByb2dyZXNzID1cbiAgICAgICAgICByZXNldFdvcmtJblByb2dyZXNzKG5leHQsIGVudGFuZ2xlZFJlbmRlckxhbmVzKSksXG4gICAgICAgIChuZXh0ID0gYmVnaW5Xb3JrKGN1cnJlbnQsIG5leHQsIGVudGFuZ2xlZFJlbmRlckxhbmVzKSk7XG4gIH1cbiAgdW5pdE9mV29yay5tZW1vaXplZFByb3BzID0gdW5pdE9mV29yay5wZW5kaW5nUHJvcHM7XG4gIG51bGwgPT09IG5leHQgPyBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yaykgOiAod29ya0luUHJvZ3Jlc3MgPSBuZXh0KTtcbn1cbmZ1bmN0aW9uIHRocm93QW5kVW53aW5kV29ya0xvb3AoXG4gIHJvb3QsXG4gIHVuaXRPZldvcmssXG4gIHRocm93blZhbHVlLFxuICBzdXNwZW5kZWRSZWFzb25cbikge1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgcmVzZXRIb29rc09uVW53aW5kKHVuaXRPZldvcmspO1xuICB0aGVuYWJsZVN0YXRlID0gbnVsbDtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIgPSAwO1xuICB2YXIgcmV0dXJuRmliZXIgPSB1bml0T2ZXb3JrLnJldHVybjtcbiAgdHJ5IHtcbiAgICBpZiAoXG4gICAgICB0aHJvd0V4Y2VwdGlvbihcbiAgICAgICAgcm9vdCxcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIHVuaXRPZldvcmssXG4gICAgICAgIHRocm93blZhbHVlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgKVxuICAgICkge1xuICAgICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDE7XG4gICAgICBsb2dVbmNhdWdodEVycm9yKFxuICAgICAgICByb290LFxuICAgICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICAgKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKG51bGwgIT09IHJldHVybkZpYmVyKSB0aHJvdyAoKHdvcmtJblByb2dyZXNzID0gcmV0dXJuRmliZXIpLCBlcnJvcik7XG4gICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDE7XG4gICAgbG9nVW5jYXVnaHRFcnJvcihcbiAgICAgIHJvb3QsXG4gICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICk7XG4gICAgd29ya0luUHJvZ3Jlc3MgPSBudWxsO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodW5pdE9mV29yay5mbGFncyAmIDMyNzY4KSB7XG4gICAgaWYgKGlzSHlkcmF0aW5nIHx8IDEgPT09IHN1c3BlbmRlZFJlYXNvbikgcm9vdCA9ICEwO1xuICAgIGVsc2UgaWYgKFxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgfHxcbiAgICAgIDAgIT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDUzNjg3MDkxMilcbiAgICApXG4gICAgICByb290ID0gITE7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoKHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyA9IHJvb3QgPSAhMCksXG4gICAgICAyID09PSBzdXNwZW5kZWRSZWFzb24gfHxcbiAgICAgICAgOSA9PT0gc3VzcGVuZGVkUmVhc29uIHx8XG4gICAgICAgIDMgPT09IHN1c3BlbmRlZFJlYXNvbiB8fFxuICAgICAgICA2ID09PSBzdXNwZW5kZWRSZWFzb24pXG4gICAgKVxuICAgICAgKHN1c3BlbmRlZFJlYXNvbiA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgICBudWxsICE9PSBzdXNwZW5kZWRSZWFzb24gJiZcbiAgICAgICAgICAxMyA9PT0gc3VzcGVuZGVkUmVhc29uLnRhZyAmJlxuICAgICAgICAgIChzdXNwZW5kZWRSZWFzb24uZmxhZ3MgfD0gMTYzODQpO1xuICAgIHVud2luZFVuaXRPZldvcmsodW5pdE9mV29yaywgcm9vdCk7XG4gIH0gZWxzZSBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yayk7XG59XG5mdW5jdGlvbiBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yaykge1xuICB2YXIgY29tcGxldGVkV29yayA9IHVuaXRPZldvcms7XG4gIGRvIHtcbiAgICBpZiAoMCAhPT0gKGNvbXBsZXRlZFdvcmsuZmxhZ3MgJiAzMjc2OCkpIHtcbiAgICAgIHVud2luZFVuaXRPZldvcmsoXG4gICAgICAgIGNvbXBsZXRlZFdvcmssXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5nc1xuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdW5pdE9mV29yayA9IGNvbXBsZXRlZFdvcmsucmV0dXJuO1xuICAgIHZhciBuZXh0ID0gY29tcGxldGVXb3JrKFxuICAgICAgY29tcGxldGVkV29yay5hbHRlcm5hdGUsXG4gICAgICBjb21wbGV0ZWRXb3JrLFxuICAgICAgZW50YW5nbGVkUmVuZGVyTGFuZXNcbiAgICApO1xuICAgIGlmIChudWxsICE9PSBuZXh0KSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IG5leHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbXBsZXRlZFdvcmsgPSBjb21wbGV0ZWRXb3JrLnNpYmxpbmc7XG4gICAgaWYgKG51bGwgIT09IGNvbXBsZXRlZFdvcmspIHtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gY29tcGxldGVkV29yaztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd29ya0luUHJvZ3Jlc3MgPSBjb21wbGV0ZWRXb3JrID0gdW5pdE9mV29yaztcbiAgfSB3aGlsZSAobnVsbCAhPT0gY29tcGxldGVkV29yayk7XG4gIDAgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiYgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA1KTtcbn1cbmZ1bmN0aW9uIHVud2luZFVuaXRPZldvcmsodW5pdE9mV29yaywgc2tpcFNpYmxpbmdzKSB7XG4gIGRvIHtcbiAgICB2YXIgbmV4dCA9IHVud2luZFdvcmsodW5pdE9mV29yay5hbHRlcm5hdGUsIHVuaXRPZldvcmspO1xuICAgIGlmIChudWxsICE9PSBuZXh0KSB7XG4gICAgICBuZXh0LmZsYWdzICY9IDMyNzY3O1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSBuZXh0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZXh0ID0gdW5pdE9mV29yay5yZXR1cm47XG4gICAgbnVsbCAhPT0gbmV4dCAmJlxuICAgICAgKChuZXh0LmZsYWdzIHw9IDMyNzY4KSwgKG5leHQuc3VidHJlZUZsYWdzID0gMCksIChuZXh0LmRlbGV0aW9ucyA9IG51bGwpKTtcbiAgICBpZiAoXG4gICAgICAhc2tpcFNpYmxpbmdzICYmXG4gICAgICAoKHVuaXRPZldvcmsgPSB1bml0T2ZXb3JrLnNpYmxpbmcpLCBudWxsICE9PSB1bml0T2ZXb3JrKVxuICAgICkge1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB1bml0T2ZXb3JrO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3b3JrSW5Qcm9ncmVzcyA9IHVuaXRPZldvcmsgPSBuZXh0O1xuICB9IHdoaWxlIChudWxsICE9PSB1bml0T2ZXb3JrKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDY7XG4gIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbW1pdFJvb3QoXG4gIHJvb3QsXG4gIGZpbmlzaGVkV29yayxcbiAgbGFuZXMsXG4gIHJlY292ZXJhYmxlRXJyb3JzLFxuICB0cmFuc2l0aW9ucyxcbiAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICBzcGF3bmVkTGFuZSxcbiAgdXBkYXRlZExhbmVzLFxuICBzdXNwZW5kZWRSZXRyeUxhbmVzXG4pIHtcbiAgcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0ID0gbnVsbDtcbiAgZG8gZmx1c2hQZW5kaW5nRWZmZWN0cygpO1xuICB3aGlsZSAoMCAhPT0gcGVuZGluZ0VmZmVjdHNTdGF0dXMpO1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjcpKTtcbiAgaWYgKG51bGwgIT09IGZpbmlzaGVkV29yaykge1xuICAgIGlmIChmaW5pc2hlZFdvcmsgPT09IHJvb3QuY3VycmVudCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNzcpKTtcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUgPSBmaW5pc2hlZFdvcmsubGFuZXMgfCBmaW5pc2hlZFdvcmsuY2hpbGRMYW5lcztcbiAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUgfD0gY29uY3VycmVudGx5VXBkYXRlZExhbmVzO1xuICAgIG1hcmtSb290RmluaXNoZWQoXG4gICAgICByb290LFxuICAgICAgbGFuZXMsXG4gICAgICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUsXG4gICAgICBzcGF3bmVkTGFuZSxcbiAgICAgIHVwZGF0ZWRMYW5lcyxcbiAgICAgIHN1c3BlbmRlZFJldHJ5TGFuZXNcbiAgICApO1xuICAgIHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJlxuICAgICAgKCh3b3JrSW5Qcm9ncmVzcyA9IHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gMCkpO1xuICAgIHBlbmRpbmdGaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcms7XG4gICAgcGVuZGluZ0VmZmVjdHNSb290ID0gcm9vdDtcbiAgICBwZW5kaW5nRWZmZWN0c0xhbmVzID0gbGFuZXM7XG4gICAgcGVuZGluZ0VmZmVjdHNSZW1haW5pbmdMYW5lcyA9IGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZTtcbiAgICBwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zID0gdHJhbnNpdGlvbnM7XG4gICAgcGVuZGluZ1JlY292ZXJhYmxlRXJyb3JzID0gcmVjb3ZlcmFibGVFcnJvcnM7XG4gICAgMCAhPT0gKGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3MgJiAxMDI1NikgfHxcbiAgICAwICE9PSAoZmluaXNoZWRXb3JrLmZsYWdzICYgMTAyNTYpXG4gICAgICA/ICgocm9vdC5jYWxsYmFja05vZGUgPSBudWxsKSxcbiAgICAgICAgKHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IDApLFxuICAgICAgICBzY2hlZHVsZUNhbGxiYWNrJDEoTm9ybWFsUHJpb3JpdHkkMSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZsdXNoUGFzc2l2ZUVmZmVjdHMoITApO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KSlcbiAgICAgIDogKChyb290LmNhbGxiYWNrTm9kZSA9IG51bGwpLCAocm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gMCkpO1xuICAgIHJlY292ZXJhYmxlRXJyb3JzID0gMCAhPT0gKGZpbmlzaGVkV29yay5mbGFncyAmIDEzODc4KTtcbiAgICBpZiAoMCAhPT0gKGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3MgJiAxMzg3OCkgfHwgcmVjb3ZlcmFibGVFcnJvcnMpIHtcbiAgICAgIHJlY292ZXJhYmxlRXJyb3JzID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICAgICAgdHJhbnNpdGlvbnMgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICAgICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDI7XG4gICAgICBzcGF3bmVkTGFuZSA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgICBleGVjdXRpb25Db250ZXh0IHw9IDQ7XG4gICAgICB0cnkge1xuICAgICAgICBjb21taXRCZWZvcmVNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrLCBsYW5lcyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAoZXhlY3V0aW9uQ29udGV4dCA9IHNwYXduZWRMYW5lKSxcbiAgICAgICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHRyYW5zaXRpb25zKSxcbiAgICAgICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHJlY292ZXJhYmxlRXJyb3JzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcGVuZGluZ0VmZmVjdHNTdGF0dXMgPSAxO1xuICAgIGZsdXNoTXV0YXRpb25FZmZlY3RzKCk7XG4gICAgZmx1c2hMYXlvdXRFZmZlY3RzKCk7XG4gICAgZmx1c2hTcGF3bmVkV29yaygpO1xuICB9XG59XG5mdW5jdGlvbiBmbHVzaE11dGF0aW9uRWZmZWN0cygpIHtcbiAgaWYgKDEgPT09IHBlbmRpbmdFZmZlY3RzU3RhdHVzKSB7XG4gICAgcGVuZGluZ0VmZmVjdHNTdGF0dXMgPSAwO1xuICAgIHZhciByb290ID0gcGVuZGluZ0VmZmVjdHNSb290LFxuICAgICAgZmluaXNoZWRXb3JrID0gcGVuZGluZ0ZpbmlzaGVkV29yayxcbiAgICAgIHJvb3RNdXRhdGlvbkhhc0VmZmVjdCA9IDAgIT09IChmaW5pc2hlZFdvcmsuZmxhZ3MgJiAxMzg3OCk7XG4gICAgaWYgKDAgIT09IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgMTM4NzgpIHx8IHJvb3RNdXRhdGlvbkhhc0VmZmVjdCkge1xuICAgICAgcm9vdE11dGF0aW9uSGFzRWZmZWN0ID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICAgICAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICAgICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDI7XG4gICAgICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICAgICAgZXhlY3V0aW9uQ29udGV4dCB8PSA0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29tbWl0TXV0YXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFdvcmssIHJvb3QpO1xuICAgICAgICB2YXIgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiA9IHNlbGVjdGlvbkluZm9ybWF0aW9uLFxuICAgICAgICAgIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudERlZXAocm9vdC5jb250YWluZXJJbmZvKSxcbiAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5mb2N1c2VkRWxlbSxcbiAgICAgICAgICBwcmlvclNlbGVjdGlvblJhbmdlID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5zZWxlY3Rpb25SYW5nZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGN1ckZvY3VzZWRFbGVtICE9PSBwcmlvckZvY3VzZWRFbGVtICYmXG4gICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSAmJlxuICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0ub3duZXJEb2N1bWVudCAmJlxuICAgICAgICAgIGNvbnRhaW5zTm9kZShcbiAgICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBudWxsICE9PSBwcmlvclNlbGVjdGlvblJhbmdlICYmXG4gICAgICAgICAgICBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMocHJpb3JGb2N1c2VkRWxlbSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHByaW9yU2VsZWN0aW9uUmFuZ2Uuc3RhcnQsXG4gICAgICAgICAgICAgIGVuZCA9IHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kO1xuICAgICAgICAgICAgdm9pZCAwID09PSBlbmQgJiYgKGVuZCA9IHN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChcInNlbGVjdGlvblN0YXJ0XCIgaW4gcHJpb3JGb2N1c2VkRWxlbSlcbiAgICAgICAgICAgICAgKHByaW9yRm9jdXNlZEVsZW0uc2VsZWN0aW9uU3RhcnQgPSBzdGFydCksXG4gICAgICAgICAgICAgICAgKHByaW9yRm9jdXNlZEVsZW0uc2VsZWN0aW9uRW5kID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtLnZhbHVlLmxlbmd0aFxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBkb2MgPSBwcmlvckZvY3VzZWRFbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQsXG4gICAgICAgICAgICAgICAgd2luID0gKGRvYyAmJiBkb2MuZGVmYXVsdFZpZXcpIHx8IHdpbmRvdztcbiAgICAgICAgICAgICAgaWYgKHdpbi5nZXRTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0aW9uID0gd2luLmdldFNlbGVjdGlvbigpLFxuICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gcHJpb3JGb2N1c2VkRWxlbS50ZXh0Q29udGVudC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICBzdGFydCRqc2NvbXAkMCA9IE1hdGgubWluKHByaW9yU2VsZWN0aW9uUmFuZ2Uuc3RhcnQsIGxlbmd0aCksXG4gICAgICAgICAgICAgICAgICBlbmQkanNjb21wJDAgPVxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kXG4gICAgICAgICAgICAgICAgICAgICAgPyBzdGFydCRqc2NvbXAkMFxuICAgICAgICAgICAgICAgICAgICAgIDogTWF0aC5taW4ocHJpb3JTZWxlY3Rpb25SYW5nZS5lbmQsIGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgIXNlbGVjdGlvbi5leHRlbmQgJiZcbiAgICAgICAgICAgICAgICAgIHN0YXJ0JGpzY29tcCQwID4gZW5kJGpzY29tcCQwICYmXG4gICAgICAgICAgICAgICAgICAoKGN1ckZvY3VzZWRFbGVtID0gZW5kJGpzY29tcCQwKSxcbiAgICAgICAgICAgICAgICAgIChlbmQkanNjb21wJDAgPSBzdGFydCRqc2NvbXAkMCksXG4gICAgICAgICAgICAgICAgICAoc3RhcnQkanNjb21wJDAgPSBjdXJGb2N1c2VkRWxlbSkpO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQoXG4gICAgICAgICAgICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0sXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0JGpzY29tcCQwXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChcbiAgICAgICAgICAgICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSxcbiAgICAgICAgICAgICAgICAgICAgZW5kJGpzY29tcCQwXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIHN0YXJ0TWFya2VyICYmXG4gICAgICAgICAgICAgICAgICBlbmRNYXJrZXIgJiZcbiAgICAgICAgICAgICAgICAgICgxICE9PSBzZWxlY3Rpb24ucmFuZ2VDb3VudCB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYW5jaG9yTm9kZSAhPT0gc3RhcnRNYXJrZXIubm9kZSB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0ICE9PSBzdGFydE1hcmtlci5vZmZzZXQgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmZvY3VzTm9kZSAhPT0gZW5kTWFya2VyLm5vZGUgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLmZvY3VzT2Zmc2V0ICE9PSBlbmRNYXJrZXIub2Zmc2V0KVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChzdGFydE1hcmtlci5ub2RlLCBzdGFydE1hcmtlci5vZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgc3RhcnQkanNjb21wJDAgPiBlbmQkanNjb21wJDBcbiAgICAgICAgICAgICAgICAgICAgPyAoc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKSxcbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KSlcbiAgICAgICAgICAgICAgICAgICAgOiAocmFuZ2Uuc2V0RW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KSxcbiAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZG9jID0gW107XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIHNlbGVjdGlvbiA9IHByaW9yRm9jdXNlZEVsZW07XG4gICAgICAgICAgICAoc2VsZWN0aW9uID0gc2VsZWN0aW9uLnBhcmVudE5vZGUpO1xuXG4gICAgICAgICAgKVxuICAgICAgICAgICAgMSA9PT0gc2VsZWN0aW9uLm5vZGVUeXBlICYmXG4gICAgICAgICAgICAgIGRvYy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBzZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgbGVmdDogc2VsZWN0aW9uLnNjcm9sbExlZnQsXG4gICAgICAgICAgICAgICAgdG9wOiBzZWxlY3Rpb24uc2Nyb2xsVG9wXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByaW9yRm9jdXNlZEVsZW0uZm9jdXMgJiZcbiAgICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0uZm9jdXMoKTtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgcHJpb3JGb2N1c2VkRWxlbSA9IDA7XG4gICAgICAgICAgICBwcmlvckZvY3VzZWRFbGVtIDwgZG9jLmxlbmd0aDtcbiAgICAgICAgICAgIHByaW9yRm9jdXNlZEVsZW0rK1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdmFyIGluZm8gPSBkb2NbcHJpb3JGb2N1c2VkRWxlbV07XG4gICAgICAgICAgICBpbmZvLmVsZW1lbnQuc2Nyb2xsTGVmdCA9IGluZm8ubGVmdDtcbiAgICAgICAgICAgIGluZm8uZWxlbWVudC5zY3JvbGxUb3AgPSBpbmZvLnRvcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX2VuYWJsZWQgPSAhIWV2ZW50c0VuYWJsZWQ7XG4gICAgICAgIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gZXZlbnRzRW5hYmxlZCA9IG51bGw7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAoZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0KSxcbiAgICAgICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcm9vdE11dGF0aW9uSGFzRWZmZWN0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcm9vdC5jdXJyZW50ID0gZmluaXNoZWRXb3JrO1xuICAgIHBlbmRpbmdFZmZlY3RzU3RhdHVzID0gMjtcbiAgfVxufVxuZnVuY3Rpb24gZmx1c2hMYXlvdXRFZmZlY3RzKCkge1xuICBpZiAoMiA9PT0gcGVuZGluZ0VmZmVjdHNTdGF0dXMpIHtcbiAgICBwZW5kaW5nRWZmZWN0c1N0YXR1cyA9IDA7XG4gICAgdmFyIHJvb3QgPSBwZW5kaW5nRWZmZWN0c1Jvb3QsXG4gICAgICBmaW5pc2hlZFdvcmsgPSBwZW5kaW5nRmluaXNoZWRXb3JrLFxuICAgICAgcm9vdEhhc0xheW91dEVmZmVjdCA9IDAgIT09IChmaW5pc2hlZFdvcmsuZmxhZ3MgJiA4NzcyKTtcbiAgICBpZiAoMCAhPT0gKGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3MgJiA4NzcyKSB8fCByb290SGFzTGF5b3V0RWZmZWN0KSB7XG4gICAgICByb290SGFzTGF5b3V0RWZmZWN0ID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICAgICAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICAgICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDI7XG4gICAgICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICAgICAgZXhlY3V0aW9uQ29udGV4dCB8PSA0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlcihyb290LCBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLCBmaW5pc2hlZFdvcmspO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgKGV4ZWN1dGlvbkNvbnRleHQgPSBwcmV2RXhlY3V0aW9uQ29udGV4dCksXG4gICAgICAgICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5KSxcbiAgICAgICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHJvb3RIYXNMYXlvdXRFZmZlY3QpO1xuICAgICAgfVxuICAgIH1cbiAgICBwZW5kaW5nRWZmZWN0c1N0YXR1cyA9IDM7XG4gIH1cbn1cbmZ1bmN0aW9uIGZsdXNoU3Bhd25lZFdvcmsoKSB7XG4gIGlmICg0ID09PSBwZW5kaW5nRWZmZWN0c1N0YXR1cyB8fCAzID09PSBwZW5kaW5nRWZmZWN0c1N0YXR1cykge1xuICAgIHBlbmRpbmdFZmZlY3RzU3RhdHVzID0gMDtcbiAgICByZXF1ZXN0UGFpbnQoKTtcbiAgICB2YXIgcm9vdCA9IHBlbmRpbmdFZmZlY3RzUm9vdCxcbiAgICAgIGZpbmlzaGVkV29yayA9IHBlbmRpbmdGaW5pc2hlZFdvcmssXG4gICAgICBsYW5lcyA9IHBlbmRpbmdFZmZlY3RzTGFuZXMsXG4gICAgICByZWNvdmVyYWJsZUVycm9ycyA9IHBlbmRpbmdSZWNvdmVyYWJsZUVycm9ycztcbiAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDEwMjU2KSB8fFxuICAgIDAgIT09IChmaW5pc2hlZFdvcmsuZmxhZ3MgJiAxMDI1NilcbiAgICAgID8gKHBlbmRpbmdFZmZlY3RzU3RhdHVzID0gNSlcbiAgICAgIDogKChwZW5kaW5nRWZmZWN0c1N0YXR1cyA9IDApLFxuICAgICAgICAocGVuZGluZ0ZpbmlzaGVkV29yayA9IHBlbmRpbmdFZmZlY3RzUm9vdCA9IG51bGwpLFxuICAgICAgICByZWxlYXNlUm9vdFBvb2xlZENhY2hlKHJvb3QsIHJvb3QucGVuZGluZ0xhbmVzKSk7XG4gICAgdmFyIHJlbWFpbmluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG4gICAgMCA9PT0gcmVtYWluaW5nTGFuZXMgJiYgKGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbnVsbCk7XG4gICAgbGFuZXNUb0V2ZW50UHJpb3JpdHkobGFuZXMpO1xuICAgIGZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgaWYgKGluamVjdGVkSG9vayAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclJvb3QpXG4gICAgICB0cnkge1xuICAgICAgICBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclJvb3QoXG4gICAgICAgICAgcmVuZGVyZXJJRCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgIDEyOCA9PT0gKGZpbmlzaGVkV29yay5jdXJyZW50LmZsYWdzICYgMTI4KVxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgIGlmIChudWxsICE9PSByZWNvdmVyYWJsZUVycm9ycykge1xuICAgICAgZmluaXNoZWRXb3JrID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgICAgIHJlbWFpbmluZ0xhbmVzID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgICAgIFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSAyO1xuICAgICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIHZhciBvblJlY292ZXJhYmxlRXJyb3IgPSByb290Lm9uUmVjb3ZlcmFibGVFcnJvciwgaSA9IDA7XG4gICAgICAgICAgaSA8IHJlY292ZXJhYmxlRXJyb3JzLmxlbmd0aDtcbiAgICAgICAgICBpKytcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIHJlY292ZXJhYmxlRXJyb3IgPSByZWNvdmVyYWJsZUVycm9yc1tpXTtcbiAgICAgICAgICBvblJlY292ZXJhYmxlRXJyb3IocmVjb3ZlcmFibGVFcnJvci52YWx1ZSwge1xuICAgICAgICAgICAgY29tcG9uZW50U3RhY2s6IHJlY292ZXJhYmxlRXJyb3Iuc3RhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBmaW5pc2hlZFdvcmspLFxuICAgICAgICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcmVtYWluaW5nTGFuZXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAwICE9PSAocGVuZGluZ0VmZmVjdHNMYW5lcyAmIDMpICYmIGZsdXNoUGVuZGluZ0VmZmVjdHMoKTtcbiAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCk7XG4gICAgcmVtYWluaW5nTGFuZXMgPSByb290LnBlbmRpbmdMYW5lcztcbiAgICAwICE9PSAobGFuZXMgJiA0MTk0MDkwKSAmJiAwICE9PSAocmVtYWluaW5nTGFuZXMgJiA0MilcbiAgICAgID8gcm9vdCA9PT0gcm9vdFdpdGhOZXN0ZWRVcGRhdGVzXG4gICAgICAgID8gbmVzdGVkVXBkYXRlQ291bnQrK1xuICAgICAgICA6ICgobmVzdGVkVXBkYXRlQ291bnQgPSAwKSwgKHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IHJvb3QpKVxuICAgICAgOiAobmVzdGVkVXBkYXRlQ291bnQgPSAwKTtcbiAgICBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlbGVhc2VSb290UG9vbGVkQ2FjaGUocm9vdCwgcmVtYWluaW5nTGFuZXMpIHtcbiAgMCA9PT0gKHJvb3QucG9vbGVkQ2FjaGVMYW5lcyAmPSByZW1haW5pbmdMYW5lcykgJiZcbiAgICAoKHJlbWFpbmluZ0xhbmVzID0gcm9vdC5wb29sZWRDYWNoZSksXG4gICAgbnVsbCAhPSByZW1haW5pbmdMYW5lcyAmJlxuICAgICAgKChyb290LnBvb2xlZENhY2hlID0gbnVsbCksIHJlbGVhc2VDYWNoZShyZW1haW5pbmdMYW5lcykpKTtcbn1cbmZ1bmN0aW9uIGZsdXNoUGVuZGluZ0VmZmVjdHMod2FzRGVsYXllZENvbW1pdCkge1xuICBmbHVzaE11dGF0aW9uRWZmZWN0cygpO1xuICBmbHVzaExheW91dEVmZmVjdHMoKTtcbiAgZmx1c2hTcGF3bmVkV29yaygpO1xuICByZXR1cm4gZmx1c2hQYXNzaXZlRWZmZWN0cyh3YXNEZWxheWVkQ29tbWl0KTtcbn1cbmZ1bmN0aW9uIGZsdXNoUGFzc2l2ZUVmZmVjdHMoKSB7XG4gIGlmICg1ICE9PSBwZW5kaW5nRWZmZWN0c1N0YXR1cykgcmV0dXJuICExO1xuICB2YXIgcm9vdCA9IHBlbmRpbmdFZmZlY3RzUm9vdCxcbiAgICByZW1haW5pbmdMYW5lcyA9IHBlbmRpbmdFZmZlY3RzUmVtYWluaW5nTGFuZXM7XG4gIHBlbmRpbmdFZmZlY3RzUmVtYWluaW5nTGFuZXMgPSAwO1xuICB2YXIgcmVuZGVyUHJpb3JpdHkgPSBsYW5lc1RvRXZlbnRQcmlvcml0eShwZW5kaW5nRWZmZWN0c0xhbmVzKSxcbiAgICBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDMyID4gcmVuZGVyUHJpb3JpdHkgPyAzMiA6IHJlbmRlclByaW9yaXR5O1xuICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICAgIHJlbmRlclByaW9yaXR5ID0gcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucztcbiAgICBwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zID0gbnVsbDtcbiAgICB2YXIgcm9vdCRqc2NvbXAkMCA9IHBlbmRpbmdFZmZlY3RzUm9vdCxcbiAgICAgIGxhbmVzID0gcGVuZGluZ0VmZmVjdHNMYW5lcztcbiAgICBwZW5kaW5nRWZmZWN0c1N0YXR1cyA9IDA7XG4gICAgcGVuZGluZ0ZpbmlzaGVkV29yayA9IHBlbmRpbmdFZmZlY3RzUm9vdCA9IG51bGw7XG4gICAgcGVuZGluZ0VmZmVjdHNMYW5lcyA9IDA7XG4gICAgaWYgKDAgIT09IChleGVjdXRpb25Db250ZXh0ICYgNikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzMxKSk7XG4gICAgdmFyIHByZXZFeGVjdXRpb25Db250ZXh0ID0gZXhlY3V0aW9uQ29udGV4dDtcbiAgICBleGVjdXRpb25Db250ZXh0IHw9IDQ7XG4gICAgY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKHJvb3QkanNjb21wJDAuY3VycmVudCk7XG4gICAgY29tbWl0UGFzc2l2ZU1vdW50T25GaWJlcihcbiAgICAgIHJvb3QkanNjb21wJDAsXG4gICAgICByb290JGpzY29tcCQwLmN1cnJlbnQsXG4gICAgICBsYW5lcyxcbiAgICAgIHJlbmRlclByaW9yaXR5XG4gICAgKTtcbiAgICBleGVjdXRpb25Db250ZXh0ID0gcHJldkV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoMCwgITEpO1xuICAgIGlmIChcbiAgICAgIGluamVjdGVkSG9vayAmJlxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5qZWN0ZWRIb29rLm9uUG9zdENvbW1pdEZpYmVyUm9vdFxuICAgIClcbiAgICAgIHRyeSB7XG4gICAgICAgIGluamVjdGVkSG9vay5vblBvc3RDb21taXRGaWJlclJvb3QocmVuZGVyZXJJRCwgcm9vdCRqc2NvbXAkMCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgcmV0dXJuICEwO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eSksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKSxcbiAgICAgIHJlbGVhc2VSb290UG9vbGVkQ2FjaGUocm9vdCwgcmVtYWluaW5nTGFuZXMpO1xuICB9XG59XG5mdW5jdGlvbiBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdChyb290RmliZXIsIHNvdXJjZUZpYmVyLCBlcnJvcikge1xuICBzb3VyY2VGaWJlciA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKGVycm9yLCBzb3VyY2VGaWJlcik7XG4gIHNvdXJjZUZpYmVyID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHJvb3RGaWJlci5zdGF0ZU5vZGUsIHNvdXJjZUZpYmVyLCAyKTtcbiAgcm9vdEZpYmVyID0gZW5xdWV1ZVVwZGF0ZShyb290RmliZXIsIHNvdXJjZUZpYmVyLCAyKTtcbiAgbnVsbCAhPT0gcm9vdEZpYmVyICYmXG4gICAgKG1hcmtSb290VXBkYXRlZCQxKHJvb3RGaWJlciwgMiksIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290RmliZXIpKTtcbn1cbmZ1bmN0aW9uIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKHNvdXJjZUZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvcikge1xuICBpZiAoMyA9PT0gc291cmNlRmliZXIudGFnKVxuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290KHNvdXJjZUZpYmVyLCBzb3VyY2VGaWJlciwgZXJyb3IpO1xuICBlbHNlXG4gICAgZm9yICg7IG51bGwgIT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3I7ICkge1xuICAgICAgaWYgKDMgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudGFnKSB7XG4gICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yT25Sb290KFxuICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgc291cmNlRmliZXIsXG4gICAgICAgICAgZXJyb3JcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKDEgPT09IG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudGFnKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5lYXJlc3RNb3VudGVkQW5jZXN0b3Iuc3RhdGVOb2RlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PVxuICAgICAgICAgICAgdHlwZW9mIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgfHxcbiAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkQ2F0Y2ggJiZcbiAgICAgICAgICAgIChudWxsID09PSBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCB8fFxuICAgICAgICAgICAgICAhbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQuaGFzKGluc3RhbmNlKSkpXG4gICAgICAgICkge1xuICAgICAgICAgIHNvdXJjZUZpYmVyID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoZXJyb3IsIHNvdXJjZUZpYmVyKTtcbiAgICAgICAgICBlcnJvciA9IGNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUoMik7XG4gICAgICAgICAgaW5zdGFuY2UgPSBlbnF1ZXVlVXBkYXRlKG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yLCAyKTtcbiAgICAgICAgICBudWxsICE9PSBpbnN0YW5jZSAmJlxuICAgICAgICAgICAgKGluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlKFxuICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICAgIHNvdXJjZUZpYmVyXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbWFya1Jvb3RVcGRhdGVkJDEoaW5zdGFuY2UsIDIpLFxuICAgICAgICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGluc3RhbmNlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IgPSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnJldHVybjtcbiAgICB9XG59XG5mdW5jdGlvbiBhdHRhY2hQaW5nTGlzdGVuZXIocm9vdCwgd2FrZWFibGUsIGxhbmVzKSB7XG4gIHZhciBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZTtcbiAgaWYgKG51bGwgPT09IHBpbmdDYWNoZSkge1xuICAgIHBpbmdDYWNoZSA9IHJvb3QucGluZ0NhY2hlID0gbmV3IFBvc3NpYmx5V2Vha01hcCgpO1xuICAgIHZhciB0aHJlYWRJRHMgPSBuZXcgU2V0KCk7XG4gICAgcGluZ0NhY2hlLnNldCh3YWtlYWJsZSwgdGhyZWFkSURzKTtcbiAgfSBlbHNlXG4gICAgKHRocmVhZElEcyA9IHBpbmdDYWNoZS5nZXQod2FrZWFibGUpKSxcbiAgICAgIHZvaWQgMCA9PT0gdGhyZWFkSURzICYmXG4gICAgICAgICgodGhyZWFkSURzID0gbmV3IFNldCgpKSwgcGluZ0NhY2hlLnNldCh3YWtlYWJsZSwgdGhyZWFkSURzKSk7XG4gIHRocmVhZElEcy5oYXMobGFuZXMpIHx8XG4gICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgPSAhMCksXG4gICAgdGhyZWFkSURzLmFkZChsYW5lcyksXG4gICAgKHJvb3QgPSBwaW5nU3VzcGVuZGVkUm9vdC5iaW5kKG51bGwsIHJvb3QsIHdha2VhYmxlLCBsYW5lcykpLFxuICAgIHdha2VhYmxlLnRoZW4ocm9vdCwgcm9vdCkpO1xufVxuZnVuY3Rpb24gcGluZ1N1c3BlbmRlZFJvb3Qocm9vdCwgd2FrZWFibGUsIHBpbmdlZExhbmVzKSB7XG4gIHZhciBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZTtcbiAgbnVsbCAhPT0gcGluZ0NhY2hlICYmIHBpbmdDYWNoZS5kZWxldGUod2FrZWFibGUpO1xuICByb290LnBpbmdlZExhbmVzIHw9IHJvb3Quc3VzcGVuZGVkTGFuZXMgJiBwaW5nZWRMYW5lcztcbiAgcm9vdC53YXJtTGFuZXMgJj0gfnBpbmdlZExhbmVzO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPT09IHJvb3QgJiZcbiAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiBwaW5nZWRMYW5lcykgPT09IHBpbmdlZExhbmVzICYmXG4gICAgKDQgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgfHxcbiAgICAoMyA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNjI5MTQ1NjApID09PVxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgMzAwID4gbm93KCkgLSBnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lKVxuICAgICAgPyAwID09PSAoZXhlY3V0aW9uQ29udGV4dCAmIDIpICYmIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIDApXG4gICAgICA6ICh3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyB8PSBwaW5nZWRMYW5lcyksXG4gICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9IDApKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpO1xufVxuZnVuY3Rpb24gcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSkge1xuICAwID09PSByZXRyeUxhbmUgJiYgKHJldHJ5TGFuZSA9IGNsYWltTmV4dFJldHJ5TGFuZSgpKTtcbiAgYm91bmRhcnlGaWJlciA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xuICBudWxsICE9PSBib3VuZGFyeUZpYmVyICYmXG4gICAgKG1hcmtSb290VXBkYXRlZCQxKGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSksXG4gICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGJvdW5kYXJ5RmliZXIpKTtcbn1cbmZ1bmN0aW9uIHJldHJ5RGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkoYm91bmRhcnlGaWJlcikge1xuICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGJvdW5kYXJ5RmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICByZXRyeUxhbmUgPSAwO1xuICBudWxsICE9PSBzdXNwZW5zZVN0YXRlICYmIChyZXRyeUxhbmUgPSBzdXNwZW5zZVN0YXRlLnJldHJ5TGFuZSk7XG4gIHJldHJ5VGltZWRPdXRCb3VuZGFyeShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVJldHJ5V2FrZWFibGUoYm91bmRhcnlGaWJlciwgd2FrZWFibGUpIHtcbiAgdmFyIHJldHJ5TGFuZSA9IDA7XG4gIHN3aXRjaCAoYm91bmRhcnlGaWJlci50YWcpIHtcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIHZhciBzdXNwZW5zZVN0YXRlID0gYm91bmRhcnlGaWJlci5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gc3VzcGVuc2VTdGF0ZSAmJiAocmV0cnlMYW5lID0gc3VzcGVuc2VTdGF0ZS5yZXRyeUxhbmUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHJ5Q2FjaGUgPSBib3VuZGFyeUZpYmVyLnN0YXRlTm9kZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGUuX3JldHJ5Q2FjaGU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTQpKTtcbiAgfVxuICBudWxsICE9PSByZXRyeUNhY2hlICYmIHJldHJ5Q2FjaGUuZGVsZXRlKHdha2VhYmxlKTtcbiAgcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUNhbGxiYWNrJDEocHJpb3JpdHlMZXZlbCwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIHNjaGVkdWxlQ2FsbGJhY2skMyhwcmlvcml0eUxldmVsLCBjYWxsYmFjayk7XG59XG52YXIgZmlyc3RTY2hlZHVsZWRSb290ID0gbnVsbCxcbiAgbGFzdFNjaGVkdWxlZFJvb3QgPSBudWxsLFxuICBkaWRTY2hlZHVsZU1pY3JvdGFzayA9ICExLFxuICBtaWdodEhhdmVQZW5kaW5nU3luY1dvcmsgPSAhMSxcbiAgaXNGbHVzaGluZ1dvcmsgPSAhMSxcbiAgY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSAwO1xuZnVuY3Rpb24gZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpIHtcbiAgcm9vdCAhPT0gbGFzdFNjaGVkdWxlZFJvb3QgJiZcbiAgICBudWxsID09PSByb290Lm5leHQgJiZcbiAgICAobnVsbCA9PT0gbGFzdFNjaGVkdWxlZFJvb3RcbiAgICAgID8gKGZpcnN0U2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290ID0gcm9vdClcbiAgICAgIDogKGxhc3RTY2hlZHVsZWRSb290ID0gbGFzdFNjaGVkdWxlZFJvb3QubmV4dCA9IHJvb3QpKTtcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITA7XG4gIGRpZFNjaGVkdWxlTWljcm90YXNrIHx8XG4gICAgKChkaWRTY2hlZHVsZU1pY3JvdGFzayA9ICEwKSwgc2NoZWR1bGVJbW1lZGlhdGVSb290U2NoZWR1bGVUYXNrKCkpO1xufVxuZnVuY3Rpb24gZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoc3luY1RyYW5zaXRpb25MYW5lcywgb25seUxlZ2FjeSkge1xuICBpZiAoIWlzRmx1c2hpbmdXb3JrICYmIG1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yaykge1xuICAgIGlzRmx1c2hpbmdXb3JrID0gITA7XG4gICAgZG8ge1xuICAgICAgdmFyIGRpZFBlcmZvcm1Tb21lV29yayA9ICExO1xuICAgICAgZm9yICh2YXIgcm9vdCQxNzQgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7IG51bGwgIT09IHJvb3QkMTc0OyApIHtcbiAgICAgICAgaWYgKCFvbmx5TGVnYWN5KVxuICAgICAgICAgIGlmICgwICE9PSBzeW5jVHJhbnNpdGlvbkxhbmVzKSB7XG4gICAgICAgICAgICB2YXIgcGVuZGluZ0xhbmVzID0gcm9vdCQxNzQucGVuZGluZ0xhbmVzO1xuICAgICAgICAgICAgaWYgKDAgPT09IHBlbmRpbmdMYW5lcykgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IDA7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHN1c3BlbmRlZExhbmVzID0gcm9vdCQxNzQuc3VzcGVuZGVkTGFuZXMsXG4gICAgICAgICAgICAgICAgcGluZ2VkTGFuZXMgPSByb290JDE3NC5waW5nZWRMYW5lcztcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgICAoMSA8PCAoMzEgLSBjbHozMig0MiB8IHN5bmNUcmFuc2l0aW9uTGFuZXMpICsgMSkpIC0gMTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICY9XG4gICAgICAgICAgICAgICAgcGVuZGluZ0xhbmVzICYgfihzdXNwZW5kZWRMYW5lcyAmIH5waW5nZWRMYW5lcyk7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYgMjAxMzI2NzQxXG4gICAgICAgICAgICAgICAgICA/IChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAyMDEzMjY3NDEpIHwgMVxuICAgICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgPyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgfCAyXG4gICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDAgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgICAgICAgICAgICAoKGRpZFBlcmZvcm1Tb21lV29yayA9ICEwKSxcbiAgICAgICAgICAgICAgcGVyZm9ybVN5bmNXb3JrT25Sb290KHJvb3QkMTc0LCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpKTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBnZXROZXh0TGFuZXMoXG4gICAgICAgICAgICAgICAgcm9vdCQxNzQsXG4gICAgICAgICAgICAgICAgcm9vdCQxNzQgPT09IHdvcmtJblByb2dyZXNzUm9vdCA/IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA6IDAsXG4gICAgICAgICAgICAgICAgbnVsbCAhPT0gcm9vdCQxNzQuY2FuY2VsUGVuZGluZ0NvbW1pdCB8fFxuICAgICAgICAgICAgICAgICAgLTEgIT09IHJvb3QkMTc0LnRpbWVvdXRIYW5kbGVcbiAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgIDAgPT09IChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAzKSB8fFxuICAgICAgICAgICAgICAgIGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCQxNzQsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkgfHxcbiAgICAgICAgICAgICAgICAoKGRpZFBlcmZvcm1Tb21lV29yayA9ICEwKSxcbiAgICAgICAgICAgICAgICBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCQxNzQsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xuICAgICAgICByb290JDE3NCA9IHJvb3QkMTc0Lm5leHQ7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoZGlkUGVyZm9ybVNvbWVXb3JrKTtcbiAgICBpc0ZsdXNoaW5nV29yayA9ICExO1xuICB9XG59XG5mdW5jdGlvbiBwcm9jZXNzUm9vdFNjaGVkdWxlSW5JbW1lZGlhdGVUYXNrKCkge1xuICBwcm9jZXNzUm9vdFNjaGVkdWxlSW5NaWNyb3Rhc2soKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb290U2NoZWR1bGVJbk1pY3JvdGFzaygpIHtcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gZGlkU2NoZWR1bGVNaWNyb3Rhc2sgPSAhMTtcbiAgdmFyIHN5bmNUcmFuc2l0aW9uTGFuZXMgPSAwO1xuICAwICE9PSBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSAmJlxuICAgIChzaG91bGRBdHRlbXB0RWFnZXJUcmFuc2l0aW9uKCkgJiZcbiAgICAgIChzeW5jVHJhbnNpdGlvbkxhbmVzID0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUpLFxuICAgIChjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSA9IDApKTtcbiAgZm9yIChcbiAgICB2YXIgY3VycmVudFRpbWUgPSBub3coKSwgcHJldiA9IG51bGwsIHJvb3QgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7XG4gICAgbnVsbCAhPT0gcm9vdDtcblxuICApIHtcbiAgICB2YXIgbmV4dCA9IHJvb3QubmV4dCxcbiAgICAgIG5leHRMYW5lcyA9IHNjaGVkdWxlVGFza0ZvclJvb3REdXJpbmdNaWNyb3Rhc2socm9vdCwgY3VycmVudFRpbWUpO1xuICAgIGlmICgwID09PSBuZXh0TGFuZXMpXG4gICAgICAocm9vdC5uZXh0ID0gbnVsbCksXG4gICAgICAgIG51bGwgPT09IHByZXYgPyAoZmlyc3RTY2hlZHVsZWRSb290ID0gbmV4dCkgOiAocHJldi5uZXh0ID0gbmV4dCksXG4gICAgICAgIG51bGwgPT09IG5leHQgJiYgKGxhc3RTY2hlZHVsZWRSb290ID0gcHJldik7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoKHByZXYgPSByb290KSwgMCAhPT0gc3luY1RyYW5zaXRpb25MYW5lcyB8fCAwICE9PSAobmV4dExhbmVzICYgMykpXG4gICAgKVxuICAgICAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITA7XG4gICAgcm9vdCA9IG5leHQ7XG4gIH1cbiAgZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoc3luY1RyYW5zaXRpb25MYW5lcywgITEpO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayhyb290LCBjdXJyZW50VGltZSkge1xuICBmb3IgKFxuICAgIHZhciBzdXNwZW5kZWRMYW5lcyA9IHJvb3Quc3VzcGVuZGVkTGFuZXMsXG4gICAgICBwaW5nZWRMYW5lcyA9IHJvb3QucGluZ2VkTGFuZXMsXG4gICAgICBleHBpcmF0aW9uVGltZXMgPSByb290LmV4cGlyYXRpb25UaW1lcyxcbiAgICAgIGxhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXMgJiAtNjI5MTQ1NjE7XG4gICAgMCA8IGxhbmVzO1xuXG4gICkge1xuICAgIHZhciBpbmRleCQzID0gMzEgLSBjbHozMihsYW5lcyksXG4gICAgICBsYW5lID0gMSA8PCBpbmRleCQzLFxuICAgICAgZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZXNbaW5kZXgkM107XG4gICAgaWYgKC0xID09PSBleHBpcmF0aW9uVGltZSkge1xuICAgICAgaWYgKDAgPT09IChsYW5lICYgc3VzcGVuZGVkTGFuZXMpIHx8IDAgIT09IChsYW5lICYgcGluZ2VkTGFuZXMpKVxuICAgICAgICBleHBpcmF0aW9uVGltZXNbaW5kZXgkM10gPSBjb21wdXRlRXhwaXJhdGlvblRpbWUobGFuZSwgY3VycmVudFRpbWUpO1xuICAgIH0gZWxzZSBleHBpcmF0aW9uVGltZSA8PSBjdXJyZW50VGltZSAmJiAocm9vdC5leHBpcmVkTGFuZXMgfD0gbGFuZSk7XG4gICAgbGFuZXMgJj0gfmxhbmU7XG4gIH1cbiAgY3VycmVudFRpbWUgPSB3b3JrSW5Qcm9ncmVzc1Jvb3Q7XG4gIHN1c3BlbmRlZExhbmVzID0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIHN1c3BlbmRlZExhbmVzID0gZ2V0TmV4dExhbmVzKFxuICAgIHJvb3QsXG4gICAgcm9vdCA9PT0gY3VycmVudFRpbWUgPyBzdXNwZW5kZWRMYW5lcyA6IDAsXG4gICAgbnVsbCAhPT0gcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0IHx8IC0xICE9PSByb290LnRpbWVvdXRIYW5kbGVcbiAgKTtcbiAgcGluZ2VkTGFuZXMgPSByb290LmNhbGxiYWNrTm9kZTtcbiAgaWYgKFxuICAgIDAgPT09IHN1c3BlbmRlZExhbmVzIHx8XG4gICAgKHJvb3QgPT09IGN1cnJlbnRUaW1lICYmXG4gICAgICAoMiA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gfHxcbiAgICAgICAgOSA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pKSB8fFxuICAgIG51bGwgIT09IHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdFxuICApXG4gICAgcmV0dXJuIChcbiAgICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmXG4gICAgICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmXG4gICAgICAgIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpLFxuICAgICAgKHJvb3QuY2FsbGJhY2tOb2RlID0gbnVsbCksXG4gICAgICAocm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gMClcbiAgICApO1xuICBpZiAoXG4gICAgMCA9PT0gKHN1c3BlbmRlZExhbmVzICYgMykgfHxcbiAgICBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKHJvb3QsIHN1c3BlbmRlZExhbmVzKVxuICApIHtcbiAgICBjdXJyZW50VGltZSA9IHN1c3BlbmRlZExhbmVzICYgLXN1c3BlbmRlZExhbmVzO1xuICAgIGlmIChjdXJyZW50VGltZSA9PT0gcm9vdC5jYWxsYmFja1ByaW9yaXR5KSByZXR1cm4gY3VycmVudFRpbWU7XG4gICAgbnVsbCAhPT0gcGluZ2VkTGFuZXMgJiYgY2FuY2VsQ2FsbGJhY2skMShwaW5nZWRMYW5lcyk7XG4gICAgc3dpdGNoIChsYW5lc1RvRXZlbnRQcmlvcml0eShzdXNwZW5kZWRMYW5lcykpIHtcbiAgICAgIGNhc2UgMjpcbiAgICAgIGNhc2UgODpcbiAgICAgICAgc3VzcGVuZGVkTGFuZXMgPSBVc2VyQmxvY2tpbmdQcmlvcml0eTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDMyOlxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA9IE5vcm1hbFByaW9yaXR5JDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gSWRsZVByaW9yaXR5O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gTm9ybWFsUHJpb3JpdHkkMTtcbiAgICB9XG4gICAgcGluZ2VkTGFuZXMgPSBwZXJmb3JtV29ya09uUm9vdFZpYVNjaGVkdWxlclRhc2suYmluZChudWxsLCByb290KTtcbiAgICBzdXNwZW5kZWRMYW5lcyA9IHNjaGVkdWxlQ2FsbGJhY2skMyhzdXNwZW5kZWRMYW5lcywgcGluZ2VkTGFuZXMpO1xuICAgIHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IGN1cnJlbnRUaW1lO1xuICAgIHJvb3QuY2FsbGJhY2tOb2RlID0gc3VzcGVuZGVkTGFuZXM7XG4gICAgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICB9XG4gIG51bGwgIT09IHBpbmdlZExhbmVzICYmIG51bGwgIT09IHBpbmdlZExhbmVzICYmIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpO1xuICByb290LmNhbGxiYWNrUHJpb3JpdHkgPSAyO1xuICByb290LmNhbGxiYWNrTm9kZSA9IG51bGw7XG4gIHJldHVybiAyO1xufVxuZnVuY3Rpb24gcGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrKHJvb3QsIGRpZFRpbWVvdXQpIHtcbiAgaWYgKDAgIT09IHBlbmRpbmdFZmZlY3RzU3RhdHVzICYmIDUgIT09IHBlbmRpbmdFZmZlY3RzU3RhdHVzKVxuICAgIHJldHVybiAocm9vdC5jYWxsYmFja05vZGUgPSBudWxsKSwgKHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IDApLCBudWxsO1xuICB2YXIgb3JpZ2luYWxDYWxsYmFja05vZGUgPSByb290LmNhbGxiYWNrTm9kZTtcbiAgaWYgKGZsdXNoUGVuZGluZ0VmZmVjdHMoITApICYmIHJvb3QuY2FsbGJhY2tOb2RlICE9PSBvcmlnaW5hbENhbGxiYWNrTm9kZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgdmFyIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwID0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwID0gZ2V0TmV4dExhbmVzKFxuICAgIHJvb3QsXG4gICAgcm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ID8gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgOiAwLFxuICAgIG51bGwgIT09IHJvb3QuY2FuY2VsUGVuZGluZ0NvbW1pdCB8fCAtMSAhPT0gcm9vdC50aW1lb3V0SGFuZGxlXG4gICk7XG4gIGlmICgwID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyRqc2NvbXAkMCkgcmV0dXJuIG51bGw7XG4gIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QsIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwLCBkaWRUaW1lb3V0KTtcbiAgc2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayhyb290LCBub3coKSk7XG4gIHJldHVybiBudWxsICE9IHJvb3QuY2FsbGJhY2tOb2RlICYmIHJvb3QuY2FsbGJhY2tOb2RlID09PSBvcmlnaW5hbENhbGxiYWNrTm9kZVxuICAgID8gcGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrLmJpbmQobnVsbCwgcm9vdClcbiAgICA6IG51bGw7XG59XG5mdW5jdGlvbiBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCwgbGFuZXMpIHtcbiAgaWYgKGZsdXNoUGVuZGluZ0VmZmVjdHMoKSkgcmV0dXJuIG51bGw7XG4gIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QsIGxhbmVzLCAhMCk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUltbWVkaWF0ZVJvb3RTY2hlZHVsZVRhc2soKSB7XG4gIHNjaGVkdWxlTWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAwICE9PSAoZXhlY3V0aW9uQ29udGV4dCAmIDYpXG4gICAgICA/IHNjaGVkdWxlQ2FsbGJhY2skMyhcbiAgICAgICAgICBJbW1lZGlhdGVQcmlvcml0eSxcbiAgICAgICAgICBwcm9jZXNzUm9vdFNjaGVkdWxlSW5JbW1lZGlhdGVUYXNrXG4gICAgICAgIClcbiAgICAgIDogcHJvY2Vzc1Jvb3RTY2hlZHVsZUluTWljcm90YXNrKCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVxdWVzdFRyYW5zaXRpb25MYW5lKCkge1xuICAwID09PSBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSAmJlxuICAgIChjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSA9IGNsYWltTmV4dFRyYW5zaXRpb25MYW5lKCkpO1xuICByZXR1cm4gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmU7XG59XG5mdW5jdGlvbiBjb2VyY2VGb3JtQWN0aW9uUHJvcChhY3Rpb25Qcm9wKSB7XG4gIHJldHVybiBudWxsID09IGFjdGlvblByb3AgfHxcbiAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgYWN0aW9uUHJvcCB8fFxuICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgYWN0aW9uUHJvcFxuICAgID8gbnVsbFxuICAgIDogXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWN0aW9uUHJvcFxuICAgICAgPyBhY3Rpb25Qcm9wXG4gICAgICA6IHNhbml0aXplVVJMKFwiXCIgKyBhY3Rpb25Qcm9wKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZvcm1EYXRhV2l0aFN1Ym1pdHRlcihmb3JtLCBzdWJtaXR0ZXIpIHtcbiAgdmFyIHRlbXAgPSBzdWJtaXR0ZXIub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIHRlbXAubmFtZSA9IHN1Ym1pdHRlci5uYW1lO1xuICB0ZW1wLnZhbHVlID0gc3VibWl0dGVyLnZhbHVlO1xuICBmb3JtLmlkICYmIHRlbXAuc2V0QXR0cmlidXRlKFwiZm9ybVwiLCBmb3JtLmlkKTtcbiAgc3VibWl0dGVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRlbXAsIHN1Ym1pdHRlcik7XG4gIGZvcm0gPSBuZXcgRm9ybURhdGEoZm9ybSk7XG4gIHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0ZW1wKTtcbiAgcmV0dXJuIGZvcm07XG59XG5mdW5jdGlvbiBleHRyYWN0RXZlbnRzJDEoXG4gIGRpc3BhdGNoUXVldWUsXG4gIGRvbUV2ZW50TmFtZSxcbiAgbWF5YmVUYXJnZXRJbnN0LFxuICBuYXRpdmVFdmVudCxcbiAgbmF0aXZlRXZlbnRUYXJnZXRcbikge1xuICBpZiAoXG4gICAgXCJzdWJtaXRcIiA9PT0gZG9tRXZlbnROYW1lICYmXG4gICAgbWF5YmVUYXJnZXRJbnN0ICYmXG4gICAgbWF5YmVUYXJnZXRJbnN0LnN0YXRlTm9kZSA9PT0gbmF0aXZlRXZlbnRUYXJnZXRcbiAgKSB7XG4gICAgdmFyIGFjdGlvbiA9IGNvZXJjZUZvcm1BY3Rpb25Qcm9wKFxuICAgICAgICAobmF0aXZlRXZlbnRUYXJnZXRbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbCkuYWN0aW9uXG4gICAgICApLFxuICAgICAgc3VibWl0dGVyID0gbmF0aXZlRXZlbnQuc3VibWl0dGVyO1xuICAgIHN1Ym1pdHRlciAmJlxuICAgICAgKChkb21FdmVudE5hbWUgPSAoZG9tRXZlbnROYW1lID0gc3VibWl0dGVyW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGwpXG4gICAgICAgID8gY29lcmNlRm9ybUFjdGlvblByb3AoZG9tRXZlbnROYW1lLmZvcm1BY3Rpb24pXG4gICAgICAgIDogc3VibWl0dGVyLmdldEF0dHJpYnV0ZShcImZvcm1BY3Rpb25cIikpLFxuICAgICAgbnVsbCAhPT0gZG9tRXZlbnROYW1lICYmICgoYWN0aW9uID0gZG9tRXZlbnROYW1lKSwgKHN1Ym1pdHRlciA9IG51bGwpKSk7XG4gICAgdmFyIGV2ZW50ID0gbmV3IFN5bnRoZXRpY0V2ZW50KFxuICAgICAgXCJhY3Rpb25cIixcbiAgICAgIFwiYWN0aW9uXCIsXG4gICAgICBudWxsLFxuICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICk7XG4gICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHtcbiAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgIGxpc3RlbmVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgbGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgIGlmICgwICE9PSBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSkge1xuICAgICAgICAgICAgICAgIHZhciBmb3JtRGF0YSA9IHN1Ym1pdHRlclxuICAgICAgICAgICAgICAgICAgPyBjcmVhdGVGb3JtRGF0YVdpdGhTdWJtaXR0ZXIobmF0aXZlRXZlbnRUYXJnZXQsIHN1Ym1pdHRlcilcbiAgICAgICAgICAgICAgICAgIDogbmV3IEZvcm1EYXRhKG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBzdGFydEhvc3RUcmFuc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgbWF5YmVUYXJnZXRJbnN0LFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nOiAhMCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogbmF0aXZlRXZlbnRUYXJnZXQubWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBmb3JtRGF0YVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY3Rpb24gJiZcbiAgICAgICAgICAgICAgICAoZXZlbnQucHJldmVudERlZmF1bHQoKSxcbiAgICAgICAgICAgICAgICAoZm9ybURhdGEgPSBzdWJtaXR0ZXJcbiAgICAgICAgICAgICAgICAgID8gY3JlYXRlRm9ybURhdGFXaXRoU3VibWl0dGVyKG5hdGl2ZUV2ZW50VGFyZ2V0LCBzdWJtaXR0ZXIpXG4gICAgICAgICAgICAgICAgICA6IG5ldyBGb3JtRGF0YShuYXRpdmVFdmVudFRhcmdldCkpLFxuICAgICAgICAgICAgICAgIHN0YXJ0SG9zdFRyYW5zaXRpb24oXG4gICAgICAgICAgICAgICAgICBtYXliZVRhcmdldEluc3QsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmc6ICEwLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBuYXRpdmVFdmVudFRhcmdldC5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgZm9ybURhdGFcbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGN1cnJlbnRUYXJnZXQ6IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KTtcbiAgfVxufVxuZm9yIChcbiAgdmFyIGkkanNjb21wJGlubGluZV8xNTI4ID0gMDtcbiAgaSRqc2NvbXAkaW5saW5lXzE1MjggPCBzaW1wbGVFdmVudFBsdWdpbkV2ZW50cy5sZW5ndGg7XG4gIGkkanNjb21wJGlubGluZV8xNTI4Kytcbikge1xuICB2YXIgZXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTUyOSA9XG4gICAgICBzaW1wbGVFdmVudFBsdWdpbkV2ZW50c1tpJGpzY29tcCRpbmxpbmVfMTUyOF0sXG4gICAgZG9tRXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTUzMCA9XG4gICAgICBldmVudE5hbWUkanNjb21wJGlubGluZV8xNTI5LnRvTG93ZXJDYXNlKCksXG4gICAgY2FwaXRhbGl6ZWRFdmVudCRqc2NvbXAkaW5saW5lXzE1MzEgPVxuICAgICAgZXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTUyOVswXS50b1VwcGVyQ2FzZSgpICtcbiAgICAgIGV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE1Mjkuc2xpY2UoMSk7XG4gIHJlZ2lzdGVyU2ltcGxlRXZlbnQoXG4gICAgZG9tRXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTUzMCxcbiAgICBcIm9uXCIgKyBjYXBpdGFsaXplZEV2ZW50JGpzY29tcCRpbmxpbmVfMTUzMVxuICApO1xufVxucmVnaXN0ZXJTaW1wbGVFdmVudChBTklNQVRJT05fRU5ELCBcIm9uQW5pbWF0aW9uRW5kXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChBTklNQVRJT05fSVRFUkFUSU9OLCBcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChBTklNQVRJT05fU1RBUlQsIFwib25BbmltYXRpb25TdGFydFwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoXCJkYmxjbGlja1wiLCBcIm9uRG91YmxlQ2xpY2tcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFwiZm9jdXNpblwiLCBcIm9uRm9jdXNcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFwiZm9jdXNvdXRcIiwgXCJvbkJsdXJcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFRSQU5TSVRJT05fUlVOLCBcIm9uVHJhbnNpdGlvblJ1blwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoVFJBTlNJVElPTl9TVEFSVCwgXCJvblRyYW5zaXRpb25TdGFydFwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoVFJBTlNJVElPTl9DQU5DRUwsIFwib25UcmFuc2l0aW9uQ2FuY2VsXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChUUkFOU0lUSU9OX0VORCwgXCJvblRyYW5zaXRpb25FbmRcIik7XG5yZWdpc3RlckRpcmVjdEV2ZW50KFwib25Nb3VzZUVudGVyXCIsIFtcIm1vdXNlb3V0XCIsIFwibW91c2VvdmVyXCJdKTtcbnJlZ2lzdGVyRGlyZWN0RXZlbnQoXCJvbk1vdXNlTGVhdmVcIiwgW1wibW91c2VvdXRcIiwgXCJtb3VzZW92ZXJcIl0pO1xucmVnaXN0ZXJEaXJlY3RFdmVudChcIm9uUG9pbnRlckVudGVyXCIsIFtcInBvaW50ZXJvdXRcIiwgXCJwb2ludGVyb3ZlclwiXSk7XG5yZWdpc3RlckRpcmVjdEV2ZW50KFwib25Qb2ludGVyTGVhdmVcIiwgW1wicG9pbnRlcm91dFwiLCBcInBvaW50ZXJvdmVyXCJdKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvbkNoYW5nZVwiLFxuICBcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpXG4pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uU2VsZWN0XCIsXG4gIFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXG4gICAgXCIgXCJcbiAgKVxuKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcIm9uQmVmb3JlSW5wdXRcIiwgW1xuICBcImNvbXBvc2l0aW9uZW5kXCIsXG4gIFwia2V5cHJlc3NcIixcbiAgXCJ0ZXh0SW5wdXRcIixcbiAgXCJwYXN0ZVwiXG5dKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvbkNvbXBvc2l0aW9uRW5kXCIsXG4gIFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIilcbik7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25Db21wb3NpdGlvblN0YXJ0XCIsXG4gIFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKVxuKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXG4gIFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIilcbik7XG52YXIgbWVkaWFFdmVudFR5cGVzID1cbiAgICBcImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXG4gICAgICBcIiBcIlxuICAgICksXG4gIG5vbkRlbGVnYXRlZEV2ZW50cyA9IG5ldyBTZXQoXG4gICAgXCJiZWZvcmV0b2dnbGUgY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgc2Nyb2xsZW5kIHRvZ2dsZVwiXG4gICAgICAuc3BsaXQoXCIgXCIpXG4gICAgICAuY29uY2F0KG1lZGlhRXZlbnRUeXBlcylcbiAgKTtcbmZ1bmN0aW9uIHByb2Nlc3NEaXNwYXRjaFF1ZXVlKGRpc3BhdGNoUXVldWUsIGV2ZW50U3lzdGVtRmxhZ3MpIHtcbiAgZXZlbnRTeXN0ZW1GbGFncyA9IDAgIT09IChldmVudFN5c3RlbUZsYWdzICYgNCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hRdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBfZGlzcGF0Y2hRdWV1ZSRpID0gZGlzcGF0Y2hRdWV1ZVtpXSxcbiAgICAgIGV2ZW50ID0gX2Rpc3BhdGNoUXVldWUkaS5ldmVudDtcbiAgICBfZGlzcGF0Y2hRdWV1ZSRpID0gX2Rpc3BhdGNoUXVldWUkaS5saXN0ZW5lcnM7XG4gICAgYToge1xuICAgICAgdmFyIHByZXZpb3VzSW5zdGFuY2UgPSB2b2lkIDA7XG4gICAgICBpZiAoZXZlbnRTeXN0ZW1GbGFncylcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgaSRqc2NvbXAkMCA9IF9kaXNwYXRjaFF1ZXVlJGkubGVuZ3RoIC0gMTtcbiAgICAgICAgICAwIDw9IGkkanNjb21wJDA7XG4gICAgICAgICAgaSRqc2NvbXAkMC0tXG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IF9kaXNwYXRjaFF1ZXVlJGlbaSRqc2NvbXAkMF0sXG4gICAgICAgICAgICBpbnN0YW5jZSA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmluc3RhbmNlLFxuICAgICAgICAgICAgY3VycmVudFRhcmdldCA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgX2Rpc3BhdGNoTGlzdGVuZXJzJGkgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5saXN0ZW5lcjtcbiAgICAgICAgICBpZiAoaW5zdGFuY2UgIT09IHByZXZpb3VzSW5zdGFuY2UgJiYgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgcHJldmlvdXNJbnN0YW5jZSA9IF9kaXNwYXRjaExpc3RlbmVycyRpO1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmV2aW91c0luc3RhbmNlKGV2ZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmVwb3J0R2xvYmFsRXJyb3IoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgICBwcmV2aW91c0luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgICAgZm9yIChcbiAgICAgICAgICBpJGpzY29tcCQwID0gMDtcbiAgICAgICAgICBpJGpzY29tcCQwIDwgX2Rpc3BhdGNoUXVldWUkaS5sZW5ndGg7XG4gICAgICAgICAgaSRqc2NvbXAkMCsrXG4gICAgICAgICkge1xuICAgICAgICAgIF9kaXNwYXRjaExpc3RlbmVycyRpID0gX2Rpc3BhdGNoUXVldWUkaVtpJGpzY29tcCQwXTtcbiAgICAgICAgICBpbnN0YW5jZSA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmluc3RhbmNlO1xuICAgICAgICAgIGN1cnJlbnRUYXJnZXQgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5jdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIF9kaXNwYXRjaExpc3RlbmVycyRpID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkubGlzdGVuZXI7XG4gICAgICAgICAgaWYgKGluc3RhbmNlICE9PSBwcmV2aW91c0luc3RhbmNlICYmIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpXG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaTtcbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gY3VycmVudFRhcmdldDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJldmlvdXNJbnN0YW5jZShldmVudCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgICAgICAgcHJldmlvdXNJbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KGRvbUV2ZW50TmFtZSwgdGFyZ2V0RWxlbWVudCkge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gdGFyZ2V0RWxlbWVudFtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldO1xuICB2b2lkIDAgPT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB0YXJnZXRFbGVtZW50W2ludGVybmFsRXZlbnRIYW5kbGVyc0tleV0gPVxuICAgICAgbmV3IFNldCgpKTtcbiAgdmFyIGxpc3RlbmVyU2V0S2V5ID0gZG9tRXZlbnROYW1lICsgXCJfX2J1YmJsZVwiO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQuaGFzKGxpc3RlbmVyU2V0S2V5KSB8fFxuICAgIChhZGRUcmFwcGVkRXZlbnRMaXN0ZW5lcih0YXJnZXRFbGVtZW50LCBkb21FdmVudE5hbWUsIDIsICExKSxcbiAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQuYWRkKGxpc3RlbmVyU2V0S2V5KSk7XG59XG5mdW5jdGlvbiBsaXN0ZW5Ub05hdGl2ZUV2ZW50KGRvbUV2ZW50TmFtZSwgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lciwgdGFyZ2V0KSB7XG4gIHZhciBldmVudFN5c3RlbUZsYWdzID0gMDtcbiAgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lciAmJiAoZXZlbnRTeXN0ZW1GbGFncyB8PSA0KTtcbiAgYWRkVHJhcHBlZEV2ZW50TGlzdGVuZXIoXG4gICAgdGFyZ2V0LFxuICAgIGRvbUV2ZW50TmFtZSxcbiAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXJcbiAgKTtcbn1cbnZhciBsaXN0ZW5pbmdNYXJrZXIgPSBcIl9yZWFjdExpc3RlbmluZ1wiICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG5mdW5jdGlvbiBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyhyb290Q29udGFpbmVyRWxlbWVudCkge1xuICBpZiAoIXJvb3RDb250YWluZXJFbGVtZW50W2xpc3RlbmluZ01hcmtlcl0pIHtcbiAgICByb290Q29udGFpbmVyRWxlbWVudFtsaXN0ZW5pbmdNYXJrZXJdID0gITA7XG4gICAgYWxsTmF0aXZlRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGRvbUV2ZW50TmFtZSkge1xuICAgICAgXCJzZWxlY3Rpb25jaGFuZ2VcIiAhPT0gZG9tRXZlbnROYW1lICYmXG4gICAgICAgIChub25EZWxlZ2F0ZWRFdmVudHMuaGFzKGRvbUV2ZW50TmFtZSkgfHxcbiAgICAgICAgICBsaXN0ZW5Ub05hdGl2ZUV2ZW50KGRvbUV2ZW50TmFtZSwgITEsIHJvb3RDb250YWluZXJFbGVtZW50KSxcbiAgICAgICAgbGlzdGVuVG9OYXRpdmVFdmVudChkb21FdmVudE5hbWUsICEwLCByb290Q29udGFpbmVyRWxlbWVudCkpO1xuICAgIH0pO1xuICAgIHZhciBvd25lckRvY3VtZW50ID1cbiAgICAgIDkgPT09IHJvb3RDb250YWluZXJFbGVtZW50Lm5vZGVUeXBlXG4gICAgICAgID8gcm9vdENvbnRhaW5lckVsZW1lbnRcbiAgICAgICAgOiByb290Q29udGFpbmVyRWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgIG51bGwgPT09IG93bmVyRG9jdW1lbnQgfHxcbiAgICAgIG93bmVyRG9jdW1lbnRbbGlzdGVuaW5nTWFya2VyXSB8fFxuICAgICAgKChvd25lckRvY3VtZW50W2xpc3RlbmluZ01hcmtlcl0gPSAhMCksXG4gICAgICBsaXN0ZW5Ub05hdGl2ZUV2ZW50KFwic2VsZWN0aW9uY2hhbmdlXCIsICExLCBvd25lckRvY3VtZW50KSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFRyYXBwZWRFdmVudExpc3RlbmVyKFxuICB0YXJnZXRDb250YWluZXIsXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lclxuKSB7XG4gIHN3aXRjaCAoZ2V0RXZlbnRQcmlvcml0eShkb21FdmVudE5hbWUpKSB7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIGxpc3RlbmVyV3JhcHBlciA9IGRpc3BhdGNoRGlzY3JldGVFdmVudDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgODpcbiAgICAgIGxpc3RlbmVyV3JhcHBlciA9IGRpc3BhdGNoQ29udGludW91c0V2ZW50O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGxpc3RlbmVyV3JhcHBlciA9IGRpc3BhdGNoRXZlbnQ7XG4gIH1cbiAgZXZlbnRTeXN0ZW1GbGFncyA9IGxpc3RlbmVyV3JhcHBlci5iaW5kKFxuICAgIG51bGwsXG4gICAgZG9tRXZlbnROYW1lLFxuICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgdGFyZ2V0Q29udGFpbmVyXG4gICk7XG4gIGxpc3RlbmVyV3JhcHBlciA9IHZvaWQgMDtcbiAgIXBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkIHx8XG4gICAgKFwidG91Y2hzdGFydFwiICE9PSBkb21FdmVudE5hbWUgJiZcbiAgICAgIFwidG91Y2htb3ZlXCIgIT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgXCJ3aGVlbFwiICE9PSBkb21FdmVudE5hbWUpIHx8XG4gICAgKGxpc3RlbmVyV3JhcHBlciA9ICEwKTtcbiAgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lclxuICAgID8gdm9pZCAwICE9PSBsaXN0ZW5lcldyYXBwZXJcbiAgICAgID8gdGFyZ2V0Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB7XG4gICAgICAgICAgY2FwdHVyZTogITAsXG4gICAgICAgICAgcGFzc2l2ZTogbGlzdGVuZXJXcmFwcGVyXG4gICAgICAgIH0pXG4gICAgICA6IHRhcmdldENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgITApXG4gICAgOiB2b2lkIDAgIT09IGxpc3RlbmVyV3JhcHBlclxuICAgICAgPyB0YXJnZXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIHtcbiAgICAgICAgICBwYXNzaXZlOiBsaXN0ZW5lcldyYXBwZXJcbiAgICAgICAgfSlcbiAgICAgIDogdGFyZ2V0Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCAhMSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgbmF0aXZlRXZlbnQsXG4gIHRhcmdldEluc3QkanNjb21wJDAsXG4gIHRhcmdldENvbnRhaW5lclxuKSB7XG4gIHZhciBhbmNlc3Rvckluc3QgPSB0YXJnZXRJbnN0JGpzY29tcCQwO1xuICBpZiAoXG4gICAgMCA9PT0gKGV2ZW50U3lzdGVtRmxhZ3MgJiAxKSAmJlxuICAgIDAgPT09IChldmVudFN5c3RlbUZsYWdzICYgMikgJiZcbiAgICBudWxsICE9PSB0YXJnZXRJbnN0JGpzY29tcCQwXG4gIClcbiAgICBhOiBmb3IgKDs7KSB7XG4gICAgICBpZiAobnVsbCA9PT0gdGFyZ2V0SW5zdCRqc2NvbXAkMCkgcmV0dXJuO1xuICAgICAgdmFyIG5vZGVUYWcgPSB0YXJnZXRJbnN0JGpzY29tcCQwLnRhZztcbiAgICAgIGlmICgzID09PSBub2RlVGFnIHx8IDQgPT09IG5vZGVUYWcpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRhcmdldEluc3QkanNjb21wJDAuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgIGlmIChjb250YWluZXIgPT09IHRhcmdldENvbnRhaW5lcikgYnJlYWs7XG4gICAgICAgIGlmICg0ID09PSBub2RlVGFnKVxuICAgICAgICAgIGZvciAobm9kZVRhZyA9IHRhcmdldEluc3QkanNjb21wJDAucmV0dXJuOyBudWxsICE9PSBub2RlVGFnOyApIHtcbiAgICAgICAgICAgIHZhciBncmFuZFRhZyA9IG5vZGVUYWcudGFnO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoMyA9PT0gZ3JhbmRUYWcgfHwgNCA9PT0gZ3JhbmRUYWcpICYmXG4gICAgICAgICAgICAgIG5vZGVUYWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gPT09IHRhcmdldENvbnRhaW5lclxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBub2RlVGFnID0gbm9kZVRhZy5yZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICBmb3IgKDsgbnVsbCAhPT0gY29udGFpbmVyOyApIHtcbiAgICAgICAgICBub2RlVGFnID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUoY29udGFpbmVyKTtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gbm9kZVRhZykgcmV0dXJuO1xuICAgICAgICAgIGdyYW5kVGFnID0gbm9kZVRhZy50YWc7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgNSA9PT0gZ3JhbmRUYWcgfHxcbiAgICAgICAgICAgIDYgPT09IGdyYW5kVGFnIHx8XG4gICAgICAgICAgICAyNiA9PT0gZ3JhbmRUYWcgfHxcbiAgICAgICAgICAgIDI3ID09PSBncmFuZFRhZ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGFyZ2V0SW5zdCRqc2NvbXAkMCA9IGFuY2VzdG9ySW5zdCA9IG5vZGVUYWc7XG4gICAgICAgICAgICBjb250aW51ZSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGFyZ2V0SW5zdCRqc2NvbXAkMCA9IHRhcmdldEluc3QkanNjb21wJDAucmV0dXJuO1xuICAgIH1cbiAgYmF0Y2hlZFVwZGF0ZXMkMShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRhcmdldEluc3QgPSBhbmNlc3Rvckluc3QsXG4gICAgICBuYXRpdmVFdmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSxcbiAgICAgIGRpc3BhdGNoUXVldWUgPSBbXTtcbiAgICBhOiB7XG4gICAgICB2YXIgcmVhY3ROYW1lID0gdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMuZ2V0KGRvbUV2ZW50TmFtZSk7XG4gICAgICBpZiAodm9pZCAwICE9PSByZWFjdE5hbWUpIHtcbiAgICAgICAgdmFyIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0V2ZW50LFxuICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gZG9tRXZlbnROYW1lO1xuICAgICAgICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgICAgICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgICAgICAgICAgaWYgKDAgPT09IGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpKSBicmVhayBhO1xuICAgICAgICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICAgICAgY2FzZSBcImtleXVwXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gXCJmb2N1c1wiO1xuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUgPSBcImJsdXJcIjtcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYmVmb3JlYmx1clwiOlxuICAgICAgICAgIGNhc2UgXCJhZnRlcmJsdXJcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiY2xpY2tcIjpcbiAgICAgICAgICAgIGlmICgyID09PSBuYXRpdmVFdmVudC5idXR0b24pIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSBcImF1eGNsaWNrXCI6XG4gICAgICAgICAgY2FzZSBcImRibGNsaWNrXCI6XG4gICAgICAgICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2V1cFwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiY29udGV4dG1lbnVcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZHJhZ1wiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZXhpdFwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ292ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ3N0YXJ0XCI6XG4gICAgICAgICAgY2FzZSBcImRyb3BcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ0b3VjaGNhbmNlbFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaGVuZFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQU5JTUFUSU9OX0VORDpcbiAgICAgICAgICBjYXNlIEFOSU1BVElPTl9JVEVSQVRJT046XG4gICAgICAgICAgY2FzZSBBTklNQVRJT05fU1RBUlQ6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNBbmltYXRpb25FdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgVFJBTlNJVElPTl9FTkQ6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgICAgY2FzZSBcInNjcm9sbGVuZFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVUlFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ3aGVlbFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjb3B5XCI6XG4gICAgICAgICAgY2FzZSBcImN1dFwiOlxuICAgICAgICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgICAgICBjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJjYW5jZWxcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcmRvd25cIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm91dFwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVydXBcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1BvaW50ZXJFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ0b2dnbGVcIjpcbiAgICAgICAgICBjYXNlIFwiYmVmb3JldG9nZ2xlXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUb2dnbGVFdmVudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5DYXB0dXJlUGhhc2UgPSAwICE9PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDQpLFxuICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICFpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgKFwic2Nyb2xsXCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcInNjcm9sbGVuZFwiID09PSBkb21FdmVudE5hbWUpLFxuICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gaW5DYXB0dXJlUGhhc2VcbiAgICAgICAgICAgID8gbnVsbCAhPT0gcmVhY3ROYW1lXG4gICAgICAgICAgICAgID8gcmVhY3ROYW1lICsgXCJDYXB0dXJlXCJcbiAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICA6IHJlYWN0TmFtZTtcbiAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBbXTtcbiAgICAgICAgZm9yIChcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0YXJnZXRJbnN0LCBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICBudWxsICE9PSBpbnN0YW5jZTtcblxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgX2luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSBfaW5zdGFuY2Uuc3RhdGVOb2RlO1xuICAgICAgICAgIF9pbnN0YW5jZSA9IF9pbnN0YW5jZS50YWc7XG4gICAgICAgICAgKDUgIT09IF9pbnN0YW5jZSAmJiAyNiAhPT0gX2luc3RhbmNlICYmIDI3ICE9PSBfaW5zdGFuY2UpIHx8XG4gICAgICAgICAgICBudWxsID09PSBsYXN0SG9zdENvbXBvbmVudCB8fFxuICAgICAgICAgICAgbnVsbCA9PT0gcmVhY3RFdmVudE5hbWUgfHxcbiAgICAgICAgICAgICgoX2luc3RhbmNlID0gZ2V0TGlzdGVuZXIoaW5zdGFuY2UsIHJlYWN0RXZlbnROYW1lKSksXG4gICAgICAgICAgICBudWxsICE9IF9pbnN0YW5jZSAmJlxuICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZS5wdXNoKFxuICAgICAgICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIoaW5zdGFuY2UsIF9pbnN0YW5jZSwgbGFzdEhvc3RDb21wb25lbnQpXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgIGlmIChhY2N1bXVsYXRlVGFyZ2V0T25seSkgYnJlYWs7XG4gICAgICAgICAgaW5zdGFuY2UgPSBpbnN0YW5jZS5yZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgMCA8IGluQ2FwdHVyZVBoYXNlLmxlbmd0aCAmJlxuICAgICAgICAgICgocmVhY3ROYW1lID0gbmV3IFN5bnRoZXRpY0V2ZW50Q3RvcihcbiAgICAgICAgICAgIHJlYWN0TmFtZSxcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICApKSxcbiAgICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogcmVhY3ROYW1lLCBsaXN0ZW5lcnM6IGluQ2FwdHVyZVBoYXNlIH0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKDAgPT09IChldmVudFN5c3RlbUZsYWdzICYgNykpIHtcbiAgICAgIGE6IHtcbiAgICAgICAgcmVhY3ROYW1lID1cbiAgICAgICAgICBcIm1vdXNlb3ZlclwiID09PSBkb21FdmVudE5hbWUgfHwgXCJwb2ludGVyb3ZlclwiID09PSBkb21FdmVudE5hbWU7XG4gICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9XG4gICAgICAgICAgXCJtb3VzZW91dFwiID09PSBkb21FdmVudE5hbWUgfHwgXCJwb2ludGVyb3V0XCIgPT09IGRvbUV2ZW50TmFtZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHJlYWN0TmFtZSAmJlxuICAgICAgICAgIG5hdGl2ZUV2ZW50ICE9PSBjdXJyZW50UmVwbGF5aW5nRXZlbnQgJiZcbiAgICAgICAgICAocmVhY3RFdmVudFR5cGUgPVxuICAgICAgICAgICAgbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudCkgJiZcbiAgICAgICAgICAoZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVhY3RFdmVudFR5cGUpIHx8XG4gICAgICAgICAgICByZWFjdEV2ZW50VHlwZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSlcbiAgICAgICAgKVxuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIGlmIChTeW50aGV0aWNFdmVudEN0b3IgfHwgcmVhY3ROYW1lKSB7XG4gICAgICAgICAgcmVhY3ROYW1lID1cbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICAgICAgPyBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgICA6IChyZWFjdE5hbWUgPSBuYXRpdmVFdmVudFRhcmdldC5vd25lckRvY3VtZW50KVxuICAgICAgICAgICAgICAgID8gcmVhY3ROYW1lLmRlZmF1bHRWaWV3IHx8IHJlYWN0TmFtZS5wYXJlbnRXaW5kb3dcbiAgICAgICAgICAgICAgICA6IHdpbmRvdztcbiAgICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICgocmVhY3RFdmVudFR5cGUgPVxuICAgICAgICAgICAgICAgIG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQudG9FbGVtZW50KSxcbiAgICAgICAgICAgICAgKFN5bnRoZXRpY0V2ZW50Q3RvciA9IHRhcmdldEluc3QpLFxuICAgICAgICAgICAgICAocmVhY3RFdmVudFR5cGUgPSByZWFjdEV2ZW50VHlwZVxuICAgICAgICAgICAgICAgID8gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVhY3RFdmVudFR5cGUpXG4gICAgICAgICAgICAgICAgOiBudWxsKSxcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcmVhY3RFdmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgICAoKGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICAgICAgIGdldE5lYXJlc3RNb3VudGVkRmliZXIocmVhY3RFdmVudFR5cGUpKSxcbiAgICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSByZWFjdEV2ZW50VHlwZS50YWcpLFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlICE9PSBhY2N1bXVsYXRlVGFyZ2V0T25seSB8fFxuICAgICAgICAgICAgICAgICAgKDUgIT09IGluQ2FwdHVyZVBoYXNlICYmXG4gICAgICAgICAgICAgICAgICAgIDI3ICE9PSBpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgICAgICAgICA2ICE9PSBpbkNhcHR1cmVQaGFzZSkpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIChTeW50aGV0aWNFdmVudEN0b3IgPSBudWxsKSwgKHJlYWN0RXZlbnRUeXBlID0gdGFyZ2V0SW5zdCk7XG4gICAgICAgICAgaWYgKFN5bnRoZXRpY0V2ZW50Q3RvciAhPT0gcmVhY3RFdmVudFR5cGUpIHtcbiAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgICAgICAgICAgIF9pbnN0YW5jZSA9IFwib25Nb3VzZUxlYXZlXCI7XG4gICAgICAgICAgICByZWFjdEV2ZW50TmFtZSA9IFwib25Nb3VzZUVudGVyXCI7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IFwibW91c2VcIjtcbiAgICAgICAgICAgIGlmIChcInBvaW50ZXJvdXRcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwicG9pbnRlcm92ZXJcIiA9PT0gZG9tRXZlbnROYW1lKVxuICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSBTeW50aGV0aWNQb2ludGVyRXZlbnQpLFxuICAgICAgICAgICAgICAgIChfaW5zdGFuY2UgPSBcIm9uUG9pbnRlckxlYXZlXCIpLFxuICAgICAgICAgICAgICAgIChyZWFjdEV2ZW50TmFtZSA9IFwib25Qb2ludGVyRW50ZXJcIiksXG4gICAgICAgICAgICAgICAgKGluc3RhbmNlID0gXCJwb2ludGVyXCIpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHkgPVxuICAgICAgICAgICAgICBudWxsID09IFN5bnRoZXRpY0V2ZW50Q3RvclxuICAgICAgICAgICAgICAgID8gcmVhY3ROYW1lXG4gICAgICAgICAgICAgICAgOiBnZXROb2RlRnJvbUluc3RhbmNlKFN5bnRoZXRpY0V2ZW50Q3Rvcik7XG4gICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCA9XG4gICAgICAgICAgICAgIG51bGwgPT0gcmVhY3RFdmVudFR5cGVcbiAgICAgICAgICAgICAgICA/IHJlYWN0TmFtZVxuICAgICAgICAgICAgICAgIDogZ2V0Tm9kZUZyb21JbnN0YW5jZShyZWFjdEV2ZW50VHlwZSk7XG4gICAgICAgICAgICByZWFjdE5hbWUgPSBuZXcgaW5DYXB0dXJlUGhhc2UoXG4gICAgICAgICAgICAgIF9pbnN0YW5jZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2UgKyBcImxlYXZlXCIsXG4gICAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvcixcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmVhY3ROYW1lLnRhcmdldCA9IGFjY3VtdWxhdGVUYXJnZXRPbmx5O1xuICAgICAgICAgICAgcmVhY3ROYW1lLnJlbGF0ZWRUYXJnZXQgPSBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICAgIF9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShuYXRpdmVFdmVudFRhcmdldCkgPT09IHRhcmdldEluc3QgJiZcbiAgICAgICAgICAgICAgKChpbkNhcHR1cmVQaGFzZSA9IG5ldyBpbkNhcHR1cmVQaGFzZShcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSArIFwiZW50ZXJcIixcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlLnRhcmdldCA9IGxhc3RIb3N0Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlLnJlbGF0ZWRUYXJnZXQgPSBhY2N1bXVsYXRlVGFyZ2V0T25seSksXG4gICAgICAgICAgICAgIChfaW5zdGFuY2UgPSBpbkNhcHR1cmVQaGFzZSkpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZVRhcmdldE9ubHkgPSBfaW5zdGFuY2U7XG4gICAgICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yICYmIHJlYWN0RXZlbnRUeXBlKVxuICAgICAgICAgICAgICBiOiB7XG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBTeW50aGV0aWNFdmVudEN0b3I7XG4gICAgICAgICAgICAgICAgcmVhY3RFdmVudE5hbWUgPSByZWFjdEV2ZW50VHlwZTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IDA7XG4gICAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gaW5DYXB0dXJlUGhhc2U7XG4gICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudDtcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gZ2V0UGFyZW50KGxhc3RIb3N0Q29tcG9uZW50KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGluc3RhbmNlKys7XG4gICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICBfaW5zdGFuY2UgPSByZWFjdEV2ZW50TmFtZTtcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgIF9pbnN0YW5jZSA9IGdldFBhcmVudChfaW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQrKztcbiAgICAgICAgICAgICAgICBmb3IgKDsgMCA8IGluc3RhbmNlIC0gbGFzdEhvc3RDb21wb25lbnQ7IClcbiAgICAgICAgICAgICAgICAgIChpbkNhcHR1cmVQaGFzZSA9IGdldFBhcmVudChpbkNhcHR1cmVQaGFzZSkpLCBpbnN0YW5jZS0tO1xuICAgICAgICAgICAgICAgIGZvciAoOyAwIDwgbGFzdEhvc3RDb21wb25lbnQgLSBpbnN0YW5jZTsgKVxuICAgICAgICAgICAgICAgICAgKHJlYWN0RXZlbnROYW1lID0gZ2V0UGFyZW50KHJlYWN0RXZlbnROYW1lKSksXG4gICAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50LS07XG4gICAgICAgICAgICAgICAgZm9yICg7IGluc3RhbmNlLS07ICkge1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9PT0gcmVhY3RFdmVudE5hbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgKG51bGwgIT09IHJlYWN0RXZlbnROYW1lICYmXG4gICAgICAgICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPT09IHJlYWN0RXZlbnROYW1lLmFsdGVybmF0ZSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gZ2V0UGFyZW50KGluQ2FwdHVyZVBoYXNlKTtcbiAgICAgICAgICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gZ2V0UGFyZW50KHJlYWN0RXZlbnROYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGluQ2FwdHVyZVBoYXNlID0gbnVsbDtcbiAgICAgICAgICAgIG51bGwgIT09IFN5bnRoZXRpY0V2ZW50Q3RvciAmJlxuICAgICAgICAgICAgICBhY2N1bXVsYXRlRW50ZXJMZWF2ZUxpc3RlbmVyc0ZvckV2ZW50KFxuICAgICAgICAgICAgICAgIGRpc3BhdGNoUXVldWUsXG4gICAgICAgICAgICAgICAgcmVhY3ROYW1lLFxuICAgICAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvcixcbiAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSxcbiAgICAgICAgICAgICAgICAhMVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgbnVsbCAhPT0gcmVhY3RFdmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gYWNjdW11bGF0ZVRhcmdldE9ubHkgJiZcbiAgICAgICAgICAgICAgYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5LFxuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlLFxuICAgICAgICAgICAgICAgICEwXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhOiB7XG4gICAgICAgIHJlYWN0TmFtZSA9IHRhcmdldEluc3QgPyBnZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpIDogd2luZG93O1xuICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPVxuICAgICAgICAgIHJlYWN0TmFtZS5ub2RlTmFtZSAmJiByZWFjdE5hbWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwic2VsZWN0XCIgPT09IFN5bnRoZXRpY0V2ZW50Q3RvciB8fFxuICAgICAgICAgIChcImlucHV0XCIgPT09IFN5bnRoZXRpY0V2ZW50Q3RvciAmJiBcImZpbGVcIiA9PT0gcmVhY3ROYW1lLnR5cGUpXG4gICAgICAgIClcbiAgICAgICAgICB2YXIgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQ7XG4gICAgICAgIGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudChyZWFjdE5hbWUpKVxuICAgICAgICAgIGlmIChpc0lucHV0RXZlbnRTdXBwb3J0ZWQpXG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQ7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGw7XG4gICAgICAgICAgICB2YXIgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgIChTeW50aGV0aWNFdmVudEN0b3IgPSByZWFjdE5hbWUubm9kZU5hbWUpLFxuICAgICAgICAgICAgIVN5bnRoZXRpY0V2ZW50Q3RvciB8fFxuICAgICAgICAgICAgXCJpbnB1dFwiICE9PSBTeW50aGV0aWNFdmVudEN0b3IudG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgICAgKFwiY2hlY2tib3hcIiAhPT0gcmVhY3ROYW1lLnR5cGUgJiYgXCJyYWRpb1wiICE9PSByZWFjdE5hbWUudHlwZSlcbiAgICAgICAgICAgICAgPyB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgICAgICAgaXNDdXN0b21FbGVtZW50KHRhcmdldEluc3QuZWxlbWVudFR5cGUpICYmXG4gICAgICAgICAgICAgICAgKGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50KVxuICAgICAgICAgICAgICA6IChnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50KTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jICYmXG4gICAgICAgICAgKGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZ1bmMoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICAgICAgICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgJiYgaGFuZGxlRXZlbnRGdW5jKGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lLCB0YXJnZXRJbnN0KTtcbiAgICAgICAgXCJmb2N1c291dFwiID09PSBkb21FdmVudE5hbWUgJiZcbiAgICAgICAgICB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgXCJudW1iZXJcIiA9PT0gcmVhY3ROYW1lLnR5cGUgJiZcbiAgICAgICAgICBudWxsICE9IHRhcmdldEluc3QubWVtb2l6ZWRQcm9wcy52YWx1ZSAmJlxuICAgICAgICAgIHNldERlZmF1bHRWYWx1ZShyZWFjdE5hbWUsIFwibnVtYmVyXCIsIHJlYWN0TmFtZS52YWx1ZSk7XG4gICAgICB9XG4gICAgICBoYW5kbGVFdmVudEZ1bmMgPSB0YXJnZXRJbnN0ID8gZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcbiAgICAgIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXNUZXh0SW5wdXRFbGVtZW50KGhhbmRsZUV2ZW50RnVuYykgfHxcbiAgICAgICAgICAgIFwidHJ1ZVwiID09PSBoYW5kbGVFdmVudEZ1bmMuY29udGVudEVkaXRhYmxlXG4gICAgICAgICAgKVxuICAgICAgICAgICAgKGFjdGl2ZUVsZW1lbnQgPSBoYW5kbGVFdmVudEZ1bmMpLFxuICAgICAgICAgICAgICAoYWN0aXZlRWxlbWVudEluc3QgPSB0YXJnZXRJbnN0KSxcbiAgICAgICAgICAgICAgKGxhc3RTZWxlY3Rpb24gPSBudWxsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IGFjdGl2ZUVsZW1lbnRJbnN0ID0gYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICAgICAgICBtb3VzZURvd24gPSAhMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImNvbnRleHRtZW51XCI6XG4gICAgICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgbW91c2VEb3duID0gITE7XG4gICAgICAgICAgY29uc3RydWN0U2VsZWN0RXZlbnQoZGlzcGF0Y2hRdWV1ZSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOlxuICAgICAgICAgIGlmIChza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQpIGJyZWFrO1xuICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgICAgICBjb25zdHJ1Y3RTZWxlY3RFdmVudChkaXNwYXRjaFF1ZXVlLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgfVxuICAgICAgdmFyIGZhbGxiYWNrRGF0YTtcbiAgICAgIGlmIChjYW5Vc2VDb21wb3NpdGlvbkV2ZW50KVxuICAgICAgICBiOiB7XG4gICAgICAgICAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6XG4gICAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25TdGFydFwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6XG4gICAgICAgICAgICAgIGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvbkVuZFwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6XG4gICAgICAgICAgICAgIGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvblVwZGF0ZVwiO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudFR5cGUgPSB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIGVsc2VcbiAgICAgICAgaXNDb21wb3NpbmdcbiAgICAgICAgICA/IGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSAmJlxuICAgICAgICAgICAgKGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvbkVuZFwiKVxuICAgICAgICAgIDogXCJrZXlkb3duXCIgPT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgICAgICAgMjI5ID09PSBuYXRpdmVFdmVudC5rZXlDb2RlICYmXG4gICAgICAgICAgICAoZXZlbnRUeXBlID0gXCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7XG4gICAgICBldmVudFR5cGUgJiZcbiAgICAgICAgKHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhICYmXG4gICAgICAgICAgXCJrb1wiICE9PSBuYXRpdmVFdmVudC5sb2NhbGUgJiZcbiAgICAgICAgICAoaXNDb21wb3NpbmcgfHwgXCJvbkNvbXBvc2l0aW9uU3RhcnRcIiAhPT0gZXZlbnRUeXBlXG4gICAgICAgICAgICA/IFwib25Db21wb3NpdGlvbkVuZFwiID09PSBldmVudFR5cGUgJiZcbiAgICAgICAgICAgICAgaXNDb21wb3NpbmcgJiZcbiAgICAgICAgICAgICAgKGZhbGxiYWNrRGF0YSA9IGdldERhdGEoKSlcbiAgICAgICAgICAgIDogKChyb290ID0gbmF0aXZlRXZlbnRUYXJnZXQpLFxuICAgICAgICAgICAgICAoc3RhcnRUZXh0ID0gXCJ2YWx1ZVwiIGluIHJvb3QgPyByb290LnZhbHVlIDogcm9vdC50ZXh0Q29udGVudCksXG4gICAgICAgICAgICAgIChpc0NvbXBvc2luZyA9ICEwKSkpLFxuICAgICAgICAoaGFuZGxlRXZlbnRGdW5jID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKHRhcmdldEluc3QsIGV2ZW50VHlwZSkpLFxuICAgICAgICAwIDwgaGFuZGxlRXZlbnRGdW5jLmxlbmd0aCAmJlxuICAgICAgICAgICgoZXZlbnRUeXBlID0gbmV3IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoXG4gICAgICAgICAgICBldmVudFR5cGUsXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICkpLFxuICAgICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiBldmVudFR5cGUsIGxpc3RlbmVyczogaGFuZGxlRXZlbnRGdW5jIH0pLFxuICAgICAgICAgIGZhbGxiYWNrRGF0YVxuICAgICAgICAgICAgPyAoZXZlbnRUeXBlLmRhdGEgPSBmYWxsYmFja0RhdGEpXG4gICAgICAgICAgICA6ICgoZmFsbGJhY2tEYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCkpLFxuICAgICAgICAgICAgICBudWxsICE9PSBmYWxsYmFja0RhdGEgJiYgKGV2ZW50VHlwZS5kYXRhID0gZmFsbGJhY2tEYXRhKSkpKTtcbiAgICAgIGlmIChcbiAgICAgICAgKGZhbGxiYWNrRGF0YSA9IGNhblVzZVRleHRJbnB1dEV2ZW50XG4gICAgICAgICAgPyBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpXG4gICAgICAgICAgOiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkpXG4gICAgICApXG4gICAgICAgIChldmVudFR5cGUgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnModGFyZ2V0SW5zdCwgXCJvbkJlZm9yZUlucHV0XCIpKSxcbiAgICAgICAgICAwIDwgZXZlbnRUeXBlLmxlbmd0aCAmJlxuICAgICAgICAgICAgKChoYW5kbGVFdmVudEZ1bmMgPSBuZXcgU3ludGhldGljQ29tcG9zaXRpb25FdmVudChcbiAgICAgICAgICAgICAgXCJvbkJlZm9yZUlucHV0XCIsXG4gICAgICAgICAgICAgIFwiYmVmb3JlaW5wdXRcIixcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIGRpc3BhdGNoUXVldWUucHVzaCh7XG4gICAgICAgICAgICAgIGV2ZW50OiBoYW5kbGVFdmVudEZ1bmMsXG4gICAgICAgICAgICAgIGxpc3RlbmVyczogZXZlbnRUeXBlXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIChoYW5kbGVFdmVudEZ1bmMuZGF0YSA9IGZhbGxiYWNrRGF0YSkpO1xuICAgICAgZXh0cmFjdEV2ZW50cyQxKFxuICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIHRhcmdldEluc3QsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgKTtcbiAgICB9XG4gICAgcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgZXZlbnRTeXN0ZW1GbGFncyk7XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcihpbnN0YW5jZSwgbGlzdGVuZXIsIGN1cnJlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIHtcbiAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgIGN1cnJlbnRUYXJnZXQ6IGN1cnJlbnRUYXJnZXRcbiAgfTtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyh0YXJnZXRGaWJlciwgcmVhY3ROYW1lKSB7XG4gIGZvciAoXG4gICAgdmFyIGNhcHR1cmVOYW1lID0gcmVhY3ROYW1lICsgXCJDYXB0dXJlXCIsIGxpc3RlbmVycyA9IFtdO1xuICAgIG51bGwgIT09IHRhcmdldEZpYmVyO1xuXG4gICkge1xuICAgIHZhciBfaW5zdGFuY2UyID0gdGFyZ2V0RmliZXIsXG4gICAgICBzdGF0ZU5vZGUgPSBfaW5zdGFuY2UyLnN0YXRlTm9kZTtcbiAgICBfaW5zdGFuY2UyID0gX2luc3RhbmNlMi50YWc7XG4gICAgKDUgIT09IF9pbnN0YW5jZTIgJiYgMjYgIT09IF9pbnN0YW5jZTIgJiYgMjcgIT09IF9pbnN0YW5jZTIpIHx8XG4gICAgICBudWxsID09PSBzdGF0ZU5vZGUgfHxcbiAgICAgICgoX2luc3RhbmNlMiA9IGdldExpc3RlbmVyKHRhcmdldEZpYmVyLCBjYXB0dXJlTmFtZSkpLFxuICAgICAgbnVsbCAhPSBfaW5zdGFuY2UyICYmXG4gICAgICAgIGxpc3RlbmVycy51bnNoaWZ0KFxuICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0RmliZXIsIF9pbnN0YW5jZTIsIHN0YXRlTm9kZSlcbiAgICAgICAgKSxcbiAgICAgIChfaW5zdGFuY2UyID0gZ2V0TGlzdGVuZXIodGFyZ2V0RmliZXIsIHJlYWN0TmFtZSkpLFxuICAgICAgbnVsbCAhPSBfaW5zdGFuY2UyICYmXG4gICAgICAgIGxpc3RlbmVycy5wdXNoKFxuICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0RmliZXIsIF9pbnN0YW5jZTIsIHN0YXRlTm9kZSlcbiAgICAgICAgKSk7XG4gICAgaWYgKDMgPT09IHRhcmdldEZpYmVyLnRhZykgcmV0dXJuIGxpc3RlbmVycztcbiAgICB0YXJnZXRGaWJlciA9IHRhcmdldEZpYmVyLnJldHVybjtcbiAgfVxuICByZXR1cm4gW107XG59XG5mdW5jdGlvbiBnZXRQYXJlbnQoaW5zdCkge1xuICBpZiAobnVsbCA9PT0gaW5zdCkgcmV0dXJuIG51bGw7XG4gIGRvIGluc3QgPSBpbnN0LnJldHVybjtcbiAgd2hpbGUgKGluc3QgJiYgNSAhPT0gaW5zdC50YWcgJiYgMjcgIT09IGluc3QudGFnKTtcbiAgcmV0dXJuIGluc3QgPyBpbnN0IDogbnVsbDtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlTGlzdGVuZXJzRm9yRXZlbnQoXG4gIGRpc3BhdGNoUXVldWUsXG4gIGV2ZW50LFxuICB0YXJnZXQsXG4gIGNvbW1vbixcbiAgaW5DYXB0dXJlUGhhc2Vcbikge1xuICBmb3IgKFxuICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuX3JlYWN0TmFtZSwgbGlzdGVuZXJzID0gW107XG4gICAgbnVsbCAhPT0gdGFyZ2V0ICYmIHRhcmdldCAhPT0gY29tbW9uO1xuXG4gICkge1xuICAgIHZhciBfaW5zdGFuY2UzID0gdGFyZ2V0LFxuICAgICAgYWx0ZXJuYXRlID0gX2luc3RhbmNlMy5hbHRlcm5hdGUsXG4gICAgICBzdGF0ZU5vZGUgPSBfaW5zdGFuY2UzLnN0YXRlTm9kZTtcbiAgICBfaW5zdGFuY2UzID0gX2luc3RhbmNlMy50YWc7XG4gICAgaWYgKG51bGwgIT09IGFsdGVybmF0ZSAmJiBhbHRlcm5hdGUgPT09IGNvbW1vbikgYnJlYWs7XG4gICAgKDUgIT09IF9pbnN0YW5jZTMgJiYgMjYgIT09IF9pbnN0YW5jZTMgJiYgMjcgIT09IF9pbnN0YW5jZTMpIHx8XG4gICAgICBudWxsID09PSBzdGF0ZU5vZGUgfHxcbiAgICAgICgoYWx0ZXJuYXRlID0gc3RhdGVOb2RlKSxcbiAgICAgIGluQ2FwdHVyZVBoYXNlXG4gICAgICAgID8gKChzdGF0ZU5vZGUgPSBnZXRMaXN0ZW5lcih0YXJnZXQsIHJlZ2lzdHJhdGlvbk5hbWUpKSxcbiAgICAgICAgICBudWxsICE9IHN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgbGlzdGVuZXJzLnVuc2hpZnQoXG4gICAgICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0LCBzdGF0ZU5vZGUsIGFsdGVybmF0ZSlcbiAgICAgICAgICAgICkpXG4gICAgICAgIDogaW5DYXB0dXJlUGhhc2UgfHxcbiAgICAgICAgICAoKHN0YXRlTm9kZSA9IGdldExpc3RlbmVyKHRhcmdldCwgcmVnaXN0cmF0aW9uTmFtZSkpLFxuICAgICAgICAgIG51bGwgIT0gc3RhdGVOb2RlICYmXG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChcbiAgICAgICAgICAgICAgY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcih0YXJnZXQsIHN0YXRlTm9kZSwgYWx0ZXJuYXRlKVxuICAgICAgICAgICAgKSkpO1xuICAgIHRhcmdldCA9IHRhcmdldC5yZXR1cm47XG4gIH1cbiAgMCAhPT0gbGlzdGVuZXJzLmxlbmd0aCAmJlxuICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiBldmVudCwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMgfSk7XG59XG52YXIgTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYID0gL1xcclxcbj8vZyxcbiAgTk9STUFMSVpFX05VTExfQU5EX1JFUExBQ0VNRU5UX1JFR0VYID0gL1xcdTAwMDB8XFx1RkZGRC9nO1xuZnVuY3Rpb24gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKG1hcmt1cCkge1xuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHR5cGVvZiBtYXJrdXAgPyBtYXJrdXAgOiBcIlwiICsgbWFya3VwKVxuICAgIC5yZXBsYWNlKE5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCwgXCJcXG5cIilcbiAgICAucmVwbGFjZShOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVgsIFwiXCIpO1xufVxuZnVuY3Rpb24gY2hlY2tGb3JVbm1hdGNoZWRUZXh0KHNlcnZlclRleHQsIGNsaWVudFRleHQpIHtcbiAgY2xpZW50VGV4dCA9IG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShjbGllbnRUZXh0KTtcbiAgcmV0dXJuIG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShzZXJ2ZXJUZXh0KSA9PT0gY2xpZW50VGV4dCA/ICEwIDogITE7XG59XG5mdW5jdGlvbiBub29wJDEoKSB7fVxuZnVuY3Rpb24gc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGtleSwgdmFsdWUsIHByb3BzLCBwcmV2VmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IFwiYm9keVwiID09PSB0YWcgfHxcbiAgICAgICAgICAoXCJ0ZXh0YXJlYVwiID09PSB0YWcgJiYgXCJcIiA9PT0gdmFsdWUpIHx8XG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgdmFsdWUpXG4gICAgICAgIDogKFwibnVtYmVyXCIgPT09IHR5cGVvZiB2YWx1ZSB8fCBcImJpZ2ludFwiID09PSB0eXBlb2YgdmFsdWUpICYmXG4gICAgICAgICAgXCJib2R5XCIgIT09IHRhZyAmJlxuICAgICAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIFwiXCIgKyB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2xhc3NOYW1lXCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwiY2xhc3NcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInRhYkluZGV4XCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwidGFiaW5kZXhcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRpclwiOlxuICAgIGNhc2UgXCJyb2xlXCI6XG4gICAgY2FzZSBcInZpZXdCb3hcIjpcbiAgICBjYXNlIFwid2lkdGhcIjpcbiAgICBjYXNlIFwiaGVpZ2h0XCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBzZXRWYWx1ZUZvclN0eWxlcyhkb21FbGVtZW50LCB2YWx1ZSwgcHJldlZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkYXRhXCI6XG4gICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdGFnKSB7XG4gICAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJkYXRhXCIsIHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBcInNyY1wiOlxuICAgIGNhc2UgXCJocmVmXCI6XG4gICAgICBpZiAoXCJcIiA9PT0gdmFsdWUgJiYgKFwiYVwiICE9PSB0YWcgfHwgXCJocmVmXCIgIT09IGtleSkpIHtcbiAgICAgICAgZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJzeW1ib2xcIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImFjdGlvblwiOlxuICAgIGNhc2UgXCJmb3JtQWN0aW9uXCI6XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIFwiamF2YXNjcmlwdDp0aHJvdyBuZXcgRXJyb3IoJ0EgUmVhY3QgZm9ybSB3YXMgdW5leHBlY3RlZGx5IHN1Ym1pdHRlZC4gSWYgeW91IGNhbGxlZCBmb3JtLnN1Ym1pdCgpIG1hbnVhbGx5LCBjb25zaWRlciB1c2luZyBmb3JtLnJlcXVlc3RTdWJtaXQoKSBpbnN0ZWFkLiBJZiB5b3VcXFxcJ3JlIHRyeWluZyB0byB1c2UgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkgaW4gYSBzdWJtaXQgZXZlbnQgaGFuZGxlciwgY29uc2lkZXIgYWxzbyBjYWxsaW5nIGV2ZW50LnByZXZlbnREZWZhdWx0KCkuJylcIlxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZVxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcmV2VmFsdWUgJiZcbiAgICAgICAgICAoXCJmb3JtQWN0aW9uXCIgPT09IGtleVxuICAgICAgICAgICAgPyAoXCJpbnB1dFwiICE9PSB0YWcgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJuYW1lXCIsIHByb3BzLm5hbWUsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBcImZvcm1FbmNUeXBlXCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybU1ldGhvZFwiLFxuICAgICAgICAgICAgICAgIHByb3BzLmZvcm1NZXRob2QsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybVRhcmdldFwiLFxuICAgICAgICAgICAgICAgIHByb3BzLmZvcm1UYXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgOiAoc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwiZW5jVHlwZVwiLCBwcm9wcy5lbmNUeXBlLCBwcm9wcywgbnVsbCksXG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcIm1ldGhvZFwiLCBwcm9wcy5tZXRob2QsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwidGFyZ2V0XCIsIHByb3BzLnRhcmdldCwgcHJvcHMsIG51bGwpKSk7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJzeW1ib2xcIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgKGRvbUVsZW1lbnQub25jbGljayA9IG5vb3AkMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25TY3JvbGxcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbEVuZFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsZW5kXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICBpZiAobnVsbCAhPSB2YWx1ZSkge1xuICAgICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdHlwZW9mIHZhbHVlIHx8ICEoXCJfX2h0bWxcIiBpbiB2YWx1ZSkpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MSkpO1xuICAgICAgICBrZXkgPSB2YWx1ZS5fX2h0bWw7XG4gICAgICAgIGlmIChudWxsICE9IGtleSkge1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BzLmNoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYwKSk7XG4gICAgICAgICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtdWx0aXBsZVwiOlxuICAgICAgZG9tRWxlbWVudC5tdWx0aXBsZSA9XG4gICAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtdXRlZFwiOlxuICAgICAgZG9tRWxlbWVudC5tdXRlZCA9XG4gICAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIjpcbiAgICBjYXNlIFwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCI6XG4gICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgIGNhc2UgXCJkZWZhdWx0Q2hlY2tlZFwiOlxuICAgIGNhc2UgXCJpbm5lckhUTUxcIjpcbiAgICBjYXNlIFwicmVmXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYXV0b0ZvY3VzXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtIcmVmXCI6XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInhsaW5rOmhyZWZcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAga2V5ID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlTlMoXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmhyZWZcIixcbiAgICAgICAga2V5XG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvbnRlbnRFZGl0YWJsZVwiOlxuICAgIGNhc2UgXCJzcGVsbENoZWNrXCI6XG4gICAgY2FzZSBcImRyYWdnYWJsZVwiOlxuICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgIGNhc2UgXCJhdXRvUmV2ZXJzZVwiOlxuICAgIGNhc2UgXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCI6XG4gICAgY2FzZSBcImZvY3VzYWJsZVwiOlxuICAgIGNhc2UgXCJwcmVzZXJ2ZUFscGhhXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIiArIHZhbHVlKVxuICAgICAgICA6IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5lcnRcIjpcbiAgICBjYXNlIFwiYWxsb3dGdWxsU2NyZWVuXCI6XG4gICAgY2FzZSBcImFzeW5jXCI6XG4gICAgY2FzZSBcImF1dG9QbGF5XCI6XG4gICAgY2FzZSBcImNvbnRyb2xzXCI6XG4gICAgY2FzZSBcImRlZmF1bHRcIjpcbiAgICBjYXNlIFwiZGVmZXJcIjpcbiAgICBjYXNlIFwiZGlzYWJsZWRcIjpcbiAgICBjYXNlIFwiZGlzYWJsZVBpY3R1cmVJblBpY3R1cmVcIjpcbiAgICBjYXNlIFwiZGlzYWJsZVJlbW90ZVBsYXliYWNrXCI6XG4gICAgY2FzZSBcImZvcm1Ob1ZhbGlkYXRlXCI6XG4gICAgY2FzZSBcImhpZGRlblwiOlxuICAgIGNhc2UgXCJsb29wXCI6XG4gICAgY2FzZSBcIm5vTW9kdWxlXCI6XG4gICAgY2FzZSBcIm5vVmFsaWRhdGVcIjpcbiAgICBjYXNlIFwib3BlblwiOlxuICAgIGNhc2UgXCJwbGF5c0lubGluZVwiOlxuICAgIGNhc2UgXCJyZWFkT25seVwiOlxuICAgIGNhc2UgXCJyZXF1aXJlZFwiOlxuICAgIGNhc2UgXCJyZXZlcnNlZFwiOlxuICAgIGNhc2UgXCJzY29wZWRcIjpcbiAgICBjYXNlIFwic2VhbWxlc3NcIjpcbiAgICBjYXNlIFwiaXRlbVNjb3BlXCI6XG4gICAgICB2YWx1ZSAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJiBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYXB0dXJlXCI6XG4gICAgY2FzZSBcImRvd25sb2FkXCI6XG4gICAgICAhMCA9PT0gdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgIDogITEgIT09IHZhbHVlICYmXG4gICAgICAgICAgICBudWxsICE9IHZhbHVlICYmXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJlxuICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlXG4gICAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjb2xzXCI6XG4gICAgY2FzZSBcInJvd3NcIjpcbiAgICBjYXNlIFwic2l6ZVwiOlxuICAgIGNhc2UgXCJzcGFuXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJlxuICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICAhaXNOYU4odmFsdWUpICYmXG4gICAgICAxIDw9IHZhbHVlXG4gICAgICAgID8gZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSlcbiAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInJvd1NwYW5cIjpcbiAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgIGlzTmFOKHZhbHVlKVxuICAgICAgICA/IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSlcbiAgICAgICAgOiBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwb3BvdmVyXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiYmVmb3JldG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBkb21FbGVtZW50KTtcbiAgICAgIHNldFZhbHVlRm9yQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwicG9wb3ZlclwiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtBY3R1YXRlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmFjdHVhdGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtBcmNyb2xlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmFyY3JvbGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtSb2xlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnJvbGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtTaG93XCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnNob3dcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtUaXRsZVwiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgICAgICAgXCJ4bGluazp0aXRsZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1R5cGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6dHlwZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bWxCYXNlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOmJhc2VcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieG1sTGFuZ1wiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICAgICAgICBcInhtbDpsYW5nXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhtbFNwYWNlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOnNwYWNlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlzXCI6XG4gICAgICBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBcImlzXCIsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbm5lclRleHRcIjpcbiAgICBjYXNlIFwidGV4dENvbnRlbnRcIjpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoXG4gICAgICAgICEoMiA8IGtleS5sZW5ndGgpIHx8XG4gICAgICAgIChcIm9cIiAhPT0ga2V5WzBdICYmIFwiT1wiICE9PSBrZXlbMF0pIHx8XG4gICAgICAgIChcIm5cIiAhPT0ga2V5WzFdICYmIFwiTlwiICE9PSBrZXlbMV0pXG4gICAgICApXG4gICAgICAgIChrZXkgPSBhbGlhc2VzLmdldChrZXkpIHx8IGtleSksXG4gICAgICAgICAgc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoZG9tRWxlbWVudCwgdGFnLCBrZXksIHZhbHVlLCBwcm9wcywgcHJldlZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBzZXRWYWx1ZUZvclN0eWxlcyhkb21FbGVtZW50LCB2YWx1ZSwgcHJldlZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgaWYgKG51bGwgIT0gdmFsdWUpIHtcbiAgICAgICAgaWYgKFwib2JqZWN0XCIgIT09IHR5cGVvZiB2YWx1ZSB8fCAhKFwiX19odG1sXCIgaW4gdmFsdWUpKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNjEpKTtcbiAgICAgICAga2V5ID0gdmFsdWUuX19odG1sO1xuICAgICAgICBpZiAobnVsbCAhPSBrZXkpIHtcbiAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wcy5jaGlsZHJlbikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MCkpO1xuICAgICAgICAgIGRvbUVsZW1lbnQuaW5uZXJIVE1MID0ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIHZhbHVlKVxuICAgICAgICA6IChcIm51bWJlclwiID09PSB0eXBlb2YgdmFsdWUgfHwgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIHZhbHVlKSAmJlxuICAgICAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIFwiXCIgKyB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25TY3JvbGxcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbEVuZFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsZW5kXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgKGRvbUVsZW1lbnQub25jbGljayA9IG5vb3AkMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCI6XG4gICAgY2FzZSBcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiOlxuICAgIGNhc2UgXCJpbm5lckhUTUxcIjpcbiAgICBjYXNlIFwicmVmXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5uZXJUZXh0XCI6XG4gICAgY2FzZSBcInRleHRDb250ZW50XCI6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKCFyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzLmhhc093blByb3BlcnR5KGtleSkpXG4gICAgICAgIGE6IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBcIm9cIiA9PT0ga2V5WzBdICYmXG4gICAgICAgICAgICBcIm5cIiA9PT0ga2V5WzFdICYmXG4gICAgICAgICAgICAoKHByb3BzID0ga2V5LmVuZHNXaXRoKFwiQ2FwdHVyZVwiKSksXG4gICAgICAgICAgICAodGFnID0ga2V5LnNsaWNlKDIsIHByb3BzID8ga2V5Lmxlbmd0aCAtIDcgOiB2b2lkIDApKSxcbiAgICAgICAgICAgIChwcmV2VmFsdWUgPSBkb21FbGVtZW50W2ludGVybmFsUHJvcHNLZXldIHx8IG51bGwpLFxuICAgICAgICAgICAgKHByZXZWYWx1ZSA9IG51bGwgIT0gcHJldlZhbHVlID8gcHJldlZhbHVlW2tleV0gOiBudWxsKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZWYWx1ZSAmJlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGFnLCBwcmV2VmFsdWUsIHByb3BzKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IHByZXZWYWx1ZSAmJlxuICAgICAgICAgICAgICAoa2V5IGluIGRvbUVsZW1lbnRcbiAgICAgICAgICAgICAgICA/IChkb21FbGVtZW50W2tleV0gPSBudWxsKVxuICAgICAgICAgICAgICAgIDogZG9tRWxlbWVudC5oYXNBdHRyaWJ1dGUoa2V5KSAmJlxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KSk7XG4gICAgICAgICAgICBkb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGFnLCB2YWx1ZSwgcHJvcHMpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2V5IGluIGRvbUVsZW1lbnRcbiAgICAgICAgICAgID8gKGRvbUVsZW1lbnRba2V5XSA9IHZhbHVlKVxuICAgICAgICAgICAgOiAhMCA9PT0gdmFsdWVcbiAgICAgICAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgICAgICAgIDogc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2V0SW5pdGlhbFByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCBwcm9wcykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgXCJkaXZcIjpcbiAgICBjYXNlIFwic3BhblwiOlxuICAgIGNhc2UgXCJzdmdcIjpcbiAgICBjYXNlIFwicGF0aFwiOlxuICAgIGNhc2UgXCJhXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJsaVwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImltZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgICB2YXIgaGFzU3JjID0gITEsXG4gICAgICAgIGhhc1NyY1NldCA9ICExLFxuICAgICAgICBwcm9wS2V5O1xuICAgICAgZm9yIChwcm9wS2V5IGluIHByb3BzKVxuICAgICAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcEtleV07XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcFZhbHVlKVxuICAgICAgICAgICAgc3dpdGNoIChwcm9wS2V5KSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJzcmNcIjpcbiAgICAgICAgICAgICAgICBoYXNTcmMgPSAhMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNyY1NldFwiOlxuICAgICAgICAgICAgICAgIGhhc1NyY1NldCA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBwcm9wS2V5LCBwcm9wVmFsdWUsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgaGFzU3JjU2V0ICYmXG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcInNyY1NldFwiLCBwcm9wcy5zcmNTZXQsIHByb3BzLCBudWxsKTtcbiAgICAgIGhhc1NyYyAmJiBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJzcmNcIiwgcHJvcHMuc3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSAocHJvcEtleSA9IHByb3BWYWx1ZSA9IGhhc1NyY1NldCA9IG51bGwpLFxuICAgICAgICBjaGVja2VkID0gbnVsbCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBudWxsO1xuICAgICAgZm9yIChoYXNTcmMgaW4gcHJvcHMpXG4gICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShoYXNTcmMpKSB7XG4gICAgICAgICAgdmFyIHByb3BWYWx1ZSQxODggPSBwcm9wc1toYXNTcmNdO1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BWYWx1ZSQxODgpXG4gICAgICAgICAgICBzd2l0Y2ggKGhhc1NyYykge1xuICAgICAgICAgICAgICBjYXNlIFwibmFtZVwiOlxuICAgICAgICAgICAgICAgIGhhc1NyY1NldCA9IHByb3BWYWx1ZSQxODg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICAgICAgcHJvcFZhbHVlID0gcHJvcFZhbHVlJDE4ODtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImNoZWNrZWRcIjpcbiAgICAgICAgICAgICAgICBjaGVja2VkID0gcHJvcFZhbHVlJDE4ODtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRDaGVja2VkXCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBwcm9wVmFsdWUkMTg4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgICBwcm9wS2V5ID0gcHJvcFZhbHVlJDE4ODtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BWYWx1ZSQxODg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wVmFsdWUkMTg4KVxuICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBoYXNTcmMsIHByb3BWYWx1ZSQxODgsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgaW5pdElucHV0KFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBwcm9wS2V5LFxuICAgICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICAgIGNoZWNrZWQsXG4gICAgICAgIGRlZmF1bHRDaGVja2VkLFxuICAgICAgICBwcm9wVmFsdWUsXG4gICAgICAgIGhhc1NyY1NldCxcbiAgICAgICAgITFcbiAgICAgICk7XG4gICAgICB0cmFjayhkb21FbGVtZW50KTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGhhc1NyYyA9IHByb3BWYWx1ZSA9IHByb3BLZXkgPSBudWxsO1xuICAgICAgZm9yIChoYXNTcmNTZXQgaW4gcHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShoYXNTcmNTZXQpICYmXG4gICAgICAgICAgKChkZWZhdWx0VmFsdWUgPSBwcm9wc1toYXNTcmNTZXRdKSwgbnVsbCAhPSBkZWZhdWx0VmFsdWUpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGhhc1NyY1NldCkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBwcm9wVmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIGhhc1NyYyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBoYXNTcmNTZXQsIGRlZmF1bHRWYWx1ZSwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgIHRhZyA9IHByb3BLZXk7XG4gICAgICBwcm9wcyA9IHByb3BWYWx1ZTtcbiAgICAgIGRvbUVsZW1lbnQubXVsdGlwbGUgPSAhIWhhc1NyYztcbiAgICAgIG51bGwgIT0gdGFnXG4gICAgICAgID8gdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWhhc1NyYywgdGFnLCAhMSlcbiAgICAgICAgOiBudWxsICE9IHByb3BzICYmIHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFoYXNTcmMsIHByb3BzLCAhMCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BLZXkgPSBoYXNTcmNTZXQgPSBoYXNTcmMgPSBudWxsO1xuICAgICAgZm9yIChwcm9wVmFsdWUgaW4gcHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wVmFsdWUpICYmXG4gICAgICAgICAgKChkZWZhdWx0VmFsdWUgPSBwcm9wc1twcm9wVmFsdWVdKSwgbnVsbCAhPSBkZWZhdWx0VmFsdWUpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGhhc1NyYyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGhhc1NyY1NldCA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gZGVmYXVsdFZhbHVlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkxKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BWYWx1ZSwgZGVmYXVsdFZhbHVlLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgaW5pdFRleHRhcmVhKGRvbUVsZW1lbnQsIGhhc1NyYywgaGFzU3JjU2V0LCBwcm9wS2V5KTtcbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJvcHRpb25cIjpcbiAgICAgIGZvciAoY2hlY2tlZCBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KGNoZWNrZWQpICYmXG4gICAgICAgICAgKChoYXNTcmMgPSBwcm9wc1tjaGVja2VkXSksIG51bGwgIT0gaGFzU3JjKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChjaGVja2VkKSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICAgICAgICAgICAgZG9tRWxlbWVudC5zZWxlY3RlZCA9XG4gICAgICAgICAgICAgICAgaGFzU3JjICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgaGFzU3JjICYmXG4gICAgICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIGhhc1NyYztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgY2hlY2tlZCwgaGFzU3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJkaWFsb2dcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJiZWZvcmV0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImNhbmNlbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJjbG9zZVwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpZnJhbWVcIjpcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgZm9yIChoYXNTcmMgPSAwOyBoYXNTcmMgPCBtZWRpYUV2ZW50VHlwZXMubGVuZ3RoOyBoYXNTcmMrKylcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbaGFzU3JjXSwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRldGFpbHNcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJ0b2dnbGVcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICBjYXNlIFwic291cmNlXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBkb21FbGVtZW50KSxcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgY2FzZSBcImFyZWFcIjpcbiAgICBjYXNlIFwiYmFzZVwiOlxuICAgIGNhc2UgXCJiclwiOlxuICAgIGNhc2UgXCJjb2xcIjpcbiAgICBjYXNlIFwiaHJcIjpcbiAgICBjYXNlIFwia2V5Z2VuXCI6XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwicGFyYW1cIjpcbiAgICBjYXNlIFwidHJhY2tcIjpcbiAgICBjYXNlIFwid2JyXCI6XG4gICAgY2FzZSBcIm1lbnVpdGVtXCI6XG4gICAgICBmb3IgKGRlZmF1bHRDaGVja2VkIGluIHByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdENoZWNrZWQpICYmXG4gICAgICAgICAgKChoYXNTcmMgPSBwcm9wc1tkZWZhdWx0Q2hlY2tlZF0pLCBudWxsICE9IGhhc1NyYylcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoZGVmYXVsdENoZWNrZWQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTM3LCB0YWcpKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0Q2hlY2tlZCwgaGFzU3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoaXNDdXN0b21FbGVtZW50KHRhZykpIHtcbiAgICAgICAgZm9yIChwcm9wVmFsdWUkMTg4IGluIHByb3BzKVxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KHByb3BWYWx1ZSQxODgpICYmXG4gICAgICAgICAgICAoKGhhc1NyYyA9IHByb3BzW3Byb3BWYWx1ZSQxODhdKSxcbiAgICAgICAgICAgIHZvaWQgMCAhPT0gaGFzU3JjICYmXG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcFZhbHVlJDE4OCxcbiAgICAgICAgICAgICAgICBoYXNTcmMsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgdm9pZCAwXG4gICAgICAgICAgICAgICkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gIH1cbiAgZm9yIChkZWZhdWx0VmFsdWUgaW4gcHJvcHMpXG4gICAgcHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdFZhbHVlKSAmJlxuICAgICAgKChoYXNTcmMgPSBwcm9wc1tkZWZhdWx0VmFsdWVdKSxcbiAgICAgIG51bGwgIT0gaGFzU3JjICYmXG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0VmFsdWUsIGhhc1NyYywgcHJvcHMsIG51bGwpKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCBsYXN0UHJvcHMsIG5leHRQcm9wcykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgXCJkaXZcIjpcbiAgICBjYXNlIFwic3BhblwiOlxuICAgIGNhc2UgXCJzdmdcIjpcbiAgICBjYXNlIFwicGF0aFwiOlxuICAgIGNhc2UgXCJhXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJsaVwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgICB2YXIgbmFtZSA9IG51bGwsXG4gICAgICAgIHR5cGUgPSBudWxsLFxuICAgICAgICB2YWx1ZSA9IG51bGwsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IG51bGwsXG4gICAgICAgIGxhc3REZWZhdWx0VmFsdWUgPSBudWxsLFxuICAgICAgICBjaGVja2VkID0gbnVsbCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBudWxsO1xuICAgICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgICB2YXIgbGFzdFByb3AgPSBsYXN0UHJvcHNbcHJvcEtleV07XG4gICAgICAgIGlmIChsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgJiYgbnVsbCAhPSBsYXN0UHJvcClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBsYXN0RGVmYXVsdFZhbHVlID0gbGFzdFByb3A7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHxcbiAgICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSwgbnVsbCwgbmV4dFByb3BzLCBsYXN0UHJvcCk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgcHJvcEtleSQyMDUgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgIHZhciBwcm9wS2V5ID0gbmV4dFByb3BzW3Byb3BLZXkkMjA1XTtcbiAgICAgICAgbGFzdFByb3AgPSBsYXN0UHJvcHNbcHJvcEtleSQyMDVdO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjA1KSAmJlxuICAgICAgICAgIChudWxsICE9IHByb3BLZXkgfHwgbnVsbCAhPSBsYXN0UHJvcClcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAocHJvcEtleSQyMDUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICAgIHR5cGUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJuYW1lXCI6XG4gICAgICAgICAgICAgIG5hbWUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICAgICAgICAgIGNoZWNrZWQgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0Q2hlY2tlZFwiOlxuICAgICAgICAgICAgICBkZWZhdWx0Q2hlY2tlZCA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHZhbHVlID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gcHJvcEtleSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcHJvcEtleSAhPT0gbGFzdFByb3AgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICAgIHByb3BLZXkkMjA1LFxuICAgICAgICAgICAgICAgICAgcHJvcEtleSxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3RQcm9wXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICB1cGRhdGVJbnB1dChcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIG5hbWVcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgcHJvcEtleSA9IHZhbHVlID0gZGVmYXVsdFZhbHVlID0gcHJvcEtleSQyMDUgPSBudWxsO1xuICAgICAgZm9yICh0eXBlIGluIGxhc3RQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobGFzdERlZmF1bHRWYWx1ZSA9IGxhc3RQcm9wc1t0eXBlXSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHR5cGUpICYmIG51bGwgIT0gbGFzdERlZmF1bHRWYWx1ZSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkgPSBsYXN0RGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHR5cGUpIHx8XG4gICAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3REZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIGZvciAobmFtZSBpbiBuZXh0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHR5cGUgPSBuZXh0UHJvcHNbbmFtZV0pLFxuICAgICAgICAgIChsYXN0RGVmYXVsdFZhbHVlID0gbGFzdFByb3BzW25hbWVdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgICAgIChudWxsICE9IHR5cGUgfHwgbnVsbCAhPSBsYXN0RGVmYXVsdFZhbHVlKSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkkMjA1ID0gdHlwZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHR5cGU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIHZhbHVlID0gdHlwZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHR5cGUgIT09IGxhc3REZWZhdWx0VmFsdWUgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgdGFnID0gZGVmYXVsdFZhbHVlO1xuICAgICAgbGFzdFByb3BzID0gdmFsdWU7XG4gICAgICBuZXh0UHJvcHMgPSBwcm9wS2V5O1xuICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwNVxuICAgICAgICA/IHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFsYXN0UHJvcHMsIHByb3BLZXkkMjA1LCAhMSlcbiAgICAgICAgOiAhIW5leHRQcm9wcyAhPT0gISFsYXN0UHJvcHMgJiZcbiAgICAgICAgICAobnVsbCAhPSB0YWdcbiAgICAgICAgICAgID8gdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWxhc3RQcm9wcywgdGFnLCAhMClcbiAgICAgICAgICAgIDogdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWxhc3RQcm9wcywgbGFzdFByb3BzID8gW10gOiBcIlwiLCAhMSkpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgcHJvcEtleSA9IHByb3BLZXkkMjA1ID0gbnVsbDtcbiAgICAgIGZvciAoZGVmYXVsdFZhbHVlIGluIGxhc3RQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobmFtZSA9IGxhc3RQcm9wc1tkZWZhdWx0VmFsdWVdKSxcbiAgICAgICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdFZhbHVlKSAmJlxuICAgICAgICAgICAgbnVsbCAhPSBuYW1lICYmXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRWYWx1ZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGRlZmF1bHRWYWx1ZSwgbnVsbCwgbmV4dFByb3BzLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKHZhbHVlIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgobmFtZSA9IG5leHRQcm9wc1t2YWx1ZV0pLFxuICAgICAgICAgICh0eXBlID0gbGFzdFByb3BzW3ZhbHVlXSksXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHZhbHVlKSAmJiAobnVsbCAhPSBuYW1lIHx8IG51bGwgIT0gdHlwZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSQyMDUgPSBuYW1lO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IG5hbWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIGlmIChudWxsICE9IG5hbWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTEpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBuYW1lICE9PSB0eXBlICYmXG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHZhbHVlLCBuYW1lLCBuZXh0UHJvcHMsIHR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgIHVwZGF0ZVRleHRhcmVhKGRvbUVsZW1lbnQsIHByb3BLZXkkMjA1LCBwcm9wS2V5KTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwib3B0aW9uXCI6XG4gICAgICBmb3IgKHZhciBwcm9wS2V5JDIyMSBpbiBsYXN0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHByb3BLZXkkMjA1ID0gbGFzdFByb3BzW3Byb3BLZXkkMjIxXSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjIxKSAmJlxuICAgICAgICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwNSAmJlxuICAgICAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIyMSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkkMjIxKSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICAgICAgICAgICAgZG9tRWxlbWVudC5zZWxlY3RlZCA9ICExO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMjEsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDVcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKGxhc3REZWZhdWx0VmFsdWUgaW4gbmV4dFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChwcm9wS2V5JDIwNSA9IG5leHRQcm9wc1tsYXN0RGVmYXVsdFZhbHVlXSksXG4gICAgICAgICAgKHByb3BLZXkgPSBsYXN0UHJvcHNbbGFzdERlZmF1bHRWYWx1ZV0pLFxuICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShsYXN0RGVmYXVsdFZhbHVlKSAmJlxuICAgICAgICAgICAgcHJvcEtleSQyMDUgIT09IHByb3BLZXkgJiZcbiAgICAgICAgICAgIChudWxsICE9IHByb3BLZXkkMjA1IHx8IG51bGwgIT0gcHJvcEtleSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGxhc3REZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RlZFwiOlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnNlbGVjdGVkID1cbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwNSAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHByb3BLZXkkMjA1ICYmXG4gICAgICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHByb3BLZXkkMjA1O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwNSxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICBjYXNlIFwiYXJlYVwiOlxuICAgIGNhc2UgXCJiYXNlXCI6XG4gICAgY2FzZSBcImJyXCI6XG4gICAgY2FzZSBcImNvbFwiOlxuICAgIGNhc2UgXCJlbWJlZFwiOlxuICAgIGNhc2UgXCJoclwiOlxuICAgIGNhc2UgXCJrZXlnZW5cIjpcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJwYXJhbVwiOlxuICAgIGNhc2UgXCJzb3VyY2VcIjpcbiAgICBjYXNlIFwidHJhY2tcIjpcbiAgICBjYXNlIFwid2JyXCI6XG4gICAgY2FzZSBcIm1lbnVpdGVtXCI6XG4gICAgICBmb3IgKHZhciBwcm9wS2V5JDIyNiBpbiBsYXN0UHJvcHMpXG4gICAgICAgIChwcm9wS2V5JDIwNSA9IGxhc3RQcm9wc1twcm9wS2V5JDIyNl0pLFxuICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIyNikgJiZcbiAgICAgICAgICAgIG51bGwgIT0gcHJvcEtleSQyMDUgJiZcbiAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMjYpICYmXG4gICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSQyMjYsIG51bGwsIG5leHRQcm9wcywgcHJvcEtleSQyMDUpO1xuICAgICAgZm9yIChjaGVja2VkIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgocHJvcEtleSQyMDUgPSBuZXh0UHJvcHNbY2hlY2tlZF0pLFxuICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2NoZWNrZWRdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkoY2hlY2tlZCkgJiZcbiAgICAgICAgICAgIHByb3BLZXkkMjA1ICE9PSBwcm9wS2V5ICYmXG4gICAgICAgICAgICAobnVsbCAhPSBwcm9wS2V5JDIwNSB8fCBudWxsICE9IHByb3BLZXkpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChjaGVja2VkKSB7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wS2V5JDIwNSlcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBjaGVja2VkLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjA1LFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoaXNDdXN0b21FbGVtZW50KHRhZykpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcEtleSQyMzEgaW4gbGFzdFByb3BzKVxuICAgICAgICAgIChwcm9wS2V5JDIwNSA9IGxhc3RQcm9wc1twcm9wS2V5JDIzMV0pLFxuICAgICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjMxKSAmJlxuICAgICAgICAgICAgICB2b2lkIDAgIT09IHByb3BLZXkkMjA1ICYmXG4gICAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMzEpICYmXG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMzEsXG4gICAgICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwNVxuICAgICAgICAgICAgICApO1xuICAgICAgICBmb3IgKGRlZmF1bHRDaGVja2VkIGluIG5leHRQcm9wcylcbiAgICAgICAgICAocHJvcEtleSQyMDUgPSBuZXh0UHJvcHNbZGVmYXVsdENoZWNrZWRdKSxcbiAgICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2RlZmF1bHRDaGVja2VkXSksXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRDaGVja2VkKSB8fFxuICAgICAgICAgICAgICBwcm9wS2V5JDIwNSA9PT0gcHJvcEtleSB8fFxuICAgICAgICAgICAgICAodm9pZCAwID09PSBwcm9wS2V5JDIwNSAmJiB2b2lkIDAgPT09IHByb3BLZXkpIHx8XG4gICAgICAgICAgICAgIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDUsXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgIHByb3BLZXlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIGZvciAodmFyIHByb3BLZXkkMjM2IGluIGxhc3RQcm9wcylcbiAgICAocHJvcEtleSQyMDUgPSBsYXN0UHJvcHNbcHJvcEtleSQyMzZdKSxcbiAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIzNikgJiZcbiAgICAgICAgbnVsbCAhPSBwcm9wS2V5JDIwNSAmJlxuICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjM2KSAmJlxuICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgcHJvcEtleSQyMzYsIG51bGwsIG5leHRQcm9wcywgcHJvcEtleSQyMDUpO1xuICBmb3IgKGxhc3RQcm9wIGluIG5leHRQcm9wcylcbiAgICAocHJvcEtleSQyMDUgPSBuZXh0UHJvcHNbbGFzdFByb3BdKSxcbiAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2xhc3RQcm9wXSksXG4gICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KGxhc3RQcm9wKSB8fFxuICAgICAgICBwcm9wS2V5JDIwNSA9PT0gcHJvcEtleSB8fFxuICAgICAgICAobnVsbCA9PSBwcm9wS2V5JDIwNSAmJiBudWxsID09IHByb3BLZXkpIHx8XG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBsYXN0UHJvcCwgcHJvcEtleSQyMDUsIG5leHRQcm9wcywgcHJvcEtleSk7XG59XG52YXIgZXZlbnRzRW5hYmxlZCA9IG51bGwsXG4gIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gbnVsbDtcbmZ1bmN0aW9uIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihyb290Q29udGFpbmVyRWxlbWVudCkge1xuICByZXR1cm4gOSA9PT0gcm9vdENvbnRhaW5lckVsZW1lbnQubm9kZVR5cGVcbiAgICA/IHJvb3RDb250YWluZXJFbGVtZW50XG4gICAgOiByb290Q29udGFpbmVyRWxlbWVudC5vd25lckRvY3VtZW50O1xufVxuZnVuY3Rpb24gZ2V0T3duSG9zdENvbnRleHQobmFtZXNwYWNlVVJJKSB7XG4gIHN3aXRjaCAobmFtZXNwYWNlVVJJKSB7XG4gICAgY2FzZSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiOlxuICAgICAgcmV0dXJuIDI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAwO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDaGlsZEhvc3RDb250ZXh0UHJvZChwYXJlbnROYW1lc3BhY2UsIHR5cGUpIHtcbiAgaWYgKDAgPT09IHBhcmVudE5hbWVzcGFjZSlcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIFwibWF0aFwiOlxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgcmV0dXJuIDEgPT09IHBhcmVudE5hbWVzcGFjZSAmJiBcImZvcmVpZ25PYmplY3RcIiA9PT0gdHlwZVxuICAgID8gMFxuICAgIDogcGFyZW50TmFtZXNwYWNlO1xufVxuZnVuY3Rpb24gc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgcHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICBcInRleHRhcmVhXCIgPT09IHR5cGUgfHxcbiAgICBcIm5vc2NyaXB0XCIgPT09IHR5cGUgfHxcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICBcIm51bWJlclwiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gfHxcbiAgICAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmXG4gICAgICBudWxsICE9PSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuICAgICAgbnVsbCAhPSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWwpXG4gICk7XG59XG52YXIgY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gbnVsbDtcbmZ1bmN0aW9uIHNob3VsZEF0dGVtcHRFYWdlclRyYW5zaXRpb24oKSB7XG4gIHZhciBldmVudCA9IHdpbmRvdy5ldmVudDtcbiAgaWYgKGV2ZW50ICYmIFwicG9wc3RhdGVcIiA9PT0gZXZlbnQudHlwZSkge1xuICAgIGlmIChldmVudCA9PT0gY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50KSByZXR1cm4gITE7XG4gICAgY3VycmVudFBvcHN0YXRlVHJhbnNpdGlvbkV2ZW50ID0gZXZlbnQ7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIGN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCA9IG51bGw7XG4gIHJldHVybiAhMTtcbn1cbnZhciBzY2hlZHVsZVRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBzZXRUaW1lb3V0ID8gc2V0VGltZW91dCA6IHZvaWQgMCxcbiAgY2FuY2VsVGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNsZWFyVGltZW91dCA/IGNsZWFyVGltZW91dCA6IHZvaWQgMCxcbiAgbG9jYWxQcm9taXNlID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgUHJvbWlzZSA/IFByb21pc2UgOiB2b2lkIDAsXG4gIHNjaGVkdWxlTWljcm90YXNrID1cbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBxdWV1ZU1pY3JvdGFza1xuICAgICAgPyBxdWV1ZU1pY3JvdGFza1xuICAgICAgOiBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbG9jYWxQcm9taXNlXG4gICAgICAgID8gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxQcm9taXNlXG4gICAgICAgICAgICAgIC5yZXNvbHZlKG51bGwpXG4gICAgICAgICAgICAgIC50aGVuKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAuY2F0Y2goaGFuZGxlRXJyb3JJbk5leHRUaWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIDogc2NoZWR1bGVUaW1lb3V0O1xuZnVuY3Rpb24gaGFuZGxlRXJyb3JJbk5leHRUaWNrKGVycm9yKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHRocm93IGVycm9yO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGlzU2luZ2xldG9uU2NvcGUodHlwZSkge1xuICByZXR1cm4gXCJoZWFkXCIgPT09IHR5cGU7XG59XG5mdW5jdGlvbiBjbGVhclN1c3BlbnNlQm91bmRhcnkocGFyZW50SW5zdGFuY2UsIHN1c3BlbnNlSW5zdGFuY2UpIHtcbiAgdmFyIG5vZGUgPSBzdXNwZW5zZUluc3RhbmNlLFxuICAgIHBvc3NpYmxlUHJlYW1ibGVDb250cmlidXRpb24gPSAwLFxuICAgIGRlcHRoID0gMDtcbiAgZG8ge1xuICAgIHZhciBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgaWYgKG5leHROb2RlICYmIDggPT09IG5leHROb2RlLm5vZGVUeXBlKVxuICAgICAgaWYgKCgobm9kZSA9IG5leHROb2RlLmRhdGEpLCBcIi8kXCIgPT09IG5vZGUpKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAwIDwgcG9zc2libGVQcmVhbWJsZUNvbnRyaWJ1dGlvbiAmJlxuICAgICAgICAgIDggPiBwb3NzaWJsZVByZWFtYmxlQ29udHJpYnV0aW9uXG4gICAgICAgICkge1xuICAgICAgICAgIG5vZGUgPSBwb3NzaWJsZVByZWFtYmxlQ29udHJpYnV0aW9uO1xuICAgICAgICAgIHZhciBvd25lckRvY3VtZW50ID0gcGFyZW50SW5zdGFuY2Uub3duZXJEb2N1bWVudDtcbiAgICAgICAgICBub2RlICYgMSAmJiByZWxlYXNlU2luZ2xldG9uSW5zdGFuY2Uob3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICAgICAgICAgIG5vZGUgJiAyICYmIHJlbGVhc2VTaW5nbGV0b25JbnN0YW5jZShvd25lckRvY3VtZW50LmJvZHkpO1xuICAgICAgICAgIGlmIChub2RlICYgNClcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgIG5vZGUgPSBvd25lckRvY3VtZW50LmhlYWQsXG4gICAgICAgICAgICAgICAgcmVsZWFzZVNpbmdsZXRvbkluc3RhbmNlKG5vZGUpLFxuICAgICAgICAgICAgICAgIG93bmVyRG9jdW1lbnQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgIG93bmVyRG9jdW1lbnQ7XG5cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB2YXIgbmV4dE5vZGUkanNjb21wJDAgPSBvd25lckRvY3VtZW50Lm5leHRTaWJsaW5nLFxuICAgICAgICAgICAgICAgIG5vZGVOYW1lID0gb3duZXJEb2N1bWVudC5ub2RlTmFtZTtcbiAgICAgICAgICAgICAgb3duZXJEb2N1bWVudFtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gfHxcbiAgICAgICAgICAgICAgICBcIlNDUklQVFwiID09PSBub2RlTmFtZSB8fFxuICAgICAgICAgICAgICAgIFwiU1RZTEVcIiA9PT0gbm9kZU5hbWUgfHxcbiAgICAgICAgICAgICAgICAoXCJMSU5LXCIgPT09IG5vZGVOYW1lICYmXG4gICAgICAgICAgICAgICAgICBcInN0eWxlc2hlZXRcIiA9PT0gb3duZXJEb2N1bWVudC5yZWwudG9Mb3dlckNhc2UoKSkgfHxcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKG93bmVyRG9jdW1lbnQpO1xuICAgICAgICAgICAgICBvd25lckRvY3VtZW50ID0gbmV4dE5vZGUkanNjb21wJDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDAgPT09IGRlcHRoKSB7XG4gICAgICAgICAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQobmV4dE5vZGUpO1xuICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24oc3VzcGVuc2VJbnN0YW5jZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRlcHRoLS07XG4gICAgICB9IGVsc2VcbiAgICAgICAgXCIkXCIgPT09IG5vZGUgfHwgXCIkP1wiID09PSBub2RlIHx8IFwiJCFcIiA9PT0gbm9kZVxuICAgICAgICAgID8gZGVwdGgrK1xuICAgICAgICAgIDogKHBvc3NpYmxlUHJlYW1ibGVDb250cmlidXRpb24gPSBub2RlLmNoYXJDb2RlQXQoMCkgLSA0OCk7XG4gICAgZWxzZSBwb3NzaWJsZVByZWFtYmxlQ29udHJpYnV0aW9uID0gMDtcbiAgICBub2RlID0gbmV4dE5vZGU7XG4gIH0gd2hpbGUgKG5vZGUpO1xuICByZXRyeUlmQmxvY2tlZE9uKHN1c3BlbnNlSW5zdGFuY2UpO1xufVxuZnVuY3Rpb24gY2xlYXJDb250YWluZXJTcGFyaW5nbHkoY29udGFpbmVyKSB7XG4gIHZhciBuZXh0Tm9kZSA9IGNvbnRhaW5lci5maXJzdENoaWxkO1xuICBuZXh0Tm9kZSAmJiAxMCA9PT0gbmV4dE5vZGUubm9kZVR5cGUgJiYgKG5leHROb2RlID0gbmV4dE5vZGUubmV4dFNpYmxpbmcpO1xuICBmb3IgKDsgbmV4dE5vZGU7ICkge1xuICAgIHZhciBub2RlID0gbmV4dE5vZGU7XG4gICAgbmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZztcbiAgICBzd2l0Y2ggKG5vZGUubm9kZU5hbWUpIHtcbiAgICAgIGNhc2UgXCJIVE1MXCI6XG4gICAgICBjYXNlIFwiSEVBRFwiOlxuICAgICAgY2FzZSBcIkJPRFlcIjpcbiAgICAgICAgY2xlYXJDb250YWluZXJTcGFyaW5nbHkobm9kZSk7XG4gICAgICAgIGRldGFjaERlbGV0ZWRJbnN0YW5jZShub2RlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICBjYXNlIFwiU0NSSVBUXCI6XG4gICAgICBjYXNlIFwiU1RZTEVcIjpcbiAgICAgICAgY29udGludWU7XG4gICAgICBjYXNlIFwiTElOS1wiOlxuICAgICAgICBpZiAoXCJzdHlsZXNoZWV0XCIgPT09IG5vZGUucmVsLnRvTG93ZXJDYXNlKCkpIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQobm9kZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbkh5ZHJhdGVJbnN0YW5jZShpbnN0YW5jZSwgdHlwZSwgcHJvcHMsIGluUm9vdE9yU2luZ2xldG9uKSB7XG4gIGZvciAoOyAxID09PSBpbnN0YW5jZS5ub2RlVHlwZTsgKSB7XG4gICAgdmFyIGFueVByb3BzID0gcHJvcHM7XG4gICAgaWYgKGluc3RhbmNlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IHR5cGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgaWYgKFxuICAgICAgICAhaW5Sb290T3JTaW5nbGV0b24gJiZcbiAgICAgICAgKFwiSU5QVVRcIiAhPT0gaW5zdGFuY2Uubm9kZU5hbWUgfHwgXCJoaWRkZW5cIiAhPT0gaW5zdGFuY2UudHlwZSlcbiAgICAgIClcbiAgICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmICghaW5Sb290T3JTaW5nbGV0b24pXG4gICAgICBpZiAoXCJpbnB1dFwiID09PSB0eXBlICYmIFwiaGlkZGVuXCIgPT09IGluc3RhbmNlLnR5cGUpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBudWxsID09IGFueVByb3BzLm5hbWUgPyBudWxsIDogXCJcIiArIGFueVByb3BzLm5hbWU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcImhpZGRlblwiID09PSBhbnlQcm9wcy50eXBlICYmXG4gICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwibmFtZVwiKSA9PT0gbmFtZVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfSBlbHNlIHJldHVybiBpbnN0YW5jZTtcbiAgICBlbHNlIGlmICghaW5zdGFuY2VbaW50ZXJuYWxIb2lzdGFibGVNYXJrZXJdKVxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgICAgICAgaWYgKCFpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJpdGVtcHJvcFwiKSkgYnJlYWs7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICBjYXNlIFwibGlua1wiOlxuICAgICAgICAgIG5hbWUgPSBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIik7XG4gICAgICAgICAgaWYgKFwic3R5bGVzaGVldFwiID09PSBuYW1lICYmIGluc3RhbmNlLmhhc0F0dHJpYnV0ZShcImRhdGEtcHJlY2VkZW5jZVwiKSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgbmFtZSAhPT0gYW55UHJvcHMucmVsIHx8XG4gICAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpICE9PVxuICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy5ocmVmIHx8IFwiXCIgPT09IGFueVByb3BzLmhyZWZcbiAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICA6IGFueVByb3BzLmhyZWYpIHx8XG4gICAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJjcm9zc29yaWdpblwiKSAhPT1cbiAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMuY3Jvc3NPcmlnaW4gPyBudWxsIDogYW55UHJvcHMuY3Jvc3NPcmlnaW4pIHx8XG4gICAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiKSAhPT1cbiAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMudGl0bGUgPyBudWxsIDogYW55UHJvcHMudGl0bGUpXG4gICAgICAgICAgKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgICAgICBpZiAoaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiZGF0YS1wcmVjZWRlbmNlXCIpKSBicmVhaztcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgICBuYW1lID0gaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChuYW1lICE9PSAobnVsbCA9PSBhbnlQcm9wcy5zcmMgPyBudWxsIDogYW55UHJvcHMuc3JjKSB8fFxuICAgICAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpICE9PVxuICAgICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLnR5cGUgPyBudWxsIDogYW55UHJvcHMudHlwZSkgfHxcbiAgICAgICAgICAgICAgaW5zdGFuY2UuZ2V0QXR0cmlidXRlKFwiY3Jvc3NvcmlnaW5cIikgIT09XG4gICAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMuY3Jvc3NPcmlnaW4gPyBudWxsIDogYW55UHJvcHMuY3Jvc3NPcmlnaW4pKSAmJlxuICAgICAgICAgICAgbmFtZSAmJlxuICAgICAgICAgICAgaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiYXN5bmNcIikgJiZcbiAgICAgICAgICAgICFpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJpdGVtcHJvcFwiKVxuICAgICAgICAgIClcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9XG4gICAgaW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShpbnN0YW5jZS5uZXh0U2libGluZyk7XG4gICAgaWYgKG51bGwgPT09IGluc3RhbmNlKSBicmVhaztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UoaW5zdGFuY2UsIHRleHQsIGluUm9vdE9yU2luZ2xldG9uKSB7XG4gIGlmIChcIlwiID09PSB0ZXh0KSByZXR1cm4gbnVsbDtcbiAgZm9yICg7IDMgIT09IGluc3RhbmNlLm5vZGVUeXBlOyApIHtcbiAgICBpZiAoXG4gICAgICAoMSAhPT0gaW5zdGFuY2Uubm9kZVR5cGUgfHxcbiAgICAgICAgXCJJTlBVVFwiICE9PSBpbnN0YW5jZS5ub2RlTmFtZSB8fFxuICAgICAgICBcImhpZGRlblwiICE9PSBpbnN0YW5jZS50eXBlKSAmJlxuICAgICAgIWluUm9vdE9yU2luZ2xldG9uXG4gICAgKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgaW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShpbnN0YW5jZS5uZXh0U2libGluZyk7XG4gICAgaWYgKG51bGwgPT09IGluc3RhbmNlKSByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5mdW5jdGlvbiBpc1N1c3BlbnNlSW5zdGFuY2VGYWxsYmFjayhpbnN0YW5jZSkge1xuICByZXR1cm4gKFxuICAgIFwiJCFcIiA9PT0gaW5zdGFuY2UuZGF0YSB8fFxuICAgIChcIiQ/XCIgPT09IGluc3RhbmNlLmRhdGEgJiYgXCJjb21wbGV0ZVwiID09PSBpbnN0YW5jZS5vd25lckRvY3VtZW50LnJlYWR5U3RhdGUpXG4gICk7XG59XG5mdW5jdGlvbiByZWdpc3RlclN1c3BlbnNlSW5zdGFuY2VSZXRyeShpbnN0YW5jZSwgY2FsbGJhY2spIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBpbnN0YW5jZS5vd25lckRvY3VtZW50O1xuICBpZiAoXCIkP1wiICE9PSBpbnN0YW5jZS5kYXRhIHx8IFwiY29tcGxldGVcIiA9PT0gb3duZXJEb2N1bWVudC5yZWFkeVN0YXRlKVxuICAgIGNhbGxiYWNrKCk7XG4gIGVsc2Uge1xuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICBvd25lckRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGxpc3RlbmVyKTtcbiAgICB9O1xuICAgIG93bmVyRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgbGlzdGVuZXIpO1xuICAgIGluc3RhbmNlLl9yZWFjdFJldHJ5ID0gbGlzdGVuZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldE5leHRIeWRyYXRhYmxlKG5vZGUpIHtcbiAgZm9yICg7IG51bGwgIT0gbm9kZTsgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAgIGlmICgxID09PSBub2RlVHlwZSB8fCAzID09PSBub2RlVHlwZSkgYnJlYWs7XG4gICAgaWYgKDggPT09IG5vZGVUeXBlKSB7XG4gICAgICBub2RlVHlwZSA9IG5vZGUuZGF0YTtcbiAgICAgIGlmIChcbiAgICAgICAgXCIkXCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiJCFcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCIkP1wiID09PSBub2RlVHlwZSB8fFxuICAgICAgICBcIkYhXCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiRlwiID09PSBub2RlVHlwZVxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICAgIGlmIChcIi8kXCIgPT09IG5vZGVUeXBlKSByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG52YXIgcHJldmlvdXNIeWRyYXRhYmxlT25FbnRlcmluZ1Njb3BlZFNpbmdsZXRvbiA9IG51bGw7XG5mdW5jdGlvbiBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldEluc3RhbmNlKSB7XG4gIHRhcmdldEluc3RhbmNlID0gdGFyZ2V0SW5zdGFuY2UucHJldmlvdXNTaWJsaW5nO1xuICBmb3IgKHZhciBkZXB0aCA9IDA7IHRhcmdldEluc3RhbmNlOyApIHtcbiAgICBpZiAoOCA9PT0gdGFyZ2V0SW5zdGFuY2Uubm9kZVR5cGUpIHtcbiAgICAgIHZhciBkYXRhID0gdGFyZ2V0SW5zdGFuY2UuZGF0YTtcbiAgICAgIGlmIChcIiRcIiA9PT0gZGF0YSB8fCBcIiQhXCIgPT09IGRhdGEgfHwgXCIkP1wiID09PSBkYXRhKSB7XG4gICAgICAgIGlmICgwID09PSBkZXB0aCkgcmV0dXJuIHRhcmdldEluc3RhbmNlO1xuICAgICAgICBkZXB0aC0tO1xuICAgICAgfSBlbHNlIFwiLyRcIiA9PT0gZGF0YSAmJiBkZXB0aCsrO1xuICAgIH1cbiAgICB0YXJnZXRJbnN0YW5jZSA9IHRhcmdldEluc3RhbmNlLnByZXZpb3VzU2libGluZztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVTaW5nbGV0b25JbnN0YW5jZSh0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gIHByb3BzID0gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKHJvb3RDb250YWluZXJJbnN0YW5jZSk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICB0eXBlID0gcHJvcHMuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1MikpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgY2FzZSBcImhlYWRcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5oZWFkO1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1MykpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgY2FzZSBcImJvZHlcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5ib2R5O1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1NCkpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUxKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlbGVhc2VTaW5nbGV0b25JbnN0YW5jZShpbnN0YW5jZSkge1xuICBmb3IgKHZhciBhdHRyaWJ1dGVzID0gaW5zdGFuY2UuYXR0cmlidXRlczsgYXR0cmlidXRlcy5sZW5ndGg7IClcbiAgICBpbnN0YW5jZS5yZW1vdmVBdHRyaWJ1dGVOb2RlKGF0dHJpYnV0ZXNbMF0pO1xuICBkZXRhY2hEZWxldGVkSW5zdGFuY2UoaW5zdGFuY2UpO1xufVxudmFyIHByZWxvYWRQcm9wc01hcCA9IG5ldyBNYXAoKSxcbiAgcHJlY29ubmVjdHNTZXQgPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBnZXRIb2lzdGFibGVSb290KGNvbnRhaW5lcikge1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGFpbmVyLmdldFJvb3ROb2RlXG4gICAgPyBjb250YWluZXIuZ2V0Um9vdE5vZGUoKVxuICAgIDogOSA9PT0gY29udGFpbmVyLm5vZGVUeXBlXG4gICAgICA/IGNvbnRhaW5lclxuICAgICAgOiBjb250YWluZXIub3duZXJEb2N1bWVudDtcbn1cbnZhciBwcmV2aW91c0Rpc3BhdGNoZXIgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5kO1xuUmVhY3RET01TaGFyZWRJbnRlcm5hbHMuZCA9IHtcbiAgZjogZmx1c2hTeW5jV29yayxcbiAgcjogcmVxdWVzdEZvcm1SZXNldCxcbiAgRDogcHJlZmV0Y2hETlMsXG4gIEM6IHByZWNvbm5lY3QsXG4gIEw6IHByZWxvYWQsXG4gIG06IHByZWxvYWRNb2R1bGUsXG4gIFg6IHByZWluaXRTY3JpcHQsXG4gIFM6IHByZWluaXRTdHlsZSxcbiAgTTogcHJlaW5pdE1vZHVsZVNjcmlwdFxufTtcbmZ1bmN0aW9uIGZsdXNoU3luY1dvcmsoKSB7XG4gIHZhciBwcmV2aW91c1dhc1JlbmRlcmluZyA9IHByZXZpb3VzRGlzcGF0Y2hlci5mKCksXG4gICAgd2FzUmVuZGVyaW5nID0gZmx1c2hTeW5jV29yayQxKCk7XG4gIHJldHVybiBwcmV2aW91c1dhc1JlbmRlcmluZyB8fCB3YXNSZW5kZXJpbmc7XG59XG5mdW5jdGlvbiByZXF1ZXN0Rm9ybVJlc2V0KGZvcm0pIHtcbiAgdmFyIGZvcm1JbnN0ID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShmb3JtKTtcbiAgbnVsbCAhPT0gZm9ybUluc3QgJiYgNSA9PT0gZm9ybUluc3QudGFnICYmIFwiZm9ybVwiID09PSBmb3JtSW5zdC50eXBlXG4gICAgPyByZXF1ZXN0Rm9ybVJlc2V0JDEoZm9ybUluc3QpXG4gICAgOiBwcmV2aW91c0Rpc3BhdGNoZXIucihmb3JtKTtcbn1cbnZhciBnbG9iYWxEb2N1bWVudCA9IFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiBkb2N1bWVudCA/IG51bGwgOiBkb2N1bWVudDtcbmZ1bmN0aW9uIHByZWNvbm5lY3RBcyhyZWwsIGhyZWYsIGNyb3NzT3JpZ2luKSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmIGhyZWYpIHtcbiAgICB2YXIgbGltaXRlZEVzY2FwZWRIcmVmID1cbiAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZik7XG4gICAgbGltaXRlZEVzY2FwZWRIcmVmID1cbiAgICAgICdsaW5rW3JlbD1cIicgKyByZWwgKyAnXCJdW2hyZWY9XCInICsgbGltaXRlZEVzY2FwZWRIcmVmICsgJ1wiXSc7XG4gICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGNyb3NzT3JpZ2luICYmXG4gICAgICAobGltaXRlZEVzY2FwZWRIcmVmICs9ICdbY3Jvc3NvcmlnaW49XCInICsgY3Jvc3NPcmlnaW4gKyAnXCJdJyk7XG4gICAgcHJlY29ubmVjdHNTZXQuaGFzKGxpbWl0ZWRFc2NhcGVkSHJlZikgfHxcbiAgICAgIChwcmVjb25uZWN0c1NldC5hZGQobGltaXRlZEVzY2FwZWRIcmVmKSxcbiAgICAgIChyZWwgPSB7IHJlbDogcmVsLCBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sIGhyZWY6IGhyZWYgfSksXG4gICAgICBudWxsID09PSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobGltaXRlZEVzY2FwZWRIcmVmKSAmJlxuICAgICAgICAoKGhyZWYgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpKSxcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoaHJlZiwgXCJsaW5rXCIsIHJlbCksXG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaHJlZiksXG4gICAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChocmVmKSkpO1xuICB9XG59XG5mdW5jdGlvbiBwcmVmZXRjaEROUyhocmVmKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5EKGhyZWYpO1xuICBwcmVjb25uZWN0QXMoXCJkbnMtcHJlZmV0Y2hcIiwgaHJlZiwgbnVsbCk7XG59XG5mdW5jdGlvbiBwcmVjb25uZWN0KGhyZWYsIGNyb3NzT3JpZ2luKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5DKGhyZWYsIGNyb3NzT3JpZ2luKTtcbiAgcHJlY29ubmVjdEFzKFwicHJlY29ubmVjdFwiLCBocmVmLCBjcm9zc09yaWdpbik7XG59XG5mdW5jdGlvbiBwcmVsb2FkKGhyZWYsIGFzLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5MKGhyZWYsIGFzLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgaHJlZiAmJiBhcykge1xuICAgIHZhciBwcmVsb2FkU2VsZWN0b3IgPVxuICAgICAgJ2xpbmtbcmVsPVwicHJlbG9hZFwiXVthcz1cIicgK1xuICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhhcykgK1xuICAgICAgJ1wiXSc7XG4gICAgXCJpbWFnZVwiID09PSBhc1xuICAgICAgPyBvcHRpb25zICYmIG9wdGlvbnMuaW1hZ2VTcmNTZXRcbiAgICAgICAgPyAoKHByZWxvYWRTZWxlY3RvciArPVxuICAgICAgICAgICAgJ1tpbWFnZXNyY3NldD1cIicgK1xuICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhcbiAgICAgICAgICAgICAgb3B0aW9ucy5pbWFnZVNyY1NldFxuICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAnXCJdJyksXG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW1hZ2VTaXplcyAmJlxuICAgICAgICAgICAgKHByZWxvYWRTZWxlY3RvciArPVxuICAgICAgICAgICAgICAnW2ltYWdlc2l6ZXM9XCInICtcbiAgICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhcbiAgICAgICAgICAgICAgICBvcHRpb25zLmltYWdlU2l6ZXNcbiAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICdcIl0nKSlcbiAgICAgICAgOiAocHJlbG9hZFNlbGVjdG9yICs9XG4gICAgICAgICAgICAnW2hyZWY9XCInICtcbiAgICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZikgK1xuICAgICAgICAgICAgJ1wiXScpXG4gICAgICA6IChwcmVsb2FkU2VsZWN0b3IgKz1cbiAgICAgICAgICAnW2hyZWY9XCInICtcbiAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpICtcbiAgICAgICAgICAnXCJdJyk7XG4gICAgdmFyIGtleSA9IHByZWxvYWRTZWxlY3RvcjtcbiAgICBzd2l0Y2ggKGFzKSB7XG4gICAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgICAga2V5ID0gZ2V0U3R5bGVLZXkoaHJlZik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICBrZXkgPSBnZXRTY3JpcHRLZXkoaHJlZik7XG4gICAgfVxuICAgIHByZWxvYWRQcm9wc01hcC5oYXMoa2V5KSB8fFxuICAgICAgKChocmVmID0gYXNzaWduKFxuICAgICAgICB7XG4gICAgICAgICAgcmVsOiBcInByZWxvYWRcIixcbiAgICAgICAgICBocmVmOlxuICAgICAgICAgICAgXCJpbWFnZVwiID09PSBhcyAmJiBvcHRpb25zICYmIG9wdGlvbnMuaW1hZ2VTcmNTZXQgPyB2b2lkIDAgOiBocmVmLFxuICAgICAgICAgIGFzOiBhc1xuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zXG4gICAgICApKSxcbiAgICAgIHByZWxvYWRQcm9wc01hcC5zZXQoa2V5LCBocmVmKSxcbiAgICAgIG51bGwgIT09IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihwcmVsb2FkU2VsZWN0b3IpIHx8XG4gICAgICAgIChcInN0eWxlXCIgPT09IGFzICYmXG4gICAgICAgICAgb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoa2V5KSkpIHx8XG4gICAgICAgIChcInNjcmlwdFwiID09PSBhcyAmJlxuICAgICAgICAgIG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSkpIHx8XG4gICAgICAgICgoYXMgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpKSxcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoYXMsIFwibGlua1wiLCBocmVmKSxcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShhcyksXG4gICAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChhcykpKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJlbG9hZE1vZHVsZShocmVmLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5tKGhyZWYsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBocmVmKSB7XG4gICAgdmFyIGFzID0gb3B0aW9ucyAmJiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5hcyA/IG9wdGlvbnMuYXMgOiBcInNjcmlwdFwiLFxuICAgICAgcHJlbG9hZFNlbGVjdG9yID1cbiAgICAgICAgJ2xpbmtbcmVsPVwibW9kdWxlcHJlbG9hZFwiXVthcz1cIicgK1xuICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGFzKSArXG4gICAgICAgICdcIl1baHJlZj1cIicgK1xuICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpICtcbiAgICAgICAgJ1wiXScsXG4gICAgICBrZXkgPSBwcmVsb2FkU2VsZWN0b3I7XG4gICAgc3dpdGNoIChhcykge1xuICAgICAgY2FzZSBcImF1ZGlvd29ya2xldFwiOlxuICAgICAgY2FzZSBcInBhaW50d29ya2xldFwiOlxuICAgICAgY2FzZSBcInNlcnZpY2V3b3JrZXJcIjpcbiAgICAgIGNhc2UgXCJzaGFyZWR3b3JrZXJcIjpcbiAgICAgIGNhc2UgXCJ3b3JrZXJcIjpcbiAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAga2V5ID0gZ2V0U2NyaXB0S2V5KGhyZWYpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAhcHJlbG9hZFByb3BzTWFwLmhhcyhrZXkpICYmXG4gICAgICAoKGhyZWYgPSBhc3NpZ24oeyByZWw6IFwibW9kdWxlcHJlbG9hZFwiLCBocmVmOiBocmVmIH0sIG9wdGlvbnMpKSxcbiAgICAgIHByZWxvYWRQcm9wc01hcC5zZXQoa2V5LCBocmVmKSxcbiAgICAgIG51bGwgPT09IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihwcmVsb2FkU2VsZWN0b3IpKVxuICAgICkge1xuICAgICAgc3dpdGNoIChhcykge1xuICAgICAgICBjYXNlIFwiYXVkaW93b3JrbGV0XCI6XG4gICAgICAgIGNhc2UgXCJwYWludHdvcmtsZXRcIjpcbiAgICAgICAgY2FzZSBcInNlcnZpY2V3b3JrZXJcIjpcbiAgICAgICAgY2FzZSBcInNoYXJlZHdvcmtlclwiOlxuICAgICAgICBjYXNlIFwid29ya2VyXCI6XG4gICAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgICBpZiAob3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFzID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGFzLCBcImxpbmtcIiwgaHJlZik7XG4gICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGFzKTtcbiAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChhcyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBwcmVpbml0U3R5bGUoaHJlZiwgcHJlY2VkZW5jZSwgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuUyhocmVmLCBwcmVjZWRlbmNlLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgaHJlZikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChvd25lckRvY3VtZW50KS5ob2lzdGFibGVTdHlsZXMsXG4gICAgICBrZXkgPSBnZXRTdHlsZUtleShocmVmKTtcbiAgICBwcmVjZWRlbmNlID0gcHJlY2VkZW5jZSB8fCBcImRlZmF1bHRcIjtcbiAgICB2YXIgcmVzb3VyY2UgPSBzdHlsZXMuZ2V0KGtleSk7XG4gICAgaWYgKCFyZXNvdXJjZSkge1xuICAgICAgdmFyIHN0YXRlID0geyBsb2FkaW5nOiAwLCBwcmVsb2FkOiBudWxsIH07XG4gICAgICBpZiAoXG4gICAgICAgIChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICBnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KGtleSlcbiAgICAgICAgKSlcbiAgICAgIClcbiAgICAgICAgc3RhdGUubG9hZGluZyA9IDU7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaHJlZiA9IGFzc2lnbihcbiAgICAgICAgICB7IHJlbDogXCJzdHlsZXNoZWV0XCIsIGhyZWY6IGhyZWYsIFwiZGF0YS1wcmVjZWRlbmNlXCI6IHByZWNlZGVuY2UgfSxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICk7XG4gICAgICAgIChvcHRpb25zID0gcHJlbG9hZFByb3BzTWFwLmdldChrZXkpKSAmJlxuICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldChocmVmLCBvcHRpb25zKTtcbiAgICAgICAgdmFyIGxpbmsgPSAocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpKTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShsaW5rKTtcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMobGluaywgXCJsaW5rXCIsIGhyZWYpO1xuICAgICAgICBsaW5rLl9wID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGxpbmsub25sb2FkID0gcmVzb2x2ZTtcbiAgICAgICAgICBsaW5rLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZS5sb2FkaW5nIHw9IDE7XG4gICAgICAgIH0pO1xuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUubG9hZGluZyB8PSAyO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RhdGUubG9hZGluZyB8PSA0O1xuICAgICAgICBpbnNlcnRTdHlsZXNoZWV0KHJlc291cmNlLCBwcmVjZWRlbmNlLCBvd25lckRvY3VtZW50KTtcbiAgICAgIH1cbiAgICAgIHJlc291cmNlID0ge1xuICAgICAgICB0eXBlOiBcInN0eWxlc2hlZXRcIixcbiAgICAgICAgaW5zdGFuY2U6IHJlc291cmNlLFxuICAgICAgICBjb3VudDogMSxcbiAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICB9O1xuICAgICAgc3R5bGVzLnNldChrZXksIHJlc291cmNlKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWluaXRTY3JpcHQoc3JjLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5YKHNyYywgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIHNyYykge1xuICAgIHZhciBzY3JpcHRzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qob3duZXJEb2N1bWVudCkuaG9pc3RhYmxlU2NyaXB0cyxcbiAgICAgIGtleSA9IGdldFNjcmlwdEtleShzcmMpLFxuICAgICAgcmVzb3VyY2UgPSBzY3JpcHRzLmdldChrZXkpO1xuICAgIHJlc291cmNlIHx8XG4gICAgICAoKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpKSksXG4gICAgICByZXNvdXJjZSB8fFxuICAgICAgICAoKHNyYyA9IGFzc2lnbih7IHNyYzogc3JjLCBhc3luYzogITAgfSwgb3B0aW9ucykpLFxuICAgICAgICAob3B0aW9ucyA9IHByZWxvYWRQcm9wc01hcC5nZXQoa2V5KSkgJiZcbiAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdChzcmMsIG9wdGlvbnMpLFxuICAgICAgICAocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpLFxuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKHJlc291cmNlKSxcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMocmVzb3VyY2UsIFwibGlua1wiLCBzcmMpLFxuICAgICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQocmVzb3VyY2UpKSxcbiAgICAgIChyZXNvdXJjZSA9IHtcbiAgICAgICAgdHlwZTogXCJzY3JpcHRcIixcbiAgICAgICAgaW5zdGFuY2U6IHJlc291cmNlLFxuICAgICAgICBjb3VudDogMSxcbiAgICAgICAgc3RhdGU6IG51bGxcbiAgICAgIH0pLFxuICAgICAgc2NyaXB0cy5zZXQoa2V5LCByZXNvdXJjZSkpO1xuICB9XG59XG5mdW5jdGlvbiBwcmVpbml0TW9kdWxlU2NyaXB0KHNyYywgb3B0aW9ucykge1xuICBwcmV2aW91c0Rpc3BhdGNoZXIuTShzcmMsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBzcmMpIHtcbiAgICB2YXIgc2NyaXB0cyA9IGdldFJlc291cmNlc0Zyb21Sb290KG93bmVyRG9jdW1lbnQpLmhvaXN0YWJsZVNjcmlwdHMsXG4gICAgICBrZXkgPSBnZXRTY3JpcHRLZXkoc3JjKSxcbiAgICAgIHJlc291cmNlID0gc2NyaXB0cy5nZXQoa2V5KTtcbiAgICByZXNvdXJjZSB8fFxuICAgICAgKChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSkpLFxuICAgICAgcmVzb3VyY2UgfHxcbiAgICAgICAgKChzcmMgPSBhc3NpZ24oeyBzcmM6IHNyYywgYXN5bmM6ICEwLCB0eXBlOiBcIm1vZHVsZVwiIH0sIG9wdGlvbnMpKSxcbiAgICAgICAgKG9wdGlvbnMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGtleSkpICYmXG4gICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQoc3JjLCBvcHRpb25zKSxcbiAgICAgICAgKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSxcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShyZXNvdXJjZSksXG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKHJlc291cmNlLCBcImxpbmtcIiwgc3JjKSxcbiAgICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHJlc291cmNlKSksXG4gICAgICAocmVzb3VyY2UgPSB7XG4gICAgICAgIHR5cGU6IFwic2NyaXB0XCIsXG4gICAgICAgIGluc3RhbmNlOiByZXNvdXJjZSxcbiAgICAgICAgY291bnQ6IDEsXG4gICAgICAgIHN0YXRlOiBudWxsXG4gICAgICB9KSxcbiAgICAgIHNjcmlwdHMuc2V0KGtleSwgcmVzb3VyY2UpKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UmVzb3VyY2UodHlwZSwgY3VycmVudFByb3BzLCBwZW5kaW5nUHJvcHMsIGN1cnJlbnRSZXNvdXJjZSkge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IuY3VycmVudClcbiAgICA/IGdldEhvaXN0YWJsZVJvb3QoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KVxuICAgIDogbnVsbDtcbiAgaWYgKCFKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDQ2KSk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIHJldHVybiBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzLnByZWNlZGVuY2UgJiZcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcy5ocmVmXG4gICAgICAgID8gKChjdXJyZW50UHJvcHMgPSBnZXRTdHlsZUtleShwZW5kaW5nUHJvcHMuaHJlZikpLFxuICAgICAgICAgIChwZW5kaW5nUHJvcHMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICkuaG9pc3RhYmxlU3R5bGVzKSxcbiAgICAgICAgICAoY3VycmVudFJlc291cmNlID0gcGVuZGluZ1Byb3BzLmdldChjdXJyZW50UHJvcHMpKSxcbiAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgfHxcbiAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0ge1xuICAgICAgICAgICAgICB0eXBlOiBcInN0eWxlXCIsXG4gICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgICAgc3RhdGU6IG51bGxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgcGVuZGluZ1Byb3BzLnNldChjdXJyZW50UHJvcHMsIGN1cnJlbnRSZXNvdXJjZSkpLFxuICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSlcbiAgICAgICAgOiB7IHR5cGU6IFwidm9pZFwiLCBpbnN0YW5jZTogbnVsbCwgY291bnQ6IDAsIHN0YXRlOiBudWxsIH07XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGlmIChcbiAgICAgICAgXCJzdHlsZXNoZWV0XCIgPT09IHBlbmRpbmdQcm9wcy5yZWwgJiZcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcy5ocmVmICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMucHJlY2VkZW5jZVxuICAgICAgKSB7XG4gICAgICAgIHR5cGUgPSBnZXRTdHlsZUtleShwZW5kaW5nUHJvcHMuaHJlZik7XG4gICAgICAgIHZhciBzdHlsZXMkMjQ0ID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3QoXG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICApLmhvaXN0YWJsZVN0eWxlcyxcbiAgICAgICAgICByZXNvdXJjZSQyNDUgPSBzdHlsZXMkMjQ0LmdldCh0eXBlKTtcbiAgICAgICAgcmVzb3VyY2UkMjQ1IHx8XG4gICAgICAgICAgKChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0Lm93bmVyRG9jdW1lbnQgfHwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSxcbiAgICAgICAgICAocmVzb3VyY2UkMjQ1ID0ge1xuICAgICAgICAgICAgdHlwZTogXCJzdHlsZXNoZWV0XCIsXG4gICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgc3RhdGU6IHsgbG9hZGluZzogMCwgcHJlbG9hZDogbnVsbCB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgc3R5bGVzJDI0NC5zZXQodHlwZSwgcmVzb3VyY2UkMjQ1KSxcbiAgICAgICAgICAoc3R5bGVzJDI0NCA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleSh0eXBlKVxuICAgICAgICAgICkpICYmXG4gICAgICAgICAgICAhc3R5bGVzJDI0NC5fcCAmJlxuICAgICAgICAgICAgKChyZXNvdXJjZSQyNDUuaW5zdGFuY2UgPSBzdHlsZXMkMjQ0KSxcbiAgICAgICAgICAgIChyZXNvdXJjZSQyNDUuc3RhdGUubG9hZGluZyA9IDUpKSxcbiAgICAgICAgICBwcmVsb2FkUHJvcHNNYXAuaGFzKHR5cGUpIHx8XG4gICAgICAgICAgICAoKHBlbmRpbmdQcm9wcyA9IHtcbiAgICAgICAgICAgICAgcmVsOiBcInByZWxvYWRcIixcbiAgICAgICAgICAgICAgYXM6IFwic3R5bGVcIixcbiAgICAgICAgICAgICAgaHJlZjogcGVuZGluZ1Byb3BzLmhyZWYsXG4gICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiBwZW5kaW5nUHJvcHMuY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgICAgIGludGVncml0eTogcGVuZGluZ1Byb3BzLmludGVncml0eSxcbiAgICAgICAgICAgICAgbWVkaWE6IHBlbmRpbmdQcm9wcy5tZWRpYSxcbiAgICAgICAgICAgICAgaHJlZkxhbmc6IHBlbmRpbmdQcm9wcy5ocmVmTGFuZyxcbiAgICAgICAgICAgICAgcmVmZXJyZXJQb2xpY3k6IHBlbmRpbmdQcm9wcy5yZWZlcnJlclBvbGljeVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwcmVsb2FkUHJvcHNNYXAuc2V0KHR5cGUsIHBlbmRpbmdQcm9wcyksXG4gICAgICAgICAgICBzdHlsZXMkMjQ0IHx8XG4gICAgICAgICAgICAgIHByZWxvYWRTdHlsZXNoZWV0KFxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCxcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIHBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgICAgICByZXNvdXJjZSQyNDUuc3RhdGVcbiAgICAgICAgICAgICAgKSkpO1xuICAgICAgICBpZiAoY3VycmVudFByb3BzICYmIG51bGwgPT09IGN1cnJlbnRSZXNvdXJjZSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDUyOCwgXCJcIikpO1xuICAgICAgICByZXR1cm4gcmVzb3VyY2UkMjQ1O1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRQcm9wcyAmJiBudWxsICE9PSBjdXJyZW50UmVzb3VyY2UpXG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTI5LCBcIlwiKSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudFByb3BzID0gcGVuZGluZ1Byb3BzLmFzeW5jKSxcbiAgICAgICAgKHBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcy5zcmMpLFxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzICYmXG4gICAgICAgIGN1cnJlbnRQcm9wcyAmJlxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjdXJyZW50UHJvcHMgJiZcbiAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIGN1cnJlbnRQcm9wc1xuICAgICAgICAgID8gKChjdXJyZW50UHJvcHMgPSBnZXRTY3JpcHRLZXkocGVuZGluZ1Byb3BzKSksXG4gICAgICAgICAgICAocGVuZGluZ1Byb3BzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3QoXG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICAgKS5ob2lzdGFibGVTY3JpcHRzKSxcbiAgICAgICAgICAgIChjdXJyZW50UmVzb3VyY2UgPSBwZW5kaW5nUHJvcHMuZ2V0KGN1cnJlbnRQcm9wcykpLFxuICAgICAgICAgICAgY3VycmVudFJlc291cmNlIHx8XG4gICAgICAgICAgICAgICgoY3VycmVudFJlc291cmNlID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwic2NyaXB0XCIsXG4gICAgICAgICAgICAgICAgaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICAgICAgc3RhdGU6IG51bGxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHBlbmRpbmdQcm9wcy5zZXQoY3VycmVudFByb3BzLCBjdXJyZW50UmVzb3VyY2UpKSxcbiAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSlcbiAgICAgICAgICA6IHsgdHlwZTogXCJ2b2lkXCIsIGluc3RhbmNlOiBudWxsLCBjb3VudDogMCwgc3RhdGU6IG51bGwgfVxuICAgICAgKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NDQsIHR5cGUpKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3R5bGVLZXkoaHJlZikge1xuICByZXR1cm4gJ2hyZWY9XCInICsgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKSArICdcIic7XG59XG5mdW5jdGlvbiBnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KGtleSkge1xuICByZXR1cm4gJ2xpbmtbcmVsPVwic3R5bGVzaGVldFwiXVsnICsga2V5ICsgXCJdXCI7XG59XG5mdW5jdGlvbiBzdHlsZXNoZWV0UHJvcHNGcm9tUmF3UHJvcHMocmF3UHJvcHMpIHtcbiAgcmV0dXJuIGFzc2lnbih7fSwgcmF3UHJvcHMsIHtcbiAgICBcImRhdGEtcHJlY2VkZW5jZVwiOiByYXdQcm9wcy5wcmVjZWRlbmNlLFxuICAgIHByZWNlZGVuY2U6IG51bGxcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVsb2FkU3R5bGVzaGVldChvd25lckRvY3VtZW50LCBrZXksIHByZWxvYWRQcm9wcywgc3RhdGUpIHtcbiAgb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdsaW5rW3JlbD1cInByZWxvYWRcIl1bYXM9XCJzdHlsZVwiXVsnICsga2V5ICsgXCJdXCIpXG4gICAgPyAoc3RhdGUubG9hZGluZyA9IDEpXG4gICAgOiAoKGtleSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIikpLFxuICAgICAgKHN0YXRlLnByZWxvYWQgPSBrZXkpLFxuICAgICAga2V5LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5sb2FkaW5nIHw9IDEpO1xuICAgICAgfSksXG4gICAgICBrZXkuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5sb2FkaW5nIHw9IDIpO1xuICAgICAgfSksXG4gICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhrZXksIFwibGlua1wiLCBwcmVsb2FkUHJvcHMpLFxuICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShrZXkpLFxuICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGtleSkpO1xufVxuZnVuY3Rpb24gZ2V0U2NyaXB0S2V5KHNyYykge1xuICByZXR1cm4gJ1tzcmM9XCInICsgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhzcmMpICsgJ1wiXSc7XG59XG5mdW5jdGlvbiBnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoa2V5KSB7XG4gIHJldHVybiBcInNjcmlwdFthc3luY11cIiArIGtleTtcbn1cbmZ1bmN0aW9uIGFjcXVpcmVSZXNvdXJjZShob2lzdGFibGVSb290LCByZXNvdXJjZSwgcHJvcHMpIHtcbiAgcmVzb3VyY2UuY291bnQrKztcbiAgaWYgKG51bGwgPT09IHJlc291cmNlLmluc3RhbmNlKVxuICAgIHN3aXRjaCAocmVzb3VyY2UudHlwZSkge1xuICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAnc3R5bGVbZGF0YS1ocmVmfj1cIicgK1xuICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlcyhwcm9wcy5ocmVmKSArXG4gICAgICAgICAgICAnXCJdJ1xuICAgICAgICApO1xuICAgICAgICBpZiAoaW5zdGFuY2UpXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChyZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlKSxcbiAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UpLFxuICAgICAgICAgICAgaW5zdGFuY2VcbiAgICAgICAgICApO1xuICAgICAgICB2YXIgc3R5bGVQcm9wcyA9IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICBcImRhdGEtaHJlZlwiOiBwcm9wcy5ocmVmLFxuICAgICAgICAgIFwiZGF0YS1wcmVjZWRlbmNlXCI6IHByb3BzLnByZWNlZGVuY2UsXG4gICAgICAgICAgaHJlZjogbnVsbCxcbiAgICAgICAgICBwcmVjZWRlbmNlOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgICBpbnN0YW5jZSA9IChob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdCkuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBcInN0eWxlXCJcbiAgICAgICAgKTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSk7XG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGluc3RhbmNlLCBcInN0eWxlXCIsIHN0eWxlUHJvcHMpO1xuICAgICAgICBpbnNlcnRTdHlsZXNoZWV0KGluc3RhbmNlLCBwcm9wcy5wcmVjZWRlbmNlLCBob2lzdGFibGVSb290KTtcbiAgICAgICAgcmV0dXJuIChyZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlKTtcbiAgICAgIGNhc2UgXCJzdHlsZXNoZWV0XCI6XG4gICAgICAgIHN0eWxlUHJvcHMgPSBnZXRTdHlsZUtleShwcm9wcy5ocmVmKTtcbiAgICAgICAgdmFyIGluc3RhbmNlJDI1MCA9IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICBnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KHN0eWxlUHJvcHMpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChpbnN0YW5jZSQyNTApXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQpLFxuICAgICAgICAgICAgKHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2UkMjUwKSxcbiAgICAgICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UkMjUwKSxcbiAgICAgICAgICAgIGluc3RhbmNlJDI1MFxuICAgICAgICAgICk7XG4gICAgICAgIGluc3RhbmNlID0gc3R5bGVzaGVldFByb3BzRnJvbVJhd1Byb3BzKHByb3BzKTtcbiAgICAgICAgKHN0eWxlUHJvcHMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KHN0eWxlUHJvcHMpKSAmJlxuICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldChpbnN0YW5jZSwgc3R5bGVQcm9wcyk7XG4gICAgICAgIGluc3RhbmNlJDI1MCA9IChcbiAgICAgICAgICBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdFxuICAgICAgICApLmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlJDI1MCk7XG4gICAgICAgIHZhciBsaW5rSW5zdGFuY2UgPSBpbnN0YW5jZSQyNTA7XG4gICAgICAgIGxpbmtJbnN0YW5jZS5fcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBsaW5rSW5zdGFuY2Uub25sb2FkID0gcmVzb2x2ZTtcbiAgICAgICAgICBsaW5rSW5zdGFuY2Uub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGluc3RhbmNlJDI1MCwgXCJsaW5rXCIsIGluc3RhbmNlKTtcbiAgICAgICAgcmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0O1xuICAgICAgICBpbnNlcnRTdHlsZXNoZWV0KGluc3RhbmNlJDI1MCwgcHJvcHMucHJlY2VkZW5jZSwgaG9pc3RhYmxlUm9vdCk7XG4gICAgICAgIHJldHVybiAocmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZSQyNTApO1xuICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICBpbnN0YW5jZSQyNTAgPSBnZXRTY3JpcHRLZXkocHJvcHMuc3JjKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChzdHlsZVByb3BzID0gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGluc3RhbmNlJDI1MClcbiAgICAgICAgICApKVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChyZXNvdXJjZS5pbnN0YW5jZSA9IHN0eWxlUHJvcHMpLFxuICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShzdHlsZVByb3BzKSxcbiAgICAgICAgICAgIHN0eWxlUHJvcHNcbiAgICAgICAgICApO1xuICAgICAgICBpbnN0YW5jZSA9IHByb3BzO1xuICAgICAgICBpZiAoKHN0eWxlUHJvcHMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGluc3RhbmNlJDI1MCkpKVxuICAgICAgICAgIChpbnN0YW5jZSA9IGFzc2lnbih7fSwgcHJvcHMpKSxcbiAgICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0KGluc3RhbmNlLCBzdHlsZVByb3BzKTtcbiAgICAgICAgaG9pc3RhYmxlUm9vdCA9IGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290O1xuICAgICAgICBzdHlsZVByb3BzID0gaG9pc3RhYmxlUm9vdC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKHN0eWxlUHJvcHMpO1xuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhzdHlsZVByb3BzLCBcImxpbmtcIiwgaW5zdGFuY2UpO1xuICAgICAgICBob2lzdGFibGVSb290LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVQcm9wcyk7XG4gICAgICAgIHJldHVybiAocmVzb3VyY2UuaW5zdGFuY2UgPSBzdHlsZVByb3BzKTtcbiAgICAgIGNhc2UgXCJ2b2lkXCI6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NDMsIHJlc291cmNlLnR5cGUpKTtcbiAgICB9XG4gIGVsc2VcbiAgICBcInN0eWxlc2hlZXRcIiA9PT0gcmVzb3VyY2UudHlwZSAmJlxuICAgICAgMCA9PT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KSAmJlxuICAgICAgKChpbnN0YW5jZSA9IHJlc291cmNlLmluc3RhbmNlKSxcbiAgICAgIChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQpLFxuICAgICAgaW5zZXJ0U3R5bGVzaGVldChpbnN0YW5jZSwgcHJvcHMucHJlY2VkZW5jZSwgaG9pc3RhYmxlUm9vdCkpO1xuICByZXR1cm4gcmVzb3VyY2UuaW5zdGFuY2U7XG59XG5mdW5jdGlvbiBpbnNlcnRTdHlsZXNoZWV0KGluc3RhbmNlLCBwcmVjZWRlbmNlLCByb290KSB7XG4gIGZvciAoXG4gICAgdmFyIG5vZGVzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAnbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdW2RhdGEtcHJlY2VkZW5jZV0sc3R5bGVbZGF0YS1wcmVjZWRlbmNlXSdcbiAgICAgICksXG4gICAgICBsYXN0ID0gbm9kZXMubGVuZ3RoID8gbm9kZXNbbm9kZXMubGVuZ3RoIC0gMV0gOiBudWxsLFxuICAgICAgcHJpb3IgPSBsYXN0LFxuICAgICAgaSA9IDA7XG4gICAgaSA8IG5vZGVzLmxlbmd0aDtcbiAgICBpKytcbiAgKSB7XG4gICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICBpZiAobm9kZS5kYXRhc2V0LnByZWNlZGVuY2UgPT09IHByZWNlZGVuY2UpIHByaW9yID0gbm9kZTtcbiAgICBlbHNlIGlmIChwcmlvciAhPT0gbGFzdCkgYnJlYWs7XG4gIH1cbiAgcHJpb3JcbiAgICA/IHByaW9yLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGluc3RhbmNlLCBwcmlvci5uZXh0U2libGluZylcbiAgICA6ICgocHJlY2VkZW5jZSA9IDkgPT09IHJvb3Qubm9kZVR5cGUgPyByb290LmhlYWQgOiByb290KSxcbiAgICAgIHByZWNlZGVuY2UuaW5zZXJ0QmVmb3JlKGluc3RhbmNlLCBwcmVjZWRlbmNlLmZpcnN0Q2hpbGQpKTtcbn1cbmZ1bmN0aW9uIGFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldChzdHlsZXNoZWV0UHJvcHMsIHByZWxvYWRQcm9wcykge1xuICBudWxsID09IHN0eWxlc2hlZXRQcm9wcy5jcm9zc09yaWdpbiAmJlxuICAgIChzdHlsZXNoZWV0UHJvcHMuY3Jvc3NPcmlnaW4gPSBwcmVsb2FkUHJvcHMuY3Jvc3NPcmlnaW4pO1xuICBudWxsID09IHN0eWxlc2hlZXRQcm9wcy5yZWZlcnJlclBvbGljeSAmJlxuICAgIChzdHlsZXNoZWV0UHJvcHMucmVmZXJyZXJQb2xpY3kgPSBwcmVsb2FkUHJvcHMucmVmZXJyZXJQb2xpY3kpO1xuICBudWxsID09IHN0eWxlc2hlZXRQcm9wcy50aXRsZSAmJiAoc3R5bGVzaGVldFByb3BzLnRpdGxlID0gcHJlbG9hZFByb3BzLnRpdGxlKTtcbn1cbmZ1bmN0aW9uIGFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0KHNjcmlwdFByb3BzLCBwcmVsb2FkUHJvcHMpIHtcbiAgbnVsbCA9PSBzY3JpcHRQcm9wcy5jcm9zc09yaWdpbiAmJlxuICAgIChzY3JpcHRQcm9wcy5jcm9zc09yaWdpbiA9IHByZWxvYWRQcm9wcy5jcm9zc09yaWdpbik7XG4gIG51bGwgPT0gc2NyaXB0UHJvcHMucmVmZXJyZXJQb2xpY3kgJiZcbiAgICAoc2NyaXB0UHJvcHMucmVmZXJyZXJQb2xpY3kgPSBwcmVsb2FkUHJvcHMucmVmZXJyZXJQb2xpY3kpO1xuICBudWxsID09IHNjcmlwdFByb3BzLmludGVncml0eSAmJlxuICAgIChzY3JpcHRQcm9wcy5pbnRlZ3JpdHkgPSBwcmVsb2FkUHJvcHMuaW50ZWdyaXR5KTtcbn1cbnZhciB0YWdDYWNoZXMgPSBudWxsO1xuZnVuY3Rpb24gZ2V0SHlkcmF0YWJsZUhvaXN0YWJsZUNhY2hlKHR5cGUsIGtleUF0dHJpYnV0ZSwgb3duZXJEb2N1bWVudCkge1xuICBpZiAobnVsbCA9PT0gdGFnQ2FjaGVzKSB7XG4gICAgdmFyIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgIHZhciBjYWNoZXMgPSAodGFnQ2FjaGVzID0gbmV3IE1hcCgpKTtcbiAgICBjYWNoZXMuc2V0KG93bmVyRG9jdW1lbnQsIGNhY2hlKTtcbiAgfSBlbHNlXG4gICAgKGNhY2hlcyA9IHRhZ0NhY2hlcyksXG4gICAgICAoY2FjaGUgPSBjYWNoZXMuZ2V0KG93bmVyRG9jdW1lbnQpKSxcbiAgICAgIGNhY2hlIHx8ICgoY2FjaGUgPSBuZXcgTWFwKCkpLCBjYWNoZXMuc2V0KG93bmVyRG9jdW1lbnQsIGNhY2hlKSk7XG4gIGlmIChjYWNoZS5oYXModHlwZSkpIHJldHVybiBjYWNoZTtcbiAgY2FjaGUuc2V0KHR5cGUsIG51bGwpO1xuICBvd25lckRvY3VtZW50ID0gb3duZXJEb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0eXBlKTtcbiAgZm9yIChjYWNoZXMgPSAwOyBjYWNoZXMgPCBvd25lckRvY3VtZW50Lmxlbmd0aDsgY2FjaGVzKyspIHtcbiAgICB2YXIgbm9kZSA9IG93bmVyRG9jdW1lbnRbY2FjaGVzXTtcbiAgICBpZiAoXG4gICAgICAhKFxuICAgICAgICBub2RlW2ludGVybmFsSG9pc3RhYmxlTWFya2VyXSB8fFxuICAgICAgICBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldIHx8XG4gICAgICAgIChcImxpbmtcIiA9PT0gdHlwZSAmJiBcInN0eWxlc2hlZXRcIiA9PT0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikpXG4gICAgICApICYmXG4gICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgIT09IG5vZGUubmFtZXNwYWNlVVJJXG4gICAgKSB7XG4gICAgICB2YXIgbm9kZUtleSA9IG5vZGUuZ2V0QXR0cmlidXRlKGtleUF0dHJpYnV0ZSkgfHwgXCJcIjtcbiAgICAgIG5vZGVLZXkgPSB0eXBlICsgbm9kZUtleTtcbiAgICAgIHZhciBleGlzdGluZyA9IGNhY2hlLmdldChub2RlS2V5KTtcbiAgICAgIGV4aXN0aW5nID8gZXhpc3RpbmcucHVzaChub2RlKSA6IGNhY2hlLnNldChub2RlS2V5LCBbbm9kZV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2FjaGU7XG59XG5mdW5jdGlvbiBtb3VudEhvaXN0YWJsZShob2lzdGFibGVSb290LCB0eXBlLCBpbnN0YW5jZSkge1xuICBob2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3Q7XG4gIGhvaXN0YWJsZVJvb3QuaGVhZC5pbnNlcnRCZWZvcmUoXG4gICAgaW5zdGFuY2UsXG4gICAgXCJ0aXRsZVwiID09PSB0eXBlID8gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFwiaGVhZCA+IHRpdGxlXCIpIDogbnVsbFxuICApO1xufVxuZnVuY3Rpb24gaXNIb3N0SG9pc3RhYmxlVHlwZSh0eXBlLCBwcm9wcywgaG9zdENvbnRleHQpIHtcbiAgaWYgKDEgPT09IGhvc3RDb250ZXh0IHx8IG51bGwgIT0gcHJvcHMuaXRlbVByb3ApIHJldHVybiAhMTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgIHJldHVybiAhMDtcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIGlmIChcbiAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLnByZWNlZGVuY2UgfHxcbiAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLmhyZWYgfHxcbiAgICAgICAgXCJcIiA9PT0gcHJvcHMuaHJlZlxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICAgIHJldHVybiAhMDtcbiAgICBjYXNlIFwibGlua1wiOlxuICAgICAgaWYgKFxuICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMucmVsIHx8XG4gICAgICAgIFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5ocmVmIHx8XG4gICAgICAgIFwiXCIgPT09IHByb3BzLmhyZWYgfHxcbiAgICAgICAgcHJvcHMub25Mb2FkIHx8XG4gICAgICAgIHByb3BzLm9uRXJyb3JcbiAgICAgIClcbiAgICAgICAgYnJlYWs7XG4gICAgICBzd2l0Y2ggKHByb3BzLnJlbCkge1xuICAgICAgICBjYXNlIFwic3R5bGVzaGVldFwiOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAodHlwZSA9IHByb3BzLmRpc2FibGVkKSxcbiAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwcm9wcy5wcmVjZWRlbmNlICYmIG51bGwgPT0gdHlwZVxuICAgICAgICAgICk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgfVxuICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgIGlmIChcbiAgICAgICAgcHJvcHMuYXN5bmMgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcHJvcHMuYXN5bmMgJiZcbiAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHByb3BzLmFzeW5jICYmXG4gICAgICAgICFwcm9wcy5vbkxvYWQgJiZcbiAgICAgICAgIXByb3BzLm9uRXJyb3IgJiZcbiAgICAgICAgcHJvcHMuc3JjICYmXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwcm9wcy5zcmNcbiAgICAgIClcbiAgICAgICAgcmV0dXJuICEwO1xuICB9XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIHByZWxvYWRSZXNvdXJjZShyZXNvdXJjZSkge1xuICByZXR1cm4gXCJzdHlsZXNoZWV0XCIgPT09IHJlc291cmNlLnR5cGUgJiYgMCA9PT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiAzKVxuICAgID8gITFcbiAgICA6ICEwO1xufVxudmFyIHN1c3BlbmRlZFN0YXRlID0gbnVsbDtcbmZ1bmN0aW9uIG5vb3AoKSB7fVxuZnVuY3Rpb24gc3VzcGVuZFJlc291cmNlKGhvaXN0YWJsZVJvb3QsIHJlc291cmNlLCBwcm9wcykge1xuICBpZiAobnVsbCA9PT0gc3VzcGVuZGVkU3RhdGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDc1KSk7XG4gIHZhciBzdGF0ZSA9IHN1c3BlbmRlZFN0YXRlO1xuICBpZiAoXG4gICAgXCJzdHlsZXNoZWV0XCIgPT09IHJlc291cmNlLnR5cGUgJiZcbiAgICAoXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLm1lZGlhIHx8XG4gICAgICAhMSAhPT0gbWF0Y2hNZWRpYShwcm9wcy5tZWRpYSkubWF0Y2hlcykgJiZcbiAgICAwID09PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDQpXG4gICkge1xuICAgIGlmIChudWxsID09PSByZXNvdXJjZS5pbnN0YW5jZSkge1xuICAgICAgdmFyIGtleSA9IGdldFN0eWxlS2V5KHByb3BzLmhyZWYpLFxuICAgICAgICBpbnN0YW5jZSA9IGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICBnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KGtleSlcbiAgICAgICAgKTtcbiAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICBob2lzdGFibGVSb290ID0gaW5zdGFuY2UuX3A7XG4gICAgICAgIG51bGwgIT09IGhvaXN0YWJsZVJvb3QgJiZcbiAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgaG9pc3RhYmxlUm9vdCAmJlxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGhvaXN0YWJsZVJvb3QudGhlbiAmJlxuICAgICAgICAgIChzdGF0ZS5jb3VudCsrLFxuICAgICAgICAgIChzdGF0ZSA9IG9uVW5zdXNwZW5kLmJpbmQoc3RhdGUpKSxcbiAgICAgICAgICBob2lzdGFibGVSb290LnRoZW4oc3RhdGUsIHN0YXRlKSk7XG4gICAgICAgIHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNDtcbiAgICAgICAgcmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGluc3RhbmNlID0gaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3Q7XG4gICAgICBwcm9wcyA9IHN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyhwcm9wcyk7XG4gICAgICAoa2V5ID0gcHJlbG9hZFByb3BzTWFwLmdldChrZXkpKSAmJlxuICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQocHJvcHMsIGtleSk7XG4gICAgICBpbnN0YW5jZSA9IGluc3RhbmNlLmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSk7XG4gICAgICB2YXIgbGlua0luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICBsaW5rSW5zdGFuY2UuX3AgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGxpbmtJbnN0YW5jZS5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICBsaW5rSW5zdGFuY2Uub25lcnJvciA9IHJlamVjdDtcbiAgICAgIH0pO1xuICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoaW5zdGFuY2UsIFwibGlua1wiLCBwcm9wcyk7XG4gICAgICByZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgIH1cbiAgICBudWxsID09PSBzdGF0ZS5zdHlsZXNoZWV0cyAmJiAoc3RhdGUuc3R5bGVzaGVldHMgPSBuZXcgTWFwKCkpO1xuICAgIHN0YXRlLnN0eWxlc2hlZXRzLnNldChyZXNvdXJjZSwgaG9pc3RhYmxlUm9vdCk7XG4gICAgKGhvaXN0YWJsZVJvb3QgPSByZXNvdXJjZS5zdGF0ZS5wcmVsb2FkKSAmJlxuICAgICAgMCA9PT0gKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiAzKSAmJlxuICAgICAgKHN0YXRlLmNvdW50KyssXG4gICAgICAocmVzb3VyY2UgPSBvblVuc3VzcGVuZC5iaW5kKHN0YXRlKSksXG4gICAgICBob2lzdGFibGVSb290LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIHJlc291cmNlKSxcbiAgICAgIGhvaXN0YWJsZVJvb3QuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIHJlc291cmNlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHdhaXRGb3JDb21taXRUb0JlUmVhZHkoKSB7XG4gIGlmIChudWxsID09PSBzdXNwZW5kZWRTdGF0ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NzUpKTtcbiAgdmFyIHN0YXRlID0gc3VzcGVuZGVkU3RhdGU7XG4gIHN0YXRlLnN0eWxlc2hlZXRzICYmXG4gICAgMCA9PT0gc3RhdGUuY291bnQgJiZcbiAgICBpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyhzdGF0ZSwgc3RhdGUuc3R5bGVzaGVldHMpO1xuICByZXR1cm4gMCA8IHN0YXRlLmNvdW50XG4gICAgPyBmdW5jdGlvbiAoY29tbWl0KSB7XG4gICAgICAgIHZhciBzdHlsZXNoZWV0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZS5zdHlsZXNoZWV0cyAmJlxuICAgICAgICAgICAgaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHMoc3RhdGUsIHN0YXRlLnN0eWxlc2hlZXRzKTtcbiAgICAgICAgICBpZiAoc3RhdGUudW5zdXNwZW5kKSB7XG4gICAgICAgICAgICB2YXIgdW5zdXNwZW5kID0gc3RhdGUudW5zdXNwZW5kO1xuICAgICAgICAgICAgc3RhdGUudW5zdXNwZW5kID0gbnVsbDtcbiAgICAgICAgICAgIHVuc3VzcGVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgNmU0KTtcbiAgICAgICAgc3RhdGUudW5zdXNwZW5kID0gY29tbWl0O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLnVuc3VzcGVuZCA9IG51bGw7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHN0eWxlc2hlZXRUaW1lcik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgOiBudWxsO1xufVxuZnVuY3Rpb24gb25VbnN1c3BlbmQoKSB7XG4gIHRoaXMuY291bnQtLTtcbiAgaWYgKDAgPT09IHRoaXMuY291bnQpXG4gICAgaWYgKHRoaXMuc3R5bGVzaGVldHMpIGluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzKHRoaXMsIHRoaXMuc3R5bGVzaGVldHMpO1xuICAgIGVsc2UgaWYgKHRoaXMudW5zdXNwZW5kKSB7XG4gICAgICB2YXIgdW5zdXNwZW5kID0gdGhpcy51bnN1c3BlbmQ7XG4gICAgICB0aGlzLnVuc3VzcGVuZCA9IG51bGw7XG4gICAgICB1bnN1c3BlbmQoKTtcbiAgICB9XG59XG52YXIgcHJlY2VkZW5jZXNCeVJvb3QgPSBudWxsO1xuZnVuY3Rpb24gaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHMoc3RhdGUsIHJlc291cmNlcykge1xuICBzdGF0ZS5zdHlsZXNoZWV0cyA9IG51bGw7XG4gIG51bGwgIT09IHN0YXRlLnVuc3VzcGVuZCAmJlxuICAgIChzdGF0ZS5jb3VudCsrLFxuICAgIChwcmVjZWRlbmNlc0J5Um9vdCA9IG5ldyBNYXAoKSksXG4gICAgcmVzb3VyY2VzLmZvckVhY2goaW5zZXJ0U3R5bGVzaGVldEludG9Sb290LCBzdGF0ZSksXG4gICAgKHByZWNlZGVuY2VzQnlSb290ID0gbnVsbCksXG4gICAgb25VbnN1c3BlbmQuY2FsbChzdGF0ZSkpO1xufVxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVzaGVldEludG9Sb290KHJvb3QsIHJlc291cmNlKSB7XG4gIGlmICghKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgJiA0KSkge1xuICAgIHZhciBwcmVjZWRlbmNlcyA9IHByZWNlZGVuY2VzQnlSb290LmdldChyb290KTtcbiAgICBpZiAocHJlY2VkZW5jZXMpIHZhciBsYXN0ID0gcHJlY2VkZW5jZXMuZ2V0KG51bGwpO1xuICAgIGVsc2Uge1xuICAgICAgcHJlY2VkZW5jZXMgPSBuZXcgTWFwKCk7XG4gICAgICBwcmVjZWRlbmNlc0J5Um9vdC5zZXQocm9vdCwgcHJlY2VkZW5jZXMpO1xuICAgICAgZm9yIChcbiAgICAgICAgdmFyIG5vZGVzID0gcm9vdC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgXCJsaW5rW2RhdGEtcHJlY2VkZW5jZV0sc3R5bGVbZGF0YS1wcmVjZWRlbmNlXVwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICBpID0gMDtcbiAgICAgICAgaSA8IG5vZGVzLmxlbmd0aDtcbiAgICAgICAgaSsrXG4gICAgICApIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwiTElOS1wiID09PSBub2RlLm5vZGVOYW1lIHx8XG4gICAgICAgICAgXCJub3QgYWxsXCIgIT09IG5vZGUuZ2V0QXR0cmlidXRlKFwibWVkaWFcIilcbiAgICAgICAgKVxuICAgICAgICAgIHByZWNlZGVuY2VzLnNldChub2RlLmRhdGFzZXQucHJlY2VkZW5jZSwgbm9kZSksIChsYXN0ID0gbm9kZSk7XG4gICAgICB9XG4gICAgICBsYXN0ICYmIHByZWNlZGVuY2VzLnNldChudWxsLCBsYXN0KTtcbiAgICB9XG4gICAgbm9kZXMgPSByZXNvdXJjZS5pbnN0YW5jZTtcbiAgICBub2RlID0gbm9kZXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1wcmVjZWRlbmNlXCIpO1xuICAgIGkgPSBwcmVjZWRlbmNlcy5nZXQobm9kZSkgfHwgbGFzdDtcbiAgICBpID09PSBsYXN0ICYmIHByZWNlZGVuY2VzLnNldChudWxsLCBub2Rlcyk7XG4gICAgcHJlY2VkZW5jZXMuc2V0KG5vZGUsIG5vZGVzKTtcbiAgICB0aGlzLmNvdW50Kys7XG4gICAgbGFzdCA9IG9uVW5zdXNwZW5kLmJpbmQodGhpcyk7XG4gICAgbm9kZXMuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgbGFzdCk7XG4gICAgbm9kZXMuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGxhc3QpO1xuICAgIGlcbiAgICAgID8gaS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlcywgaS5uZXh0U2libGluZylcbiAgICAgIDogKChyb290ID0gOSA9PT0gcm9vdC5ub2RlVHlwZSA/IHJvb3QuaGVhZCA6IHJvb3QpLFxuICAgICAgICByb290Lmluc2VydEJlZm9yZShub2Rlcywgcm9vdC5maXJzdENoaWxkKSk7XG4gICAgcmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0O1xuICB9XG59XG52YXIgSG9zdFRyYW5zaXRpb25Db250ZXh0ID0ge1xuICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICBQcm92aWRlcjogbnVsbCxcbiAgQ29uc3VtZXI6IG51bGwsXG4gIF9jdXJyZW50VmFsdWU6IHNoYXJlZE5vdFBlbmRpbmdPYmplY3QsXG4gIF9jdXJyZW50VmFsdWUyOiBzaGFyZWROb3RQZW5kaW5nT2JqZWN0LFxuICBfdGhyZWFkQ291bnQ6IDBcbn07XG5mdW5jdGlvbiBGaWJlclJvb3ROb2RlKFxuICBjb250YWluZXJJbmZvLFxuICB0YWcsXG4gIGh5ZHJhdGUsXG4gIGlkZW50aWZpZXJQcmVmaXgsXG4gIG9uVW5jYXVnaHRFcnJvcixcbiAgb25DYXVnaHRFcnJvcixcbiAgb25SZWNvdmVyYWJsZUVycm9yLFxuICBmb3JtU3RhdGVcbikge1xuICB0aGlzLnRhZyA9IDE7XG4gIHRoaXMuY29udGFpbmVySW5mbyA9IGNvbnRhaW5lckluZm87XG4gIHRoaXMucGluZ0NhY2hlID0gdGhpcy5jdXJyZW50ID0gdGhpcy5wZW5kaW5nQ2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLnRpbWVvdXRIYW5kbGUgPSAtMTtcbiAgdGhpcy5jYWxsYmFja05vZGUgPVxuICAgIHRoaXMubmV4dCA9XG4gICAgdGhpcy5wZW5kaW5nQ29udGV4dCA9XG4gICAgdGhpcy5jb250ZXh0ID1cbiAgICB0aGlzLmNhbmNlbFBlbmRpbmdDb21taXQgPVxuICAgICAgbnVsbDtcbiAgdGhpcy5jYWxsYmFja1ByaW9yaXR5ID0gMDtcbiAgdGhpcy5leHBpcmF0aW9uVGltZXMgPSBjcmVhdGVMYW5lTWFwKC0xKTtcbiAgdGhpcy5lbnRhbmdsZWRMYW5lcyA9XG4gICAgdGhpcy5zaGVsbFN1c3BlbmRDb3VudGVyID1cbiAgICB0aGlzLmVycm9yUmVjb3ZlcnlEaXNhYmxlZExhbmVzID1cbiAgICB0aGlzLmV4cGlyZWRMYW5lcyA9XG4gICAgdGhpcy53YXJtTGFuZXMgPVxuICAgIHRoaXMucGluZ2VkTGFuZXMgPVxuICAgIHRoaXMuc3VzcGVuZGVkTGFuZXMgPVxuICAgIHRoaXMucGVuZGluZ0xhbmVzID1cbiAgICAgIDA7XG4gIHRoaXMuZW50YW5nbGVtZW50cyA9IGNyZWF0ZUxhbmVNYXAoMCk7XG4gIHRoaXMuaGlkZGVuVXBkYXRlcyA9IGNyZWF0ZUxhbmVNYXAobnVsbCk7XG4gIHRoaXMuaWRlbnRpZmllclByZWZpeCA9IGlkZW50aWZpZXJQcmVmaXg7XG4gIHRoaXMub25VbmNhdWdodEVycm9yID0gb25VbmNhdWdodEVycm9yO1xuICB0aGlzLm9uQ2F1Z2h0RXJyb3IgPSBvbkNhdWdodEVycm9yO1xuICB0aGlzLm9uUmVjb3ZlcmFibGVFcnJvciA9IG9uUmVjb3ZlcmFibGVFcnJvcjtcbiAgdGhpcy5wb29sZWRDYWNoZSA9IG51bGw7XG4gIHRoaXMucG9vbGVkQ2FjaGVMYW5lcyA9IDA7XG4gIHRoaXMuZm9ybVN0YXRlID0gZm9ybVN0YXRlO1xuICB0aGlzLmluY29tcGxldGVUcmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyUm9vdChcbiAgY29udGFpbmVySW5mbyxcbiAgdGFnLFxuICBoeWRyYXRlLFxuICBpbml0aWFsQ2hpbGRyZW4sXG4gIGh5ZHJhdGlvbkNhbGxiYWNrcyxcbiAgaXNTdHJpY3RNb2RlLFxuICBpZGVudGlmaWVyUHJlZml4LFxuICBvblVuY2F1Z2h0RXJyb3IsXG4gIG9uQ2F1Z2h0RXJyb3IsXG4gIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgdHJhbnNpdGlvbkNhbGxiYWNrcyxcbiAgZm9ybVN0YXRlXG4pIHtcbiAgY29udGFpbmVySW5mbyA9IG5ldyBGaWJlclJvb3ROb2RlKFxuICAgIGNvbnRhaW5lckluZm8sXG4gICAgdGFnLFxuICAgIGh5ZHJhdGUsXG4gICAgaWRlbnRpZmllclByZWZpeCxcbiAgICBvblVuY2F1Z2h0RXJyb3IsXG4gICAgb25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IsXG4gICAgZm9ybVN0YXRlXG4gICk7XG4gIHRhZyA9IDE7XG4gICEwID09PSBpc1N0cmljdE1vZGUgJiYgKHRhZyB8PSAyNCk7XG4gIGlzU3RyaWN0TW9kZSA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDMsIG51bGwsIG51bGwsIHRhZyk7XG4gIGNvbnRhaW5lckluZm8uY3VycmVudCA9IGlzU3RyaWN0TW9kZTtcbiAgaXNTdHJpY3RNb2RlLnN0YXRlTm9kZSA9IGNvbnRhaW5lckluZm87XG4gIHRhZyA9IGNyZWF0ZUNhY2hlKCk7XG4gIHRhZy5yZWZDb3VudCsrO1xuICBjb250YWluZXJJbmZvLnBvb2xlZENhY2hlID0gdGFnO1xuICB0YWcucmVmQ291bnQrKztcbiAgaXNTdHJpY3RNb2RlLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgZWxlbWVudDogaW5pdGlhbENoaWxkcmVuLFxuICAgIGlzRGVoeWRyYXRlZDogaHlkcmF0ZSxcbiAgICBjYWNoZTogdGFnXG4gIH07XG4gIGluaXRpYWxpemVVcGRhdGVRdWV1ZShpc1N0cmljdE1vZGUpO1xuICByZXR1cm4gY29udGFpbmVySW5mbztcbn1cbmZ1bmN0aW9uIGdldENvbnRleHRGb3JTdWJ0cmVlKHBhcmVudENvbXBvbmVudCkge1xuICBpZiAoIXBhcmVudENvbXBvbmVudCkgcmV0dXJuIGVtcHR5Q29udGV4dE9iamVjdDtcbiAgcGFyZW50Q29tcG9uZW50ID0gZW1wdHlDb250ZXh0T2JqZWN0O1xuICByZXR1cm4gcGFyZW50Q29tcG9uZW50O1xufVxuZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVySW1wbChcbiAgcm9vdEZpYmVyLFxuICBsYW5lLFxuICBlbGVtZW50LFxuICBjb250YWluZXIsXG4gIHBhcmVudENvbXBvbmVudCxcbiAgY2FsbGJhY2tcbikge1xuICBwYXJlbnRDb21wb25lbnQgPSBnZXRDb250ZXh0Rm9yU3VidHJlZShwYXJlbnRDb21wb25lbnQpO1xuICBudWxsID09PSBjb250YWluZXIuY29udGV4dFxuICAgID8gKGNvbnRhaW5lci5jb250ZXh0ID0gcGFyZW50Q29tcG9uZW50KVxuICAgIDogKGNvbnRhaW5lci5wZW5kaW5nQ29udGV4dCA9IHBhcmVudENvbXBvbmVudCk7XG4gIGNvbnRhaW5lciA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgY29udGFpbmVyLnBheWxvYWQgPSB7IGVsZW1lbnQ6IGVsZW1lbnQgfTtcbiAgY2FsbGJhY2sgPSB2b2lkIDAgPT09IGNhbGxiYWNrID8gbnVsbCA6IGNhbGxiYWNrO1xuICBudWxsICE9PSBjYWxsYmFjayAmJiAoY29udGFpbmVyLmNhbGxiYWNrID0gY2FsbGJhY2spO1xuICBlbGVtZW50ID0gZW5xdWV1ZVVwZGF0ZShyb290RmliZXIsIGNvbnRhaW5lciwgbGFuZSk7XG4gIG51bGwgIT09IGVsZW1lbnQgJiZcbiAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKGVsZW1lbnQsIHJvb3RGaWJlciwgbGFuZSksXG4gICAgZW50YW5nbGVUcmFuc2l0aW9ucyhlbGVtZW50LCByb290RmliZXIsIGxhbmUpKTtcbn1cbmZ1bmN0aW9uIG1hcmtSZXRyeUxhbmVJbXBsKGZpYmVyLCByZXRyeUxhbmUpIHtcbiAgZmliZXIgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZmliZXIgJiYgbnVsbCAhPT0gZmliZXIuZGVoeWRyYXRlZCkge1xuICAgIHZhciBhID0gZmliZXIucmV0cnlMYW5lO1xuICAgIGZpYmVyLnJldHJ5TGFuZSA9IDAgIT09IGEgJiYgYSA8IHJldHJ5TGFuZSA/IGEgOiByZXRyeUxhbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKGZpYmVyLCByZXRyeUxhbmUpIHtcbiAgbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSk7XG4gIChmaWJlciA9IGZpYmVyLmFsdGVybmF0ZSkgJiYgbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiBhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbihmaWJlcikge1xuICBpZiAoMTMgPT09IGZpYmVyLnRhZykge1xuICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCA2NzEwODg2NCk7XG4gICAgbnVsbCAhPT0gcm9vdCAmJiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIDY3MTA4ODY0KTtcbiAgICBtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZChmaWJlciwgNjcxMDg4NjQpO1xuICB9XG59XG52YXIgX2VuYWJsZWQgPSAhMDtcbmZ1bmN0aW9uIGRpc3BhdGNoRGlzY3JldGVFdmVudChcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBjb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgdHJ5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDIpLFxuICAgICAgZGlzcGF0Y2hFdmVudChkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIGNvbnRhaW5lciwgbmF0aXZlRXZlbnQpO1xuICB9IGZpbmFsbHkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eSksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHByZXZUcmFuc2l0aW9uKTtcbiAgfVxufVxuZnVuY3Rpb24gZGlzcGF0Y2hDb250aW51b3VzRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgY29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQ7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSA4KSxcbiAgICAgIGRpc3BhdGNoRXZlbnQoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCBjb250YWluZXIsIG5hdGl2ZUV2ZW50KTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgdGFyZ2V0Q29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIGlmIChfZW5hYmxlZCkge1xuICAgIHZhciBibG9ja2VkT24gPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBpZiAobnVsbCA9PT0gYmxvY2tlZE9uKVxuICAgICAgZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICByZXR1cm5fdGFyZ2V0SW5zdCxcbiAgICAgICAgdGFyZ2V0Q29udGFpbmVyXG4gICAgICApLFxuICAgICAgICBjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpO1xuICAgIGVsc2UgaWYgKFxuICAgICAgcXVldWVJZkNvbnRpbnVvdXNFdmVudChcbiAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgIClcbiAgICApXG4gICAgICBuYXRpdmVFdmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlbHNlIGlmIChcbiAgICAgIChjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpLFxuICAgICAgZXZlbnRTeXN0ZW1GbGFncyAmIDQgJiZcbiAgICAgICAgLTEgPCBkaXNjcmV0ZVJlcGxheWFibGVFdmVudHMuaW5kZXhPZihkb21FdmVudE5hbWUpKVxuICAgICkge1xuICAgICAgZm9yICg7IG51bGwgIT09IGJsb2NrZWRPbjsgKSB7XG4gICAgICAgIHZhciBmaWJlciA9IGdldEluc3RhbmNlRnJvbU5vZGUoYmxvY2tlZE9uKTtcbiAgICAgICAgaWYgKG51bGwgIT09IGZpYmVyKVxuICAgICAgICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIGZpYmVyID0gZmliZXIuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICBpZiAoZmliZXIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCkge1xuICAgICAgICAgICAgICAgIHZhciBsYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKGZpYmVyLnBlbmRpbmdMYW5lcyk7XG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IGxhbmVzKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcm9vdCA9IGZpYmVyO1xuICAgICAgICAgICAgICAgICAgcm9vdC5wZW5kaW5nTGFuZXMgfD0gMjtcbiAgICAgICAgICAgICAgICAgIGZvciAocm9vdC5lbnRhbmdsZWRMYW5lcyB8PSAyOyBsYW5lczsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gMSA8PCAoMzEgLSBjbHozMihsYW5lcykpO1xuICAgICAgICAgICAgICAgICAgICByb290LmVudGFuZ2xlbWVudHNbMV0gfD0gbGFuZTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMgJj0gfmxhbmU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQoZmliZXIpO1xuICAgICAgICAgICAgICAgICAgMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSAmJlxuICAgICAgICAgICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBub3coKSArIDUwMCksXG4gICAgICAgICAgICAgICAgICAgIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKDAsICExKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgKHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpKSxcbiAgICAgICAgICAgICAgICBudWxsICE9PSByb290ICYmIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMiksXG4gICAgICAgICAgICAgICAgZmx1c2hTeW5jV29yayQxKCksXG4gICAgICAgICAgICAgICAgbWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQoZmliZXIsIDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgZmliZXIgPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICAgICAgbnVsbCA9PT0gZmliZXIgJiZcbiAgICAgICAgICBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICByZXR1cm5fdGFyZ2V0SW5zdCxcbiAgICAgICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgICAgICk7XG4gICAgICAgIGlmIChmaWJlciA9PT0gYmxvY2tlZE9uKSBicmVhaztcbiAgICAgICAgYmxvY2tlZE9uID0gZmliZXI7XG4gICAgICB9XG4gICAgICBudWxsICE9PSBibG9ja2VkT24gJiYgbmF0aXZlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlXG4gICAgICBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oXG4gICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudChuYXRpdmVFdmVudCkge1xuICBuYXRpdmVFdmVudCA9IGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KTtcbiAgcmV0dXJuIGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KG5hdGl2ZUV2ZW50KTtcbn1cbnZhciByZXR1cm5fdGFyZ2V0SW5zdCA9IG51bGw7XG5mdW5jdGlvbiBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldCh0YXJnZXROb2RlKSB7XG4gIHJldHVybl90YXJnZXRJbnN0ID0gbnVsbDtcbiAgdGFyZ2V0Tm9kZSA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHRhcmdldE5vZGUpO1xuICBpZiAobnVsbCAhPT0gdGFyZ2V0Tm9kZSkge1xuICAgIHZhciBuZWFyZXN0TW91bnRlZCA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIodGFyZ2V0Tm9kZSk7XG4gICAgaWYgKG51bGwgPT09IG5lYXJlc3RNb3VudGVkKSB0YXJnZXROb2RlID0gbnVsbDtcbiAgICBlbHNlIHtcbiAgICAgIHZhciB0YWcgPSBuZWFyZXN0TW91bnRlZC50YWc7XG4gICAgICBpZiAoMTMgPT09IHRhZykge1xuICAgICAgICB0YXJnZXROb2RlID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihuZWFyZXN0TW91bnRlZCk7XG4gICAgICAgIGlmIChudWxsICE9PSB0YXJnZXROb2RlKSByZXR1cm4gdGFyZ2V0Tm9kZTtcbiAgICAgICAgdGFyZ2V0Tm9kZSA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKDMgPT09IHRhZykge1xuICAgICAgICBpZiAobmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpXG4gICAgICAgICAgcmV0dXJuIDMgPT09IG5lYXJlc3RNb3VudGVkLnRhZ1xuICAgICAgICAgICAgPyBuZWFyZXN0TW91bnRlZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB0YXJnZXROb2RlID0gbnVsbDtcbiAgICAgIH0gZWxzZSBuZWFyZXN0TW91bnRlZCAhPT0gdGFyZ2V0Tm9kZSAmJiAodGFyZ2V0Tm9kZSA9IG51bGwpO1xuICAgIH1cbiAgfVxuICByZXR1cm5fdGFyZ2V0SW5zdCA9IHRhcmdldE5vZGU7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRQcmlvcml0eShkb21FdmVudE5hbWUpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiYmVmb3JldG9nZ2xlXCI6XG4gICAgY2FzZSBcImNhbmNlbFwiOlxuICAgIGNhc2UgXCJjbGlja1wiOlxuICAgIGNhc2UgXCJjbG9zZVwiOlxuICAgIGNhc2UgXCJjb250ZXh0bWVudVwiOlxuICAgIGNhc2UgXCJjb3B5XCI6XG4gICAgY2FzZSBcImN1dFwiOlxuICAgIGNhc2UgXCJhdXhjbGlja1wiOlxuICAgIGNhc2UgXCJkYmxjbGlja1wiOlxuICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgY2FzZSBcImRyYWdzdGFydFwiOlxuICAgIGNhc2UgXCJkcm9wXCI6XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICBjYXNlIFwiaW52YWxpZFwiOlxuICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgY2FzZSBcImtleXVwXCI6XG4gICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgY2FzZSBcInBhc3RlXCI6XG4gICAgY2FzZSBcInBhdXNlXCI6XG4gICAgY2FzZSBcInBsYXlcIjpcbiAgICBjYXNlIFwicG9pbnRlcmNhbmNlbFwiOlxuICAgIGNhc2UgXCJwb2ludGVyZG93blwiOlxuICAgIGNhc2UgXCJwb2ludGVydXBcIjpcbiAgICBjYXNlIFwicmF0ZWNoYW5nZVwiOlxuICAgIGNhc2UgXCJyZXNldFwiOlxuICAgIGNhc2UgXCJyZXNpemVcIjpcbiAgICBjYXNlIFwic2Vla2VkXCI6XG4gICAgY2FzZSBcInN1Ym1pdFwiOlxuICAgIGNhc2UgXCJ0b2dnbGVcIjpcbiAgICBjYXNlIFwidG91Y2hjYW5jZWxcIjpcbiAgICBjYXNlIFwidG91Y2hlbmRcIjpcbiAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgIGNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpcbiAgICBjYXNlIFwiY2hhbmdlXCI6XG4gICAgY2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOlxuICAgIGNhc2UgXCJ0ZXh0SW5wdXRcIjpcbiAgICBjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOlxuICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgIGNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOlxuICAgIGNhc2UgXCJiZWZvcmVibHVyXCI6XG4gICAgY2FzZSBcImFmdGVyYmx1clwiOlxuICAgIGNhc2UgXCJiZWZvcmVpbnB1dFwiOlxuICAgIGNhc2UgXCJibHVyXCI6XG4gICAgY2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpcbiAgICBjYXNlIFwiZm9jdXNcIjpcbiAgICBjYXNlIFwiaGFzaGNoYW5nZVwiOlxuICAgIGNhc2UgXCJwb3BzdGF0ZVwiOlxuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICBjYXNlIFwic2VsZWN0c3RhcnRcIjpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgXCJkcmFnXCI6XG4gICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgIGNhc2UgXCJkcmFnZXhpdFwiOlxuICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICBjYXNlIFwiZHJhZ292ZXJcIjpcbiAgICBjYXNlIFwibW91c2Vtb3ZlXCI6XG4gICAgY2FzZSBcIm1vdXNlb3V0XCI6XG4gICAgY2FzZSBcIm1vdXNlb3ZlclwiOlxuICAgIGNhc2UgXCJwb2ludGVybW92ZVwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgY2FzZSBcInBvaW50ZXJvdmVyXCI6XG4gICAgY2FzZSBcInNjcm9sbFwiOlxuICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICBjYXNlIFwid2hlZWxcIjpcbiAgICBjYXNlIFwibW91c2VlbnRlclwiOlxuICAgIGNhc2UgXCJtb3VzZWxlYXZlXCI6XG4gICAgY2FzZSBcInBvaW50ZXJlbnRlclwiOlxuICAgIGNhc2UgXCJwb2ludGVybGVhdmVcIjpcbiAgICAgIHJldHVybiA4O1xuICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICBzd2l0Y2ggKGdldEN1cnJlbnRQcmlvcml0eUxldmVsKCkpIHtcbiAgICAgICAgY2FzZSBJbW1lZGlhdGVQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgY2FzZSBVc2VyQmxvY2tpbmdQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gODtcbiAgICAgICAgY2FzZSBOb3JtYWxQcmlvcml0eSQxOlxuICAgICAgICBjYXNlIExvd1ByaW9yaXR5OlxuICAgICAgICAgIHJldHVybiAzMjtcbiAgICAgICAgY2FzZSBJZGxlUHJpb3JpdHk6XG4gICAgICAgICAgcmV0dXJuIDI2ODQzNTQ1NjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAzMjtcbiAgfVxufVxudmFyIGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSAhMSxcbiAgcXVldWVkRm9jdXMgPSBudWxsLFxuICBxdWV1ZWREcmFnID0gbnVsbCxcbiAgcXVldWVkTW91c2UgPSBudWxsLFxuICBxdWV1ZWRQb2ludGVycyA9IG5ldyBNYXAoKSxcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzID0gbmV3IE1hcCgpLFxuICBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMgPSBbXSxcbiAgZGlzY3JldGVSZXBsYXlhYmxlRXZlbnRzID1cbiAgICBcIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldFwiLnNwbGl0KFxuICAgICAgXCIgXCJcbiAgICApO1xuZnVuY3Rpb24gY2xlYXJJZkNvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgIHF1ZXVlZEZvY3VzID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICBjYXNlIFwiZHJhZ2xlYXZlXCI6XG4gICAgICBxdWV1ZWREcmFnID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICBjYXNlIFwibW91c2VvdXRcIjpcbiAgICAgIHF1ZXVlZE1vdXNlID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgICBxdWV1ZWRQb2ludGVycy5kZWxldGUobmF0aXZlRXZlbnQucG9pbnRlcklkKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgIGNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5kZWxldGUobmF0aXZlRXZlbnQucG9pbnRlcklkKTtcbiAgfVxufVxuZnVuY3Rpb24gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgZXhpc3RpbmdRdWV1ZWRFdmVudCxcbiAgYmxvY2tlZE9uLFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIHRhcmdldENvbnRhaW5lcixcbiAgbmF0aXZlRXZlbnRcbikge1xuICBpZiAoXG4gICAgbnVsbCA9PT0gZXhpc3RpbmdRdWV1ZWRFdmVudCB8fFxuICAgIGV4aXN0aW5nUXVldWVkRXZlbnQubmF0aXZlRXZlbnQgIT09IG5hdGl2ZUV2ZW50XG4gIClcbiAgICByZXR1cm4gKFxuICAgICAgKGV4aXN0aW5nUXVldWVkRXZlbnQgPSB7XG4gICAgICAgIGJsb2NrZWRPbjogYmxvY2tlZE9uLFxuICAgICAgICBkb21FdmVudE5hbWU6IGRvbUV2ZW50TmFtZSxcbiAgICAgICAgZXZlbnRTeXN0ZW1GbGFnczogZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgbmF0aXZlRXZlbnQ6IG5hdGl2ZUV2ZW50LFxuICAgICAgICB0YXJnZXRDb250YWluZXJzOiBbdGFyZ2V0Q29udGFpbmVyXVxuICAgICAgfSksXG4gICAgICBudWxsICE9PSBibG9ja2VkT24gJiZcbiAgICAgICAgKChibG9ja2VkT24gPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGJsb2NrZWRPbikpLFxuICAgICAgICBudWxsICE9PSBibG9ja2VkT24gJiYgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24oYmxvY2tlZE9uKSksXG4gICAgICBleGlzdGluZ1F1ZXVlZEV2ZW50XG4gICAgKTtcbiAgZXhpc3RpbmdRdWV1ZWRFdmVudC5ldmVudFN5c3RlbUZsYWdzIHw9IGV2ZW50U3lzdGVtRmxhZ3M7XG4gIGJsb2NrZWRPbiA9IGV4aXN0aW5nUXVldWVkRXZlbnQudGFyZ2V0Q29udGFpbmVycztcbiAgbnVsbCAhPT0gdGFyZ2V0Q29udGFpbmVyICYmXG4gICAgLTEgPT09IGJsb2NrZWRPbi5pbmRleE9mKHRhcmdldENvbnRhaW5lcikgJiZcbiAgICBibG9ja2VkT24ucHVzaCh0YXJnZXRDb250YWluZXIpO1xuICByZXR1cm4gZXhpc3RpbmdRdWV1ZWRFdmVudDtcbn1cbmZ1bmN0aW9uIHF1ZXVlSWZDb250aW51b3VzRXZlbnQoXG4gIGJsb2NrZWRPbixcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICB0YXJnZXRDb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHF1ZXVlZEZvY3VzID0gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgICAgICAgICBxdWV1ZWRGb2N1cyxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwiZHJhZ2VudGVyXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocXVldWVkRHJhZyA9IGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgcXVldWVkRHJhZyxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAocXVldWVkTW91c2UgPSBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZE1vdXNlLFxuICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKSksXG4gICAgICAgICEwXG4gICAgICApO1xuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgICAgdmFyIHBvaW50ZXJJZCA9IG5hdGl2ZUV2ZW50LnBvaW50ZXJJZDtcbiAgICAgIHF1ZXVlZFBvaW50ZXJzLnNldChcbiAgICAgICAgcG9pbnRlcklkLFxuICAgICAgICBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZFBvaW50ZXJzLmdldChwb2ludGVySWQpIHx8IG51bGwsXG4gICAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApXG4gICAgICApO1xuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHBvaW50ZXJJZCA9IG5hdGl2ZUV2ZW50LnBvaW50ZXJJZCksXG4gICAgICAgIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5zZXQoXG4gICAgICAgICAgcG9pbnRlcklkLFxuICAgICAgICAgIGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZ2V0KHBvaW50ZXJJZCkgfHwgbnVsbCxcbiAgICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gYXR0ZW1wdEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0KHF1ZXVlZFRhcmdldCkge1xuICB2YXIgdGFyZ2V0SW5zdCA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHF1ZXVlZFRhcmdldC50YXJnZXQpO1xuICBpZiAobnVsbCAhPT0gdGFyZ2V0SW5zdCkge1xuICAgIHZhciBuZWFyZXN0TW91bnRlZCA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIodGFyZ2V0SW5zdCk7XG4gICAgaWYgKG51bGwgIT09IG5lYXJlc3RNb3VudGVkKVxuICAgICAgaWYgKCgodGFyZ2V0SW5zdCA9IG5lYXJlc3RNb3VudGVkLnRhZyksIDEzID09PSB0YXJnZXRJbnN0KSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKCh0YXJnZXRJbnN0ID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihuZWFyZXN0TW91bnRlZCkpLFxuICAgICAgICAgIG51bGwgIT09IHRhcmdldEluc3QpXG4gICAgICAgICkge1xuICAgICAgICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSB0YXJnZXRJbnN0O1xuICAgICAgICAgIHJ1bldpdGhQcmlvcml0eShxdWV1ZWRUYXJnZXQucHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICgxMyA9PT0gbmVhcmVzdE1vdW50ZWQudGFnKSB7XG4gICAgICAgICAgICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgICAgICAgICAgICAgbGFuZSA9IGdldEJ1bXBlZExhbmVGb3JIeWRyYXRpb25CeUxhbmUobGFuZSk7XG4gICAgICAgICAgICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKG5lYXJlc3RNb3VudGVkLCBsYW5lKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gcm9vdCAmJlxuICAgICAgICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBuZWFyZXN0TW91bnRlZCwgbGFuZSk7XG4gICAgICAgICAgICAgIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKG5lYXJlc3RNb3VudGVkLCBsYW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIDMgPT09IHRhcmdldEluc3QgJiZcbiAgICAgICAgbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWRcbiAgICAgICkge1xuICAgICAgICBxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID1cbiAgICAgICAgICAzID09PSBuZWFyZXN0TW91bnRlZC50YWdcbiAgICAgICAgICAgID8gbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm9cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSBudWxsO1xufVxuZnVuY3Rpb24gYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRFdmVudCkge1xuICBpZiAobnVsbCAhPT0gcXVldWVkRXZlbnQuYmxvY2tlZE9uKSByZXR1cm4gITE7XG4gIGZvciAoXG4gICAgdmFyIHRhcmdldENvbnRhaW5lcnMgPSBxdWV1ZWRFdmVudC50YXJnZXRDb250YWluZXJzO1xuICAgIDAgPCB0YXJnZXRDb250YWluZXJzLmxlbmd0aDtcblxuICApIHtcbiAgICB2YXIgbmV4dEJsb2NrZWRPbiA9IGZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQocXVldWVkRXZlbnQubmF0aXZlRXZlbnQpO1xuICAgIGlmIChudWxsID09PSBuZXh0QmxvY2tlZE9uKSB7XG4gICAgICBuZXh0QmxvY2tlZE9uID0gcXVldWVkRXZlbnQubmF0aXZlRXZlbnQ7XG4gICAgICB2YXIgbmF0aXZlRXZlbnRDbG9uZSA9IG5ldyBuZXh0QmxvY2tlZE9uLmNvbnN0cnVjdG9yKFxuICAgICAgICBuZXh0QmxvY2tlZE9uLnR5cGUsXG4gICAgICAgIG5leHRCbG9ja2VkT25cbiAgICAgICk7XG4gICAgICBjdXJyZW50UmVwbGF5aW5nRXZlbnQgPSBuYXRpdmVFdmVudENsb25lO1xuICAgICAgbmV4dEJsb2NrZWRPbi50YXJnZXQuZGlzcGF0Y2hFdmVudChuYXRpdmVFdmVudENsb25lKTtcbiAgICAgIGN1cnJlbnRSZXBsYXlpbmdFdmVudCA9IG51bGw7XG4gICAgfSBlbHNlXG4gICAgICByZXR1cm4gKFxuICAgICAgICAodGFyZ2V0Q29udGFpbmVycyA9IGdldEluc3RhbmNlRnJvbU5vZGUobmV4dEJsb2NrZWRPbikpLFxuICAgICAgICBudWxsICE9PSB0YXJnZXRDb250YWluZXJzICYmXG4gICAgICAgICAgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24odGFyZ2V0Q29udGFpbmVycyksXG4gICAgICAgIChxdWV1ZWRFdmVudC5ibG9ja2VkT24gPSBuZXh0QmxvY2tlZE9uKSxcbiAgICAgICAgITFcbiAgICAgICk7XG4gICAgdGFyZ2V0Q29udGFpbmVycy5zaGlmdCgpO1xuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcChxdWV1ZWRFdmVudCwga2V5LCBtYXApIHtcbiAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRFdmVudCkgJiYgbWFwLmRlbGV0ZShrZXkpO1xufVxuZnVuY3Rpb24gcmVwbGF5VW5ibG9ja2VkRXZlbnRzKCkge1xuICBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0ID0gITE7XG4gIG51bGwgIT09IHF1ZXVlZEZvY3VzICYmXG4gICAgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWRGb2N1cykgJiZcbiAgICAocXVldWVkRm9jdXMgPSBudWxsKTtcbiAgbnVsbCAhPT0gcXVldWVkRHJhZyAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRHJhZykgJiZcbiAgICAocXVldWVkRHJhZyA9IG51bGwpO1xuICBudWxsICE9PSBxdWV1ZWRNb3VzZSAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkTW91c2UpICYmXG4gICAgKHF1ZXVlZE1vdXNlID0gbnVsbCk7XG4gIHF1ZXVlZFBvaW50ZXJzLmZvckVhY2goYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwKTtcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzLmZvckVhY2goYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRFdmVudCwgdW5ibG9ja2VkKSB7XG4gIHF1ZXVlZEV2ZW50LmJsb2NrZWRPbiA9PT0gdW5ibG9ja2VkICYmXG4gICAgKChxdWV1ZWRFdmVudC5ibG9ja2VkT24gPSBudWxsKSxcbiAgICBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0IHx8XG4gICAgICAoKGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSAhMCksXG4gICAgICBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhcbiAgICAgICAgU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICAgICAgICByZXBsYXlVbmJsb2NrZWRFdmVudHNcbiAgICAgICkpKTtcbn1cbnZhciBsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgPSBudWxsO1xuZnVuY3Rpb24gc2NoZWR1bGVSZXBsYXlRdWV1ZUlmTmVlZGVkKGZvcm1SZXBsYXlpbmdRdWV1ZSkge1xuICBsYXN0U2NoZWR1bGVkUmVwbGF5UXVldWUgIT09IGZvcm1SZXBsYXlpbmdRdWV1ZSAmJlxuICAgICgobGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gZm9ybVJlcGxheWluZ1F1ZXVlKSxcbiAgICBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhcbiAgICAgIFNjaGVkdWxlci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID09PSBmb3JtUmVwbGF5aW5nUXVldWUgJiZcbiAgICAgICAgICAobGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gbnVsbCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybVJlcGxheWluZ1F1ZXVlLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgdmFyIGZvcm0gPSBmb3JtUmVwbGF5aW5nUXVldWVbaV0sXG4gICAgICAgICAgICBzdWJtaXR0ZXJPckFjdGlvbiA9IGZvcm1SZXBsYXlpbmdRdWV1ZVtpICsgMV0sXG4gICAgICAgICAgICBmb3JtRGF0YSA9IGZvcm1SZXBsYXlpbmdRdWV1ZVtpICsgMl07XG4gICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHN1Ym1pdHRlck9yQWN0aW9uKVxuICAgICAgICAgICAgaWYgKG51bGwgPT09IGZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0KHN1Ym1pdHRlck9yQWN0aW9uIHx8IGZvcm0pKVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2UgYnJlYWs7XG4gICAgICAgICAgdmFyIGZvcm1JbnN0ID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShmb3JtKTtcbiAgICAgICAgICBudWxsICE9PSBmb3JtSW5zdCAmJlxuICAgICAgICAgICAgKGZvcm1SZXBsYXlpbmdRdWV1ZS5zcGxpY2UoaSwgMyksXG4gICAgICAgICAgICAoaSAtPSAzKSxcbiAgICAgICAgICAgIHN0YXJ0SG9zdFRyYW5zaXRpb24oXG4gICAgICAgICAgICAgIGZvcm1JbnN0LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGVuZGluZzogITAsXG4gICAgICAgICAgICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBmb3JtLm1ldGhvZCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHN1Ym1pdHRlck9yQWN0aW9uXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN1Ym1pdHRlck9yQWN0aW9uLFxuICAgICAgICAgICAgICBmb3JtRGF0YVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApKTtcbn1cbmZ1bmN0aW9uIHJldHJ5SWZCbG9ja2VkT24odW5ibG9ja2VkKSB7XG4gIGZ1bmN0aW9uIHVuYmxvY2socXVldWVkRXZlbnQpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZEV2ZW50LCB1bmJsb2NrZWQpO1xuICB9XG4gIG51bGwgIT09IHF1ZXVlZEZvY3VzICYmIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRGb2N1cywgdW5ibG9ja2VkKTtcbiAgbnVsbCAhPT0gcXVldWVkRHJhZyAmJiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRHJhZywgdW5ibG9ja2VkKTtcbiAgbnVsbCAhPT0gcXVldWVkTW91c2UgJiYgc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZE1vdXNlLCB1bmJsb2NrZWQpO1xuICBxdWV1ZWRQb2ludGVycy5mb3JFYWNoKHVuYmxvY2spO1xuICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZm9yRWFjaCh1bmJsb2NrKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcXVldWVkVGFyZ2V0ID0gcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzW2ldO1xuICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPT09IHVuYmxvY2tlZCAmJiAocXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9IG51bGwpO1xuICB9XG4gIGZvciAoXG4gICAgO1xuICAgIDAgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoICYmXG4gICAgKChpID0gcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzWzBdKSwgbnVsbCA9PT0gaS5ibG9ja2VkT24pO1xuXG4gIClcbiAgICBhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQoaSksXG4gICAgICBudWxsID09PSBpLmJsb2NrZWRPbiAmJiBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMuc2hpZnQoKTtcbiAgaSA9ICh1bmJsb2NrZWQub3duZXJEb2N1bWVudCB8fCB1bmJsb2NrZWQpLiQkcmVhY3RGb3JtUmVwbGF5O1xuICBpZiAobnVsbCAhPSBpKVxuICAgIGZvciAocXVldWVkVGFyZ2V0ID0gMDsgcXVldWVkVGFyZ2V0IDwgaS5sZW5ndGg7IHF1ZXVlZFRhcmdldCArPSAzKSB7XG4gICAgICB2YXIgZm9ybSA9IGlbcXVldWVkVGFyZ2V0XSxcbiAgICAgICAgc3VibWl0dGVyT3JBY3Rpb24gPSBpW3F1ZXVlZFRhcmdldCArIDFdLFxuICAgICAgICBmb3JtUHJvcHMgPSBmb3JtW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygc3VibWl0dGVyT3JBY3Rpb24pXG4gICAgICAgIGZvcm1Qcm9wcyB8fCBzY2hlZHVsZVJlcGxheVF1ZXVlSWZOZWVkZWQoaSk7XG4gICAgICBlbHNlIGlmIChmb3JtUHJvcHMpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IG51bGw7XG4gICAgICAgIGlmIChzdWJtaXR0ZXJPckFjdGlvbiAmJiBzdWJtaXR0ZXJPckFjdGlvbi5oYXNBdHRyaWJ1dGUoXCJmb3JtQWN0aW9uXCIpKVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICgoZm9ybSA9IHN1Ym1pdHRlck9yQWN0aW9uKSxcbiAgICAgICAgICAgIChmb3JtUHJvcHMgPSBzdWJtaXR0ZXJPckFjdGlvbltpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsKSlcbiAgICAgICAgICApXG4gICAgICAgICAgICBhY3Rpb24gPSBmb3JtUHJvcHMuZm9ybUFjdGlvbjtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldChmb3JtKSkgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlIGFjdGlvbiA9IGZvcm1Qcm9wcy5hY3Rpb247XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjdGlvblxuICAgICAgICAgID8gKGlbcXVldWVkVGFyZ2V0ICsgMV0gPSBhY3Rpb24pXG4gICAgICAgICAgOiAoaS5zcGxpY2UocXVldWVkVGFyZ2V0LCAzKSwgKHF1ZXVlZFRhcmdldCAtPSAzKSk7XG4gICAgICAgIHNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZChpKTtcbiAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBSZWFjdERPTVJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUucmVuZGVyID0gUmVhY3RET01Sb290LnByb3RvdHlwZS5yZW5kZXIgPVxuICBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICB2YXIgcm9vdCA9IHRoaXMuX2ludGVybmFsUm9vdDtcbiAgICBpZiAobnVsbCA9PT0gcm9vdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MDkpKTtcbiAgICB2YXIgY3VycmVudCA9IHJvb3QuY3VycmVudCxcbiAgICAgIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICAgIHVwZGF0ZUNvbnRhaW5lckltcGwoY3VycmVudCwgbGFuZSwgY2hpbGRyZW4sIHJvb3QsIG51bGwsIG51bGwpO1xuICB9O1xuUmVhY3RET01IeWRyYXRpb25Sb290LnByb3RvdHlwZS51bm1vdW50ID0gUmVhY3RET01Sb290LnByb3RvdHlwZS51bm1vdW50ID1cbiAgZnVuY3Rpb24gKCkge1xuICAgIHZhciByb290ID0gdGhpcy5faW50ZXJuYWxSb290O1xuICAgIGlmIChudWxsICE9PSByb290KSB7XG4gICAgICB0aGlzLl9pbnRlcm5hbFJvb3QgPSBudWxsO1xuICAgICAgdmFyIGNvbnRhaW5lciA9IHJvb3QuY29udGFpbmVySW5mbztcbiAgICAgIHVwZGF0ZUNvbnRhaW5lckltcGwocm9vdC5jdXJyZW50LCAyLCBudWxsLCByb290LCBudWxsLCBudWxsKTtcbiAgICAgIGZsdXNoU3luY1dvcmskMSgpO1xuICAgICAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gbnVsbDtcbiAgICB9XG4gIH07XG5mdW5jdGlvbiBSZWFjdERPTUh5ZHJhdGlvblJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24gPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQpIHtcbiAgICB2YXIgdXBkYXRlUHJpb3JpdHkgPSByZXNvbHZlVXBkYXRlUHJpb3JpdHkoKTtcbiAgICB0YXJnZXQgPSB7IGJsb2NrZWRPbjogbnVsbCwgdGFyZ2V0OiB0YXJnZXQsIHByaW9yaXR5OiB1cGRhdGVQcmlvcml0eSB9O1xuICAgIGZvciAoXG4gICAgICB2YXIgaSA9IDA7XG4gICAgICBpIDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLmxlbmd0aCAmJlxuICAgICAgMCAhPT0gdXBkYXRlUHJpb3JpdHkgJiZcbiAgICAgIHVwZGF0ZVByaW9yaXR5IDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzW2ldLnByaW9yaXR5O1xuICAgICAgaSsrXG4gICAgKTtcbiAgICBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMuc3BsaWNlKGksIDAsIHRhcmdldCk7XG4gICAgMCA9PT0gaSAmJiBhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQodGFyZ2V0KTtcbiAgfVxufTtcbnZhciBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE3ODUgPSBSZWFjdC52ZXJzaW9uO1xuaWYgKFxuICBcIjE5LjEuMVwiICE9PVxuICBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE3ODVcbilcbiAgdGhyb3cgRXJyb3IoXG4gICAgZm9ybWF0UHJvZEVycm9yTWVzc2FnZShcbiAgICAgIDUyNyxcbiAgICAgIGlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTc4NSxcbiAgICAgIFwiMTkuMS4xXCJcbiAgICApXG4gICk7XG5SZWFjdERPTVNoYXJlZEludGVybmFscy5maW5kRE9NTm9kZSA9IGZ1bmN0aW9uIChjb21wb25lbnRPckVsZW1lbnQpIHtcbiAgdmFyIGZpYmVyID0gY29tcG9uZW50T3JFbGVtZW50Ll9yZWFjdEludGVybmFscztcbiAgaWYgKHZvaWQgMCA9PT0gZmliZXIpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlcilcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gICAgY29tcG9uZW50T3JFbGVtZW50ID0gT2JqZWN0LmtleXMoY29tcG9uZW50T3JFbGVtZW50KS5qb2luKFwiLFwiKTtcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI2OCwgY29tcG9uZW50T3JFbGVtZW50KSk7XG4gIH1cbiAgY29tcG9uZW50T3JFbGVtZW50ID0gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgoZmliZXIpO1xuICBjb21wb25lbnRPckVsZW1lbnQgPVxuICAgIG51bGwgIT09IGNvbXBvbmVudE9yRWxlbWVudFxuICAgICAgPyBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwoY29tcG9uZW50T3JFbGVtZW50KVxuICAgICAgOiBudWxsO1xuICBjb21wb25lbnRPckVsZW1lbnQgPVxuICAgIG51bGwgPT09IGNvbXBvbmVudE9yRWxlbWVudCA/IG51bGwgOiBjb21wb25lbnRPckVsZW1lbnQuc3RhdGVOb2RlO1xuICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50O1xufTtcbnZhciBpbnRlcm5hbHMkanNjb21wJGlubGluZV8yMjU2ID0ge1xuICBidW5kbGVUeXBlOiAwLFxuICB2ZXJzaW9uOiBcIjE5LjEuMVwiLFxuICByZW5kZXJlclBhY2thZ2VOYW1lOiBcInJlYWN0LWRvbVwiLFxuICBjdXJyZW50RGlzcGF0Y2hlclJlZjogUmVhY3RTaGFyZWRJbnRlcm5hbHMsXG4gIHJlY29uY2lsZXJWZXJzaW9uOiBcIjE5LjEuMVwiXG59O1xuaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pIHtcbiAgdmFyIGhvb2skanNjb21wJGlubGluZV8yMjU3ID0gX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuICBpZiAoXG4gICAgIWhvb2skanNjb21wJGlubGluZV8yMjU3LmlzRGlzYWJsZWQgJiZcbiAgICBob29rJGpzY29tcCRpbmxpbmVfMjI1Ny5zdXBwb3J0c0ZpYmVyXG4gIClcbiAgICB0cnkge1xuICAgICAgKHJlbmRlcmVySUQgPSBob29rJGpzY29tcCRpbmxpbmVfMjI1Ny5pbmplY3QoXG4gICAgICAgIGludGVybmFscyRqc2NvbXAkaW5saW5lXzIyNTZcbiAgICAgICkpLFxuICAgICAgICAoaW5qZWN0ZWRIb29rID0gaG9vayRqc2NvbXAkaW5saW5lXzIyNTcpO1xuICAgIH0gY2F0Y2ggKGVycikge31cbn1cbmV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uIChjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHZhciBpc1N0cmljdE1vZGUgPSAhMSxcbiAgICBpZGVudGlmaWVyUHJlZml4ID0gXCJcIixcbiAgICBvblVuY2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IgPSBkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MgPSBudWxsO1xuICBudWxsICE9PSBvcHRpb25zICYmXG4gICAgdm9pZCAwICE9PSBvcHRpb25zICYmXG4gICAgKCEwID09PSBvcHRpb25zLnVuc3RhYmxlX3N0cmljdE1vZGUgJiYgKGlzU3RyaWN0TW9kZSA9ICEwKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCAmJlxuICAgICAgKGlkZW50aWZpZXJQcmVmaXggPSBvcHRpb25zLmlkZW50aWZpZXJQcmVmaXgpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblVuY2F1Z2h0RXJyb3IgJiZcbiAgICAgIChvblVuY2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IgJiYgKG9uQ2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblJlY292ZXJhYmxlRXJyb3IgJiZcbiAgICAgIChvblJlY292ZXJhYmxlRXJyb3IgPSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MgJiZcbiAgICAgICh0cmFuc2l0aW9uQ2FsbGJhY2tzID0gb3B0aW9ucy51bnN0YWJsZV90cmFuc2l0aW9uQ2FsbGJhY2tzKSk7XG4gIG9wdGlvbnMgPSBjcmVhdGVGaWJlclJvb3QoXG4gICAgY29udGFpbmVyLFxuICAgIDEsXG4gICAgITEsXG4gICAgbnVsbCxcbiAgICBudWxsLFxuICAgIGlzU3RyaWN0TW9kZSxcbiAgICBpZGVudGlmaWVyUHJlZml4LFxuICAgIG9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzLFxuICAgIG51bGxcbiAgKTtcbiAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gb3B0aW9ucy5jdXJyZW50O1xuICBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyhjb250YWluZXIpO1xuICByZXR1cm4gbmV3IFJlYWN0RE9NUm9vdChvcHRpb25zKTtcbn07XG5leHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgaW5pdGlhbENoaWxkcmVuLCBvcHRpb25zKSB7XG4gIGlmICghaXNWYWxpZENvbnRhaW5lcihjb250YWluZXIpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI5OSkpO1xuICB2YXIgaXNTdHJpY3RNb2RlID0gITEsXG4gICAgaWRlbnRpZmllclByZWZpeCA9IFwiXCIsXG4gICAgb25VbmNhdWdodEVycm9yID0gZGVmYXVsdE9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yID0gZGVmYXVsdE9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yID0gZGVmYXVsdE9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzID0gbnVsbCxcbiAgICBmb3JtU3RhdGUgPSBudWxsO1xuICBudWxsICE9PSBvcHRpb25zICYmXG4gICAgdm9pZCAwICE9PSBvcHRpb25zICYmXG4gICAgKCEwID09PSBvcHRpb25zLnVuc3RhYmxlX3N0cmljdE1vZGUgJiYgKGlzU3RyaWN0TW9kZSA9ICEwKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCAmJlxuICAgICAgKGlkZW50aWZpZXJQcmVmaXggPSBvcHRpb25zLmlkZW50aWZpZXJQcmVmaXgpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblVuY2F1Z2h0RXJyb3IgJiZcbiAgICAgIChvblVuY2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IgJiYgKG9uQ2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblJlY292ZXJhYmxlRXJyb3IgJiZcbiAgICAgIChvblJlY292ZXJhYmxlRXJyb3IgPSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MgJiZcbiAgICAgICh0cmFuc2l0aW9uQ2FsbGJhY2tzID0gb3B0aW9ucy51bnN0YWJsZV90cmFuc2l0aW9uQ2FsbGJhY2tzKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuZm9ybVN0YXRlICYmIChmb3JtU3RhdGUgPSBvcHRpb25zLmZvcm1TdGF0ZSkpO1xuICBpbml0aWFsQ2hpbGRyZW4gPSBjcmVhdGVGaWJlclJvb3QoXG4gICAgY29udGFpbmVyLFxuICAgIDEsXG4gICAgITAsXG4gICAgaW5pdGlhbENoaWxkcmVuLFxuICAgIG51bGwgIT0gb3B0aW9ucyA/IG9wdGlvbnMgOiBudWxsLFxuICAgIGlzU3RyaWN0TW9kZSxcbiAgICBpZGVudGlmaWVyUHJlZml4LFxuICAgIG9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzLFxuICAgIGZvcm1TdGF0ZVxuICApO1xuICBpbml0aWFsQ2hpbGRyZW4uY29udGV4dCA9IGdldENvbnRleHRGb3JTdWJ0cmVlKG51bGwpO1xuICBvcHRpb25zID0gaW5pdGlhbENoaWxkcmVuLmN1cnJlbnQ7XG4gIGlzU3RyaWN0TW9kZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gIGlzU3RyaWN0TW9kZSA9IGdldEJ1bXBlZExhbmVGb3JIeWRyYXRpb25CeUxhbmUoaXNTdHJpY3RNb2RlKTtcbiAgaWRlbnRpZmllclByZWZpeCA9IGNyZWF0ZVVwZGF0ZShpc1N0cmljdE1vZGUpO1xuICBpZGVudGlmaWVyUHJlZml4LmNhbGxiYWNrID0gbnVsbDtcbiAgZW5xdWV1ZVVwZGF0ZShvcHRpb25zLCBpZGVudGlmaWVyUHJlZml4LCBpc1N0cmljdE1vZGUpO1xuICBvcHRpb25zID0gaXNTdHJpY3RNb2RlO1xuICBpbml0aWFsQ2hpbGRyZW4uY3VycmVudC5sYW5lcyA9IG9wdGlvbnM7XG4gIG1hcmtSb290VXBkYXRlZCQxKGluaXRpYWxDaGlsZHJlbiwgb3B0aW9ucyk7XG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChpbml0aWFsQ2hpbGRyZW4pO1xuICBjb250YWluZXJbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gPSBpbml0aWFsQ2hpbGRyZW4uY3VycmVudDtcbiAgbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMoY29udGFpbmVyKTtcbiAgcmV0dXJuIG5ldyBSZWFjdERPTUh5ZHJhdGlvblJvb3QoaW5pdGlhbENoaWxkcmVuKTtcbn07XG5leHBvcnRzLnZlcnNpb24gPSBcIjE5LjEuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLWNsaWVudC5wcm9kdWN0aW9uLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1jbGllbnQuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IFwiX19WSVRFX0FTU0VUX19Cdm1rcVVfSl9fXCIiLCJleHBvcnQgZGVmYXVsdCBcIl9fVklURV9QVUJMSUNfQVNTRVRfX2Q2OTQ1YjY5X19cIiIsImltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgcmVhY3RMb2dvIGZyb20gJy4vYXNzZXRzL3JlYWN0LnN2ZydcbmltcG9ydCB2aXRlTG9nbyBmcm9tICcvdml0ZS5zdmcnXG5pbXBvcnQgJy4vQXBwLmNzcydcblxuZnVuY3Rpb24gQXBwKCkge1xuICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDApXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdjbGljaycsIGEpXG4gIH1cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vdml0ZS5kZXZcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgICA8aW1nIHNyYz17dml0ZUxvZ299IGNsYXNzTmFtZT1cImxvZ29cIiBhbHQ9XCJWaXRlIGxvZ29cIiAvPlxuICAgICAgICA8L2E+XG4gICAgICAgIDxhIGhyZWY9XCJodHRwczovL3JlYWN0LmRldlwiIHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICAgIDxpbWcgc3JjPXtyZWFjdExvZ299IGNsYXNzTmFtZT1cImxvZ28gcmVhY3RcIiBhbHQ9XCJSZWFjdCBsb2dvXCIgLz5cbiAgICAgICAgPC9hPlxuICAgICAgPC9kaXY+XG4gICAgICA8aDEgb25DbGljaz17aGFuZGxlQ2xpY2t9PlZpdGUgKyBSZWFjdCsxPC9oMT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FyZFwiPlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldENvdW50KChjb3VudCkgPT4gY291bnQgKyAxKX0+XG4gICAgICAgICAgY291bnQgaXMge2NvdW50fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPHA+XG4gICAgICAgICAgRWRpdCA8Y29kZT5zcmMvQXBwLnRzeDwvY29kZT4gYW5kIHNhdmUgdG8gdGVzdCBITVJcbiAgICAgICAgPC9wPlxuICAgICAgPC9kaXY+XG4gICAgICA8cCBjbGFzc05hbWU9XCJyZWFkLXRoZS1kb2NzXCI+XG4gICAgICAgIENsaWNrIG9uIHRoZSBWaXRlIGFuZCBSZWFjdCBsb2dvcyB0byBsZWFybiBtb3JlXG4gICAgICA8L3A+XG4gICAgPC8+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwXG4iLCJpbXBvcnQgeyBTdHJpY3RNb2RlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCdcbmltcG9ydCAnLi9pbmRleC5jc3MnXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwLnRzeCdcblxuY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpISkucmVuZGVyKFxuICA8U3RyaWN0TW9kZT5cbiAgICA8QXBwIC8+XG4gIDwvU3RyaWN0TW9kZT4sXG4pXG4iXSwibmFtZXMiOlsiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiUkVBQ1RfRlJBR01FTlRfVFlQRSIsImpzeFByb2QiLCJ0eXBlIiwiY29uZmlnIiwibWF5YmVLZXkiLCJrZXkiLCJwcm9wTmFtZSIsInJlYWN0SnN4UnVudGltZV9wcm9kdWN0aW9uIiwianN4UnVudGltZU1vZHVsZSIsInJlcXVpcmUkJDAiLCJSRUFDVF9QT1JUQUxfVFlQRSIsIlJFQUNUX1NUUklDVF9NT0RFX1RZUEUiLCJSRUFDVF9QUk9GSUxFUl9UWVBFIiwiUkVBQ1RfQ09OU1VNRVJfVFlQRSIsIlJFQUNUX0NPTlRFWFRfVFlQRSIsIlJFQUNUX0ZPUldBUkRfUkVGX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9UWVBFIiwiUkVBQ1RfTUVNT19UWVBFIiwiUkVBQ1RfTEFaWV9UWVBFIiwiTUFZQkVfSVRFUkFUT1JfU1lNQk9MIiwiZ2V0SXRlcmF0b3JGbiIsIm1heWJlSXRlcmFibGUiLCJSZWFjdE5vb3BVcGRhdGVRdWV1ZSIsImFzc2lnbiIsImVtcHR5T2JqZWN0IiwiQ29tcG9uZW50IiwicHJvcHMiLCJjb250ZXh0IiwidXBkYXRlciIsInBhcnRpYWxTdGF0ZSIsImNhbGxiYWNrIiwiQ29tcG9uZW50RHVtbXkiLCJQdXJlQ29tcG9uZW50IiwicHVyZUNvbXBvbmVudFByb3RvdHlwZSIsImlzQXJyYXlJbXBsIiwiUmVhY3RTaGFyZWRJbnRlcm5hbHMiLCJoYXNPd25Qcm9wZXJ0eSIsIlJlYWN0RWxlbWVudCIsInNlbGYiLCJzb3VyY2UiLCJvd25lciIsImNsb25lQW5kUmVwbGFjZUtleSIsIm9sZEVsZW1lbnQiLCJuZXdLZXkiLCJpc1ZhbGlkRWxlbWVudCIsIm9iamVjdCIsImVzY2FwZSIsImVzY2FwZXJMb29rdXAiLCJtYXRjaCIsInVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4IiwiZ2V0RWxlbWVudEtleSIsImVsZW1lbnQiLCJpbmRleCIsIm5vb3AkMSIsInJlc29sdmVUaGVuYWJsZSIsInRoZW5hYmxlIiwiZnVsZmlsbGVkVmFsdWUiLCJlcnJvciIsIm1hcEludG9BcnJheSIsImNoaWxkcmVuIiwiYXJyYXkiLCJlc2NhcGVkUHJlZml4IiwibmFtZVNvRmFyIiwiaW52b2tlQ2FsbGJhY2siLCJjIiwibmV4dE5hbWVQcmVmaXgiLCJpIiwibWFwQ2hpbGRyZW4iLCJmdW5jIiwicmVzdWx0IiwiY291bnQiLCJjaGlsZCIsImxhenlJbml0aWFsaXplciIsInBheWxvYWQiLCJjdG9yIiwibW9kdWxlT2JqZWN0IiwicmVwb3J0R2xvYmFsRXJyb3IiLCJldmVudCIsIm5vb3AiLCJyZWFjdF9wcm9kdWN0aW9uIiwiZm9yRWFjaEZ1bmMiLCJmb3JFYWNoQ29udGV4dCIsIm4iLCJzaXplIiwiZm4iLCJjaGlsZEFycmF5IiwiZGVmYXVsdFZhbHVlIiwiY2hpbGRyZW5MZW5ndGgiLCJyZW5kZXIiLCJjb21wYXJlIiwic2NvcGUiLCJwcmV2VHJhbnNpdGlvbiIsImN1cnJlbnRUcmFuc2l0aW9uIiwicmV0dXJuVmFsdWUiLCJvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCIsInVzYWJsZSIsImFjdGlvbiIsImluaXRpYWxTdGF0ZSIsInBlcm1hbGluayIsImRlcHMiLCJDb250ZXh0IiwidmFsdWUiLCJpbml0aWFsVmFsdWUiLCJjcmVhdGUiLCJjcmVhdGVEZXBzIiwidXBkYXRlIiwiZGlzcGF0Y2hlciIsInJlZiIsInBhc3N0aHJvdWdoIiwicmVkdWNlciIsImluaXRpYWxBcmciLCJpbml0Iiwic3Vic2NyaWJlIiwiZ2V0U25hcHNob3QiLCJnZXRTZXJ2ZXJTbmFwc2hvdCIsInJlYWN0TW9kdWxlIiwicHVzaCIsImhlYXAiLCJub2RlIiwiYSIsInBhcmVudEluZGV4IiwicGFyZW50IiwicGVlayIsInBvcCIsImZpcnN0IiwibGFzdCIsImxlbmd0aCIsImhhbGZMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0IiwicmlnaHRJbmRleCIsInJpZ2h0IiwiYiIsImRpZmYiLCJleHBvcnRzIiwibG9jYWxQZXJmb3JtYW5jZSIsImxvY2FsRGF0ZSIsImluaXRpYWxUaW1lIiwidGFza1F1ZXVlIiwidGltZXJRdWV1ZSIsInRhc2tJZENvdW50ZXIiLCJjdXJyZW50VGFzayIsImN1cnJlbnRQcmlvcml0eUxldmVsIiwiaXNQZXJmb3JtaW5nV29yayIsImlzSG9zdENhbGxiYWNrU2NoZWR1bGVkIiwiaXNIb3N0VGltZW91dFNjaGVkdWxlZCIsIm5lZWRzUGFpbnQiLCJsb2NhbFNldFRpbWVvdXQiLCJsb2NhbENsZWFyVGltZW91dCIsImxvY2FsU2V0SW1tZWRpYXRlIiwiYWR2YW5jZVRpbWVycyIsImN1cnJlbnRUaW1lIiwidGltZXIiLCJoYW5kbGVUaW1lb3V0IiwiaXNNZXNzYWdlTG9vcFJ1bm5pbmciLCJzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSIsImZpcnN0VGltZXIiLCJyZXF1ZXN0SG9zdFRpbWVvdXQiLCJ0YXNrVGltZW91dElEIiwiZnJhbWVJbnRlcnZhbCIsInN0YXJ0VGltZSIsInNob3VsZFlpZWxkVG9Ib3N0IiwicGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lIiwiaGFzTW9yZVdvcmsiLCJwcmV2aW91c1ByaW9yaXR5TGV2ZWwiLCJjb250aW51YXRpb25DYWxsYmFjayIsImNoYW5uZWwiLCJwb3J0IiwibXMiLCJ0YXNrIiwiZnBzIiwiZXZlbnRIYW5kbGVyIiwicHJpb3JpdHlMZXZlbCIsIm9wdGlvbnMiLCJ0aW1lb3V0IiwicGFyZW50UHJpb3JpdHlMZXZlbCIsInNjaGVkdWxlck1vZHVsZSIsIlJlYWN0IiwiZm9ybWF0UHJvZEVycm9yTWVzc2FnZSIsImNvZGUiLCJ1cmwiLCJJbnRlcm5hbHMiLCJjcmVhdGVQb3J0YWwkMSIsImNvbnRhaW5lckluZm8iLCJpbXBsZW1lbnRhdGlvbiIsImdldENyb3NzT3JpZ2luU3RyaW5nQXMiLCJhcyIsImlucHV0IiwicmVhY3REb21fcHJvZHVjdGlvbiIsImNvbnRhaW5lciIsInByZXZpb3VzVHJhbnNpdGlvbiIsInByZXZpb3VzVXBkYXRlUHJpb3JpdHkiLCJocmVmIiwiY3Jvc3NPcmlnaW4iLCJpbnRlZ3JpdHkiLCJmZXRjaFByaW9yaXR5IiwiZm9ybSIsImNoZWNrRENFIiwiZXJyIiwicmVhY3REb21Nb2R1bGUiLCJTY2hlZHVsZXIiLCJyZXF1aXJlJCQxIiwiUmVhY3RET00iLCJyZXF1aXJlJCQyIiwiaXNWYWxpZENvbnRhaW5lciIsImdldE5lYXJlc3RNb3VudGVkRmliZXIiLCJmaWJlciIsIm5lYXJlc3RNb3VudGVkIiwiZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlciIsInN1c3BlbnNlU3RhdGUiLCJhc3NlcnRJc01vdW50ZWQiLCJmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aCIsImFsdGVybmF0ZSIsInBhcmVudEEiLCJwYXJlbnRCIiwiZGlkRmluZENoaWxkIiwiY2hpbGQkMCIsImZpbmRDdXJyZW50SG9zdEZpYmVySW1wbCIsInRhZyIsIlJFQUNUX0xFR0FDWV9FTEVNRU5UX1RZUEUiLCJSRUFDVF9QUk9WSURFUl9UWVBFIiwiUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIiwiUkVBQ1RfQUNUSVZJVFlfVFlQRSIsIlJFQUNUX01FTU9fQ0FDSEVfU0VOVElORUwiLCJSRUFDVF9DTElFTlRfUkVGRVJFTkNFIiwiZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlIiwiaW5uZXJUeXBlIiwiUmVhY3RET01TaGFyZWRJbnRlcm5hbHMiLCJzaGFyZWROb3RQZW5kaW5nT2JqZWN0IiwidmFsdWVTdGFjayIsImNyZWF0ZUN1cnNvciIsImN1cnNvciIsImNvbnRleHRTdGFja0N1cnNvciIsImNvbnRleHRGaWJlclN0YWNrQ3Vyc29yIiwicm9vdEluc3RhbmNlU3RhY2tDdXJzb3IiLCJob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yIiwicHVzaEhvc3RDb250YWluZXIiLCJuZXh0Um9vdEluc3RhbmNlIiwiZ2V0T3duSG9zdENvbnRleHQiLCJnZXRDaGlsZEhvc3RDb250ZXh0UHJvZCIsInBvcEhvc3RDb250YWluZXIiLCJwdXNoSG9zdENvbnRleHQiLCJKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQiLCJwb3BIb3N0Q29udGV4dCIsIkhvc3RUcmFuc2l0aW9uQ29udGV4dCIsInNjaGVkdWxlQ2FsbGJhY2skMyIsImNhbmNlbENhbGxiYWNrJDEiLCJzaG91bGRZaWVsZCIsInJlcXVlc3RQYWludCIsIm5vdyIsImdldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiSW1tZWRpYXRlUHJpb3JpdHkiLCJVc2VyQmxvY2tpbmdQcmlvcml0eSIsIk5vcm1hbFByaW9yaXR5JDEiLCJMb3dQcmlvcml0eSIsIklkbGVQcmlvcml0eSIsImxvZyQxIiwidW5zdGFibGVfc2V0RGlzYWJsZVlpZWxkVmFsdWUiLCJyZW5kZXJlcklEIiwiaW5qZWN0ZWRIb29rIiwic2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMiLCJuZXdJc1N0cmljdE1vZGUiLCJjbHozMiIsImNsejMyRmFsbGJhY2siLCJsb2ciLCJMTjIiLCJ4IiwibmV4dFRyYW5zaXRpb25MYW5lIiwibmV4dFJldHJ5TGFuZSIsImdldEhpZ2hlc3RQcmlvcml0eUxhbmVzIiwibGFuZXMiLCJwZW5kaW5nU3luY0xhbmVzIiwiZ2V0TmV4dExhbmVzIiwicm9vdCIsIndpcExhbmVzIiwicm9vdEhhc1BlbmRpbmdDb21taXQiLCJwZW5kaW5nTGFuZXMiLCJuZXh0TGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwibm9uSWRsZVBlbmRpbmdMYW5lcyIsImNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmciLCJyZW5kZXJMYW5lcyIsImNvbXB1dGVFeHBpcmF0aW9uVGltZSIsImxhbmUiLCJjbGFpbU5leHRUcmFuc2l0aW9uTGFuZSIsImNsYWltTmV4dFJldHJ5TGFuZSIsImNyZWF0ZUxhbmVNYXAiLCJpbml0aWFsIiwibGFuZU1hcCIsIm1hcmtSb290VXBkYXRlZCQxIiwidXBkYXRlTGFuZSIsIm1hcmtSb290RmluaXNoZWQiLCJmaW5pc2hlZExhbmVzIiwicmVtYWluaW5nTGFuZXMiLCJzcGF3bmVkTGFuZSIsInVwZGF0ZWRMYW5lcyIsInN1c3BlbmRlZFJldHJ5TGFuZXMiLCJwcmV2aW91c2x5UGVuZGluZ0xhbmVzIiwiZW50YW5nbGVtZW50cyIsImV4cGlyYXRpb25UaW1lcyIsImhpZGRlblVwZGF0ZXMiLCJpbmRleCQ1IiwiaGlkZGVuVXBkYXRlc0ZvckxhbmUiLCJtYXJrU3Bhd25lZERlZmVycmVkTGFuZSIsImVudGFuZ2xlZExhbmVzIiwic3Bhd25lZExhbmVJbmRleCIsIm1hcmtSb290RW50YW5nbGVkIiwicm9vdEVudGFuZ2xlZExhbmVzIiwiaW5kZXgkNiIsImdldEJ1bXBlZExhbmVGb3JIeWRyYXRpb25CeUxhbmUiLCJsYW5lc1RvRXZlbnRQcmlvcml0eSIsInJlc29sdmVVcGRhdGVQcmlvcml0eSIsInVwZGF0ZVByaW9yaXR5IiwiZ2V0RXZlbnRQcmlvcml0eSIsInJ1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwicHJldmlvdXNQcmlvcml0eSIsInJhbmRvbUtleSIsImludGVybmFsSW5zdGFuY2VLZXkiLCJpbnRlcm5hbFByb3BzS2V5IiwiaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleSIsImludGVybmFsRXZlbnRIYW5kbGVyc0tleSIsImludGVybmFsRXZlbnRIYW5kbGVyTGlzdGVuZXJzS2V5IiwiaW50ZXJuYWxFdmVudEhhbmRsZXNTZXRLZXkiLCJpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5IiwiaW50ZXJuYWxIb2lzdGFibGVNYXJrZXIiLCJkZXRhY2hEZWxldGVkSW5zdGFuY2UiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsInRhcmdldE5vZGUiLCJ0YXJnZXRJbnN0IiwicGFyZW50Tm9kZSIsImdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImluc3QiLCJnZXRSZXNvdXJjZXNGcm9tUm9vdCIsInJlc291cmNlcyIsIm1hcmtOb2RlQXNIb2lzdGFibGUiLCJhbGxOYXRpdmVFdmVudHMiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicmVnaXN0ZXJUd29QaGFzZUV2ZW50IiwicmVnaXN0cmF0aW9uTmFtZSIsImRlcGVuZGVuY2llcyIsInJlZ2lzdGVyRGlyZWN0RXZlbnQiLCJWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCIsImlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJ2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJpc0F0dHJpYnV0ZU5hbWVTYWZlIiwiYXR0cmlidXRlTmFtZSIsInNldFZhbHVlRm9yQXR0cmlidXRlIiwibmFtZSIsInByZWZpeCQ4Iiwic2V0VmFsdWVGb3JLbm93bkF0dHJpYnV0ZSIsInNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZSIsIm5hbWVzcGFjZSIsInByZWZpeCIsInN1ZmZpeCIsImRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lIiwicmVlbnRyeSIsImRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUiLCJjb25zdHJ1Y3QiLCJwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlIiwiUnVuSW5Sb290RnJhbWUiLCJGYWtlIiwiY29udHJvbCIsIngkOSIsIngkMTAiLCJzYW1wbGUiLCJuYW1lUHJvcERlc2NyaXB0b3IiLCJfUnVuSW5Sb290RnJhbWUkRGV0ZXIiLCJzYW1wbGVTdGFjayIsImNvbnRyb2xTdGFjayIsInNhbXBsZUxpbmVzIiwiY29udHJvbExpbmVzIiwiZnJhbWUiLCJkZXNjcmliZUZpYmVyIiwiZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kIiwid29ya0luUHJvZ3Jlc3MiLCJpbmZvIiwiZ2V0VG9TdHJpbmdWYWx1ZSIsImlzQ2hlY2thYmxlIiwiZWxlbSIsInRyYWNrVmFsdWVPbk5vZGUiLCJ2YWx1ZUZpZWxkIiwiZGVzY3JpcHRvciIsImN1cnJlbnRWYWx1ZSIsImdldCIsInNldCIsInRyYWNrIiwidXBkYXRlVmFsdWVJZkNoYW5nZWQiLCJ0cmFja2VyIiwibGFzdFZhbHVlIiwiZ2V0QWN0aXZlRWxlbWVudCIsImRvYyIsImVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXNSZWdleCIsImVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMiLCJjaCIsInVwZGF0ZUlucHV0IiwibGFzdERlZmF1bHRWYWx1ZSIsImNoZWNrZWQiLCJkZWZhdWx0Q2hlY2tlZCIsInNldERlZmF1bHRWYWx1ZSIsImluaXRJbnB1dCIsImlzSHlkcmF0aW5nIiwidXBkYXRlT3B0aW9ucyIsIm11bHRpcGxlIiwicHJvcFZhbHVlIiwic2V0RGVmYXVsdFNlbGVjdGVkIiwidXBkYXRlVGV4dGFyZWEiLCJpbml0VGV4dGFyZWEiLCJzZXRUZXh0Q29udGVudCIsInRleHQiLCJmaXJzdENoaWxkIiwidW5pdGxlc3NOdW1iZXJzIiwic2V0VmFsdWVGb3JTdHlsZSIsInN0eWxlIiwic3R5bGVOYW1lIiwiaXNDdXN0b21Qcm9wZXJ0eSIsInNldFZhbHVlRm9yU3R5bGVzIiwic3R5bGVzIiwicHJldlN0eWxlcyIsInN0eWxlTmFtZSQxNiIsInN0eWxlTmFtZSQxNyIsImlzQ3VzdG9tRWxlbWVudCIsInRhZ05hbWUiLCJhbGlhc2VzIiwiaXNKYXZhU2NyaXB0UHJvdG9jb2wiLCJzYW5pdGl6ZVVSTCIsImN1cnJlbnRSZXBsYXlpbmdFdmVudCIsImdldEV2ZW50VGFyZ2V0IiwibmF0aXZlRXZlbnQiLCJyZXN0b3JlVGFyZ2V0IiwicmVzdG9yZVF1ZXVlIiwicmVzdG9yZVN0YXRlT2ZUYXJnZXQiLCJ0YXJnZXQiLCJpbnRlcm5hbEluc3RhbmNlIiwib3RoZXJOb2RlIiwib3RoZXJQcm9wcyIsImlzSW5zaWRlRXZlbnRIYW5kbGVyIiwiYmF0Y2hlZFVwZGF0ZXMkMSIsImZsdXNoU3luY1dvcmskMSIsImdldExpc3RlbmVyIiwic3RhdGVOb2RlIiwiY2FuVXNlRE9NIiwicGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQiLCJzdGFydFRleHQiLCJmYWxsYmFja1RleHQiLCJnZXREYXRhIiwic3RhcnQiLCJzdGFydFZhbHVlIiwic3RhcnRMZW5ndGgiLCJlbmQiLCJlbmRWYWx1ZSIsImVuZExlbmd0aCIsIm1pbkVuZCIsImdldEV2ZW50Q2hhckNvZGUiLCJrZXlDb2RlIiwiZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUiLCJmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UiLCJjcmVhdGVTeW50aGV0aWNFdmVudCIsIkludGVyZmFjZSIsIlN5bnRoZXRpY0Jhc2VFdmVudCIsInJlYWN0TmFtZSIsInJlYWN0RXZlbnRUeXBlIiwibmF0aXZlRXZlbnRUYXJnZXQiLCJFdmVudEludGVyZmFjZSIsIlN5bnRoZXRpY0V2ZW50IiwiVUlFdmVudEludGVyZmFjZSIsIlN5bnRoZXRpY1VJRXZlbnQiLCJsYXN0TW92ZW1lbnRYIiwibGFzdE1vdmVtZW50WSIsImxhc3RNb3VzZUV2ZW50IiwiTW91c2VFdmVudEludGVyZmFjZSIsImdldEV2ZW50TW9kaWZpZXJTdGF0ZSIsIlN5bnRoZXRpY01vdXNlRXZlbnQiLCJEcmFnRXZlbnRJbnRlcmZhY2UiLCJTeW50aGV0aWNEcmFnRXZlbnQiLCJGb2N1c0V2ZW50SW50ZXJmYWNlIiwiU3ludGhldGljRm9jdXNFdmVudCIsIkFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlIiwiU3ludGhldGljQW5pbWF0aW9uRXZlbnQiLCJDbGlwYm9hcmRFdmVudEludGVyZmFjZSIsIlN5bnRoZXRpY0NsaXBib2FyZEV2ZW50IiwiQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSIsIlN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQiLCJub3JtYWxpemVLZXkiLCJ0cmFuc2xhdGVUb0tleSIsIm1vZGlmaWVyS2V5VG9Qcm9wIiwibW9kaWZpZXJTdGF0ZUdldHRlciIsImtleUFyZyIsIktleWJvYXJkRXZlbnRJbnRlcmZhY2UiLCJTeW50aGV0aWNLZXlib2FyZEV2ZW50IiwiUG9pbnRlckV2ZW50SW50ZXJmYWNlIiwiU3ludGhldGljUG9pbnRlckV2ZW50IiwiVG91Y2hFdmVudEludGVyZmFjZSIsIlN5bnRoZXRpY1RvdWNoRXZlbnQiLCJUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UiLCJTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQiLCJXaGVlbEV2ZW50SW50ZXJmYWNlIiwiU3ludGhldGljV2hlZWxFdmVudCIsIlRvZ2dsZUV2ZW50SW50ZXJmYWNlIiwiU3ludGhldGljVG9nZ2xlRXZlbnQiLCJFTkRfS0VZQ09ERVMiLCJjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IiwiZG9jdW1lbnRNb2RlIiwiY2FuVXNlVGV4dElucHV0RXZlbnQiLCJ1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSIsIlNQQUNFQkFSX0NIQVIiLCJoYXNTcGFjZUtleXByZXNzIiwiaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kIiwiZG9tRXZlbnROYW1lIiwiZ2V0RGF0YUZyb21DdXN0b21FdmVudCIsImlzQ29tcG9zaW5nIiwiZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyIsImdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyIsInN1cHBvcnRlZElucHV0VHlwZXMiLCJpc1RleHRJbnB1dEVsZW1lbnQiLCJub2RlTmFtZSIsImNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudCIsImRpc3BhdGNoUXVldWUiLCJhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnMiLCJhY3RpdmVFbGVtZW50JDEiLCJhY3RpdmVFbGVtZW50SW5zdCQxIiwicnVuRXZlbnRJbkJhdGNoIiwicHJvY2Vzc0Rpc3BhdGNoUXVldWUiLCJnZXRJbnN0SWZWYWx1ZUNoYW5nZWQiLCJnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQiLCJpc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MiIsImlzU3VwcG9ydGVkJGpzY29tcCRpbmxpbmVfNDE3IiwiZWxlbWVudCRqc2NvbXAkaW5saW5lXzQxOCIsInN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlIiwiaGFuZGxlUHJvcGVydHlDaGFuZ2UiLCJoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGwiLCJnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsIiwiZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQiLCJnZXRUYXJnZXRJbnN0Rm9ySW5wdXRPckNoYW5nZUV2ZW50IiwiaXMiLCJ5Iiwib2JqZWN0SXMiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJjdXJyZW50S2V5IiwiZ2V0TGVhZk5vZGUiLCJnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0Iiwib2Zmc2V0Iiwibm9kZUVuZCIsImNvbnRhaW5zTm9kZSIsIm91dGVyTm9kZSIsImlubmVyTm9kZSIsImdldEFjdGl2ZUVsZW1lbnREZWVwIiwiaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzIiwic2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50IiwiYWN0aXZlRWxlbWVudCIsImFjdGl2ZUVsZW1lbnRJbnN0IiwibGFzdFNlbGVjdGlvbiIsIm1vdXNlRG93biIsImNvbnN0cnVjdFNlbGVjdEV2ZW50IiwibWFrZVByZWZpeE1hcCIsInN0eWxlUHJvcCIsImV2ZW50TmFtZSIsInByZWZpeGVzIiwidmVuZG9yUHJlZml4ZXMiLCJwcmVmaXhlZEV2ZW50TmFtZXMiLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsInByZWZpeE1hcCIsIkFOSU1BVElPTl9FTkQiLCJBTklNQVRJT05fSVRFUkFUSU9OIiwiQU5JTUFUSU9OX1NUQVJUIiwiVFJBTlNJVElPTl9SVU4iLCJUUkFOU0lUSU9OX1NUQVJUIiwiVFJBTlNJVElPTl9DQU5DRUwiLCJUUkFOU0lUSU9OX0VORCIsInRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzIiwic2ltcGxlRXZlbnRQbHVnaW5FdmVudHMiLCJyZWdpc3RlclNpbXBsZUV2ZW50IiwiQ2FwdHVyZWRTdGFja3MiLCJjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlciIsImV4aXN0aW5nIiwiY29uY3VycmVudFF1ZXVlcyIsImNvbmN1cnJlbnRRdWV1ZXNJbmRleCIsImNvbmN1cnJlbnRseVVwZGF0ZWRMYW5lcyIsImZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMiLCJlbmRJbmRleCIsInF1ZXVlIiwicGVuZGluZyIsIm1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290IiwiZW5xdWV1ZVVwZGF0ZSQxIiwiZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlIiwiZ2V0Um9vdEZvclVwZGF0ZWRGaWJlciIsImVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZSIsInNvdXJjZUZpYmVyIiwiaXNIaWRkZW4iLCJuZXN0ZWRVcGRhdGVDb3VudCIsInJvb3RXaXRoTmVzdGVkVXBkYXRlcyIsImVtcHR5Q29udGV4dE9iamVjdCIsIkZpYmVyTm9kZSIsInBlbmRpbmdQcm9wcyIsIm1vZGUiLCJjcmVhdGVGaWJlckltcGxDbGFzcyIsInNob3VsZENvbnN0cnVjdCIsImNyZWF0ZVdvcmtJblByb2dyZXNzIiwiY3VycmVudCIsInJlc2V0V29ya0luUHJvZ3Jlc3MiLCJjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMiLCJmaWJlclRhZyIsImlzSG9zdEhvaXN0YWJsZVR5cGUiLCJjcmVhdGVGaWJlckZyb21GcmFnbWVudCIsImVsZW1lbnRzIiwiY3JlYXRlRmliZXJGcm9tVGV4dCIsImNvbnRlbnQiLCJjcmVhdGVGaWJlckZyb21Qb3J0YWwiLCJwb3J0YWwiLCJmb3JrU3RhY2siLCJmb3JrU3RhY2tJbmRleCIsInRyZWVGb3JrUHJvdmlkZXIiLCJ0cmVlRm9ya0NvdW50IiwiaWRTdGFjayIsImlkU3RhY2tJbmRleCIsInRyZWVDb250ZXh0UHJvdmlkZXIiLCJ0cmVlQ29udGV4dElkIiwidHJlZUNvbnRleHRPdmVyZmxvdyIsInB1c2hUcmVlRm9yayIsInRvdGFsQ2hpbGRyZW4iLCJwdXNoVHJlZUlkIiwiYmFzZUlkV2l0aExlYWRpbmdCaXQiLCJiYXNlTGVuZ3RoIiwibnVtYmVyT2ZPdmVyZmxvd0JpdHMiLCJwdXNoTWF0ZXJpYWxpemVkVHJlZUlkIiwicG9wVHJlZUNvbnRleHQiLCJoeWRyYXRpb25QYXJlbnRGaWJlciIsIm5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJoeWRyYXRpb25FcnJvcnMiLCJyb290T3JTaW5nbGV0b25Db250ZXh0IiwiSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24iLCJ0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2giLCJxdWV1ZUh5ZHJhdGlvbkVycm9yIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsImluc3RhbmNlIiwibGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudCIsIm1lZGlhRXZlbnRUeXBlcyIsImNoZWNrRm9yVW5tYXRjaGVkVGV4dCIsInBvcFRvTmV4dEhvc3RQYXJlbnQiLCJwb3BIeWRyYXRpb25TdGF0ZSIsIkpTQ29tcGlsZXJfdGVtcCIsInNob3VsZFNldFRleHRDb250ZW50IiwiZ2V0TmV4dEh5ZHJhdGFibGUiLCJpc1NpbmdsZXRvblNjb3BlIiwicHJldmlvdXNIeWRyYXRhYmxlT25FbnRlcmluZ1Njb3BlZFNpbmdsZXRvbiIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJ1cGdyYWRlSHlkcmF0aW9uRXJyb3JzVG9SZWNvdmVyYWJsZSIsInF1ZXVlZEVycm9ycyIsIndvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzIiwidmFsdWVDdXJzb3IiLCJjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxIiwibGFzdENvbnRleHREZXBlbmRlbmN5IiwicHVzaFByb3ZpZGVyIiwicHJvdmlkZXJGaWJlciIsIm5leHRWYWx1ZSIsInBvcFByb3ZpZGVyIiwic2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aCIsInByb3BhZ2F0aW9uUm9vdCIsInByb3BhZ2F0ZUNvbnRleHRDaGFuZ2VzIiwiY29udGV4dHMiLCJmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWUiLCJsaXN0IiwibmV4dEZpYmVyIiwiZGVwZW5kZW5jeSIsInByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzIiwiaXNJbnNpZGVQcm9wYWdhdGlvbkJhaWxvdXQiLCJjdXJyZW50UGFyZW50IiwiY2hlY2tJZkNvbnRleHRDaGFuZ2VkIiwiY3VycmVudERlcGVuZGVuY2llcyIsInByZXBhcmVUb1JlYWRDb250ZXh0IiwicmVhZENvbnRleHQiLCJyZWFkQ29udGV4dEZvckNvbnN1bWVyIiwicmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbiIsImNvbnN1bWVyIiwiQWJvcnRDb250cm9sbGVyTG9jYWwiLCJsaXN0ZW5lcnMiLCJzaWduYWwiLCJsaXN0ZW5lciIsInNjaGVkdWxlQ2FsbGJhY2skMiIsIk5vcm1hbFByaW9yaXR5IiwiQ2FjaGVDb250ZXh0IiwiY3JlYXRlQ2FjaGUiLCJyZWxlYXNlQ2FjaGUiLCJjYWNoZSIsImN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMiLCJjdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50IiwiY3VycmVudEVudGFuZ2xlZExhbmUiLCJjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUiLCJlbnRhbmdsZUFzeW5jQWN0aW9uIiwidHJhbnNpdGlvbiIsImVudGFuZ2xlZExpc3RlbmVycyIsInJlcXVlc3RUcmFuc2l0aW9uTGFuZSIsInJlc29sdmUiLCJwaW5nRW5ndGFuZ2xlZEFjdGlvblNjb3BlIiwiY2hhaW5UaGVuYWJsZVZhbHVlIiwidGhlbmFibGVXaXRoT3ZlcnJpZGUiLCJwcmV2T25TdGFydFRyYW5zaXRpb25GaW5pc2giLCJyZXN1bWVkQ2FjaGUiLCJwZWVrQ2FjaGVGcm9tUG9vbCIsImNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlciIsIndvcmtJblByb2dyZXNzUm9vdCIsInB1c2hUcmFuc2l0aW9uIiwib2Zmc2NyZWVuV29ya0luUHJvZ3Jlc3MiLCJwcmV2Q2FjaGVQb29sIiwiZ2V0U3VzcGVuZGVkQ2FjaGUiLCJjYWNoZUZyb21Qb29sIiwiU3VzcGVuc2VFeGNlcHRpb24iLCJTdXNwZW5zZXlDb21taXRFeGNlcHRpb24iLCJTdXNwZW5zZUFjdGlvbkV4Y2VwdGlvbiIsIm5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZSIsImlzVGhlbmFibGVSZXNvbHZlZCIsIm5vb3AkMyIsInRyYWNrVXNlZFRoZW5hYmxlIiwidGhlbmFibGVTdGF0ZSIsImNoZWNrSWZVc2VXcmFwcGVkSW5Bc3luY0NhdGNoIiwiZnVsZmlsbGVkVGhlbmFibGUiLCJyZWplY3RlZFRoZW5hYmxlIiwic3VzcGVuZGVkVGhlbmFibGUiLCJnZXRTdXNwZW5kZWRUaGVuYWJsZSIsInJlamVjdGVkUmVhc29uIiwiaGFzRm9yY2VVcGRhdGUiLCJpbml0aWFsaXplVXBkYXRlUXVldWUiLCJjbG9uZVVwZGF0ZVF1ZXVlIiwiY3JlYXRlVXBkYXRlIiwiZW5xdWV1ZVVwZGF0ZSIsInVwZGF0ZVF1ZXVlIiwiZXhlY3V0aW9uQ29udGV4dCIsImVudGFuZ2xlVHJhbnNpdGlvbnMiLCJxdWV1ZUxhbmVzIiwiZW5xdWV1ZUNhcHR1cmVkVXBkYXRlIiwiY2FwdHVyZWRVcGRhdGUiLCJuZXdGaXJzdCIsIm5ld0xhc3QiLCJjbG9uZSIsImRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24iLCJzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uIiwiZW50YW5nbGVkQWN0aW9uVGhlbmFibGUiLCJwcm9jZXNzVXBkYXRlUXVldWUiLCJ3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMCIsImluc3RhbmNlJGpzY29tcCQwIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJwZW5kaW5nUXVldWUiLCJsYXN0UGVuZGluZ1VwZGF0ZSIsImZpcnN0UGVuZGluZ1VwZGF0ZSIsIm5ld1N0YXRlIiwiaXNIaWRkZW5VcGRhdGUiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyIsIndvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyIsImNhbGxDYWxsYmFjayIsImNvbW1pdENhbGxiYWNrcyIsImNhbGxiYWNrcyIsImN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IiLCJwcmV2RW50YW5nbGVkUmVuZGVyTGFuZXNDdXJzb3IiLCJwdXNoSGlkZGVuQ29udGV4dCIsImVudGFuZ2xlZFJlbmRlckxhbmVzIiwicmV1c2VIaWRkZW5Db250ZXh0T25TdGFjayIsInBvcEhpZGRlbkNvbnRleHQiLCJjdXJyZW50bHlSZW5kZXJpbmdGaWJlciIsImN1cnJlbnRIb29rIiwid29ya0luUHJvZ3Jlc3NIb29rIiwiZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSIsImRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyIsInNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWIiwibG9jYWxJZENvdW50ZXIiLCJ0aGVuYWJsZUluZGV4Q291bnRlciQxIiwidGhlbmFibGVTdGF0ZSQxIiwiZ2xvYmFsQ2xpZW50SWRDb3VudGVyIiwidGhyb3dJbnZhbGlkSG9va0Vycm9yIiwiYXJlSG9va0lucHV0c0VxdWFsIiwibmV4dERlcHMiLCJwcmV2RGVwcyIsInJlbmRlcldpdGhIb29rcyIsInNlY29uZEFyZyIsIm5leHRSZW5kZXJMYW5lcyIsIkhvb2tzRGlzcGF0Y2hlck9uTW91bnQiLCJIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZSIsInJlbmRlcldpdGhIb29rc0FnYWluIiwiZmluaXNoUmVuZGVyaW5nSG9va3MiLCJDb250ZXh0T25seURpc3BhdGNoZXIiLCJkaWRSZW5kZXJUb29GZXdIb29rcyIsImRpZFJlY2VpdmVVcGRhdGUiLCJudW1iZXJPZlJlUmVuZGVycyIsIkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIiLCJUcmFuc2l0aW9uQXdhcmVIb3N0Q29tcG9uZW50IiwibWF5YmVUaGVuYWJsZSIsInVzZVRoZW5hYmxlIiwiY2hlY2tEaWRSZW5kZXJJZEhvb2siLCJkaWRSZW5kZXJJZEhvb2siLCJiYWlsb3V0SG9va3MiLCJyZXNldEhvb2tzT25VbndpbmQiLCJtb3VudFdvcmtJblByb2dyZXNzSG9vayIsImhvb2siLCJ1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2siLCJuZXh0Q3VycmVudEhvb2siLCJuZXh0V29ya0luUHJvZ3Jlc3NIb29rIiwiY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSIsInVzZSIsInVzZU1lbW9DYWNoZSIsIm1lbW9DYWNoZSIsImJhc2ljU3RhdGVSZWR1Y2VyIiwic3RhdGUiLCJ1cGRhdGVSZWR1Y2VyIiwidXBkYXRlUmVkdWNlckltcGwiLCJiYXNlUXVldWUiLCJiYXNlRmlyc3QiLCJuZXdCYXNlUXVldWVGaXJzdCIsIm5ld0Jhc2VRdWV1ZUxhc3QiLCJkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDMyIiwicmV2ZXJ0TGFuZSIsInJlcmVuZGVyUmVkdWNlciIsImRpc3BhdGNoIiwibGFzdFJlbmRlclBoYXNlVXBkYXRlIiwidXBkYXRlU3luY0V4dGVybmFsU3RvcmUiLCJpc0h5ZHJhdGluZyRqc2NvbXAkMCIsInNuYXBzaG90Q2hhbmdlZCIsInN1YnNjcmliZVRvU3RvcmUiLCJ1cGRhdGVFZmZlY3RJbXBsIiwicHVzaFNpbXBsZUVmZmVjdCIsImNyZWF0ZUVmZmVjdEluc3RhbmNlIiwidXBkYXRlU3RvcmVJbnN0YW5jZSIsInB1c2hTdG9yZUNvbnNpc3RlbmN5Q2hlY2siLCJyZW5kZXJlZFNuYXBzaG90IiwibmV4dFNuYXBzaG90IiwiY2hlY2tJZlNuYXBzaG90Q2hhbmdlZCIsImZvcmNlU3RvcmVSZXJlbmRlciIsImxhdGVzdEdldFNuYXBzaG90Iiwic2NoZWR1bGVVcGRhdGVPbkZpYmVyIiwibW91bnRTdGF0ZUltcGwiLCJpbml0aWFsU3RhdGVJbml0aWFsaXplciIsInVwZGF0ZU9wdGltaXN0aWNJbXBsIiwiZGlzcGF0Y2hBY3Rpb25TdGF0ZSIsImFjdGlvblF1ZXVlIiwic2V0UGVuZGluZ1N0YXRlIiwic2V0U3RhdGUiLCJpc1JlbmRlclBoYXNlVXBkYXRlIiwiYWN0aW9uTm9kZSIsInJ1bkFjdGlvblN0YXRlQWN0aW9uIiwicHJldlN0YXRlIiwiaGFuZGxlQWN0aW9uUmV0dXJuVmFsdWUiLCJvbkFjdGlvbkVycm9yIiwiZXJyb3IkMzgiLCJuZXh0U3RhdGUiLCJvbkFjdGlvblN1Y2Nlc3MiLCJub3RpZnlBY3Rpb25MaXN0ZW5lcnMiLCJhY3Rpb25TdGF0ZVJlZHVjZXIiLCJvbGRTdGF0ZSIsIm1vdW50QWN0aW9uU3RhdGUiLCJpbml0aWFsU3RhdGVQcm9wIiwic3NyRm9ybVN0YXRlIiwiSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwIiwiaW5Sb290T3JTaW5nbGV0b24iLCJkaXNwYXRjaFNldFN0YXRlIiwiZGlzcGF0Y2hPcHRpbWlzdGljU2V0U3RhdGUiLCJ1cGRhdGVBY3Rpb25TdGF0ZSIsInN0YXRlSG9vayIsInVwZGF0ZUFjdGlvblN0YXRlSW1wbCIsImN1cnJlbnRTdGF0ZUhvb2siLCJhY3Rpb25TdGF0ZUFjdGlvbkVmZmVjdCIsInJlcmVuZGVyQWN0aW9uU3RhdGUiLCJ1cGRhdGVSZWYiLCJtb3VudEVmZmVjdEltcGwiLCJmaWJlckZsYWdzIiwiaG9va0ZsYWdzIiwibW91bnRFZmZlY3QiLCJ1cGRhdGVFZmZlY3QiLCJ1cGRhdGVJbnNlcnRpb25FZmZlY3QiLCJ1cGRhdGVMYXlvdXRFZmZlY3QiLCJpbXBlcmF0aXZlSGFuZGxlRWZmZWN0IiwicmVmQ2xlYW51cCIsInVwZGF0ZUltcGVyYXRpdmVIYW5kbGUiLCJtb3VudERlYnVnVmFsdWUiLCJ1cGRhdGVDYWxsYmFjayIsInVwZGF0ZU1lbW8iLCJuZXh0Q3JlYXRlIiwibW91bnREZWZlcnJlZFZhbHVlSW1wbCIsInJlcXVlc3REZWZlcnJlZExhbmUiLCJ1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbCIsInByZXZWYWx1ZSIsInN0YXJ0VHJhbnNpdGlvbiIsInBlbmRpbmdTdGF0ZSIsImZpbmlzaGVkU3RhdGUiLCJ0aGVuYWJsZUZvckZpbmlzaGVkU3RhdGUiLCJkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwiLCJyZXF1ZXN0VXBkYXRlTGFuZSIsIm5vb3AkMiIsInN0YXJ0SG9zdFRyYW5zaXRpb24iLCJmb3JtRmliZXIiLCJmb3JtRGF0YSIsImVuc3VyZUZvcm1Db21wb25lbnRJc1N0YXRlZnVsIiwicmVxdWVzdEZvcm1SZXNldCQxIiwiZXhpc3RpbmdTdGF0ZUhvb2siLCJpbml0aWFsUmVzZXRTdGF0ZSIsInJlc2V0U3RhdGVRdWV1ZSIsInVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzIiwidXBkYXRlSWQiLCJ1cGRhdGVSZWZyZXNoIiwicmVmcmVzaENhY2hlIiwicHJvdmlkZXIiLCJyb290JDQxIiwiZGlzcGF0Y2hSZWR1Y2VyQWN0aW9uIiwiZW5xdWV1ZVJlbmRlclBoYXNlVXBkYXRlIiwiZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlIiwiY3VycmVudFN0YXRlIiwiZWFnZXJTdGF0ZSIsInRocm93SWZEdXJpbmdSZW5kZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiaWRXaXRoTGVhZGluZ0JpdCIsImJvb2xlYW5PclRoZW5hYmxlIiwidGhlbmFibGVJbmRleENvdW50ZXIiLCJ1bndyYXBUaGVuYWJsZSIsImNvZXJjZVJlZiIsInRocm93T25JbnZhbGlkT2JqZWN0VHlwZSIsInJldHVybkZpYmVyIiwibmV3Q2hpbGQiLCJyZXNvbHZlTGF6eSIsImxhenlUeXBlIiwiY3JlYXRlQ2hpbGRSZWNvbmNpbGVyIiwic2hvdWxkVHJhY2tTaWRlRWZmZWN0cyIsImRlbGV0ZUNoaWxkIiwiY2hpbGRUb0RlbGV0ZSIsImRlbGV0aW9ucyIsImRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuIiwiY3VycmVudEZpcnN0Q2hpbGQiLCJtYXBSZW1haW5pbmdDaGlsZHJlbiIsImV4aXN0aW5nQ2hpbGRyZW4iLCJ1c2VGaWJlciIsInBsYWNlQ2hpbGQiLCJuZXdGaWJlciIsImxhc3RQbGFjZWRJbmRleCIsIm5ld0luZGV4IiwicGxhY2VTaW5nbGVDaGlsZCIsInVwZGF0ZVRleHROb2RlIiwidGV4dENvbnRlbnQiLCJ1cGRhdGVFbGVtZW50IiwiZWxlbWVudFR5cGUiLCJ1cGRhdGVGcmFnbWVudCIsInVwZGF0ZVBvcnRhbCIsImZyYWdtZW50IiwiY3JlYXRlQ2hpbGQiLCJ1cGRhdGVTbG90Iiwib2xkRmliZXIiLCJ1cGRhdGVGcm9tTWFwIiwibmV3SWR4IiwicmVjb25jaWxlQ2hpbGRyZW5BcnJheSIsIm5ld0NoaWxkcmVuIiwicmVzdWx0aW5nRmlyc3RDaGlsZCIsInByZXZpb3VzTmV3RmliZXIiLCJuZXh0T2xkRmliZXIiLCJyZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yIiwic3RlcCIsInJlY29uY2lsZUNoaWxkRmliZXJzSW1wbCIsImZpcnN0Q2hpbGRGaWJlciIsInJlY29uY2lsZUNoaWxkRmliZXJzIiwibW91bnRDaGlsZEZpYmVycyIsInN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yIiwic2hlbGxCb3VuZGFyeSIsInB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlciIsImhhbmRsZXIiLCJzdXNwZW5zZVN0YWNrQ3Vyc29yIiwicHVzaE9mZnNjcmVlblN1c3BlbnNlSGFuZGxlciIsInJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayIsInBvcFN1c3BlbnNlSGFuZGxlciIsImZpbmRGaXJzdFN1c3BlbmRlZCIsInJvdyIsImlzU3VzcGVuc2VJbnN0YW5jZUZhbGxiYWNrIiwiYXBwbHlEZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJuZXh0UHJvcHMiLCJjbGFzc0NvbXBvbmVudFVwZGF0ZXIiLCJjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSIsIm9sZFByb3BzIiwibmV3UHJvcHMiLCJuZXh0Q29udGV4dCIsImNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMiLCJiYXNlUHJvcHMiLCJwcm9wTmFtZSQ3MyIsImRlZmF1bHRPblVuY2F1Z2h0RXJyb3IiLCJkZWZhdWx0T25DYXVnaHRFcnJvciIsImRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3IiLCJsb2dVbmNhdWdodEVycm9yIiwiZXJyb3JJbmZvIiwib25VbmNhdWdodEVycm9yIiwiZSQ3NCIsImxvZ0NhdWdodEVycm9yIiwiYm91bmRhcnkiLCJvbkNhdWdodEVycm9yIiwiZSQ3NSIsImNyZWF0ZVJvb3RFcnJvclVwZGF0ZSIsImNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUiLCJpbml0aWFsaXplQ2xhc3NFcnJvclVwZGF0ZSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkIiwic3RhY2siLCJ0aHJvd0V4Y2VwdGlvbiIsInJvb3RSZW5kZXJMYW5lcyIsInJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzIiwiYXR0YWNoUGluZ0xpc3RlbmVyIiwid3JhcHBlckVycm9yIiwid29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycyIsIlNlbGVjdGl2ZUh5ZHJhdGlvbkV4Y2VwdGlvbiIsInJlY29uY2lsZUNoaWxkcmVuIiwibmV4dENoaWxkcmVuIiwidXBkYXRlRm9yd2FyZFJlZiIsInByb3BzV2l0aG91dFJlZiIsImJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsiLCJ1cGRhdGVNZW1vQ29tcG9uZW50IiwidXBkYXRlU2ltcGxlTWVtb0NvbXBvbmVudCIsImNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0IiwicHJldlByb3BzIiwidXBkYXRlRnVuY3Rpb25Db21wb25lbnQiLCJ1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQiLCJkZWZlckhpZGRlbk9mZnNjcmVlbkNvbXBvbmVudCIsIm5leHRCYXNlTGFuZXMiLCJtYXJrUmVmIiwicmVwbGF5RnVuY3Rpb25Db21wb25lbnQiLCJ1cGRhdGVDbGFzc0NvbXBvbmVudCIsImNvbnRleHRUeXBlIiwidW5yZXNvbHZlZE9sZFByb3BzIiwib2xkQ29udGV4dCIsImNvbnRleHRUeXBlJGpzY29tcCQwIiwibW91bnRIb3N0Um9vdFdpdGhvdXRIeWRyYXRpbmciLCJTVVNQRU5ERURfTUFSS0VSIiwibW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlIiwiZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUiLCJwcmltYXJ5VHJlZURpZERlZmVyIiwid29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUiLCJ1cGRhdGVTdXNwZW5zZUNvbXBvbmVudCIsInNob3dGYWxsYmFjayIsImRpZFN1c3BlbmQiLCJuZXh0SW5zdGFuY2UiLCJKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAiLCJtb3VudFdvcmtJblByb2dyZXNzT2Zmc2NyZWVuRmliZXIiLCJtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuIiwicmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmciLCJkaWdlc3QiLCJwcmltYXJ5Q2hpbGRyZW4iLCJvZmZzY3JlZW5Qcm9wcyIsInNjaGVkdWxlU3VzcGVuc2VXb3JrT25GaWJlciIsImluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZSIsImlzQmFja3dhcmRzIiwidGFpbCIsImxhc3RDb250ZW50Um93IiwidGFpbE1vZGUiLCJyZW5kZXJTdGF0ZSIsInVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudCIsInJldmVhbE9yZGVyIiwiYXR0ZW1wdEVhcmx5QmFpbG91dElmTm9TY2hlZHVsZWRVcGRhdGUiLCJkaWRTdXNwZW5kQmVmb3JlIiwiYmVnaW5Xb3JrIiwibGF6eUNvbXBvbmVudCIsImdldFJlc291cmNlIiwiZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJyZXNvbHZlU2luZ2xldG9uSW5zdGFuY2UiLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwibWFya1VwZGF0ZSIsInByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCIsInJlc291cmNlIiwicHJlbG9hZFJlc291cmNlIiwic2NoZWR1bGVSZXRyeUVmZmVjdCIsInJldHJ5UXVldWUiLCJ3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMiLCJjdXRPZmZUYWlsSWZOZWVkZWQiLCJoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2siLCJsYXN0VGFpbE5vZGUiLCJsYXN0VGFpbE5vZGUkMTEzIiwiYnViYmxlUHJvcGVydGllcyIsImNvbXBsZXRlZFdvcmsiLCJkaWRCYWlsb3V0IiwibmV3Q2hpbGRMYW5lcyIsInN1YnRyZWVGbGFncyIsImNoaWxkJDExNCIsImNvbXBsZXRlV29yayIsImNhY2hlJDEyNyIsImxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzIiwid29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSIsInVud2luZFdvcmsiLCJ1bndpbmRJbnRlcnJ1cHRlZFdvcmsiLCJpbnRlcnJ1cHRlZFdvcmsiLCJjb21taXRIb29rRWZmZWN0TGlzdE1vdW50IiwiZmxhZ3MiLCJmaW5pc2hlZFdvcmsiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJjYXB0dXJlQ29tbWl0UGhhc2VFcnJvciIsImNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCIsIm5lYXJlc3RNb3VudGVkQW5jZXN0b3IkanNjb21wJDAiLCJkZXN0cm95IiwibmVhcmVzdE1vdW50ZWRBbmNlc3RvciIsImRlc3Ryb3lfIiwiY29tbWl0Q2xhc3NDYWxsYmFja3MiLCJzYWZlbHlDYWxsQ29tcG9uZW50V2lsbFVubW91bnQiLCJzYWZlbHlBdHRhY2hSZWYiLCJpbnN0YW5jZVRvVXNlIiwic2FmZWx5RGV0YWNoUmVmIiwiZXJyb3IkMTQzIiwiY29tbWl0SG9zdE1vdW50IiwiY29tbWl0SG9zdFVwZGF0ZSIsImRvbUVsZW1lbnQiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiaXNIb3N0UGFyZW50IiwiZ2V0SG9zdFNpYmxpbmciLCJpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyIiwiYmVmb3JlIiwiaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlIiwiY29tbWl0SG9zdFNpbmdsZXRvbkFjcXVpc2l0aW9uIiwic2luZ2xldG9uIiwiYXR0cmlidXRlcyIsIm9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiIsIm9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4iLCJuZWVkc0Zvcm1SZXNldCIsIlBvc3NpYmx5V2Vha1NldCIsIm5leHRFZmZlY3QiLCJjb21taXRCZWZvcmVNdXRhdGlvbkVmZmVjdHMiLCJldmVudHNFbmFibGVkIiwiX2VuYWJsZWQiLCJzZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJpbmRleFdpdGhpbkFuY2hvciIsImluZGV4V2l0aGluRm9jdXMiLCJuZXh0Iiwic2VsZWN0aW9uSW5mb3JtYXRpb24iLCJyZXNvbHZlZFByZXZQcm9wcyIsImNsZWFyQ29udGFpbmVyU3BhcmluZ2x5IiwiY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlciIsImZpbmlzaGVkUm9vdCIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzIiwiZXJyb3IkMTQyIiwiY29tbWl0U3VzcGVuc2VIeWRyYXRpb25DYWxsYmFja3MiLCJyZXRyeURlaHlkcmF0ZWRTdXNwZW5zZUJvdW5kYXJ5IiwicmVnaXN0ZXJTdXNwZW5zZUluc3RhbmNlUmV0cnkiLCJwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMiLCJkZXRhY2hGaWJlckFmdGVyRWZmZWN0cyIsImhvc3RQYXJlbnQiLCJob3N0UGFyZW50SXNDb250YWluZXIiLCJyZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzIiwiY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlciIsImRlbGV0ZWRGaWJlciIsInByZXZIb3N0UGFyZW50IiwicHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciIsInJlbGVhc2VTaW5nbGV0b25JbnN0YW5jZSIsImNsZWFyU3VzcGVuc2VCb3VuZGFyeSIsInJldHJ5SWZCbG9ja2VkT24iLCJnZXRSZXRyeUNhY2hlIiwicmV0cnlDYWNoZSIsImF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMiLCJ3YWtlYWJsZXMiLCJ3YWtlYWJsZSIsInJldHJ5IiwicmVzb2x2ZVJldHJ5V2FrZWFibGUiLCJyZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzIiwicm9vdCRqc2NvbXAkMCIsInBhcmVudEZpYmVyIiwiY29tbWl0TXV0YXRpb25FZmZlY3RzT25GaWJlciIsImN1cnJlbnRIb2lzdGFibGVSb290IiwiY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzIiwiaG9pc3RhYmxlUm9vdCIsImN1cnJlbnRSZXNvdXJjZSIsIm1heWJlTm9kZXMiLCJnZXRIeWRyYXRhYmxlSG9pc3RhYmxlQ2FjaGUiLCJtb3VudEhvaXN0YWJsZSIsImFjcXVpcmVSZXNvdXJjZSIsInRhZ0NhY2hlcyIsImdldEhvaXN0YWJsZVJvb3QiLCJyZWN1cnNpdmVseVJlc2V0Rm9ybXMiLCJnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lIiwid2FzSGlkZGVuIiwicHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzIiwiZGlzcGxheSIsImhvc3RQYXJlbnRGaWJlciIsInBhcmVudCQxNDQiLCJiZWZvcmUkMTQ1IiwicGFyZW50JDE0NiIsImJlZm9yZSQxNDciLCJmaW5pc2hlZFJvb3QkanNjb21wJDAiLCJpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzIiwiaGlkZGVuQ2FsbGJhY2tzIiwiY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyIsInByZXZpb3VzQ2FjaGUiLCJjb21taXRDYWNoZVBhc3NpdmVNb3VudEVmZmVjdCIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzIiwiY29tbWl0dGVkTGFuZXMiLCJjb21taXR0ZWRUcmFuc2l0aW9ucyIsImNvbW1pdFBhc3NpdmVNb3VudE9uRmliZXIiLCJfZmluaXNoZWRXb3JrJG1lbW9pemUyIiwiaWQiLCJvblBvc3RDb21taXQiLCJyZWN1cnNpdmVseVRyYXZlcnNlQXRvbWljUGFzc2l2ZUVmZmVjdHMiLCJyZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMiLCJjb21taXR0ZWRMYW5lcyRqc2NvbXAkMCIsImNvbW1pdHRlZFRyYW5zaXRpb25zJGpzY29tcCQwIiwic3VzcGVuc2V5Q29tbWl0RmxhZyIsInJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdCIsImFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXRPbkZpYmVyIiwic3VzcGVuZFJlc291cmNlIiwicHJldmlvdXNIb2lzdGFibGVSb290IiwiZGV0YWNoQWx0ZXJuYXRlU2libGluZ3MiLCJwcmV2aW91c0ZpYmVyIiwicmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyIsImNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4iLCJjb21taXRQYXNzaXZlVW5tb3VudE9uRmliZXIiLCJyZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzIiwiZGVsZXRlZFN1YnRyZWVSb290Iiwic2libGluZyIsIkRlZmF1bHRBc3luY0Rpc3BhdGNoZXIiLCJyZXNvdXJjZVR5cGUiLCJjYWNoZUZvclR5cGUiLCJQb3NzaWJseVdlYWtNYXAiLCJ3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiIsIndvcmtJblByb2dyZXNzVGhyb3duVmFsdWUiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyIsIndvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciIsIndvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzIiwid29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlIiwid29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyIsInBlbmRpbmdFZmZlY3RzU3RhdHVzIiwicGVuZGluZ0VmZmVjdHNSb290IiwicGVuZGluZ0ZpbmlzaGVkV29yayIsInBlbmRpbmdFZmZlY3RzTGFuZXMiLCJwZW5kaW5nRWZmZWN0c1JlbWFpbmluZ0xhbmVzIiwicGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyIsInBlbmRpbmdSZWNvdmVyYWJsZUVycm9ycyIsImFjdGlvblNjb3BlTGFuZSIsInN1c3BlbnNlSGFuZGxlciIsInByZXBhcmVGcmVzaFN0YWNrIiwibWFya1Jvb3RTdXNwZW5kZWQiLCJlbnN1cmVSb290SXNTY2hlZHVsZWQiLCJwZXJmb3JtV29ya09uUm9vdCIsImZvcmNlU3luYyIsInNob3VsZFRpbWVTbGljZSIsImV4aXRTdGF0dXMiLCJyZW5kZXJSb290Q29uY3VycmVudCIsInJlbmRlclJvb3RTeW5jIiwicmVuZGVyV2FzQ29uY3VycmVudCIsImlzUmVuZGVyQ29uc2lzdGVudFdpdGhFeHRlcm5hbFN0b3JlcyIsIndhc1Jvb3REZWh5ZHJhdGVkIiwic2NoZWR1bGVUaW1lb3V0IiwiY29tbWl0Um9vdFdoZW5SZWFkeSIsInJlY292ZXJhYmxlRXJyb3JzIiwidHJhbnNpdGlvbnMiLCJkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUiLCJkaWRTa2lwU3VzcGVuZGVkU2libGluZ3MiLCJzdXNwZW5kZWRDb21taXRSZWFzb24iLCJjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUiLCJjb21wbGV0ZWRSZW5kZXJFbmRUaW1lIiwic3VzcGVuZGVkU3RhdGUiLCJ3YWl0Rm9yQ29tbWl0VG9CZVJlYWR5IiwiY29tbWl0Um9vdCIsImNoZWNrIiwiZGlkQXR0ZW1wdEVudGlyZVRyZWUiLCJpbmRleCQ0IiwiZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwiLCJyZXNldFdvcmtJblByb2dyZXNzU3RhY2siLCJ0aW1lb3V0SGFuZGxlIiwiY2FuY2VsVGltZW91dCIsImFsbEVudGFuZ2xlZExhbmVzIiwiaW5kZXgkMiIsImhhbmRsZVRocm93IiwidGhyb3duVmFsdWUiLCJwdXNoRGlzcGF0Y2hlciIsInByZXZEaXNwYXRjaGVyIiwicHVzaEFzeW5jRGlzcGF0Y2hlciIsInByZXZBc3luY0Rpc3BhdGNoZXIiLCJzaG91bGRZaWVsZEZvclByZXJlbmRlcmluZyIsInByZXZFeGVjdXRpb25Db250ZXh0IiwidW5pdE9mV29yayIsInJlYXNvbiIsInRocm93QW5kVW53aW5kV29ya0xvb3AiLCJ3b3JrTG9vcFN5bmMiLCJ0aHJvd25WYWx1ZSQxNjciLCJwZXJmb3JtVW5pdE9mV29yayIsInJlcGxheVN1c3BlbmRlZFVuaXRPZldvcmsiLCJob3N0RmliZXIiLCJjb21wbGV0ZVVuaXRPZldvcmsiLCJ3b3JrTG9vcENvbmN1cnJlbnRCeVNjaGVkdWxlciIsInRocm93blZhbHVlJDE2OSIsInN1c3BlbmRlZFJlYXNvbiIsInVud2luZFVuaXRPZldvcmsiLCJza2lwU2libGluZ3MiLCJmbHVzaFBlbmRpbmdFZmZlY3RzIiwic2NoZWR1bGVDYWxsYmFjayQxIiwiZmx1c2hQYXNzaXZlRWZmZWN0cyIsImZsdXNoTXV0YXRpb25FZmZlY3RzIiwiZmx1c2hMYXlvdXRFZmZlY3RzIiwiZmx1c2hTcGF3bmVkV29yayIsInJvb3RNdXRhdGlvbkhhc0VmZmVjdCIsInByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24iLCJjdXJGb2N1c2VkRWxlbSIsInByaW9yRm9jdXNlZEVsZW0iLCJwcmlvclNlbGVjdGlvblJhbmdlIiwid2luIiwic3RhcnQkanNjb21wJDAiLCJlbmQkanNjb21wJDAiLCJzdGFydE1hcmtlciIsImVuZE1hcmtlciIsInJhbmdlIiwicm9vdEhhc0xheW91dEVmZmVjdCIsInJlbGVhc2VSb290UG9vbGVkQ2FjaGUiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJyZWNvdmVyYWJsZUVycm9yIiwid2FzRGVsYXllZENvbW1pdCIsInJlbmRlclByaW9yaXR5IiwiY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3JPblJvb3QiLCJyb290RmliZXIiLCJwaW5nQ2FjaGUiLCJ0aHJlYWRJRHMiLCJwaW5nU3VzcGVuZGVkUm9vdCIsInJldHJ5VGltZWRPdXRCb3VuZGFyeSIsImJvdW5kYXJ5RmliZXIiLCJyZXRyeUxhbmUiLCJmaXJzdFNjaGVkdWxlZFJvb3QiLCJsYXN0U2NoZWR1bGVkUm9vdCIsImRpZFNjaGVkdWxlTWljcm90YXNrIiwibWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrIiwiaXNGbHVzaGluZ1dvcmsiLCJjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSIsInNjaGVkdWxlSW1tZWRpYXRlUm9vdFNjaGVkdWxlVGFzayIsInN5bmNUcmFuc2l0aW9uTGFuZXMiLCJvbmx5TGVnYWN5IiwiZGlkUGVyZm9ybVNvbWVXb3JrIiwicm9vdCQxNzQiLCJwZXJmb3JtU3luY1dvcmtPblJvb3QiLCJwcm9jZXNzUm9vdFNjaGVkdWxlSW5JbW1lZGlhdGVUYXNrIiwicHJvY2Vzc1Jvb3RTY2hlZHVsZUluTWljcm90YXNrIiwic2hvdWxkQXR0ZW1wdEVhZ2VyVHJhbnNpdGlvbiIsInByZXYiLCJzY2hlZHVsZVRhc2tGb3JSb290RHVyaW5nTWljcm90YXNrIiwiaW5kZXgkMyIsImV4cGlyYXRpb25UaW1lIiwicGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrIiwiZGlkVGltZW91dCIsIm9yaWdpbmFsQ2FsbGJhY2tOb2RlIiwid29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAiLCJzY2hlZHVsZU1pY3JvdGFzayIsImNvZXJjZUZvcm1BY3Rpb25Qcm9wIiwiYWN0aW9uUHJvcCIsImNyZWF0ZUZvcm1EYXRhV2l0aFN1Ym1pdHRlciIsInN1Ym1pdHRlciIsInRlbXAiLCJleHRyYWN0RXZlbnRzJDEiLCJtYXliZVRhcmdldEluc3QiLCJpJGpzY29tcCRpbmxpbmVfMTUyOCIsImV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE1MjkiLCJkb21FdmVudE5hbWUkanNjb21wJGlubGluZV8xNTMwIiwiY2FwaXRhbGl6ZWRFdmVudCRqc2NvbXAkaW5saW5lXzE1MzEiLCJub25EZWxlZ2F0ZWRFdmVudHMiLCJldmVudFN5c3RlbUZsYWdzIiwiX2Rpc3BhdGNoUXVldWUkaSIsInByZXZpb3VzSW5zdGFuY2UiLCJpJGpzY29tcCQwIiwiX2Rpc3BhdGNoTGlzdGVuZXJzJGkiLCJjdXJyZW50VGFyZ2V0IiwidGFyZ2V0RWxlbWVudCIsImxpc3RlbmVyU2V0S2V5IiwiYWRkVHJhcHBlZEV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5Ub05hdGl2ZUV2ZW50IiwiaXNDYXB0dXJlUGhhc2VMaXN0ZW5lciIsImxpc3RlbmluZ01hcmtlciIsInJvb3RDb250YWluZXJFbGVtZW50Iiwib3duZXJEb2N1bWVudCIsInRhcmdldENvbnRhaW5lciIsImxpc3RlbmVyV3JhcHBlciIsImRpc3BhdGNoRGlzY3JldGVFdmVudCIsImRpc3BhdGNoQ29udGludW91c0V2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImRpc3BhdGNoRXZlbnRGb3JQbHVnaW5FdmVudFN5c3RlbSIsInRhcmdldEluc3QkanNjb21wJDAiLCJhbmNlc3Rvckluc3QiLCJub2RlVGFnIiwiZ3JhbmRUYWciLCJTeW50aGV0aWNFdmVudEN0b3IiLCJpbkNhcHR1cmVQaGFzZSIsImFjY3VtdWxhdGVUYXJnZXRPbmx5IiwicmVhY3RFdmVudE5hbWUiLCJsYXN0SG9zdENvbXBvbmVudCIsIl9pbnN0YW5jZSIsImNyZWF0ZURpc3BhdGNoTGlzdGVuZXIiLCJnZXRQYXJlbnQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZUxpc3RlbmVyc0ZvckV2ZW50IiwiZ2V0VGFyZ2V0SW5zdEZ1bmMiLCJoYW5kbGVFdmVudEZ1bmMiLCJmYWxsYmFja0RhdGEiLCJldmVudFR5cGUiLCJ0YXJnZXRGaWJlciIsImNhcHR1cmVOYW1lIiwiX2luc3RhbmNlMiIsImNvbW1vbiIsIl9pbnN0YW5jZTMiLCJOT1JNQUxJWkVfTkVXTElORVNfUkVHRVgiLCJOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVgiLCJub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUiLCJtYXJrdXAiLCJzZXJ2ZXJUZXh0IiwiY2xpZW50VGV4dCIsInNldFByb3AiLCJzZXRQcm9wT25DdXN0b21FbGVtZW50IiwiaGFzU3JjIiwiaGFzU3JjU2V0IiwicHJvcEtleSIsInByb3BWYWx1ZSQxODgiLCJsYXN0UHJvcHMiLCJsYXN0UHJvcCIsInByb3BLZXkkMjA1IiwicHJvcEtleSQyMjEiLCJwcm9wS2V5JDIyNiIsInByb3BLZXkkMjMxIiwicHJvcEtleSQyMzYiLCJuYW1lc3BhY2VVUkkiLCJwYXJlbnROYW1lc3BhY2UiLCJjdXJyZW50UG9wc3RhdGVUcmFuc2l0aW9uRXZlbnQiLCJsb2NhbFByb21pc2UiLCJoYW5kbGVFcnJvckluTmV4dFRpY2siLCJwYXJlbnRJbnN0YW5jZSIsInN1c3BlbnNlSW5zdGFuY2UiLCJwb3NzaWJsZVByZWFtYmxlQ29udHJpYnV0aW9uIiwiZGVwdGgiLCJuZXh0Tm9kZSIsIm5leHROb2RlJGpzY29tcCQwIiwiYW55UHJvcHMiLCJub2RlVHlwZSIsInRhcmdldEluc3RhbmNlIiwiZGF0YSIsInJvb3RDb250YWluZXJJbnN0YW5jZSIsInByZWxvYWRQcm9wc01hcCIsInByZWNvbm5lY3RzU2V0IiwicHJldmlvdXNEaXNwYXRjaGVyIiwiZmx1c2hTeW5jV29yayIsInJlcXVlc3RGb3JtUmVzZXQiLCJwcmVmZXRjaEROUyIsInByZWNvbm5lY3QiLCJwcmVsb2FkIiwicHJlbG9hZE1vZHVsZSIsInByZWluaXRTY3JpcHQiLCJwcmVpbml0U3R5bGUiLCJwcmVpbml0TW9kdWxlU2NyaXB0IiwicHJldmlvdXNXYXNSZW5kZXJpbmciLCJ3YXNSZW5kZXJpbmciLCJmb3JtSW5zdCIsImdsb2JhbERvY3VtZW50IiwicHJlY29ubmVjdEFzIiwicmVsIiwibGltaXRlZEVzY2FwZWRIcmVmIiwicHJlbG9hZFNlbGVjdG9yIiwiZ2V0U3R5bGVLZXkiLCJnZXRTY3JpcHRLZXkiLCJnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5IiwiZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5IiwicHJlY2VkZW5jZSIsImFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldCIsImxpbmsiLCJyZWplY3QiLCJpbnNlcnRTdHlsZXNoZWV0Iiwic3JjIiwic2NyaXB0cyIsImFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0IiwiY3VycmVudFByb3BzIiwic3R5bGVzJDI0NCIsInJlc291cmNlJDI0NSIsInByZWxvYWRTdHlsZXNoZWV0Iiwic3R5bGVzaGVldFByb3BzRnJvbVJhd1Byb3BzIiwicmF3UHJvcHMiLCJwcmVsb2FkUHJvcHMiLCJzdHlsZVByb3BzIiwiaW5zdGFuY2UkMjUwIiwibGlua0luc3RhbmNlIiwibm9kZXMiLCJwcmlvciIsInN0eWxlc2hlZXRQcm9wcyIsInNjcmlwdFByb3BzIiwia2V5QXR0cmlidXRlIiwiY2FjaGVzIiwibm9kZUtleSIsImhvc3RDb250ZXh0Iiwib25VbnN1c3BlbmQiLCJpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyIsImNvbW1pdCIsInN0eWxlc2hlZXRUaW1lciIsInVuc3VzcGVuZCIsInByZWNlZGVuY2VzQnlSb290IiwiaW5zZXJ0U3R5bGVzaGVldEludG9Sb290IiwicHJlY2VkZW5jZXMiLCJGaWJlclJvb3ROb2RlIiwiaHlkcmF0ZSIsImZvcm1TdGF0ZSIsImNyZWF0ZUZpYmVyUm9vdCIsImluaXRpYWxDaGlsZHJlbiIsImh5ZHJhdGlvbkNhbGxiYWNrcyIsImlzU3RyaWN0TW9kZSIsInRyYW5zaXRpb25DYWxsYmFja3MiLCJnZXRDb250ZXh0Rm9yU3VidHJlZSIsInBhcmVudENvbXBvbmVudCIsInVwZGF0ZUNvbnRhaW5lckltcGwiLCJtYXJrUmV0cnlMYW5lSW1wbCIsIm1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkIiwiYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24iLCJibG9ja2VkT24iLCJmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50IiwicmV0dXJuX3RhcmdldEluc3QiLCJjbGVhcklmQ29udGludW91c0V2ZW50IiwicXVldWVJZkNvbnRpbnVvdXNFdmVudCIsImRpc2NyZXRlUmVwbGF5YWJsZUV2ZW50cyIsImZpbmRJbnN0YW5jZUJsb2NraW5nVGFyZ2V0IiwiaGFzU2NoZWR1bGVkUmVwbGF5QXR0ZW1wdCIsInF1ZXVlZEZvY3VzIiwicXVldWVkRHJhZyIsInF1ZXVlZE1vdXNlIiwicXVldWVkUG9pbnRlcnMiLCJxdWV1ZWRQb2ludGVyQ2FwdHVyZXMiLCJxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMiLCJhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50IiwiZXhpc3RpbmdRdWV1ZWRFdmVudCIsInBvaW50ZXJJZCIsImF0dGVtcHRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldCIsInF1ZXVlZFRhcmdldCIsImF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQiLCJxdWV1ZWRFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJuZXh0QmxvY2tlZE9uIiwibmF0aXZlRXZlbnRDbG9uZSIsImF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcCIsIm1hcCIsInJlcGxheVVuYmxvY2tlZEV2ZW50cyIsInNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZCIsInVuYmxvY2tlZCIsImxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSIsInNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZCIsImZvcm1SZXBsYXlpbmdRdWV1ZSIsInN1Ym1pdHRlck9yQWN0aW9uIiwidW5ibG9jayIsImZvcm1Qcm9wcyIsIlJlYWN0RE9NUm9vdCIsImludGVybmFsUm9vdCIsIlJlYWN0RE9NSHlkcmF0aW9uUm9vdCIsImlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTc4NSIsImNvbXBvbmVudE9yRWxlbWVudCIsImludGVybmFscyRqc2NvbXAkaW5saW5lXzIyNTYiLCJob29rJGpzY29tcCRpbmxpbmVfMjI1NyIsInJlYWN0RG9tQ2xpZW50X3Byb2R1Y3Rpb24iLCJjbGllbnRNb2R1bGUiLCJyZWFjdExvZ28iLCJ2aXRlTG9nbyIsIkFwcCIsInNldENvdW50IiwidXNlU3RhdGUiLCJoYW5kbGVDbGljayIsImpzeHMiLCJGcmFnbWVudCIsImpzeCIsImNyZWF0ZVJvb3QiLCJTdHJpY3RNb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs2Q0FXQSxJQUFJQSxFQUFxQixPQUFPLElBQUksNEJBQTRCLEVBQzlEQyxHQUFzQixPQUFPLElBQUksZ0JBQWdCLEVBQ25ELFNBQVNDLEVBQVFDLEVBQU1DLEVBQVFDLEVBQVUsQ0FDdkMsSUFBSUMsR0FBTSxLQUdWLEdBRldELElBQVgsU0FBd0JDLEdBQU0sR0FBS0QsR0FDeEJELEVBQU8sTUFBbEIsU0FBMEJFLEdBQU0sR0FBS0YsRUFBTyxLQUN4QyxRQUFTQSxFQUFRLENBQ25CQyxFQUFXLENBQUEsRUFDWCxRQUFTRSxNQUFZSCxFQUNURyxLQUFWLFFBQXVCRixFQUFTRSxFQUFRLEVBQUlILEVBQU9HLEVBQVEsRUFDakUsTUFBU0YsRUFBV0QsRUFDbEIsT0FBQUEsRUFBU0MsRUFBUyxJQUNYLENBQ0wsU0FBVUwsRUFDVixLQUFNRyxFQUNOLElBQUtHLEdBQ0wsSUFBZ0JGLElBQVgsT0FBb0JBLEVBQVMsS0FDbEMsTUFBT0MsRUFFWCxDQUNBLE9BQUFHLEdBQUEsU0FBbUJQLEdBQ25CTyxHQUFBLElBQWNOLEVBQ2RNLEdBQUEsS0FBZU4sMkNDOUJiTyxHQUFBLFFBQWlCQyxHQUFBOzs7Ozs7Ozs0Q0NRbkIsSUFBSVYsRUFBcUIsT0FBTyxJQUFJLDRCQUE0QixFQUM5RFcs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
